{
  "definitions": {
    "com.coreos.monitoring.v1.Alertmanager": {
      "description": "Alertmanager describes an Alertmanager cluster.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "monitoring.coreos.com/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Alertmanager"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of the Alertmanager cluster. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "type": "object",
          "properties": {
            "additionalPeers": {
              "description": "AdditionalPeers allows injecting a set of additional Alertmanagers to peer with to form a highly available cluster.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "affinity": {
              "description": "If specified, the pod's scheduling constraints.",
              "type": "object",
              "properties": {
                "nodeAffinity": {
                  "description": "Describes node affinity scheduling rules for the pod.",
                  "type": "object",
                  "properties": {
                    "preferredDuringSchedulingIgnoredDuringExecution": {
                      "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
                      "type": "array",
                      "items": {
                        "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                        "type": "object",
                        "required": [
                          "preference",
                          "weight"
                        ],
                        "properties": {
                          "preference": {
                            "description": "A node selector term, associated with the corresponding weight.",
                            "type": "object",
                            "properties": {
                              "matchExpressions": {
                                "description": "A list of node selector requirements by node's labels.",
                                "type": "array",
                                "items": {
                                  "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "The label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              "matchFields": {
                                "description": "A list of node selector requirements by node's fields.",
                                "type": "array",
                                "items": {
                                  "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "The label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "weight": {
                            "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      }
                    },
                    "requiredDuringSchedulingIgnoredDuringExecution": {
                      "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.",
                      "type": "object",
                      "required": [
                        "nodeSelectorTerms"
                      ],
                      "properties": {
                        "nodeSelectorTerms": {
                          "description": "Required. A list of node selector terms. The terms are ORed.",
                          "type": "array",
                          "items": {
                            "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                            "type": "object",
                            "properties": {
                              "matchExpressions": {
                                "description": "A list of node selector requirements by node's labels.",
                                "type": "array",
                                "items": {
                                  "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "The label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              "matchFields": {
                                "description": "A list of node selector requirements by node's fields.",
                                "type": "array",
                                "items": {
                                  "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "The label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "podAffinity": {
                  "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).",
                  "type": "object",
                  "properties": {
                    "preferredDuringSchedulingIgnoredDuringExecution": {
                      "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                      "type": "array",
                      "items": {
                        "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                        "type": "object",
                        "required": [
                          "podAffinityTerm",
                          "weight"
                        ],
                        "properties": {
                          "podAffinityTerm": {
                            "description": "Required. A pod affinity term, associated with the corresponding weight.",
                            "type": "object",
                            "required": [
                              "topologyKey"
                            ],
                            "properties": {
                              "labelSelector": {
                                "description": "A label query over a set of resources, in this case pods.",
                                "type": "object",
                                "properties": {
                                  "matchExpressions": {
                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                    "type": "array",
                                    "items": {
                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                      "type": "object",
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "description": "key is the label key that the selector applies to.",
                                          "type": "string"
                                        },
                                        "operator": {
                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                          "type": "string"
                                        },
                                        "values": {
                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "matchLabels": {
                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "namespaces": {
                                "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "topologyKey": {
                                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                "type": "string"
                              }
                            }
                          },
                          "weight": {
                            "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      }
                    },
                    "requiredDuringSchedulingIgnoredDuringExecution": {
                      "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                      "type": "array",
                      "items": {
                        "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                        "type": "object",
                        "required": [
                          "topologyKey"
                        ],
                        "properties": {
                          "labelSelector": {
                            "description": "A label query over a set of resources, in this case pods.",
                            "type": "object",
                            "properties": {
                              "matchExpressions": {
                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                "type": "array",
                                "items": {
                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "key is the label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              "matchLabels": {
                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "namespaces": {
                            "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "topologyKey": {
                            "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "podAntiAffinity": {
                  "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).",
                  "type": "object",
                  "properties": {
                    "preferredDuringSchedulingIgnoredDuringExecution": {
                      "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                      "type": "array",
                      "items": {
                        "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                        "type": "object",
                        "required": [
                          "podAffinityTerm",
                          "weight"
                        ],
                        "properties": {
                          "podAffinityTerm": {
                            "description": "Required. A pod affinity term, associated with the corresponding weight.",
                            "type": "object",
                            "required": [
                              "topologyKey"
                            ],
                            "properties": {
                              "labelSelector": {
                                "description": "A label query over a set of resources, in this case pods.",
                                "type": "object",
                                "properties": {
                                  "matchExpressions": {
                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                    "type": "array",
                                    "items": {
                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                      "type": "object",
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "description": "key is the label key that the selector applies to.",
                                          "type": "string"
                                        },
                                        "operator": {
                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                          "type": "string"
                                        },
                                        "values": {
                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "matchLabels": {
                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "namespaces": {
                                "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "topologyKey": {
                                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                "type": "string"
                              }
                            }
                          },
                          "weight": {
                            "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      }
                    },
                    "requiredDuringSchedulingIgnoredDuringExecution": {
                      "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                      "type": "array",
                      "items": {
                        "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                        "type": "object",
                        "required": [
                          "topologyKey"
                        ],
                        "properties": {
                          "labelSelector": {
                            "description": "A label query over a set of resources, in this case pods.",
                            "type": "object",
                            "properties": {
                              "matchExpressions": {
                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                "type": "array",
                                "items": {
                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "key is the label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              "matchLabels": {
                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "namespaces": {
                            "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "topologyKey": {
                            "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "baseImage": {
              "description": "Base image that is used to deploy pods, without tag. Deprecated: use 'image' instead",
              "type": "string"
            },
            "clusterAdvertiseAddress": {
              "description": "ClusterAdvertiseAddress is the explicit address to advertise in cluster. Needs to be provided for non RFC1918 [1] (public) addresses. [1] RFC1918: https://tools.ietf.org/html/rfc1918",
              "type": "string"
            },
            "configMaps": {
              "description": "ConfigMaps is a list of ConfigMaps in the same namespace as the Alertmanager object, which shall be mounted into the Alertmanager Pods. The ConfigMaps are mounted into /etc/alertmanager/configmaps/<configmap-name>.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "configSecret": {
              "description": "ConfigSecret is the name of a Kubernetes Secret in the same namespace as the Alertmanager object, which contains configuration for this Alertmanager instance. Defaults to 'alertmanager-<alertmanager-name>' The secret is mounted into /etc/alertmanager/config.",
              "type": "string"
            },
            "containers": {
              "description": "Containers allows injecting additional containers. This is meant to allow adding an authentication proxy to an Alertmanager pod.",
              "type": "array",
              "items": {
                "description": "A single application container that you want to run within a pod.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "args": {
                    "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "command": {
                    "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "env": {
                    "description": "List of environment variables to set in the container. Cannot be updated.",
                    "type": "array",
                    "items": {
                      "description": "EnvVar represents an environment variable present in a Container.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
                          "type": "string"
                        },
                        "valueFrom": {
                          "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                          "type": "object",
                          "properties": {
                            "configMapKeyRef": {
                              "description": "Selects a key of a ConfigMap.",
                              "type": "object",
                              "required": [
                                "key"
                              ],
                              "properties": {
                                "key": {
                                  "description": "The key to select.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                },
                                "optional": {
                                  "description": "Specify whether the ConfigMap or its key must be defined",
                                  "type": "boolean"
                                }
                              }
                            },
                            "fieldRef": {
                              "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                              "type": "object",
                              "required": [
                                "fieldPath"
                              ],
                              "properties": {
                                "apiVersion": {
                                  "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                  "type": "string"
                                },
                                "fieldPath": {
                                  "description": "Path of the field to select in the specified API version.",
                                  "type": "string"
                                }
                              }
                            },
                            "resourceFieldRef": {
                              "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                              "type": "object",
                              "required": [
                                "resource"
                              ],
                              "properties": {
                                "containerName": {
                                  "description": "Container name: required for volumes, optional for env vars",
                                  "type": "string"
                                },
                                "divisor": {
                                  "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                  "type": "string"
                                },
                                "resource": {
                                  "description": "Required: resource to select",
                                  "type": "string"
                                }
                              }
                            },
                            "secretKeyRef": {
                              "description": "Selects a key of a secret in the pod's namespace",
                              "type": "object",
                              "required": [
                                "key"
                              ],
                              "properties": {
                                "key": {
                                  "description": "The key of the secret to select from.  Must be a valid secret key.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                },
                                "optional": {
                                  "description": "Specify whether the Secret or its key must be defined",
                                  "type": "boolean"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "envFrom": {
                    "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                    "type": "array",
                    "items": {
                      "description": "EnvFromSource represents the source of a set of ConfigMaps",
                      "type": "object",
                      "properties": {
                        "configMapRef": {
                          "description": "The ConfigMap to select from",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            },
                            "optional": {
                              "description": "Specify whether the ConfigMap must be defined",
                              "type": "boolean"
                            }
                          }
                        },
                        "prefix": {
                          "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
                          "type": "string"
                        },
                        "secretRef": {
                          "description": "The Secret to select from",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            },
                            "optional": {
                              "description": "Specify whether the Secret must be defined",
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  },
                  "image": {
                    "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
                    "type": "string"
                  },
                  "imagePullPolicy": {
                    "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                    "type": "string"
                  },
                  "lifecycle": {
                    "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated.",
                    "type": "object",
                    "properties": {
                      "postStart": {
                        "description": "PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                        "type": "object",
                        "properties": {
                          "exec": {
                            "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                            "type": "object",
                            "properties": {
                              "command": {
                                "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "httpGet": {
                            "description": "HTTPGet specifies the http request to perform.",
                            "type": "object",
                            "required": [
                              "port"
                            ],
                            "properties": {
                              "host": {
                                "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                "type": "string"
                              },
                              "httpHeaders": {
                                "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                "type": "array",
                                "items": {
                                  "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "value"
                                  ],
                                  "properties": {
                                    "name": {
                                      "description": "The header field name",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The header field value",
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "path": {
                                "description": "Path to access on the HTTP server.",
                                "type": "string"
                              },
                              "port": {
                                "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                "x-kubernetes-int-or-string": true
                              },
                              "scheme": {
                                "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                "type": "string"
                              }
                            }
                          },
                          "tcpSocket": {
                            "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                            "type": "object",
                            "required": [
                              "port"
                            ],
                            "properties": {
                              "host": {
                                "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                "type": "string"
                              },
                              "port": {
                                "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                "x-kubernetes-int-or-string": true
                              }
                            }
                          }
                        }
                      },
                      "preStop": {
                        "description": "PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                        "type": "object",
                        "properties": {
                          "exec": {
                            "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                            "type": "object",
                            "properties": {
                              "command": {
                                "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "httpGet": {
                            "description": "HTTPGet specifies the http request to perform.",
                            "type": "object",
                            "required": [
                              "port"
                            ],
                            "properties": {
                              "host": {
                                "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                "type": "string"
                              },
                              "httpHeaders": {
                                "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                "type": "array",
                                "items": {
                                  "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "value"
                                  ],
                                  "properties": {
                                    "name": {
                                      "description": "The header field name",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The header field value",
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "path": {
                                "description": "Path to access on the HTTP server.",
                                "type": "string"
                              },
                              "port": {
                                "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                "x-kubernetes-int-or-string": true
                              },
                              "scheme": {
                                "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                "type": "string"
                              }
                            }
                          },
                          "tcpSocket": {
                            "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                            "type": "object",
                            "required": [
                              "port"
                            ],
                            "properties": {
                              "host": {
                                "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                "type": "string"
                              },
                              "port": {
                                "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                "x-kubernetes-int-or-string": true
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "livenessProbe": {
                    "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "type": "object",
                    "properties": {
                      "exec": {
                        "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                        "type": "object",
                        "properties": {
                          "command": {
                            "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "failureThreshold": {
                        "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "httpGet": {
                        "description": "HTTPGet specifies the http request to perform.",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                            "type": "string"
                          },
                          "httpHeaders": {
                            "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                            "type": "array",
                            "items": {
                              "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                              "type": "object",
                              "required": [
                                "name",
                                "value"
                              ],
                              "properties": {
                                "name": {
                                  "description": "The header field name",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "The header field value",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "path": {
                            "description": "Path to access on the HTTP server.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          },
                          "scheme": {
                            "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                            "type": "string"
                          }
                        }
                      },
                      "initialDelaySeconds": {
                        "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      },
                      "periodSeconds": {
                        "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "successThreshold": {
                        "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "tcpSocket": {
                        "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Optional: Host name to connect to, defaults to the pod IP.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      },
                      "timeoutSeconds": {
                        "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "name": {
                    "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
                    "type": "string"
                  },
                  "ports": {
                    "description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
                    "type": "array",
                    "items": {
                      "description": "ContainerPort represents a network port in a single container.",
                      "type": "object",
                      "required": [
                        "containerPort"
                      ],
                      "properties": {
                        "containerPort": {
                          "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "hostIP": {
                          "description": "What host IP to bind the external port to.",
                          "type": "string"
                        },
                        "hostPort": {
                          "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "name": {
                          "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.",
                          "type": "string"
                        },
                        "protocol": {
                          "description": "Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "readinessProbe": {
                    "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "type": "object",
                    "properties": {
                      "exec": {
                        "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                        "type": "object",
                        "properties": {
                          "command": {
                            "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "failureThreshold": {
                        "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "httpGet": {
                        "description": "HTTPGet specifies the http request to perform.",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                            "type": "string"
                          },
                          "httpHeaders": {
                            "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                            "type": "array",
                            "items": {
                              "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                              "type": "object",
                              "required": [
                                "name",
                                "value"
                              ],
                              "properties": {
                                "name": {
                                  "description": "The header field name",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "The header field value",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "path": {
                            "description": "Path to access on the HTTP server.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          },
                          "scheme": {
                            "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                            "type": "string"
                          }
                        }
                      },
                      "initialDelaySeconds": {
                        "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      },
                      "periodSeconds": {
                        "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "successThreshold": {
                        "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "tcpSocket": {
                        "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Optional: Host name to connect to, defaults to the pod IP.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      },
                      "timeoutSeconds": {
                        "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "resources": {
                    "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                    "type": "object",
                    "properties": {
                      "limits": {
                        "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "requests": {
                        "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "securityContext": {
                    "description": "Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                    "type": "object",
                    "properties": {
                      "allowPrivilegeEscalation": {
                        "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN",
                        "type": "boolean"
                      },
                      "capabilities": {
                        "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.",
                        "type": "object",
                        "properties": {
                          "add": {
                            "description": "Added capabilities",
                            "type": "array",
                            "items": {
                              "description": "Capability represent POSIX capabilities type",
                              "type": "string"
                            }
                          },
                          "drop": {
                            "description": "Removed capabilities",
                            "type": "array",
                            "items": {
                              "description": "Capability represent POSIX capabilities type",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "privileged": {
                        "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.",
                        "type": "boolean"
                      },
                      "procMount": {
                        "description": "procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.",
                        "type": "string"
                      },
                      "readOnlyRootFilesystem": {
                        "description": "Whether this container has a read-only root filesystem. Default is false.",
                        "type": "boolean"
                      },
                      "runAsGroup": {
                        "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "runAsNonRoot": {
                        "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                        "type": "boolean"
                      },
                      "runAsUser": {
                        "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "seLinuxOptions": {
                        "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                        "type": "object",
                        "properties": {
                          "level": {
                            "description": "Level is SELinux level label that applies to the container.",
                            "type": "string"
                          },
                          "role": {
                            "description": "Role is a SELinux role label that applies to the container.",
                            "type": "string"
                          },
                          "type": {
                            "description": "Type is a SELinux type label that applies to the container.",
                            "type": "string"
                          },
                          "user": {
                            "description": "User is a SELinux user label that applies to the container.",
                            "type": "string"
                          }
                        }
                      },
                      "windowsOptions": {
                        "description": "The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                        "type": "object",
                        "properties": {
                          "gmsaCredentialSpec": {
                            "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
                            "type": "string"
                          },
                          "gmsaCredentialSpecName": {
                            "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                            "type": "string"
                          },
                          "runAsUserName": {
                            "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "startupProbe": {
                    "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "type": "object",
                    "properties": {
                      "exec": {
                        "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                        "type": "object",
                        "properties": {
                          "command": {
                            "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "failureThreshold": {
                        "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "httpGet": {
                        "description": "HTTPGet specifies the http request to perform.",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                            "type": "string"
                          },
                          "httpHeaders": {
                            "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                            "type": "array",
                            "items": {
                              "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                              "type": "object",
                              "required": [
                                "name",
                                "value"
                              ],
                              "properties": {
                                "name": {
                                  "description": "The header field name",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "The header field value",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "path": {
                            "description": "Path to access on the HTTP server.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          },
                          "scheme": {
                            "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                            "type": "string"
                          }
                        }
                      },
                      "initialDelaySeconds": {
                        "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      },
                      "periodSeconds": {
                        "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "successThreshold": {
                        "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "tcpSocket": {
                        "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Optional: Host name to connect to, defaults to the pod IP.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      },
                      "timeoutSeconds": {
                        "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "stdin": {
                    "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
                    "type": "boolean"
                  },
                  "stdinOnce": {
                    "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
                    "type": "boolean"
                  },
                  "terminationMessagePath": {
                    "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                    "type": "string"
                  },
                  "terminationMessagePolicy": {
                    "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
                    "type": "string"
                  },
                  "tty": {
                    "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                    "type": "boolean"
                  },
                  "volumeDevices": {
                    "description": "volumeDevices is the list of block devices to be used by the container.",
                    "type": "array",
                    "items": {
                      "description": "volumeDevice describes a mapping of a raw block device within a container.",
                      "type": "object",
                      "required": [
                        "devicePath",
                        "name"
                      ],
                      "properties": {
                        "devicePath": {
                          "description": "devicePath is the path inside of the container that the device will be mapped to.",
                          "type": "string"
                        },
                        "name": {
                          "description": "name must match the name of a persistentVolumeClaim in the pod",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "volumeMounts": {
                    "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                    "type": "array",
                    "items": {
                      "description": "VolumeMount describes a mounting of a Volume within a container.",
                      "type": "object",
                      "required": [
                        "mountPath",
                        "name"
                      ],
                      "properties": {
                        "mountPath": {
                          "description": "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                          "type": "string"
                        },
                        "mountPropagation": {
                          "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
                          "type": "string"
                        },
                        "name": {
                          "description": "This must match the Name of a Volume.",
                          "type": "string"
                        },
                        "readOnly": {
                          "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
                          "type": "boolean"
                        },
                        "subPath": {
                          "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
                          "type": "string"
                        },
                        "subPathExpr": {
                          "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "workingDir": {
                    "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                    "type": "string"
                  }
                }
              }
            },
            "externalUrl": {
              "description": "The external URL the Alertmanager instances will be available under. This is necessary to generate correct URLs. This is necessary if Alertmanager is not served from root of a DNS name.",
              "type": "string"
            },
            "forceEnableClusterMode": {
              "description": "ForceEnableClusterMode ensures Alertmanager does not deactivate the cluster mode when running with a single replica. Use case is e.g. spanning an Alertmanager cluster across Kubernetes clusters with a single replica in each.",
              "type": "boolean"
            },
            "image": {
              "description": "Image if specified has precedence over baseImage, tag and sha combinations. Specifying the version is still necessary to ensure the Prometheus Operator knows what version of Alertmanager is being configured.",
              "type": "string"
            },
            "imagePullSecrets": {
              "description": "An optional list of references to secrets in the same namespace to use for pulling prometheus and alertmanager images from registries see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod",
              "type": "array",
              "items": {
                "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                    "type": "string"
                  }
                }
              }
            },
            "initContainers": {
              "description": "InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the Alertmanager configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ Using initContainers for any use case other then secret fetching is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.",
              "type": "array",
              "items": {
                "description": "A single application container that you want to run within a pod.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "args": {
                    "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "command": {
                    "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "env": {
                    "description": "List of environment variables to set in the container. Cannot be updated.",
                    "type": "array",
                    "items": {
                      "description": "EnvVar represents an environment variable present in a Container.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
                          "type": "string"
                        },
                        "valueFrom": {
                          "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                          "type": "object",
                          "properties": {
                            "configMapKeyRef": {
                              "description": "Selects a key of a ConfigMap.",
                              "type": "object",
                              "required": [
                                "key"
                              ],
                              "properties": {
                                "key": {
                                  "description": "The key to select.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                },
                                "optional": {
                                  "description": "Specify whether the ConfigMap or its key must be defined",
                                  "type": "boolean"
                                }
                              }
                            },
                            "fieldRef": {
                              "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                              "type": "object",
                              "required": [
                                "fieldPath"
                              ],
                              "properties": {
                                "apiVersion": {
                                  "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                  "type": "string"
                                },
                                "fieldPath": {
                                  "description": "Path of the field to select in the specified API version.",
                                  "type": "string"
                                }
                              }
                            },
                            "resourceFieldRef": {
                              "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                              "type": "object",
                              "required": [
                                "resource"
                              ],
                              "properties": {
                                "containerName": {
                                  "description": "Container name: required for volumes, optional for env vars",
                                  "type": "string"
                                },
                                "divisor": {
                                  "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                  "type": "string"
                                },
                                "resource": {
                                  "description": "Required: resource to select",
                                  "type": "string"
                                }
                              }
                            },
                            "secretKeyRef": {
                              "description": "Selects a key of a secret in the pod's namespace",
                              "type": "object",
                              "required": [
                                "key"
                              ],
                              "properties": {
                                "key": {
                                  "description": "The key of the secret to select from.  Must be a valid secret key.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                },
                                "optional": {
                                  "description": "Specify whether the Secret or its key must be defined",
                                  "type": "boolean"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "envFrom": {
                    "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                    "type": "array",
                    "items": {
                      "description": "EnvFromSource represents the source of a set of ConfigMaps",
                      "type": "object",
                      "properties": {
                        "configMapRef": {
                          "description": "The ConfigMap to select from",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            },
                            "optional": {
                              "description": "Specify whether the ConfigMap must be defined",
                              "type": "boolean"
                            }
                          }
                        },
                        "prefix": {
                          "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
                          "type": "string"
                        },
                        "secretRef": {
                          "description": "The Secret to select from",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            },
                            "optional": {
                              "description": "Specify whether the Secret must be defined",
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  },
                  "image": {
                    "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
                    "type": "string"
                  },
                  "imagePullPolicy": {
                    "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                    "type": "string"
                  },
                  "lifecycle": {
                    "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated.",
                    "type": "object",
                    "properties": {
                      "postStart": {
                        "description": "PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                        "type": "object",
                        "properties": {
                          "exec": {
                            "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                            "type": "object",
                            "properties": {
                              "command": {
                                "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "httpGet": {
                            "description": "HTTPGet specifies the http request to perform.",
                            "type": "object",
                            "required": [
                              "port"
                            ],
                            "properties": {
                              "host": {
                                "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                "type": "string"
                              },
                              "httpHeaders": {
                                "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                "type": "array",
                                "items": {
                                  "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "value"
                                  ],
                                  "properties": {
                                    "name": {
                                      "description": "The header field name",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The header field value",
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "path": {
                                "description": "Path to access on the HTTP server.",
                                "type": "string"
                              },
                              "port": {
                                "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                "x-kubernetes-int-or-string": true
                              },
                              "scheme": {
                                "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                "type": "string"
                              }
                            }
                          },
                          "tcpSocket": {
                            "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                            "type": "object",
                            "required": [
                              "port"
                            ],
                            "properties": {
                              "host": {
                                "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                "type": "string"
                              },
                              "port": {
                                "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                "x-kubernetes-int-or-string": true
                              }
                            }
                          }
                        }
                      },
                      "preStop": {
                        "description": "PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                        "type": "object",
                        "properties": {
                          "exec": {
                            "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                            "type": "object",
                            "properties": {
                              "command": {
                                "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "httpGet": {
                            "description": "HTTPGet specifies the http request to perform.",
                            "type": "object",
                            "required": [
                              "port"
                            ],
                            "properties": {
                              "host": {
                                "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                "type": "string"
                              },
                              "httpHeaders": {
                                "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                "type": "array",
                                "items": {
                                  "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "value"
                                  ],
                                  "properties": {
                                    "name": {
                                      "description": "The header field name",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The header field value",
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "path": {
                                "description": "Path to access on the HTTP server.",
                                "type": "string"
                              },
                              "port": {
                                "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                "x-kubernetes-int-or-string": true
                              },
                              "scheme": {
                                "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                "type": "string"
                              }
                            }
                          },
                          "tcpSocket": {
                            "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                            "type": "object",
                            "required": [
                              "port"
                            ],
                            "properties": {
                              "host": {
                                "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                "type": "string"
                              },
                              "port": {
                                "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                "x-kubernetes-int-or-string": true
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "livenessProbe": {
                    "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "type": "object",
                    "properties": {
                      "exec": {
                        "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                        "type": "object",
                        "properties": {
                          "command": {
                            "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "failureThreshold": {
                        "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "httpGet": {
                        "description": "HTTPGet specifies the http request to perform.",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                            "type": "string"
                          },
                          "httpHeaders": {
                            "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                            "type": "array",
                            "items": {
                              "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                              "type": "object",
                              "required": [
                                "name",
                                "value"
                              ],
                              "properties": {
                                "name": {
                                  "description": "The header field name",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "The header field value",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "path": {
                            "description": "Path to access on the HTTP server.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          },
                          "scheme": {
                            "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                            "type": "string"
                          }
                        }
                      },
                      "initialDelaySeconds": {
                        "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      },
                      "periodSeconds": {
                        "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "successThreshold": {
                        "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "tcpSocket": {
                        "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Optional: Host name to connect to, defaults to the pod IP.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      },
                      "timeoutSeconds": {
                        "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "name": {
                    "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
                    "type": "string"
                  },
                  "ports": {
                    "description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
                    "type": "array",
                    "items": {
                      "description": "ContainerPort represents a network port in a single container.",
                      "type": "object",
                      "required": [
                        "containerPort"
                      ],
                      "properties": {
                        "containerPort": {
                          "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "hostIP": {
                          "description": "What host IP to bind the external port to.",
                          "type": "string"
                        },
                        "hostPort": {
                          "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "name": {
                          "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.",
                          "type": "string"
                        },
                        "protocol": {
                          "description": "Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "readinessProbe": {
                    "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "type": "object",
                    "properties": {
                      "exec": {
                        "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                        "type": "object",
                        "properties": {
                          "command": {
                            "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "failureThreshold": {
                        "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "httpGet": {
                        "description": "HTTPGet specifies the http request to perform.",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                            "type": "string"
                          },
                          "httpHeaders": {
                            "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                            "type": "array",
                            "items": {
                              "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                              "type": "object",
                              "required": [
                                "name",
                                "value"
                              ],
                              "properties": {
                                "name": {
                                  "description": "The header field name",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "The header field value",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "path": {
                            "description": "Path to access on the HTTP server.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          },
                          "scheme": {
                            "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                            "type": "string"
                          }
                        }
                      },
                      "initialDelaySeconds": {
                        "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      },
                      "periodSeconds": {
                        "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "successThreshold": {
                        "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "tcpSocket": {
                        "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Optional: Host name to connect to, defaults to the pod IP.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      },
                      "timeoutSeconds": {
                        "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "resources": {
                    "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                    "type": "object",
                    "properties": {
                      "limits": {
                        "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "requests": {
                        "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "securityContext": {
                    "description": "Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                    "type": "object",
                    "properties": {
                      "allowPrivilegeEscalation": {
                        "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN",
                        "type": "boolean"
                      },
                      "capabilities": {
                        "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.",
                        "type": "object",
                        "properties": {
                          "add": {
                            "description": "Added capabilities",
                            "type": "array",
                            "items": {
                              "description": "Capability represent POSIX capabilities type",
                              "type": "string"
                            }
                          },
                          "drop": {
                            "description": "Removed capabilities",
                            "type": "array",
                            "items": {
                              "description": "Capability represent POSIX capabilities type",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "privileged": {
                        "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.",
                        "type": "boolean"
                      },
                      "procMount": {
                        "description": "procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.",
                        "type": "string"
                      },
                      "readOnlyRootFilesystem": {
                        "description": "Whether this container has a read-only root filesystem. Default is false.",
                        "type": "boolean"
                      },
                      "runAsGroup": {
                        "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "runAsNonRoot": {
                        "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                        "type": "boolean"
                      },
                      "runAsUser": {
                        "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "seLinuxOptions": {
                        "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                        "type": "object",
                        "properties": {
                          "level": {
                            "description": "Level is SELinux level label that applies to the container.",
                            "type": "string"
                          },
                          "role": {
                            "description": "Role is a SELinux role label that applies to the container.",
                            "type": "string"
                          },
                          "type": {
                            "description": "Type is a SELinux type label that applies to the container.",
                            "type": "string"
                          },
                          "user": {
                            "description": "User is a SELinux user label that applies to the container.",
                            "type": "string"
                          }
                        }
                      },
                      "windowsOptions": {
                        "description": "The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                        "type": "object",
                        "properties": {
                          "gmsaCredentialSpec": {
                            "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
                            "type": "string"
                          },
                          "gmsaCredentialSpecName": {
                            "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                            "type": "string"
                          },
                          "runAsUserName": {
                            "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "startupProbe": {
                    "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "type": "object",
                    "properties": {
                      "exec": {
                        "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                        "type": "object",
                        "properties": {
                          "command": {
                            "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "failureThreshold": {
                        "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "httpGet": {
                        "description": "HTTPGet specifies the http request to perform.",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                            "type": "string"
                          },
                          "httpHeaders": {
                            "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                            "type": "array",
                            "items": {
                              "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                              "type": "object",
                              "required": [
                                "name",
                                "value"
                              ],
                              "properties": {
                                "name": {
                                  "description": "The header field name",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "The header field value",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "path": {
                            "description": "Path to access on the HTTP server.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          },
                          "scheme": {
                            "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                            "type": "string"
                          }
                        }
                      },
                      "initialDelaySeconds": {
                        "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      },
                      "periodSeconds": {
                        "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "successThreshold": {
                        "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "tcpSocket": {
                        "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Optional: Host name to connect to, defaults to the pod IP.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      },
                      "timeoutSeconds": {
                        "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "stdin": {
                    "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
                    "type": "boolean"
                  },
                  "stdinOnce": {
                    "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
                    "type": "boolean"
                  },
                  "terminationMessagePath": {
                    "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                    "type": "string"
                  },
                  "terminationMessagePolicy": {
                    "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
                    "type": "string"
                  },
                  "tty": {
                    "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                    "type": "boolean"
                  },
                  "volumeDevices": {
                    "description": "volumeDevices is the list of block devices to be used by the container.",
                    "type": "array",
                    "items": {
                      "description": "volumeDevice describes a mapping of a raw block device within a container.",
                      "type": "object",
                      "required": [
                        "devicePath",
                        "name"
                      ],
                      "properties": {
                        "devicePath": {
                          "description": "devicePath is the path inside of the container that the device will be mapped to.",
                          "type": "string"
                        },
                        "name": {
                          "description": "name must match the name of a persistentVolumeClaim in the pod",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "volumeMounts": {
                    "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                    "type": "array",
                    "items": {
                      "description": "VolumeMount describes a mounting of a Volume within a container.",
                      "type": "object",
                      "required": [
                        "mountPath",
                        "name"
                      ],
                      "properties": {
                        "mountPath": {
                          "description": "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                          "type": "string"
                        },
                        "mountPropagation": {
                          "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
                          "type": "string"
                        },
                        "name": {
                          "description": "This must match the Name of a Volume.",
                          "type": "string"
                        },
                        "readOnly": {
                          "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
                          "type": "boolean"
                        },
                        "subPath": {
                          "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
                          "type": "string"
                        },
                        "subPathExpr": {
                          "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "workingDir": {
                    "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                    "type": "string"
                  }
                }
              }
            },
            "listenLocal": {
              "description": "ListenLocal makes the Alertmanager server listen on loopback, so that it does not bind against the Pod IP. Note this is only for the Alertmanager UI, not the gossip communication.",
              "type": "boolean"
            },
            "logFormat": {
              "description": "Log format for Alertmanager to be configured with.",
              "type": "string"
            },
            "logLevel": {
              "description": "Log level for Alertmanager to be configured with.",
              "type": "string"
            },
            "nodeSelector": {
              "description": "Define which Nodes the Pods are scheduled on.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "paused": {
              "description": "If set to true all actions on the underlaying managed objects are not goint to be performed, except for delete actions.",
              "type": "boolean"
            },
            "podMetadata": {
              "description": "PodMetadata configures Labels and Annotations which are propagated to the alertmanager pods.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labels": {
                  "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "name": {
                  "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                  "type": "string"
                }
              }
            },
            "portName": {
              "description": "Port name used for the pods and governing service. This defaults to web",
              "type": "string"
            },
            "priorityClassName": {
              "description": "Priority class assigned to the Pods",
              "type": "string"
            },
            "replicas": {
              "description": "Size is the expected size of the alertmanager cluster. The controller will eventually make the size of the running cluster equal to the expected size.",
              "type": "integer",
              "format": "int32"
            },
            "resources": {
              "description": "Define resources requests and limits for single Pods.",
              "type": "object",
              "properties": {
                "limits": {
                  "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "requests": {
                  "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "retention": {
              "description": "Time duration Alertmanager shall retain data for. Default is '120h', and must match the regular expression `[0-9]+(ms|s|m|h)` (milliseconds seconds minutes hours).",
              "type": "string"
            },
            "routePrefix": {
              "description": "The route prefix Alertmanager registers HTTP handlers for. This is useful, if using ExternalURL and a proxy is rewriting HTTP routes of a request, and the actual ExternalURL is still true, but the server serves requests under a different route prefix. For example for use with `kubectl proxy`.",
              "type": "string"
            },
            "secrets": {
              "description": "Secrets is a list of Secrets in the same namespace as the Alertmanager object, which shall be mounted into the Alertmanager Pods. The Secrets are mounted into /etc/alertmanager/secrets/<secret-name>.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "securityContext": {
              "description": "SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext.",
              "type": "object",
              "properties": {
                "fsGroup": {
                  "description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: \n 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- \n If unset, the Kubelet will not modify the ownership and permissions of any volume.",
                  "type": "integer",
                  "format": "int64"
                },
                "fsGroupChangePolicy": {
                  "description": "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified defaults to \"Always\".",
                  "type": "string"
                },
                "runAsGroup": {
                  "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
                  "type": "integer",
                  "format": "int64"
                },
                "runAsNonRoot": {
                  "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                  "type": "boolean"
                },
                "runAsUser": {
                  "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
                  "type": "integer",
                  "format": "int64"
                },
                "seLinuxOptions": {
                  "description": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
                  "type": "object",
                  "properties": {
                    "level": {
                      "description": "Level is SELinux level label that applies to the container.",
                      "type": "string"
                    },
                    "role": {
                      "description": "Role is a SELinux role label that applies to the container.",
                      "type": "string"
                    },
                    "type": {
                      "description": "Type is a SELinux type label that applies to the container.",
                      "type": "string"
                    },
                    "user": {
                      "description": "User is a SELinux user label that applies to the container.",
                      "type": "string"
                    }
                  }
                },
                "supplementalGroups": {
                  "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.",
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64"
                  }
                },
                "sysctls": {
                  "description": "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.",
                  "type": "array",
                  "items": {
                    "description": "Sysctl defines a kernel parameter to be set",
                    "type": "object",
                    "required": [
                      "name",
                      "value"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of a property to set",
                        "type": "string"
                      },
                      "value": {
                        "description": "Value of a property to set",
                        "type": "string"
                      }
                    }
                  }
                },
                "windowsOptions": {
                  "description": "The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                  "type": "object",
                  "properties": {
                    "gmsaCredentialSpec": {
                      "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
                      "type": "string"
                    },
                    "gmsaCredentialSpecName": {
                      "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                      "type": "string"
                    },
                    "runAsUserName": {
                      "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "serviceAccountName": {
              "description": "ServiceAccountName is the name of the ServiceAccount to use to run the Prometheus Pods.",
              "type": "string"
            },
            "sha": {
              "description": "SHA of Alertmanager container image to be deployed. Defaults to the value of `version`. Similar to a tag, but the SHA explicitly deploys an immutable container image. Version and Tag are ignored if SHA is set. Deprecated: use 'image' instead.  The image digest can be specified as part of the image URL.",
              "type": "string"
            },
            "storage": {
              "description": "Storage is the definition of how storage will be used by the Alertmanager instances.",
              "type": "object",
              "properties": {
                "disableMountSubPath": {
                  "description": "Deprecated: subPath usage will be disabled by default in a future release, this option will become unnecessary. DisableMountSubPath allows to remove any subPath usage in volume mounts.",
                  "type": "boolean"
                },
                "emptyDir": {
                  "description": "EmptyDirVolumeSource to be used by the Prometheus StatefulSets. If specified, used in place of any volumeClaimTemplate. More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir",
                  "type": "object",
                  "properties": {
                    "medium": {
                      "description": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
                      "type": "string"
                    },
                    "sizeLimit": {
                      "description": "Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir",
                      "type": "string"
                    }
                  }
                },
                "volumeClaimTemplate": {
                  "description": "A PVC spec to be used by the Prometheus StatefulSets.",
                  "type": "object",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "description": "EmbeddedMetadata contains metadata relevant to an EmbeddedResource.",
                      "type": "object",
                      "properties": {
                        "annotations": {
                          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "labels": {
                          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "name": {
                          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                          "type": "string"
                        }
                      }
                    },
                    "spec": {
                      "description": "Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                      "type": "object",
                      "properties": {
                        "accessModes": {
                          "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "dataSource": {
                          "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot - Beta) * An existing PVC (PersistentVolumeClaim) * An existing custom resource/object that implements data population (Alpha) In order to use VolumeSnapshot object types, the appropriate feature gate must be enabled (VolumeSnapshotDataSource or AnyVolumeDataSource) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the specified data source is not supported, the volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.",
                          "type": "object",
                          "required": [
                            "kind",
                            "name"
                          ],
                          "properties": {
                            "apiGroup": {
                              "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
                              "type": "string"
                            },
                            "kind": {
                              "description": "Kind is the type of resource being referenced",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name is the name of resource being referenced",
                              "type": "string"
                            }
                          }
                        },
                        "resources": {
                          "description": "Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                          "type": "object",
                          "properties": {
                            "limits": {
                              "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "requests": {
                              "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "selector": {
                          "description": "A label query over volumes to consider for binding.",
                          "type": "object",
                          "properties": {
                            "matchExpressions": {
                              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                              "type": "array",
                              "items": {
                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                "type": "object",
                                "required": [
                                  "key",
                                  "operator"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "key is the label key that the selector applies to.",
                                    "type": "string"
                                  },
                                  "operator": {
                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                    "type": "string"
                                  },
                                  "values": {
                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            },
                            "matchLabels": {
                              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "storageClassName": {
                          "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
                          "type": "string"
                        },
                        "volumeMode": {
                          "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
                          "type": "string"
                        },
                        "volumeName": {
                          "description": "VolumeName is the binding reference to the PersistentVolume backing this claim.",
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "description": "Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                      "type": "object",
                      "properties": {
                        "accessModes": {
                          "description": "AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "capacity": {
                          "description": "Represents the actual resources of the underlying volume.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "conditions": {
                          "description": "Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.",
                          "type": "array",
                          "items": {
                            "description": "PersistentVolumeClaimCondition contails details about state of pvc",
                            "type": "object",
                            "required": [
                              "status",
                              "type"
                            ],
                            "properties": {
                              "lastProbeTime": {
                                "description": "Last time we probed the condition.",
                                "type": "string",
                                "format": "date-time"
                              },
                              "lastTransitionTime": {
                                "description": "Last time the condition transitioned from one status to another.",
                                "type": "string",
                                "format": "date-time"
                              },
                              "message": {
                                "description": "Human-readable message indicating details about last transition.",
                                "type": "string"
                              },
                              "reason": {
                                "description": "Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports \"ResizeStarted\" that means the underlying persistent volume is being resized.",
                                "type": "string"
                              },
                              "status": {
                                "type": "string"
                              },
                              "type": {
                                "description": "PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "phase": {
                          "description": "Phase represents the current phase of PersistentVolumeClaim.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "tag": {
              "description": "Tag of Alertmanager container image to be deployed. Defaults to the value of `version`. Version is ignored if Tag is set. Deprecated: use 'image' instead.  The image tag can be specified as part of the image URL.",
              "type": "string"
            },
            "tolerations": {
              "description": "If specified, the pod's tolerations.",
              "type": "array",
              "items": {
                "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
                "type": "object",
                "properties": {
                  "effect": {
                    "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                    "type": "string"
                  },
                  "key": {
                    "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                    "type": "string"
                  },
                  "tolerationSeconds": {
                    "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "value": {
                    "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                    "type": "string"
                  }
                }
              }
            },
            "version": {
              "description": "Version the cluster should be on.",
              "type": "string"
            },
            "volumeMounts": {
              "description": "VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition. VolumeMounts specified will be appended to other VolumeMounts in the alertmanager container, that are generated as a result of StorageSpec objects.",
              "type": "array",
              "items": {
                "description": "VolumeMount describes a mounting of a Volume within a container.",
                "type": "object",
                "required": [
                  "mountPath",
                  "name"
                ],
                "properties": {
                  "mountPath": {
                    "description": "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                    "type": "string"
                  },
                  "mountPropagation": {
                    "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
                    "type": "string"
                  },
                  "name": {
                    "description": "This must match the Name of a Volume.",
                    "type": "string"
                  },
                  "readOnly": {
                    "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
                    "type": "boolean"
                  },
                  "subPath": {
                    "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
                    "type": "string"
                  },
                  "subPathExpr": {
                    "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.",
                    "type": "string"
                  }
                }
              }
            },
            "volumes": {
              "description": "Volumes allows configuration of additional volumes on the output StatefulSet definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.",
              "type": "array",
              "items": {
                "description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "awsElasticBlockStore": {
                    "description": "AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
                    "type": "object",
                    "required": [
                      "volumeID"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine",
                        "type": "string"
                      },
                      "partition": {
                        "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).",
                        "type": "integer",
                        "format": "int32"
                      },
                      "readOnly": {
                        "description": "Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
                        "type": "boolean"
                      },
                      "volumeID": {
                        "description": "Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
                        "type": "string"
                      }
                    }
                  },
                  "azureDisk": {
                    "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
                    "type": "object",
                    "required": [
                      "diskName",
                      "diskURI"
                    ],
                    "properties": {
                      "cachingMode": {
                        "description": "Host Caching mode: None, Read Only, Read Write.",
                        "type": "string"
                      },
                      "diskName": {
                        "description": "The Name of the data disk in the blob storage",
                        "type": "string"
                      },
                      "diskURI": {
                        "description": "The URI the data disk in the blob storage",
                        "type": "string"
                      },
                      "fsType": {
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      }
                    }
                  },
                  "azureFile": {
                    "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
                    "type": "object",
                    "required": [
                      "secretName",
                      "shareName"
                    ],
                    "properties": {
                      "readOnly": {
                        "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      },
                      "secretName": {
                        "description": "the name of secret that contains Azure Storage Account Name and Key",
                        "type": "string"
                      },
                      "shareName": {
                        "description": "Share Name",
                        "type": "string"
                      }
                    }
                  },
                  "cephfs": {
                    "description": "CephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
                    "type": "object",
                    "required": [
                      "monitors"
                    ],
                    "properties": {
                      "monitors": {
                        "description": "Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "path": {
                        "description": "Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                        "type": "boolean"
                      },
                      "secretFile": {
                        "description": "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                        "type": "string"
                      },
                      "secretRef": {
                        "description": "Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          }
                        }
                      },
                      "user": {
                        "description": "Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                        "type": "string"
                      }
                    }
                  },
                  "cinder": {
                    "description": "Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                    "type": "object",
                    "required": [
                      "volumeID"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                        "type": "boolean"
                      },
                      "secretRef": {
                        "description": "Optional: points to a secret object containing parameters used to connect to OpenStack.",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          }
                        }
                      },
                      "volumeID": {
                        "description": "volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                        "type": "string"
                      }
                    }
                  },
                  "configMap": {
                    "description": "ConfigMap represents a configMap that should populate this volume",
                    "type": "object",
                    "properties": {
                      "defaultMode": {
                        "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "items": {
                        "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                        "type": "array",
                        "items": {
                          "description": "Maps a string key to a path within a volume.",
                          "type": "object",
                          "required": [
                            "key",
                            "path"
                          ],
                          "properties": {
                            "key": {
                              "description": "The key to project.",
                              "type": "string"
                            },
                            "mode": {
                              "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "path": {
                              "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "name": {
                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                        "type": "string"
                      },
                      "optional": {
                        "description": "Specify whether the ConfigMap or its keys must be defined",
                        "type": "boolean"
                      }
                    }
                  },
                  "csi": {
                    "description": "CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature).",
                    "type": "object",
                    "required": [
                      "driver"
                    ],
                    "properties": {
                      "driver": {
                        "description": "Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.",
                        "type": "string"
                      },
                      "fsType": {
                        "description": "Filesystem type to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.",
                        "type": "string"
                      },
                      "nodePublishSecretRef": {
                        "description": "NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          }
                        }
                      },
                      "readOnly": {
                        "description": "Specifies a read-only configuration for the volume. Defaults to false (read/write).",
                        "type": "boolean"
                      },
                      "volumeAttributes": {
                        "description": "VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "downwardAPI": {
                    "description": "DownwardAPI represents downward API about the pod that should populate this volume",
                    "type": "object",
                    "properties": {
                      "defaultMode": {
                        "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "items": {
                        "description": "Items is a list of downward API volume file",
                        "type": "array",
                        "items": {
                          "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
                          "type": "object",
                          "required": [
                            "path"
                          ],
                          "properties": {
                            "fieldRef": {
                              "description": "Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.",
                              "type": "object",
                              "required": [
                                "fieldPath"
                              ],
                              "properties": {
                                "apiVersion": {
                                  "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                  "type": "string"
                                },
                                "fieldPath": {
                                  "description": "Path of the field to select in the specified API version.",
                                  "type": "string"
                                }
                              }
                            },
                            "mode": {
                              "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "path": {
                              "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                              "type": "string"
                            },
                            "resourceFieldRef": {
                              "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.",
                              "type": "object",
                              "required": [
                                "resource"
                              ],
                              "properties": {
                                "containerName": {
                                  "description": "Container name: required for volumes, optional for env vars",
                                  "type": "string"
                                },
                                "divisor": {
                                  "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                  "type": "string"
                                },
                                "resource": {
                                  "description": "Required: resource to select",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "emptyDir": {
                    "description": "EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
                    "type": "object",
                    "properties": {
                      "medium": {
                        "description": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
                        "type": "string"
                      },
                      "sizeLimit": {
                        "description": "Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir",
                        "type": "string"
                      }
                    }
                  },
                  "fc": {
                    "description": "FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
                    "type": "object",
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine",
                        "type": "string"
                      },
                      "lun": {
                        "description": "Optional: FC target lun number",
                        "type": "integer",
                        "format": "int32"
                      },
                      "readOnly": {
                        "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      },
                      "targetWWNs": {
                        "description": "Optional: FC target worldwide names (WWNs)",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "wwids": {
                        "description": "Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "flexVolume": {
                    "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
                    "type": "object",
                    "required": [
                      "driver"
                    ],
                    "properties": {
                      "driver": {
                        "description": "Driver is the name of the driver to use for this volume.",
                        "type": "string"
                      },
                      "fsType": {
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.",
                        "type": "string"
                      },
                      "options": {
                        "description": "Optional: Extra command options if any.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "readOnly": {
                        "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      },
                      "secretRef": {
                        "description": "Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "flocker": {
                    "description": "Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running",
                    "type": "object",
                    "properties": {
                      "datasetName": {
                        "description": "Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated",
                        "type": "string"
                      },
                      "datasetUUID": {
                        "description": "UUID of the dataset. This is unique identifier of a Flocker dataset",
                        "type": "string"
                      }
                    }
                  },
                  "gcePersistentDisk": {
                    "description": "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                    "type": "object",
                    "required": [
                      "pdName"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine",
                        "type": "string"
                      },
                      "partition": {
                        "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                        "type": "integer",
                        "format": "int32"
                      },
                      "pdName": {
                        "description": "Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                        "type": "boolean"
                      }
                    }
                  },
                  "gitRepo": {
                    "description": "GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
                    "type": "object",
                    "required": [
                      "repository"
                    ],
                    "properties": {
                      "directory": {
                        "description": "Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.",
                        "type": "string"
                      },
                      "repository": {
                        "description": "Repository URL",
                        "type": "string"
                      },
                      "revision": {
                        "description": "Commit hash for the specified revision.",
                        "type": "string"
                      }
                    }
                  },
                  "glusterfs": {
                    "description": "Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md",
                    "type": "object",
                    "required": [
                      "endpoints",
                      "path"
                    ],
                    "properties": {
                      "endpoints": {
                        "description": "EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                        "type": "string"
                      },
                      "path": {
                        "description": "Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                        "type": "boolean"
                      }
                    }
                  },
                  "hostPath": {
                    "description": "HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.",
                    "type": "object",
                    "required": [
                      "path"
                    ],
                    "properties": {
                      "path": {
                        "description": "Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
                        "type": "string"
                      },
                      "type": {
                        "description": "Type for HostPath Volume Defaults to \"\" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
                        "type": "string"
                      }
                    }
                  },
                  "iscsi": {
                    "description": "ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md",
                    "type": "object",
                    "required": [
                      "iqn",
                      "lun",
                      "targetPortal"
                    ],
                    "properties": {
                      "chapAuthDiscovery": {
                        "description": "whether support iSCSI Discovery CHAP authentication",
                        "type": "boolean"
                      },
                      "chapAuthSession": {
                        "description": "whether support iSCSI Session CHAP authentication",
                        "type": "boolean"
                      },
                      "fsType": {
                        "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine",
                        "type": "string"
                      },
                      "initiatorName": {
                        "description": "Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.",
                        "type": "string"
                      },
                      "iqn": {
                        "description": "Target iSCSI Qualified Name.",
                        "type": "string"
                      },
                      "iscsiInterface": {
                        "description": "iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
                        "type": "string"
                      },
                      "lun": {
                        "description": "iSCSI Target Lun number.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "portals": {
                        "description": "iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "readOnly": {
                        "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.",
                        "type": "boolean"
                      },
                      "secretRef": {
                        "description": "CHAP Secret for iSCSI target and initiator authentication",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          }
                        }
                      },
                      "targetPortal": {
                        "description": "iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
                        "type": "string"
                      }
                    }
                  },
                  "name": {
                    "description": "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                  },
                  "nfs": {
                    "description": "NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                    "type": "object",
                    "required": [
                      "path",
                      "server"
                    ],
                    "properties": {
                      "path": {
                        "description": "Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                        "type": "boolean"
                      },
                      "server": {
                        "description": "Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                        "type": "string"
                      }
                    }
                  },
                  "persistentVolumeClaim": {
                    "description": "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                    "type": "object",
                    "required": [
                      "claimName"
                    ],
                    "properties": {
                      "claimName": {
                        "description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "Will force the ReadOnly setting in VolumeMounts. Default false.",
                        "type": "boolean"
                      }
                    }
                  },
                  "photonPersistentDisk": {
                    "description": "PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
                    "type": "object",
                    "required": [
                      "pdID"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                        "type": "string"
                      },
                      "pdID": {
                        "description": "ID that identifies Photon Controller persistent disk",
                        "type": "string"
                      }
                    }
                  },
                  "portworxVolume": {
                    "description": "PortworxVolume represents a portworx volume attached and mounted on kubelets host machine",
                    "type": "object",
                    "required": [
                      "volumeID"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      },
                      "volumeID": {
                        "description": "VolumeID uniquely identifies a Portworx volume",
                        "type": "string"
                      }
                    }
                  },
                  "projected": {
                    "description": "Items for all in one resources secrets, configmaps, and downward API",
                    "type": "object",
                    "required": [
                      "sources"
                    ],
                    "properties": {
                      "defaultMode": {
                        "description": "Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "sources": {
                        "description": "list of volume projections",
                        "type": "array",
                        "items": {
                          "description": "Projection that may be projected along with other supported volume types",
                          "type": "object",
                          "properties": {
                            "configMap": {
                              "description": "information about the configMap data to project",
                              "type": "object",
                              "properties": {
                                "items": {
                                  "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                                  "type": "array",
                                  "items": {
                                    "description": "Maps a string key to a path within a volume.",
                                    "type": "object",
                                    "required": [
                                      "key",
                                      "path"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "The key to project.",
                                        "type": "string"
                                      },
                                      "mode": {
                                        "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                                        "type": "integer",
                                        "format": "int32"
                                      },
                                      "path": {
                                        "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "name": {
                                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                },
                                "optional": {
                                  "description": "Specify whether the ConfigMap or its keys must be defined",
                                  "type": "boolean"
                                }
                              }
                            },
                            "downwardAPI": {
                              "description": "information about the downwardAPI data to project",
                              "type": "object",
                              "properties": {
                                "items": {
                                  "description": "Items is a list of DownwardAPIVolume file",
                                  "type": "array",
                                  "items": {
                                    "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
                                    "type": "object",
                                    "required": [
                                      "path"
                                    ],
                                    "properties": {
                                      "fieldRef": {
                                        "description": "Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.",
                                        "type": "object",
                                        "required": [
                                          "fieldPath"
                                        ],
                                        "properties": {
                                          "apiVersion": {
                                            "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                            "type": "string"
                                          },
                                          "fieldPath": {
                                            "description": "Path of the field to select in the specified API version.",
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "mode": {
                                        "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                                        "type": "integer",
                                        "format": "int32"
                                      },
                                      "path": {
                                        "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                                        "type": "string"
                                      },
                                      "resourceFieldRef": {
                                        "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.",
                                        "type": "object",
                                        "required": [
                                          "resource"
                                        ],
                                        "properties": {
                                          "containerName": {
                                            "description": "Container name: required for volumes, optional for env vars",
                                            "type": "string"
                                          },
                                          "divisor": {
                                            "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                            "type": "string"
                                          },
                                          "resource": {
                                            "description": "Required: resource to select",
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "secret": {
                              "description": "information about the secret data to project",
                              "type": "object",
                              "properties": {
                                "items": {
                                  "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                                  "type": "array",
                                  "items": {
                                    "description": "Maps a string key to a path within a volume.",
                                    "type": "object",
                                    "required": [
                                      "key",
                                      "path"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "The key to project.",
                                        "type": "string"
                                      },
                                      "mode": {
                                        "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                                        "type": "integer",
                                        "format": "int32"
                                      },
                                      "path": {
                                        "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "name": {
                                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                },
                                "optional": {
                                  "description": "Specify whether the Secret or its key must be defined",
                                  "type": "boolean"
                                }
                              }
                            },
                            "serviceAccountToken": {
                              "description": "information about the serviceAccountToken data to project",
                              "type": "object",
                              "required": [
                                "path"
                              ],
                              "properties": {
                                "audience": {
                                  "description": "Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.",
                                  "type": "string"
                                },
                                "expirationSeconds": {
                                  "description": "ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.",
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "path": {
                                  "description": "Path is the path relative to the mount point of the file to project the token into.",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "quobyte": {
                    "description": "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
                    "type": "object",
                    "required": [
                      "registry",
                      "volume"
                    ],
                    "properties": {
                      "group": {
                        "description": "Group to map volume access to Default is no group",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.",
                        "type": "boolean"
                      },
                      "registry": {
                        "description": "Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes",
                        "type": "string"
                      },
                      "tenant": {
                        "description": "Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin",
                        "type": "string"
                      },
                      "user": {
                        "description": "User to map volume access to Defaults to serivceaccount user",
                        "type": "string"
                      },
                      "volume": {
                        "description": "Volume is a string that references an already created Quobyte volume by name.",
                        "type": "string"
                      }
                    }
                  },
                  "rbd": {
                    "description": "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md",
                    "type": "object",
                    "required": [
                      "image",
                      "monitors"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine",
                        "type": "string"
                      },
                      "image": {
                        "description": "The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                        "type": "string"
                      },
                      "keyring": {
                        "description": "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                        "type": "string"
                      },
                      "monitors": {
                        "description": "A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "pool": {
                        "description": "The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                        "type": "boolean"
                      },
                      "secretRef": {
                        "description": "SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          }
                        }
                      },
                      "user": {
                        "description": "The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                        "type": "string"
                      }
                    }
                  },
                  "scaleIO": {
                    "description": "ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.",
                    "type": "object",
                    "required": [
                      "gateway",
                      "secretRef",
                      "system"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\".",
                        "type": "string"
                      },
                      "gateway": {
                        "description": "The host address of the ScaleIO API Gateway.",
                        "type": "string"
                      },
                      "protectionDomain": {
                        "description": "The name of the ScaleIO Protection Domain for the configured storage.",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      },
                      "secretRef": {
                        "description": "SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          }
                        }
                      },
                      "sslEnabled": {
                        "description": "Flag to enable/disable SSL communication with Gateway, default false",
                        "type": "boolean"
                      },
                      "storageMode": {
                        "description": "Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.",
                        "type": "string"
                      },
                      "storagePool": {
                        "description": "The ScaleIO Storage Pool associated with the protection domain.",
                        "type": "string"
                      },
                      "system": {
                        "description": "The name of the storage system as configured in ScaleIO.",
                        "type": "string"
                      },
                      "volumeName": {
                        "description": "The name of a volume already created in the ScaleIO system that is associated with this volume source.",
                        "type": "string"
                      }
                    }
                  },
                  "secret": {
                    "description": "Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
                    "type": "object",
                    "properties": {
                      "defaultMode": {
                        "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "items": {
                        "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                        "type": "array",
                        "items": {
                          "description": "Maps a string key to a path within a volume.",
                          "type": "object",
                          "required": [
                            "key",
                            "path"
                          ],
                          "properties": {
                            "key": {
                              "description": "The key to project.",
                              "type": "string"
                            },
                            "mode": {
                              "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "path": {
                              "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "optional": {
                        "description": "Specify whether the Secret or its keys must be defined",
                        "type": "boolean"
                      },
                      "secretName": {
                        "description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
                        "type": "string"
                      }
                    }
                  },
                  "storageos": {
                    "description": "StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.",
                    "type": "object",
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      },
                      "secretRef": {
                        "description": "SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          }
                        }
                      },
                      "volumeName": {
                        "description": "VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.",
                        "type": "string"
                      },
                      "volumeNamespace": {
                        "description": "VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.",
                        "type": "string"
                      }
                    }
                  },
                  "vsphereVolume": {
                    "description": "VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine",
                    "type": "object",
                    "required": [
                      "volumePath"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                        "type": "string"
                      },
                      "storagePolicyID": {
                        "description": "Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.",
                        "type": "string"
                      },
                      "storagePolicyName": {
                        "description": "Storage Policy Based Management (SPBM) profile name.",
                        "type": "string"
                      },
                      "volumePath": {
                        "description": "Path that identifies vSphere volume vmdk",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "status": {
          "description": "Most recent observed status of the Alertmanager cluster. Read-only. Not included when requesting from the apiserver, only from the Prometheus Operator API itself. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "type": "object",
          "required": [
            "availableReplicas",
            "paused",
            "replicas",
            "unavailableReplicas",
            "updatedReplicas"
          ],
          "properties": {
            "availableReplicas": {
              "description": "Total number of available pods (ready for at least minReadySeconds) targeted by this Alertmanager cluster.",
              "type": "integer",
              "format": "int32"
            },
            "paused": {
              "description": "Represents whether any actions on the underlaying managed objects are being performed. Only delete actions will be performed.",
              "type": "boolean"
            },
            "replicas": {
              "description": "Total number of non-terminated pods targeted by this Alertmanager cluster (their labels match the selector).",
              "type": "integer",
              "format": "int32"
            },
            "unavailableReplicas": {
              "description": "Total number of unavailable pods targeted by this Alertmanager cluster.",
              "type": "integer",
              "format": "int32"
            },
            "updatedReplicas": {
              "description": "Total number of non-terminated pods targeted by this Alertmanager cluster that have the desired version spec.",
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "monitoring.coreos.com",
          "kind": "Alertmanager",
          "version": "v1"
        }
      ]
    },
    "com.coreos.monitoring.v1.AlertmanagerList": {
      "description": "AlertmanagerList is a list of Alertmanager",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "monitoring.coreos.com/v1"
          ]
        },
        "items": {
          "description": "List of alertmanagers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.v1.Alertmanager"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "AlertmanagerList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "monitoring.coreos.com",
          "kind": "AlertmanagerList",
          "version": "v1"
        }
      ]
    },
    "com.coreos.monitoring.v1.PodMonitor": {
      "description": "PodMonitor defines monitoring for a set of pods.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "monitoring.coreos.com/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PodMonitor"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of desired Pod selection for target discovery by Prometheus.",
          "type": "object",
          "required": [
            "podMetricsEndpoints",
            "selector"
          ],
          "properties": {
            "jobLabel": {
              "description": "The label to use to retrieve the job name from.",
              "type": "string"
            },
            "namespaceSelector": {
              "description": "Selector to select which namespaces the Endpoints objects are discovered from.",
              "type": "object",
              "properties": {
                "any": {
                  "description": "Boolean describing whether all namespaces are selected in contrast to a list restricting them.",
                  "type": "boolean"
                },
                "matchNames": {
                  "description": "List of namespace names.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "podMetricsEndpoints": {
              "description": "A list of endpoints allowed as part of this PodMonitor.",
              "type": "array",
              "items": {
                "description": "PodMetricsEndpoint defines a scrapeable endpoint of a Kubernetes Pod serving Prometheus metrics.",
                "type": "object",
                "properties": {
                  "honorLabels": {
                    "description": "HonorLabels chooses the metric's labels on collisions with target labels.",
                    "type": "boolean"
                  },
                  "honorTimestamps": {
                    "description": "HonorTimestamps controls whether Prometheus respects the timestamps present in scraped data.",
                    "type": "boolean"
                  },
                  "interval": {
                    "description": "Interval at which metrics should be scraped",
                    "type": "string"
                  },
                  "metricRelabelings": {
                    "description": "MetricRelabelConfigs to apply to samples before ingestion.",
                    "type": "array",
                    "items": {
                      "description": "RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of Prometheus configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs",
                      "type": "object",
                      "properties": {
                        "action": {
                          "description": "Action to perform based on regex matching. Default is 'replace'",
                          "type": "string"
                        },
                        "modulus": {
                          "description": "Modulus to take of the hash of the source label values.",
                          "type": "integer",
                          "format": "int64"
                        },
                        "regex": {
                          "description": "Regular expression against which the extracted value is matched. Default is '(.*)'",
                          "type": "string"
                        },
                        "replacement": {
                          "description": "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
                          "type": "string"
                        },
                        "separator": {
                          "description": "Separator placed between concatenated source label values. default is ';'.",
                          "type": "string"
                        },
                        "sourceLabels": {
                          "description": "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "targetLabel": {
                          "description": "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "params": {
                    "description": "Optional HTTP URL parameters",
                    "type": "object",
                    "additionalProperties": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "path": {
                    "description": "HTTP path to scrape for metrics.",
                    "type": "string"
                  },
                  "port": {
                    "description": "Name of the pod port this endpoint refers to. Mutually exclusive with targetPort.",
                    "type": "string"
                  },
                  "proxyUrl": {
                    "description": "ProxyURL eg http://proxyserver:2195 Directs scrapes to proxy through this endpoint.",
                    "type": "string"
                  },
                  "relabelings": {
                    "description": "RelabelConfigs to apply to samples before ingestion. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config",
                    "type": "array",
                    "items": {
                      "description": "RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of Prometheus configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs",
                      "type": "object",
                      "properties": {
                        "action": {
                          "description": "Action to perform based on regex matching. Default is 'replace'",
                          "type": "string"
                        },
                        "modulus": {
                          "description": "Modulus to take of the hash of the source label values.",
                          "type": "integer",
                          "format": "int64"
                        },
                        "regex": {
                          "description": "Regular expression against which the extracted value is matched. Default is '(.*)'",
                          "type": "string"
                        },
                        "replacement": {
                          "description": "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
                          "type": "string"
                        },
                        "separator": {
                          "description": "Separator placed between concatenated source label values. default is ';'.",
                          "type": "string"
                        },
                        "sourceLabels": {
                          "description": "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "targetLabel": {
                          "description": "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "scheme": {
                    "description": "HTTP scheme to use for scraping.",
                    "type": "string"
                  },
                  "scrapeTimeout": {
                    "description": "Timeout after which the scrape is ended",
                    "type": "string"
                  },
                  "targetPort": {
                    "description": "Deprecated: Use 'port' instead.",
                    "x-kubernetes-int-or-string": true
                  }
                }
              }
            },
            "podTargetLabels": {
              "description": "PodTargetLabels transfers labels on the Kubernetes Pod onto the target.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "sampleLimit": {
              "description": "SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.",
              "type": "integer",
              "format": "int64"
            },
            "selector": {
              "description": "Selector to select Pod objects.",
              "type": "object",
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "type": "array",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                    "type": "object",
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "matchLabels": {
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "monitoring.coreos.com",
          "kind": "PodMonitor",
          "version": "v1"
        }
      ]
    },
    "com.coreos.monitoring.v1.PodMonitorList": {
      "description": "PodMonitorList is a list of PodMonitor",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "monitoring.coreos.com/v1"
          ]
        },
        "items": {
          "description": "List of podmonitors. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.v1.PodMonitor"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PodMonitorList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "monitoring.coreos.com",
          "kind": "PodMonitorList",
          "version": "v1"
        }
      ]
    },
    "com.coreos.monitoring.v1.Probe": {
      "description": "Probe defines monitoring for a set of static targets or ingresses.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "monitoring.coreos.com/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Probe"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of desired Ingress selection for target discovery by Prometheus.",
          "type": "object",
          "properties": {
            "interval": {
              "description": "Interval at which targets are probed using the configured prober. If not specified Prometheus' global scrape interval is used.",
              "type": "string"
            },
            "jobName": {
              "description": "The job name assigned to scraped metrics by default.",
              "type": "string"
            },
            "module": {
              "description": "The module to use for probing specifying how to probe the target. Example module configuring in the blackbox exporter: https://github.com/prometheus/blackbox_exporter/blob/master/example.yml",
              "type": "string"
            },
            "prober": {
              "description": "Specification for the prober to use for probing targets. The prober.URL parameter is required. Targets cannot be probed if left empty.",
              "type": "object",
              "required": [
                "url"
              ],
              "properties": {
                "path": {
                  "description": "Path to collect metrics from. Defaults to `/probe`.",
                  "type": "string"
                },
                "scheme": {
                  "description": "HTTP scheme to use for scraping. Defaults to `http`.",
                  "type": "string"
                },
                "url": {
                  "description": "Mandatory URL of the prober.",
                  "type": "string"
                }
              }
            },
            "scrapeTimeout": {
              "description": "Timeout for scraping metrics from the Prometheus exporter.",
              "type": "string"
            },
            "targets": {
              "description": "Targets defines a set of static and/or dynamically discovered targets to be probed using the prober.",
              "type": "object",
              "properties": {
                "ingress": {
                  "description": "Ingress defines the set of dynamically discovered ingress objects which hosts are considered for probing.",
                  "type": "object",
                  "properties": {
                    "namespaceSelector": {
                      "description": "Select Ingress objects by namespace.",
                      "type": "object",
                      "properties": {
                        "any": {
                          "description": "Boolean describing whether all namespaces are selected in contrast to a list restricting them.",
                          "type": "boolean"
                        },
                        "matchNames": {
                          "description": "List of namespace names.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "relabelingConfigs": {
                      "description": "RelabelConfigs to apply to samples before ingestion. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config",
                      "type": "array",
                      "items": {
                        "description": "RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of Prometheus configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs",
                        "type": "object",
                        "properties": {
                          "action": {
                            "description": "Action to perform based on regex matching. Default is 'replace'",
                            "type": "string"
                          },
                          "modulus": {
                            "description": "Modulus to take of the hash of the source label values.",
                            "type": "integer",
                            "format": "int64"
                          },
                          "regex": {
                            "description": "Regular expression against which the extracted value is matched. Default is '(.*)'",
                            "type": "string"
                          },
                          "replacement": {
                            "description": "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
                            "type": "string"
                          },
                          "separator": {
                            "description": "Separator placed between concatenated source label values. default is ';'.",
                            "type": "string"
                          },
                          "sourceLabels": {
                            "description": "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "targetLabel": {
                            "description": "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
                            "type": "string"
                          }
                        }
                      }
                    },
                    "selector": {
                      "description": "Select Ingress objects by labels.",
                      "type": "object",
                      "properties": {
                        "matchExpressions": {
                          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                          "type": "array",
                          "items": {
                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                            "type": "object",
                            "required": [
                              "key",
                              "operator"
                            ],
                            "properties": {
                              "key": {
                                "description": "key is the label key that the selector applies to.",
                                "type": "string"
                              },
                              "operator": {
                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                "type": "string"
                              },
                              "values": {
                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "matchLabels": {
                          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "staticConfig": {
                  "description": "StaticConfig defines static targets which are considers for probing. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#static_config.",
                  "type": "object",
                  "properties": {
                    "labels": {
                      "description": "Labels assigned to all metrics scraped from the targets.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "static": {
                      "description": "Targets is a list of URLs to probe using the configured prober.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "monitoring.coreos.com",
          "kind": "Probe",
          "version": "v1"
        }
      ]
    },
    "com.coreos.monitoring.v1.ProbeList": {
      "description": "ProbeList is a list of Probe",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "monitoring.coreos.com/v1"
          ]
        },
        "items": {
          "description": "List of probes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.v1.Probe"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ProbeList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "monitoring.coreos.com",
          "kind": "ProbeList",
          "version": "v1"
        }
      ]
    },
    "com.coreos.monitoring.v1.Prometheus": {
      "description": "Prometheus defines a Prometheus deployment.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "monitoring.coreos.com/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Prometheus"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of the Prometheus cluster. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "type": "object",
          "properties": {
            "additionalAlertManagerConfigs": {
              "description": "AdditionalAlertManagerConfigs allows specifying a key of a Secret containing additional Prometheus AlertManager configurations. AlertManager configurations specified are appended to the configurations generated by the Prometheus Operator. Job configurations specified must have the form as specified in the official Prometheus documentation: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#alertmanager_config. As AlertManager configs are appended, the user is responsible to make sure it is valid. Note that using this feature may expose the possibility to break upgrades of Prometheus. It is advised to review Prometheus release notes to ensure that no incompatible AlertManager configs are going to break Prometheus after the upgrade.",
              "type": "object",
              "required": [
                "key"
              ],
              "properties": {
                "key": {
                  "description": "The key of the secret to select from.  Must be a valid secret key.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                  "type": "string"
                },
                "optional": {
                  "description": "Specify whether the Secret or its key must be defined",
                  "type": "boolean"
                }
              }
            },
            "additionalAlertRelabelConfigs": {
              "description": "AdditionalAlertRelabelConfigs allows specifying a key of a Secret containing additional Prometheus alert relabel configurations. Alert relabel configurations specified are appended to the configurations generated by the Prometheus Operator. Alert relabel configurations specified must have the form as specified in the official Prometheus documentation: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#alert_relabel_configs. As alert relabel configs are appended, the user is responsible to make sure it is valid. Note that using this feature may expose the possibility to break upgrades of Prometheus. It is advised to review Prometheus release notes to ensure that no incompatible alert relabel configs are going to break Prometheus after the upgrade.",
              "type": "object",
              "required": [
                "key"
              ],
              "properties": {
                "key": {
                  "description": "The key of the secret to select from.  Must be a valid secret key.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                  "type": "string"
                },
                "optional": {
                  "description": "Specify whether the Secret or its key must be defined",
                  "type": "boolean"
                }
              }
            },
            "additionalScrapeConfigs": {
              "description": "AdditionalScrapeConfigs allows specifying a key of a Secret containing additional Prometheus scrape configurations. Scrape configurations specified are appended to the configurations generated by the Prometheus Operator. Job configurations specified must have the form as specified in the official Prometheus documentation: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config. As scrape configs are appended, the user is responsible to make sure it is valid. Note that using this feature may expose the possibility to break upgrades of Prometheus. It is advised to review Prometheus release notes to ensure that no incompatible scrape configs are going to break Prometheus after the upgrade.",
              "type": "object",
              "required": [
                "key"
              ],
              "properties": {
                "key": {
                  "description": "The key of the secret to select from.  Must be a valid secret key.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                  "type": "string"
                },
                "optional": {
                  "description": "Specify whether the Secret or its key must be defined",
                  "type": "boolean"
                }
              }
            },
            "affinity": {
              "description": "If specified, the pod's scheduling constraints.",
              "type": "object",
              "properties": {
                "nodeAffinity": {
                  "description": "Describes node affinity scheduling rules for the pod.",
                  "type": "object",
                  "properties": {
                    "preferredDuringSchedulingIgnoredDuringExecution": {
                      "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
                      "type": "array",
                      "items": {
                        "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                        "type": "object",
                        "required": [
                          "preference",
                          "weight"
                        ],
                        "properties": {
                          "preference": {
                            "description": "A node selector term, associated with the corresponding weight.",
                            "type": "object",
                            "properties": {
                              "matchExpressions": {
                                "description": "A list of node selector requirements by node's labels.",
                                "type": "array",
                                "items": {
                                  "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "The label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              "matchFields": {
                                "description": "A list of node selector requirements by node's fields.",
                                "type": "array",
                                "items": {
                                  "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "The label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "weight": {
                            "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      }
                    },
                    "requiredDuringSchedulingIgnoredDuringExecution": {
                      "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.",
                      "type": "object",
                      "required": [
                        "nodeSelectorTerms"
                      ],
                      "properties": {
                        "nodeSelectorTerms": {
                          "description": "Required. A list of node selector terms. The terms are ORed.",
                          "type": "array",
                          "items": {
                            "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                            "type": "object",
                            "properties": {
                              "matchExpressions": {
                                "description": "A list of node selector requirements by node's labels.",
                                "type": "array",
                                "items": {
                                  "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "The label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              "matchFields": {
                                "description": "A list of node selector requirements by node's fields.",
                                "type": "array",
                                "items": {
                                  "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "The label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "podAffinity": {
                  "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).",
                  "type": "object",
                  "properties": {
                    "preferredDuringSchedulingIgnoredDuringExecution": {
                      "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                      "type": "array",
                      "items": {
                        "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                        "type": "object",
                        "required": [
                          "podAffinityTerm",
                          "weight"
                        ],
                        "properties": {
                          "podAffinityTerm": {
                            "description": "Required. A pod affinity term, associated with the corresponding weight.",
                            "type": "object",
                            "required": [
                              "topologyKey"
                            ],
                            "properties": {
                              "labelSelector": {
                                "description": "A label query over a set of resources, in this case pods.",
                                "type": "object",
                                "properties": {
                                  "matchExpressions": {
                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                    "type": "array",
                                    "items": {
                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                      "type": "object",
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "description": "key is the label key that the selector applies to.",
                                          "type": "string"
                                        },
                                        "operator": {
                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                          "type": "string"
                                        },
                                        "values": {
                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "matchLabels": {
                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "namespaces": {
                                "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "topologyKey": {
                                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                "type": "string"
                              }
                            }
                          },
                          "weight": {
                            "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      }
                    },
                    "requiredDuringSchedulingIgnoredDuringExecution": {
                      "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                      "type": "array",
                      "items": {
                        "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                        "type": "object",
                        "required": [
                          "topologyKey"
                        ],
                        "properties": {
                          "labelSelector": {
                            "description": "A label query over a set of resources, in this case pods.",
                            "type": "object",
                            "properties": {
                              "matchExpressions": {
                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                "type": "array",
                                "items": {
                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "key is the label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              "matchLabels": {
                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "namespaces": {
                            "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "topologyKey": {
                            "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "podAntiAffinity": {
                  "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).",
                  "type": "object",
                  "properties": {
                    "preferredDuringSchedulingIgnoredDuringExecution": {
                      "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                      "type": "array",
                      "items": {
                        "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                        "type": "object",
                        "required": [
                          "podAffinityTerm",
                          "weight"
                        ],
                        "properties": {
                          "podAffinityTerm": {
                            "description": "Required. A pod affinity term, associated with the corresponding weight.",
                            "type": "object",
                            "required": [
                              "topologyKey"
                            ],
                            "properties": {
                              "labelSelector": {
                                "description": "A label query over a set of resources, in this case pods.",
                                "type": "object",
                                "properties": {
                                  "matchExpressions": {
                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                    "type": "array",
                                    "items": {
                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                      "type": "object",
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "description": "key is the label key that the selector applies to.",
                                          "type": "string"
                                        },
                                        "operator": {
                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                          "type": "string"
                                        },
                                        "values": {
                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "matchLabels": {
                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "namespaces": {
                                "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "topologyKey": {
                                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                "type": "string"
                              }
                            }
                          },
                          "weight": {
                            "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      }
                    },
                    "requiredDuringSchedulingIgnoredDuringExecution": {
                      "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                      "type": "array",
                      "items": {
                        "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                        "type": "object",
                        "required": [
                          "topologyKey"
                        ],
                        "properties": {
                          "labelSelector": {
                            "description": "A label query over a set of resources, in this case pods.",
                            "type": "object",
                            "properties": {
                              "matchExpressions": {
                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                "type": "array",
                                "items": {
                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "key is the label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              "matchLabels": {
                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "namespaces": {
                            "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "topologyKey": {
                            "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "alerting": {
              "description": "Define details regarding alerting.",
              "type": "object",
              "required": [
                "alertmanagers"
              ],
              "properties": {
                "alertmanagers": {
                  "description": "AlertmanagerEndpoints Prometheus should fire alerts against.",
                  "type": "array",
                  "items": {
                    "description": "AlertmanagerEndpoints defines a selection of a single Endpoints object containing alertmanager IPs to fire alerts against.",
                    "type": "object",
                    "required": [
                      "name",
                      "namespace",
                      "port"
                    ],
                    "properties": {
                      "apiVersion": {
                        "description": "Version of the Alertmanager API that Prometheus uses to send alerts. It can be \"v1\" or \"v2\".",
                        "type": "string"
                      },
                      "bearerTokenFile": {
                        "description": "BearerTokenFile to read from filesystem to use when authenticating to Alertmanager.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of Endpoints object in Namespace.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of Endpoints object.",
                        "type": "string"
                      },
                      "pathPrefix": {
                        "description": "Prefix for the HTTP path alerts are pushed to.",
                        "type": "string"
                      },
                      "port": {
                        "description": "Port the Alertmanager API is exposed on.",
                        "x-kubernetes-int-or-string": true
                      },
                      "scheme": {
                        "description": "Scheme to use when firing alerts.",
                        "type": "string"
                      },
                      "timeout": {
                        "description": "Timeout is a per-target Alertmanager timeout when pushing alerts.",
                        "type": "string"
                      },
                      "tlsConfig": {
                        "description": "TLS Config to use for alertmanager connection.",
                        "type": "object",
                        "properties": {
                          "ca": {
                            "description": "Stuct containing the CA cert to use for the targets.",
                            "type": "object",
                            "properties": {
                              "configMap": {
                                "description": "ConfigMap containing data to use for the targets.",
                                "type": "object",
                                "required": [
                                  "key"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "The key to select.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the ConfigMap or its key must be defined",
                                    "type": "boolean"
                                  }
                                }
                              },
                              "secret": {
                                "description": "Secret containing data to use for the targets.",
                                "type": "object",
                                "required": [
                                  "key"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "The key of the secret to select from.  Must be a valid secret key.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the Secret or its key must be defined",
                                    "type": "boolean"
                                  }
                                }
                              }
                            }
                          },
                          "caFile": {
                            "description": "Path to the CA cert in the Prometheus container to use for the targets.",
                            "type": "string"
                          },
                          "cert": {
                            "description": "Struct containing the client cert file for the targets.",
                            "type": "object",
                            "properties": {
                              "configMap": {
                                "description": "ConfigMap containing data to use for the targets.",
                                "type": "object",
                                "required": [
                                  "key"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "The key to select.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the ConfigMap or its key must be defined",
                                    "type": "boolean"
                                  }
                                }
                              },
                              "secret": {
                                "description": "Secret containing data to use for the targets.",
                                "type": "object",
                                "required": [
                                  "key"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "The key of the secret to select from.  Must be a valid secret key.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the Secret or its key must be defined",
                                    "type": "boolean"
                                  }
                                }
                              }
                            }
                          },
                          "certFile": {
                            "description": "Path to the client cert file in the Prometheus container for the targets.",
                            "type": "string"
                          },
                          "insecureSkipVerify": {
                            "description": "Disable target certificate validation.",
                            "type": "boolean"
                          },
                          "keyFile": {
                            "description": "Path to the client key file in the Prometheus container for the targets.",
                            "type": "string"
                          },
                          "keySecret": {
                            "description": "Secret containing the client key file for the targets.",
                            "type": "object",
                            "required": [
                              "key"
                            ],
                            "properties": {
                              "key": {
                                "description": "The key of the secret to select from.  Must be a valid secret key.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                "type": "string"
                              },
                              "optional": {
                                "description": "Specify whether the Secret or its key must be defined",
                                "type": "boolean"
                              }
                            }
                          },
                          "serverName": {
                            "description": "Used to verify the hostname for the targets.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "allowOverlappingBlocks": {
              "description": "AllowOverlappingBlocks enables vertical compaction and vertical query merge in Prometheus. This is still experimental in Prometheus so it may change in any upcoming release.",
              "type": "boolean"
            },
            "apiserverConfig": {
              "description": "APIServerConfig allows specifying a host and auth methods to access apiserver. If left empty, Prometheus is assumed to run inside of the cluster and will discover API servers automatically and use the pod's CA certificate and bearer token file at /var/run/secrets/kubernetes.io/serviceaccount/.",
              "type": "object",
              "required": [
                "host"
              ],
              "properties": {
                "basicAuth": {
                  "description": "BasicAuth allow an endpoint to authenticate over basic authentication",
                  "type": "object",
                  "properties": {
                    "password": {
                      "description": "The secret in the service monitor namespace that contains the password for authentication.",
                      "type": "object",
                      "required": [
                        "key"
                      ],
                      "properties": {
                        "key": {
                          "description": "The key of the secret to select from.  Must be a valid secret key.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                          "type": "string"
                        },
                        "optional": {
                          "description": "Specify whether the Secret or its key must be defined",
                          "type": "boolean"
                        }
                      }
                    },
                    "username": {
                      "description": "The secret in the service monitor namespace that contains the username for authentication.",
                      "type": "object",
                      "required": [
                        "key"
                      ],
                      "properties": {
                        "key": {
                          "description": "The key of the secret to select from.  Must be a valid secret key.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                          "type": "string"
                        },
                        "optional": {
                          "description": "Specify whether the Secret or its key must be defined",
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "bearerToken": {
                  "description": "Bearer token for accessing apiserver.",
                  "type": "string"
                },
                "bearerTokenFile": {
                  "description": "File to read bearer token for accessing apiserver.",
                  "type": "string"
                },
                "host": {
                  "description": "Host of apiserver. A valid string consisting of a hostname or IP followed by an optional port number",
                  "type": "string"
                },
                "tlsConfig": {
                  "description": "TLS Config to use for accessing apiserver.",
                  "type": "object",
                  "properties": {
                    "ca": {
                      "description": "Stuct containing the CA cert to use for the targets.",
                      "type": "object",
                      "properties": {
                        "configMap": {
                          "description": "ConfigMap containing data to use for the targets.",
                          "type": "object",
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "key": {
                              "description": "The key to select.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            },
                            "optional": {
                              "description": "Specify whether the ConfigMap or its key must be defined",
                              "type": "boolean"
                            }
                          }
                        },
                        "secret": {
                          "description": "Secret containing data to use for the targets.",
                          "type": "object",
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "key": {
                              "description": "The key of the secret to select from.  Must be a valid secret key.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            },
                            "optional": {
                              "description": "Specify whether the Secret or its key must be defined",
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    },
                    "caFile": {
                      "description": "Path to the CA cert in the Prometheus container to use for the targets.",
                      "type": "string"
                    },
                    "cert": {
                      "description": "Struct containing the client cert file for the targets.",
                      "type": "object",
                      "properties": {
                        "configMap": {
                          "description": "ConfigMap containing data to use for the targets.",
                          "type": "object",
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "key": {
                              "description": "The key to select.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            },
                            "optional": {
                              "description": "Specify whether the ConfigMap or its key must be defined",
                              "type": "boolean"
                            }
                          }
                        },
                        "secret": {
                          "description": "Secret containing data to use for the targets.",
                          "type": "object",
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "key": {
                              "description": "The key of the secret to select from.  Must be a valid secret key.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            },
                            "optional": {
                              "description": "Specify whether the Secret or its key must be defined",
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    },
                    "certFile": {
                      "description": "Path to the client cert file in the Prometheus container for the targets.",
                      "type": "string"
                    },
                    "insecureSkipVerify": {
                      "description": "Disable target certificate validation.",
                      "type": "boolean"
                    },
                    "keyFile": {
                      "description": "Path to the client key file in the Prometheus container for the targets.",
                      "type": "string"
                    },
                    "keySecret": {
                      "description": "Secret containing the client key file for the targets.",
                      "type": "object",
                      "required": [
                        "key"
                      ],
                      "properties": {
                        "key": {
                          "description": "The key of the secret to select from.  Must be a valid secret key.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                          "type": "string"
                        },
                        "optional": {
                          "description": "Specify whether the Secret or its key must be defined",
                          "type": "boolean"
                        }
                      }
                    },
                    "serverName": {
                      "description": "Used to verify the hostname for the targets.",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "arbitraryFSAccessThroughSMs": {
              "description": "ArbitraryFSAccessThroughSMs configures whether configuration based on a service monitor can access arbitrary files on the file system of the Prometheus container e.g. bearer token files.",
              "type": "object",
              "properties": {
                "deny": {
                  "type": "boolean"
                }
              }
            },
            "baseImage": {
              "description": "Base image to use for a Prometheus deployment. Deprecated: use 'image' instead",
              "type": "string"
            },
            "configMaps": {
              "description": "ConfigMaps is a list of ConfigMaps in the same namespace as the Prometheus object, which shall be mounted into the Prometheus Pods. The ConfigMaps are mounted into /etc/prometheus/configmaps/<configmap-name>.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "containers": {
              "description": "Containers allows injecting additional containers or modifying operator generated containers. This can be used to allow adding an authentication proxy to a Prometheus pod or to change the behavior of an operator generated container. Containers described here modify an operator generated container if they share the same name and modifications are done via a strategic merge patch. The current container names are: `prometheus`, `prometheus-config-reloader`, `rules-configmap-reloader`, and `thanos-sidecar`. Overriding containers is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.",
              "type": "array",
              "items": {
                "description": "A single application container that you want to run within a pod.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "args": {
                    "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "command": {
                    "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "env": {
                    "description": "List of environment variables to set in the container. Cannot be updated.",
                    "type": "array",
                    "items": {
                      "description": "EnvVar represents an environment variable present in a Container.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
                          "type": "string"
                        },
                        "valueFrom": {
                          "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                          "type": "object",
                          "properties": {
                            "configMapKeyRef": {
                              "description": "Selects a key of a ConfigMap.",
                              "type": "object",
                              "required": [
                                "key"
                              ],
                              "properties": {
                                "key": {
                                  "description": "The key to select.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                },
                                "optional": {
                                  "description": "Specify whether the ConfigMap or its key must be defined",
                                  "type": "boolean"
                                }
                              }
                            },
                            "fieldRef": {
                              "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                              "type": "object",
                              "required": [
                                "fieldPath"
                              ],
                              "properties": {
                                "apiVersion": {
                                  "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                  "type": "string"
                                },
                                "fieldPath": {
                                  "description": "Path of the field to select in the specified API version.",
                                  "type": "string"
                                }
                              }
                            },
                            "resourceFieldRef": {
                              "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                              "type": "object",
                              "required": [
                                "resource"
                              ],
                              "properties": {
                                "containerName": {
                                  "description": "Container name: required for volumes, optional for env vars",
                                  "type": "string"
                                },
                                "divisor": {
                                  "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                  "type": "string"
                                },
                                "resource": {
                                  "description": "Required: resource to select",
                                  "type": "string"
                                }
                              }
                            },
                            "secretKeyRef": {
                              "description": "Selects a key of a secret in the pod's namespace",
                              "type": "object",
                              "required": [
                                "key"
                              ],
                              "properties": {
                                "key": {
                                  "description": "The key of the secret to select from.  Must be a valid secret key.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                },
                                "optional": {
                                  "description": "Specify whether the Secret or its key must be defined",
                                  "type": "boolean"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "envFrom": {
                    "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                    "type": "array",
                    "items": {
                      "description": "EnvFromSource represents the source of a set of ConfigMaps",
                      "type": "object",
                      "properties": {
                        "configMapRef": {
                          "description": "The ConfigMap to select from",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            },
                            "optional": {
                              "description": "Specify whether the ConfigMap must be defined",
                              "type": "boolean"
                            }
                          }
                        },
                        "prefix": {
                          "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
                          "type": "string"
                        },
                        "secretRef": {
                          "description": "The Secret to select from",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            },
                            "optional": {
                              "description": "Specify whether the Secret must be defined",
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  },
                  "image": {
                    "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
                    "type": "string"
                  },
                  "imagePullPolicy": {
                    "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                    "type": "string"
                  },
                  "lifecycle": {
                    "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated.",
                    "type": "object",
                    "properties": {
                      "postStart": {
                        "description": "PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                        "type": "object",
                        "properties": {
                          "exec": {
                            "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                            "type": "object",
                            "properties": {
                              "command": {
                                "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "httpGet": {
                            "description": "HTTPGet specifies the http request to perform.",
                            "type": "object",
                            "required": [
                              "port"
                            ],
                            "properties": {
                              "host": {
                                "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                "type": "string"
                              },
                              "httpHeaders": {
                                "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                "type": "array",
                                "items": {
                                  "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "value"
                                  ],
                                  "properties": {
                                    "name": {
                                      "description": "The header field name",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The header field value",
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "path": {
                                "description": "Path to access on the HTTP server.",
                                "type": "string"
                              },
                              "port": {
                                "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                "x-kubernetes-int-or-string": true
                              },
                              "scheme": {
                                "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                "type": "string"
                              }
                            }
                          },
                          "tcpSocket": {
                            "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                            "type": "object",
                            "required": [
                              "port"
                            ],
                            "properties": {
                              "host": {
                                "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                "type": "string"
                              },
                              "port": {
                                "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                "x-kubernetes-int-or-string": true
                              }
                            }
                          }
                        }
                      },
                      "preStop": {
                        "description": "PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                        "type": "object",
                        "properties": {
                          "exec": {
                            "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                            "type": "object",
                            "properties": {
                              "command": {
                                "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "httpGet": {
                            "description": "HTTPGet specifies the http request to perform.",
                            "type": "object",
                            "required": [
                              "port"
                            ],
                            "properties": {
                              "host": {
                                "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                "type": "string"
                              },
                              "httpHeaders": {
                                "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                "type": "array",
                                "items": {
                                  "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "value"
                                  ],
                                  "properties": {
                                    "name": {
                                      "description": "The header field name",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The header field value",
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "path": {
                                "description": "Path to access on the HTTP server.",
                                "type": "string"
                              },
                              "port": {
                                "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                "x-kubernetes-int-or-string": true
                              },
                              "scheme": {
                                "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                "type": "string"
                              }
                            }
                          },
                          "tcpSocket": {
                            "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                            "type": "object",
                            "required": [
                              "port"
                            ],
                            "properties": {
                              "host": {
                                "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                "type": "string"
                              },
                              "port": {
                                "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                "x-kubernetes-int-or-string": true
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "livenessProbe": {
                    "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "type": "object",
                    "properties": {
                      "exec": {
                        "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                        "type": "object",
                        "properties": {
                          "command": {
                            "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "failureThreshold": {
                        "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "httpGet": {
                        "description": "HTTPGet specifies the http request to perform.",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                            "type": "string"
                          },
                          "httpHeaders": {
                            "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                            "type": "array",
                            "items": {
                              "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                              "type": "object",
                              "required": [
                                "name",
                                "value"
                              ],
                              "properties": {
                                "name": {
                                  "description": "The header field name",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "The header field value",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "path": {
                            "description": "Path to access on the HTTP server.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          },
                          "scheme": {
                            "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                            "type": "string"
                          }
                        }
                      },
                      "initialDelaySeconds": {
                        "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      },
                      "periodSeconds": {
                        "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "successThreshold": {
                        "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "tcpSocket": {
                        "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Optional: Host name to connect to, defaults to the pod IP.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      },
                      "timeoutSeconds": {
                        "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "name": {
                    "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
                    "type": "string"
                  },
                  "ports": {
                    "description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
                    "type": "array",
                    "items": {
                      "description": "ContainerPort represents a network port in a single container.",
                      "type": "object",
                      "required": [
                        "containerPort"
                      ],
                      "properties": {
                        "containerPort": {
                          "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "hostIP": {
                          "description": "What host IP to bind the external port to.",
                          "type": "string"
                        },
                        "hostPort": {
                          "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "name": {
                          "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.",
                          "type": "string"
                        },
                        "protocol": {
                          "description": "Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "readinessProbe": {
                    "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "type": "object",
                    "properties": {
                      "exec": {
                        "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                        "type": "object",
                        "properties": {
                          "command": {
                            "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "failureThreshold": {
                        "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "httpGet": {
                        "description": "HTTPGet specifies the http request to perform.",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                            "type": "string"
                          },
                          "httpHeaders": {
                            "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                            "type": "array",
                            "items": {
                              "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                              "type": "object",
                              "required": [
                                "name",
                                "value"
                              ],
                              "properties": {
                                "name": {
                                  "description": "The header field name",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "The header field value",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "path": {
                            "description": "Path to access on the HTTP server.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          },
                          "scheme": {
                            "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                            "type": "string"
                          }
                        }
                      },
                      "initialDelaySeconds": {
                        "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      },
                      "periodSeconds": {
                        "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "successThreshold": {
                        "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "tcpSocket": {
                        "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Optional: Host name to connect to, defaults to the pod IP.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      },
                      "timeoutSeconds": {
                        "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "resources": {
                    "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                    "type": "object",
                    "properties": {
                      "limits": {
                        "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "requests": {
                        "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "securityContext": {
                    "description": "Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                    "type": "object",
                    "properties": {
                      "allowPrivilegeEscalation": {
                        "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN",
                        "type": "boolean"
                      },
                      "capabilities": {
                        "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.",
                        "type": "object",
                        "properties": {
                          "add": {
                            "description": "Added capabilities",
                            "type": "array",
                            "items": {
                              "description": "Capability represent POSIX capabilities type",
                              "type": "string"
                            }
                          },
                          "drop": {
                            "description": "Removed capabilities",
                            "type": "array",
                            "items": {
                              "description": "Capability represent POSIX capabilities type",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "privileged": {
                        "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.",
                        "type": "boolean"
                      },
                      "procMount": {
                        "description": "procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.",
                        "type": "string"
                      },
                      "readOnlyRootFilesystem": {
                        "description": "Whether this container has a read-only root filesystem. Default is false.",
                        "type": "boolean"
                      },
                      "runAsGroup": {
                        "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "runAsNonRoot": {
                        "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                        "type": "boolean"
                      },
                      "runAsUser": {
                        "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "seLinuxOptions": {
                        "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                        "type": "object",
                        "properties": {
                          "level": {
                            "description": "Level is SELinux level label that applies to the container.",
                            "type": "string"
                          },
                          "role": {
                            "description": "Role is a SELinux role label that applies to the container.",
                            "type": "string"
                          },
                          "type": {
                            "description": "Type is a SELinux type label that applies to the container.",
                            "type": "string"
                          },
                          "user": {
                            "description": "User is a SELinux user label that applies to the container.",
                            "type": "string"
                          }
                        }
                      },
                      "windowsOptions": {
                        "description": "The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                        "type": "object",
                        "properties": {
                          "gmsaCredentialSpec": {
                            "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
                            "type": "string"
                          },
                          "gmsaCredentialSpecName": {
                            "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                            "type": "string"
                          },
                          "runAsUserName": {
                            "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "startupProbe": {
                    "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "type": "object",
                    "properties": {
                      "exec": {
                        "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                        "type": "object",
                        "properties": {
                          "command": {
                            "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "failureThreshold": {
                        "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "httpGet": {
                        "description": "HTTPGet specifies the http request to perform.",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                            "type": "string"
                          },
                          "httpHeaders": {
                            "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                            "type": "array",
                            "items": {
                              "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                              "type": "object",
                              "required": [
                                "name",
                                "value"
                              ],
                              "properties": {
                                "name": {
                                  "description": "The header field name",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "The header field value",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "path": {
                            "description": "Path to access on the HTTP server.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          },
                          "scheme": {
                            "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                            "type": "string"
                          }
                        }
                      },
                      "initialDelaySeconds": {
                        "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      },
                      "periodSeconds": {
                        "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "successThreshold": {
                        "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "tcpSocket": {
                        "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Optional: Host name to connect to, defaults to the pod IP.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      },
                      "timeoutSeconds": {
                        "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "stdin": {
                    "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
                    "type": "boolean"
                  },
                  "stdinOnce": {
                    "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
                    "type": "boolean"
                  },
                  "terminationMessagePath": {
                    "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                    "type": "string"
                  },
                  "terminationMessagePolicy": {
                    "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
                    "type": "string"
                  },
                  "tty": {
                    "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                    "type": "boolean"
                  },
                  "volumeDevices": {
                    "description": "volumeDevices is the list of block devices to be used by the container.",
                    "type": "array",
                    "items": {
                      "description": "volumeDevice describes a mapping of a raw block device within a container.",
                      "type": "object",
                      "required": [
                        "devicePath",
                        "name"
                      ],
                      "properties": {
                        "devicePath": {
                          "description": "devicePath is the path inside of the container that the device will be mapped to.",
                          "type": "string"
                        },
                        "name": {
                          "description": "name must match the name of a persistentVolumeClaim in the pod",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "volumeMounts": {
                    "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                    "type": "array",
                    "items": {
                      "description": "VolumeMount describes a mounting of a Volume within a container.",
                      "type": "object",
                      "required": [
                        "mountPath",
                        "name"
                      ],
                      "properties": {
                        "mountPath": {
                          "description": "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                          "type": "string"
                        },
                        "mountPropagation": {
                          "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
                          "type": "string"
                        },
                        "name": {
                          "description": "This must match the Name of a Volume.",
                          "type": "string"
                        },
                        "readOnly": {
                          "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
                          "type": "boolean"
                        },
                        "subPath": {
                          "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
                          "type": "string"
                        },
                        "subPathExpr": {
                          "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "workingDir": {
                    "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                    "type": "string"
                  }
                }
              }
            },
            "disableCompaction": {
              "description": "Disable prometheus compaction.",
              "type": "boolean"
            },
            "enableAdminAPI": {
              "description": "Enable access to prometheus web admin API. Defaults to the value of `false`. WARNING: Enabling the admin APIs enables mutating endpoints, to delete data, shutdown Prometheus, and more. Enabling this should be done with care and the user is advised to add additional authentication authorization via a proxy to ensure only clients authorized to perform these actions can do so. For more information see https://prometheus.io/docs/prometheus/latest/querying/api/#tsdb-admin-apis",
              "type": "boolean"
            },
            "enforcedNamespaceLabel": {
              "description": "EnforcedNamespaceLabel enforces adding a namespace label of origin for each alert and metric that is user created. The label value will always be the namespace of the object that is being created.",
              "type": "string"
            },
            "enforcedSampleLimit": {
              "description": "EnforcedSampleLimit defines global limit on number of scraped samples that will be accepted. This overrides any SampleLimit set per ServiceMonitor or/and PodMonitor. It is meant to be used by admins to enforce the SampleLimit to keep overall number of samples/series under the desired limit. Note that if SampleLimit is lower that value will be taken instead.",
              "type": "integer",
              "format": "int64"
            },
            "evaluationInterval": {
              "description": "Interval between consecutive evaluations.",
              "type": "string"
            },
            "externalLabels": {
              "description": "The labels to add to any time series or alerts when communicating with external systems (federation, remote storage, Alertmanager).",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "externalUrl": {
              "description": "The external URL the Prometheus instances will be available under. This is necessary to generate correct URLs. This is necessary if Prometheus is not served from root of a DNS name.",
              "type": "string"
            },
            "ignoreNamespaceSelectors": {
              "description": "IgnoreNamespaceSelectors if set to true will ignore NamespaceSelector settings from the podmonitor and servicemonitor configs, and they will only discover endpoints within their current namespace.  Defaults to false.",
              "type": "boolean"
            },
            "image": {
              "description": "Image if specified has precedence over baseImage, tag and sha combinations. Specifying the version is still necessary to ensure the Prometheus Operator knows what version of Prometheus is being configured.",
              "type": "string"
            },
            "imagePullSecrets": {
              "description": "An optional list of references to secrets in the same namespace to use for pulling prometheus and alertmanager images from registries see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod",
              "type": "array",
              "items": {
                "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                    "type": "string"
                  }
                }
              }
            },
            "initContainers": {
              "description": "InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the Prometheus configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ Using initContainers for any use case other then secret fetching is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.",
              "type": "array",
              "items": {
                "description": "A single application container that you want to run within a pod.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "args": {
                    "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "command": {
                    "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "env": {
                    "description": "List of environment variables to set in the container. Cannot be updated.",
                    "type": "array",
                    "items": {
                      "description": "EnvVar represents an environment variable present in a Container.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
                          "type": "string"
                        },
                        "valueFrom": {
                          "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                          "type": "object",
                          "properties": {
                            "configMapKeyRef": {
                              "description": "Selects a key of a ConfigMap.",
                              "type": "object",
                              "required": [
                                "key"
                              ],
                              "properties": {
                                "key": {
                                  "description": "The key to select.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                },
                                "optional": {
                                  "description": "Specify whether the ConfigMap or its key must be defined",
                                  "type": "boolean"
                                }
                              }
                            },
                            "fieldRef": {
                              "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                              "type": "object",
                              "required": [
                                "fieldPath"
                              ],
                              "properties": {
                                "apiVersion": {
                                  "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                  "type": "string"
                                },
                                "fieldPath": {
                                  "description": "Path of the field to select in the specified API version.",
                                  "type": "string"
                                }
                              }
                            },
                            "resourceFieldRef": {
                              "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                              "type": "object",
                              "required": [
                                "resource"
                              ],
                              "properties": {
                                "containerName": {
                                  "description": "Container name: required for volumes, optional for env vars",
                                  "type": "string"
                                },
                                "divisor": {
                                  "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                  "type": "string"
                                },
                                "resource": {
                                  "description": "Required: resource to select",
                                  "type": "string"
                                }
                              }
                            },
                            "secretKeyRef": {
                              "description": "Selects a key of a secret in the pod's namespace",
                              "type": "object",
                              "required": [
                                "key"
                              ],
                              "properties": {
                                "key": {
                                  "description": "The key of the secret to select from.  Must be a valid secret key.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                },
                                "optional": {
                                  "description": "Specify whether the Secret or its key must be defined",
                                  "type": "boolean"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "envFrom": {
                    "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                    "type": "array",
                    "items": {
                      "description": "EnvFromSource represents the source of a set of ConfigMaps",
                      "type": "object",
                      "properties": {
                        "configMapRef": {
                          "description": "The ConfigMap to select from",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            },
                            "optional": {
                              "description": "Specify whether the ConfigMap must be defined",
                              "type": "boolean"
                            }
                          }
                        },
                        "prefix": {
                          "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
                          "type": "string"
                        },
                        "secretRef": {
                          "description": "The Secret to select from",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            },
                            "optional": {
                              "description": "Specify whether the Secret must be defined",
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  },
                  "image": {
                    "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
                    "type": "string"
                  },
                  "imagePullPolicy": {
                    "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                    "type": "string"
                  },
                  "lifecycle": {
                    "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated.",
                    "type": "object",
                    "properties": {
                      "postStart": {
                        "description": "PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                        "type": "object",
                        "properties": {
                          "exec": {
                            "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                            "type": "object",
                            "properties": {
                              "command": {
                                "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "httpGet": {
                            "description": "HTTPGet specifies the http request to perform.",
                            "type": "object",
                            "required": [
                              "port"
                            ],
                            "properties": {
                              "host": {
                                "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                "type": "string"
                              },
                              "httpHeaders": {
                                "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                "type": "array",
                                "items": {
                                  "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "value"
                                  ],
                                  "properties": {
                                    "name": {
                                      "description": "The header field name",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The header field value",
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "path": {
                                "description": "Path to access on the HTTP server.",
                                "type": "string"
                              },
                              "port": {
                                "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                "x-kubernetes-int-or-string": true
                              },
                              "scheme": {
                                "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                "type": "string"
                              }
                            }
                          },
                          "tcpSocket": {
                            "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                            "type": "object",
                            "required": [
                              "port"
                            ],
                            "properties": {
                              "host": {
                                "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                "type": "string"
                              },
                              "port": {
                                "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                "x-kubernetes-int-or-string": true
                              }
                            }
                          }
                        }
                      },
                      "preStop": {
                        "description": "PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                        "type": "object",
                        "properties": {
                          "exec": {
                            "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                            "type": "object",
                            "properties": {
                              "command": {
                                "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "httpGet": {
                            "description": "HTTPGet specifies the http request to perform.",
                            "type": "object",
                            "required": [
                              "port"
                            ],
                            "properties": {
                              "host": {
                                "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                "type": "string"
                              },
                              "httpHeaders": {
                                "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                "type": "array",
                                "items": {
                                  "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "value"
                                  ],
                                  "properties": {
                                    "name": {
                                      "description": "The header field name",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The header field value",
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "path": {
                                "description": "Path to access on the HTTP server.",
                                "type": "string"
                              },
                              "port": {
                                "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                "x-kubernetes-int-or-string": true
                              },
                              "scheme": {
                                "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                "type": "string"
                              }
                            }
                          },
                          "tcpSocket": {
                            "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                            "type": "object",
                            "required": [
                              "port"
                            ],
                            "properties": {
                              "host": {
                                "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                "type": "string"
                              },
                              "port": {
                                "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                "x-kubernetes-int-or-string": true
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "livenessProbe": {
                    "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "type": "object",
                    "properties": {
                      "exec": {
                        "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                        "type": "object",
                        "properties": {
                          "command": {
                            "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "failureThreshold": {
                        "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "httpGet": {
                        "description": "HTTPGet specifies the http request to perform.",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                            "type": "string"
                          },
                          "httpHeaders": {
                            "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                            "type": "array",
                            "items": {
                              "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                              "type": "object",
                              "required": [
                                "name",
                                "value"
                              ],
                              "properties": {
                                "name": {
                                  "description": "The header field name",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "The header field value",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "path": {
                            "description": "Path to access on the HTTP server.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          },
                          "scheme": {
                            "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                            "type": "string"
                          }
                        }
                      },
                      "initialDelaySeconds": {
                        "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      },
                      "periodSeconds": {
                        "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "successThreshold": {
                        "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "tcpSocket": {
                        "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Optional: Host name to connect to, defaults to the pod IP.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      },
                      "timeoutSeconds": {
                        "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "name": {
                    "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
                    "type": "string"
                  },
                  "ports": {
                    "description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
                    "type": "array",
                    "items": {
                      "description": "ContainerPort represents a network port in a single container.",
                      "type": "object",
                      "required": [
                        "containerPort"
                      ],
                      "properties": {
                        "containerPort": {
                          "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "hostIP": {
                          "description": "What host IP to bind the external port to.",
                          "type": "string"
                        },
                        "hostPort": {
                          "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "name": {
                          "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.",
                          "type": "string"
                        },
                        "protocol": {
                          "description": "Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "readinessProbe": {
                    "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "type": "object",
                    "properties": {
                      "exec": {
                        "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                        "type": "object",
                        "properties": {
                          "command": {
                            "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "failureThreshold": {
                        "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "httpGet": {
                        "description": "HTTPGet specifies the http request to perform.",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                            "type": "string"
                          },
                          "httpHeaders": {
                            "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                            "type": "array",
                            "items": {
                              "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                              "type": "object",
                              "required": [
                                "name",
                                "value"
                              ],
                              "properties": {
                                "name": {
                                  "description": "The header field name",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "The header field value",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "path": {
                            "description": "Path to access on the HTTP server.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          },
                          "scheme": {
                            "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                            "type": "string"
                          }
                        }
                      },
                      "initialDelaySeconds": {
                        "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      },
                      "periodSeconds": {
                        "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "successThreshold": {
                        "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "tcpSocket": {
                        "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Optional: Host name to connect to, defaults to the pod IP.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      },
                      "timeoutSeconds": {
                        "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "resources": {
                    "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                    "type": "object",
                    "properties": {
                      "limits": {
                        "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "requests": {
                        "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "securityContext": {
                    "description": "Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                    "type": "object",
                    "properties": {
                      "allowPrivilegeEscalation": {
                        "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN",
                        "type": "boolean"
                      },
                      "capabilities": {
                        "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.",
                        "type": "object",
                        "properties": {
                          "add": {
                            "description": "Added capabilities",
                            "type": "array",
                            "items": {
                              "description": "Capability represent POSIX capabilities type",
                              "type": "string"
                            }
                          },
                          "drop": {
                            "description": "Removed capabilities",
                            "type": "array",
                            "items": {
                              "description": "Capability represent POSIX capabilities type",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "privileged": {
                        "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.",
                        "type": "boolean"
                      },
                      "procMount": {
                        "description": "procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.",
                        "type": "string"
                      },
                      "readOnlyRootFilesystem": {
                        "description": "Whether this container has a read-only root filesystem. Default is false.",
                        "type": "boolean"
                      },
                      "runAsGroup": {
                        "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "runAsNonRoot": {
                        "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                        "type": "boolean"
                      },
                      "runAsUser": {
                        "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "seLinuxOptions": {
                        "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                        "type": "object",
                        "properties": {
                          "level": {
                            "description": "Level is SELinux level label that applies to the container.",
                            "type": "string"
                          },
                          "role": {
                            "description": "Role is a SELinux role label that applies to the container.",
                            "type": "string"
                          },
                          "type": {
                            "description": "Type is a SELinux type label that applies to the container.",
                            "type": "string"
                          },
                          "user": {
                            "description": "User is a SELinux user label that applies to the container.",
                            "type": "string"
                          }
                        }
                      },
                      "windowsOptions": {
                        "description": "The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                        "type": "object",
                        "properties": {
                          "gmsaCredentialSpec": {
                            "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
                            "type": "string"
                          },
                          "gmsaCredentialSpecName": {
                            "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                            "type": "string"
                          },
                          "runAsUserName": {
                            "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "startupProbe": {
                    "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "type": "object",
                    "properties": {
                      "exec": {
                        "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                        "type": "object",
                        "properties": {
                          "command": {
                            "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "failureThreshold": {
                        "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "httpGet": {
                        "description": "HTTPGet specifies the http request to perform.",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                            "type": "string"
                          },
                          "httpHeaders": {
                            "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                            "type": "array",
                            "items": {
                              "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                              "type": "object",
                              "required": [
                                "name",
                                "value"
                              ],
                              "properties": {
                                "name": {
                                  "description": "The header field name",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "The header field value",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "path": {
                            "description": "Path to access on the HTTP server.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          },
                          "scheme": {
                            "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                            "type": "string"
                          }
                        }
                      },
                      "initialDelaySeconds": {
                        "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      },
                      "periodSeconds": {
                        "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "successThreshold": {
                        "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "tcpSocket": {
                        "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Optional: Host name to connect to, defaults to the pod IP.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      },
                      "timeoutSeconds": {
                        "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "stdin": {
                    "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
                    "type": "boolean"
                  },
                  "stdinOnce": {
                    "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
                    "type": "boolean"
                  },
                  "terminationMessagePath": {
                    "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                    "type": "string"
                  },
                  "terminationMessagePolicy": {
                    "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
                    "type": "string"
                  },
                  "tty": {
                    "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                    "type": "boolean"
                  },
                  "volumeDevices": {
                    "description": "volumeDevices is the list of block devices to be used by the container.",
                    "type": "array",
                    "items": {
                      "description": "volumeDevice describes a mapping of a raw block device within a container.",
                      "type": "object",
                      "required": [
                        "devicePath",
                        "name"
                      ],
                      "properties": {
                        "devicePath": {
                          "description": "devicePath is the path inside of the container that the device will be mapped to.",
                          "type": "string"
                        },
                        "name": {
                          "description": "name must match the name of a persistentVolumeClaim in the pod",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "volumeMounts": {
                    "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                    "type": "array",
                    "items": {
                      "description": "VolumeMount describes a mounting of a Volume within a container.",
                      "type": "object",
                      "required": [
                        "mountPath",
                        "name"
                      ],
                      "properties": {
                        "mountPath": {
                          "description": "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                          "type": "string"
                        },
                        "mountPropagation": {
                          "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
                          "type": "string"
                        },
                        "name": {
                          "description": "This must match the Name of a Volume.",
                          "type": "string"
                        },
                        "readOnly": {
                          "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
                          "type": "boolean"
                        },
                        "subPath": {
                          "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
                          "type": "string"
                        },
                        "subPathExpr": {
                          "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "workingDir": {
                    "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                    "type": "string"
                  }
                }
              }
            },
            "listenLocal": {
              "description": "ListenLocal makes the Prometheus server listen on loopback, so that it does not bind against the Pod IP.",
              "type": "boolean"
            },
            "logFormat": {
              "description": "Log format for Prometheus to be configured with.",
              "type": "string"
            },
            "logLevel": {
              "description": "Log level for Prometheus to be configured with.",
              "type": "string"
            },
            "nodeSelector": {
              "description": "Define which Nodes the Pods are scheduled on.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "overrideHonorLabels": {
              "description": "OverrideHonorLabels if set to true overrides all user configured honor_labels. If HonorLabels is set in ServiceMonitor or PodMonitor to true, this overrides honor_labels to false.",
              "type": "boolean"
            },
            "overrideHonorTimestamps": {
              "description": "OverrideHonorTimestamps allows to globally enforce honoring timestamps in all scrape configs.",
              "type": "boolean"
            },
            "paused": {
              "description": "When a Prometheus deployment is paused, no actions except for deletion will be performed on the underlying objects.",
              "type": "boolean"
            },
            "podMetadata": {
              "description": "PodMetadata configures Labels and Annotations which are propagated to the prometheus pods.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labels": {
                  "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "name": {
                  "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                  "type": "string"
                }
              }
            },
            "podMonitorNamespaceSelector": {
              "description": "Namespaces to be selected for PodMonitor discovery. If nil, only check own namespace.",
              "type": "object",
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "type": "array",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                    "type": "object",
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "matchLabels": {
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "podMonitorSelector": {
              "description": "*Experimental* PodMonitors to be selected for target discovery. *Deprecated:* if neither this nor serviceMonitorSelector are specified, configuration is unmanaged.",
              "type": "object",
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "type": "array",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                    "type": "object",
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "matchLabels": {
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "portName": {
              "description": "Port name used for the pods and governing service. This defaults to web",
              "type": "string"
            },
            "priorityClassName": {
              "description": "Priority class assigned to the Pods",
              "type": "string"
            },
            "probeNamespaceSelector": {
              "description": "*Experimental* Namespaces to be selected for Probe discovery. If nil, only check own namespace.",
              "type": "object",
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "type": "array",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                    "type": "object",
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "matchLabels": {
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "probeSelector": {
              "description": "*Experimental* Probes to be selected for target discovery.",
              "type": "object",
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "type": "array",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                    "type": "object",
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "matchLabels": {
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "prometheusExternalLabelName": {
              "description": "Name of Prometheus external label used to denote Prometheus instance name. Defaults to the value of `prometheus`. External label will _not_ be added when value is set to empty string (`\"\"`).",
              "type": "string"
            },
            "prometheusRulesExcludedFromEnforce": {
              "description": "PrometheusRulesExcludedFromEnforce - list of prometheus rules to be excluded from enforcing of adding namespace labels. Works only if enforcedNamespaceLabel set to true. Make sure both ruleNamespace and ruleName are set for each pair",
              "type": "array",
              "items": {
                "description": "PrometheusRuleExcludeConfig enables users to configure excluded PrometheusRule names and their namespaces to be ignored while enforcing namespace label for alerts and metrics.",
                "type": "object",
                "required": [
                  "ruleName",
                  "ruleNamespace"
                ],
                "properties": {
                  "ruleName": {
                    "description": "RuleNamespace - name of excluded rule",
                    "type": "string"
                  },
                  "ruleNamespace": {
                    "description": "RuleNamespace - namespace of excluded rule",
                    "type": "string"
                  }
                }
              }
            },
            "query": {
              "description": "QuerySpec defines the query command line flags when starting Prometheus.",
              "type": "object",
              "properties": {
                "lookbackDelta": {
                  "description": "The delta difference allowed for retrieving metrics during expression evaluations.",
                  "type": "string"
                },
                "maxConcurrency": {
                  "description": "Number of concurrent queries that can be run at once.",
                  "type": "integer",
                  "format": "int32"
                },
                "maxSamples": {
                  "description": "Maximum number of samples a single query can load into memory. Note that queries will fail if they would load more samples than this into memory, so this also limits the number of samples a query can return.",
                  "type": "integer",
                  "format": "int32"
                },
                "timeout": {
                  "description": "Maximum time a query may take before being aborted.",
                  "type": "string"
                }
              }
            },
            "queryLogFile": {
              "description": "QueryLogFile specifies the file to which PromQL queries are logged. Note that this location must be writable, and can be persisted using an attached volume. Alternatively, the location can be set to a stdout location such as `/dev/stdout` to log querie information to the default Prometheus log stream. This is only available in versions of Prometheus >= 2.16.0. For more details, see the Prometheus docs (https://prometheus.io/docs/guides/query-log/)",
              "type": "string"
            },
            "remoteRead": {
              "description": "If specified, the remote_read spec. This is an experimental feature, it may change in any upcoming release in a breaking way.",
              "type": "array",
              "items": {
                "description": "RemoteReadSpec defines the remote_read configuration for prometheus.",
                "type": "object",
                "required": [
                  "url"
                ],
                "properties": {
                  "basicAuth": {
                    "description": "BasicAuth for the URL.",
                    "type": "object",
                    "properties": {
                      "password": {
                        "description": "The secret in the service monitor namespace that contains the password for authentication.",
                        "type": "object",
                        "required": [
                          "key"
                        ],
                        "properties": {
                          "key": {
                            "description": "The key of the secret to select from.  Must be a valid secret key.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          },
                          "optional": {
                            "description": "Specify whether the Secret or its key must be defined",
                            "type": "boolean"
                          }
                        }
                      },
                      "username": {
                        "description": "The secret in the service monitor namespace that contains the username for authentication.",
                        "type": "object",
                        "required": [
                          "key"
                        ],
                        "properties": {
                          "key": {
                            "description": "The key of the secret to select from.  Must be a valid secret key.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          },
                          "optional": {
                            "description": "Specify whether the Secret or its key must be defined",
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  },
                  "bearerToken": {
                    "description": "bearer token for remote read.",
                    "type": "string"
                  },
                  "bearerTokenFile": {
                    "description": "File to read bearer token for remote read.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the remote read queue, must be unique if specified. The name is used in metrics and logging in order to differentiate read configurations.  Only valid in Prometheus versions 2.15.0 and newer.",
                    "type": "string"
                  },
                  "proxyUrl": {
                    "description": "Optional ProxyURL",
                    "type": "string"
                  },
                  "readRecent": {
                    "description": "Whether reads should be made for queries for time ranges that the local storage should have complete data for.",
                    "type": "boolean"
                  },
                  "remoteTimeout": {
                    "description": "Timeout for requests to the remote read endpoint.",
                    "type": "string"
                  },
                  "requiredMatchers": {
                    "description": "An optional list of equality matchers which have to be present in a selector to query the remote read endpoint.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "tlsConfig": {
                    "description": "TLS Config to use for remote read.",
                    "type": "object",
                    "properties": {
                      "ca": {
                        "description": "Stuct containing the CA cert to use for the targets.",
                        "type": "object",
                        "properties": {
                          "configMap": {
                            "description": "ConfigMap containing data to use for the targets.",
                            "type": "object",
                            "required": [
                              "key"
                            ],
                            "properties": {
                              "key": {
                                "description": "The key to select.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                "type": "string"
                              },
                              "optional": {
                                "description": "Specify whether the ConfigMap or its key must be defined",
                                "type": "boolean"
                              }
                            }
                          },
                          "secret": {
                            "description": "Secret containing data to use for the targets.",
                            "type": "object",
                            "required": [
                              "key"
                            ],
                            "properties": {
                              "key": {
                                "description": "The key of the secret to select from.  Must be a valid secret key.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                "type": "string"
                              },
                              "optional": {
                                "description": "Specify whether the Secret or its key must be defined",
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      },
                      "caFile": {
                        "description": "Path to the CA cert in the Prometheus container to use for the targets.",
                        "type": "string"
                      },
                      "cert": {
                        "description": "Struct containing the client cert file for the targets.",
                        "type": "object",
                        "properties": {
                          "configMap": {
                            "description": "ConfigMap containing data to use for the targets.",
                            "type": "object",
                            "required": [
                              "key"
                            ],
                            "properties": {
                              "key": {
                                "description": "The key to select.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                "type": "string"
                              },
                              "optional": {
                                "description": "Specify whether the ConfigMap or its key must be defined",
                                "type": "boolean"
                              }
                            }
                          },
                          "secret": {
                            "description": "Secret containing data to use for the targets.",
                            "type": "object",
                            "required": [
                              "key"
                            ],
                            "properties": {
                              "key": {
                                "description": "The key of the secret to select from.  Must be a valid secret key.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                "type": "string"
                              },
                              "optional": {
                                "description": "Specify whether the Secret or its key must be defined",
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      },
                      "certFile": {
                        "description": "Path to the client cert file in the Prometheus container for the targets.",
                        "type": "string"
                      },
                      "insecureSkipVerify": {
                        "description": "Disable target certificate validation.",
                        "type": "boolean"
                      },
                      "keyFile": {
                        "description": "Path to the client key file in the Prometheus container for the targets.",
                        "type": "string"
                      },
                      "keySecret": {
                        "description": "Secret containing the client key file for the targets.",
                        "type": "object",
                        "required": [
                          "key"
                        ],
                        "properties": {
                          "key": {
                            "description": "The key of the secret to select from.  Must be a valid secret key.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          },
                          "optional": {
                            "description": "Specify whether the Secret or its key must be defined",
                            "type": "boolean"
                          }
                        }
                      },
                      "serverName": {
                        "description": "Used to verify the hostname for the targets.",
                        "type": "string"
                      }
                    }
                  },
                  "url": {
                    "description": "The URL of the endpoint to send samples to.",
                    "type": "string"
                  }
                }
              }
            },
            "remoteWrite": {
              "description": "If specified, the remote_write spec. This is an experimental feature, it may change in any upcoming release in a breaking way.",
              "type": "array",
              "items": {
                "description": "RemoteWriteSpec defines the remote_write configuration for prometheus.",
                "type": "object",
                "required": [
                  "url"
                ],
                "properties": {
                  "basicAuth": {
                    "description": "BasicAuth for the URL.",
                    "type": "object",
                    "properties": {
                      "password": {
                        "description": "The secret in the service monitor namespace that contains the password for authentication.",
                        "type": "object",
                        "required": [
                          "key"
                        ],
                        "properties": {
                          "key": {
                            "description": "The key of the secret to select from.  Must be a valid secret key.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          },
                          "optional": {
                            "description": "Specify whether the Secret or its key must be defined",
                            "type": "boolean"
                          }
                        }
                      },
                      "username": {
                        "description": "The secret in the service monitor namespace that contains the username for authentication.",
                        "type": "object",
                        "required": [
                          "key"
                        ],
                        "properties": {
                          "key": {
                            "description": "The key of the secret to select from.  Must be a valid secret key.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          },
                          "optional": {
                            "description": "Specify whether the Secret or its key must be defined",
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  },
                  "bearerToken": {
                    "description": "File to read bearer token for remote write.",
                    "type": "string"
                  },
                  "bearerTokenFile": {
                    "description": "File to read bearer token for remote write.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the remote write queue, must be unique if specified. The name is used in metrics and logging in order to differentiate queues. Only valid in Prometheus versions 2.15.0 and newer.",
                    "type": "string"
                  },
                  "proxyUrl": {
                    "description": "Optional ProxyURL",
                    "type": "string"
                  },
                  "queueConfig": {
                    "description": "QueueConfig allows tuning of the remote write queue parameters.",
                    "type": "object",
                    "properties": {
                      "batchSendDeadline": {
                        "description": "BatchSendDeadline is the maximum time a sample will wait in buffer.",
                        "type": "string"
                      },
                      "capacity": {
                        "description": "Capacity is the number of samples to buffer per shard before we start dropping them.",
                        "type": "integer"
                      },
                      "maxBackoff": {
                        "description": "MaxBackoff is the maximum retry delay.",
                        "type": "string"
                      },
                      "maxRetries": {
                        "description": "MaxRetries is the maximum number of times to retry a batch on recoverable errors.",
                        "type": "integer"
                      },
                      "maxSamplesPerSend": {
                        "description": "MaxSamplesPerSend is the maximum number of samples per send.",
                        "type": "integer"
                      },
                      "maxShards": {
                        "description": "MaxShards is the maximum number of shards, i.e. amount of concurrency.",
                        "type": "integer"
                      },
                      "minBackoff": {
                        "description": "MinBackoff is the initial retry delay. Gets doubled for every retry.",
                        "type": "string"
                      },
                      "minShards": {
                        "description": "MinShards is the minimum number of shards, i.e. amount of concurrency.",
                        "type": "integer"
                      }
                    }
                  },
                  "remoteTimeout": {
                    "description": "Timeout for requests to the remote write endpoint.",
                    "type": "string"
                  },
                  "tlsConfig": {
                    "description": "TLS Config to use for remote write.",
                    "type": "object",
                    "properties": {
                      "ca": {
                        "description": "Stuct containing the CA cert to use for the targets.",
                        "type": "object",
                        "properties": {
                          "configMap": {
                            "description": "ConfigMap containing data to use for the targets.",
                            "type": "object",
                            "required": [
                              "key"
                            ],
                            "properties": {
                              "key": {
                                "description": "The key to select.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                "type": "string"
                              },
                              "optional": {
                                "description": "Specify whether the ConfigMap or its key must be defined",
                                "type": "boolean"
                              }
                            }
                          },
                          "secret": {
                            "description": "Secret containing data to use for the targets.",
                            "type": "object",
                            "required": [
                              "key"
                            ],
                            "properties": {
                              "key": {
                                "description": "The key of the secret to select from.  Must be a valid secret key.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                "type": "string"
                              },
                              "optional": {
                                "description": "Specify whether the Secret or its key must be defined",
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      },
                      "caFile": {
                        "description": "Path to the CA cert in the Prometheus container to use for the targets.",
                        "type": "string"
                      },
                      "cert": {
                        "description": "Struct containing the client cert file for the targets.",
                        "type": "object",
                        "properties": {
                          "configMap": {
                            "description": "ConfigMap containing data to use for the targets.",
                            "type": "object",
                            "required": [
                              "key"
                            ],
                            "properties": {
                              "key": {
                                "description": "The key to select.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                "type": "string"
                              },
                              "optional": {
                                "description": "Specify whether the ConfigMap or its key must be defined",
                                "type": "boolean"
                              }
                            }
                          },
                          "secret": {
                            "description": "Secret containing data to use for the targets.",
                            "type": "object",
                            "required": [
                              "key"
                            ],
                            "properties": {
                              "key": {
                                "description": "The key of the secret to select from.  Must be a valid secret key.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                "type": "string"
                              },
                              "optional": {
                                "description": "Specify whether the Secret or its key must be defined",
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      },
                      "certFile": {
                        "description": "Path to the client cert file in the Prometheus container for the targets.",
                        "type": "string"
                      },
                      "insecureSkipVerify": {
                        "description": "Disable target certificate validation.",
                        "type": "boolean"
                      },
                      "keyFile": {
                        "description": "Path to the client key file in the Prometheus container for the targets.",
                        "type": "string"
                      },
                      "keySecret": {
                        "description": "Secret containing the client key file for the targets.",
                        "type": "object",
                        "required": [
                          "key"
                        ],
                        "properties": {
                          "key": {
                            "description": "The key of the secret to select from.  Must be a valid secret key.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          },
                          "optional": {
                            "description": "Specify whether the Secret or its key must be defined",
                            "type": "boolean"
                          }
                        }
                      },
                      "serverName": {
                        "description": "Used to verify the hostname for the targets.",
                        "type": "string"
                      }
                    }
                  },
                  "url": {
                    "description": "The URL of the endpoint to send samples to.",
                    "type": "string"
                  },
                  "writeRelabelConfigs": {
                    "description": "The list of remote write relabel configurations.",
                    "type": "array",
                    "items": {
                      "description": "RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of Prometheus configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs",
                      "type": "object",
                      "properties": {
                        "action": {
                          "description": "Action to perform based on regex matching. Default is 'replace'",
                          "type": "string"
                        },
                        "modulus": {
                          "description": "Modulus to take of the hash of the source label values.",
                          "type": "integer",
                          "format": "int64"
                        },
                        "regex": {
                          "description": "Regular expression against which the extracted value is matched. Default is '(.*)'",
                          "type": "string"
                        },
                        "replacement": {
                          "description": "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
                          "type": "string"
                        },
                        "separator": {
                          "description": "Separator placed between concatenated source label values. default is ';'.",
                          "type": "string"
                        },
                        "sourceLabels": {
                          "description": "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "targetLabel": {
                          "description": "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "replicaExternalLabelName": {
              "description": "Name of Prometheus external label used to denote replica name. Defaults to the value of `prometheus_replica`. External label will _not_ be added when value is set to empty string (`\"\"`).",
              "type": "string"
            },
            "replicas": {
              "description": "Number of instances to deploy for a Prometheus deployment.",
              "type": "integer",
              "format": "int32"
            },
            "resources": {
              "description": "Define resources requests and limits for single Pods.",
              "type": "object",
              "properties": {
                "limits": {
                  "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "requests": {
                  "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "retention": {
              "description": "Time duration Prometheus shall retain data for. Default is '24h', and must match the regular expression `[0-9]+(ms|s|m|h|d|w|y)` (milliseconds seconds minutes hours days weeks years).",
              "type": "string"
            },
            "retentionSize": {
              "description": "Maximum amount of disk space used by blocks.",
              "type": "string"
            },
            "routePrefix": {
              "description": "The route prefix Prometheus registers HTTP handlers for. This is useful, if using ExternalURL and a proxy is rewriting HTTP routes of a request, and the actual ExternalURL is still true, but the server serves requests under a different route prefix. For example for use with `kubectl proxy`.",
              "type": "string"
            },
            "ruleNamespaceSelector": {
              "description": "Namespaces to be selected for PrometheusRules discovery. If unspecified, only the same namespace as the Prometheus object is in is used.",
              "type": "object",
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "type": "array",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                    "type": "object",
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "matchLabels": {
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "ruleSelector": {
              "description": "A selector to select which PrometheusRules to mount for loading alerting/recording rules from. Until (excluding) Prometheus Operator v0.24.0 Prometheus Operator will migrate any legacy rule ConfigMaps to PrometheusRule custom resources selected by RuleSelector. Make sure it does not match any config maps that you do not want to be migrated.",
              "type": "object",
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "type": "array",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                    "type": "object",
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "matchLabels": {
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "rules": {
              "description": "/--rules.*/ command-line arguments.",
              "type": "object",
              "properties": {
                "alert": {
                  "description": "/--rules.alert.*/ command-line arguments",
                  "type": "object",
                  "properties": {
                    "forGracePeriod": {
                      "description": "Minimum duration between alert and restored 'for' state. This is maintained only for alerts with configured 'for' time greater than grace period.",
                      "type": "string"
                    },
                    "forOutageTolerance": {
                      "description": "Max time to tolerate prometheus outage for restoring 'for' state of alert.",
                      "type": "string"
                    },
                    "resendDelay": {
                      "description": "Minimum amount of time to wait before resending an alert to Alertmanager.",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "scrapeInterval": {
              "description": "Interval between consecutive scrapes.",
              "type": "string"
            },
            "scrapeTimeout": {
              "description": "Number of seconds to wait for target to respond before erroring.",
              "type": "string"
            },
            "secrets": {
              "description": "Secrets is a list of Secrets in the same namespace as the Prometheus object, which shall be mounted into the Prometheus Pods. The Secrets are mounted into /etc/prometheus/secrets/<secret-name>.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "securityContext": {
              "description": "SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext.",
              "type": "object",
              "properties": {
                "fsGroup": {
                  "description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: \n 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- \n If unset, the Kubelet will not modify the ownership and permissions of any volume.",
                  "type": "integer",
                  "format": "int64"
                },
                "fsGroupChangePolicy": {
                  "description": "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified defaults to \"Always\".",
                  "type": "string"
                },
                "runAsGroup": {
                  "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
                  "type": "integer",
                  "format": "int64"
                },
                "runAsNonRoot": {
                  "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                  "type": "boolean"
                },
                "runAsUser": {
                  "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
                  "type": "integer",
                  "format": "int64"
                },
                "seLinuxOptions": {
                  "description": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
                  "type": "object",
                  "properties": {
                    "level": {
                      "description": "Level is SELinux level label that applies to the container.",
                      "type": "string"
                    },
                    "role": {
                      "description": "Role is a SELinux role label that applies to the container.",
                      "type": "string"
                    },
                    "type": {
                      "description": "Type is a SELinux type label that applies to the container.",
                      "type": "string"
                    },
                    "user": {
                      "description": "User is a SELinux user label that applies to the container.",
                      "type": "string"
                    }
                  }
                },
                "supplementalGroups": {
                  "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.",
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64"
                  }
                },
                "sysctls": {
                  "description": "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.",
                  "type": "array",
                  "items": {
                    "description": "Sysctl defines a kernel parameter to be set",
                    "type": "object",
                    "required": [
                      "name",
                      "value"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of a property to set",
                        "type": "string"
                      },
                      "value": {
                        "description": "Value of a property to set",
                        "type": "string"
                      }
                    }
                  }
                },
                "windowsOptions": {
                  "description": "The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                  "type": "object",
                  "properties": {
                    "gmsaCredentialSpec": {
                      "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
                      "type": "string"
                    },
                    "gmsaCredentialSpecName": {
                      "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                      "type": "string"
                    },
                    "runAsUserName": {
                      "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "serviceAccountName": {
              "description": "ServiceAccountName is the name of the ServiceAccount to use to run the Prometheus Pods.",
              "type": "string"
            },
            "serviceMonitorNamespaceSelector": {
              "description": "Namespaces to be selected for ServiceMonitor discovery. If nil, only check own namespace.",
              "type": "object",
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "type": "array",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                    "type": "object",
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "matchLabels": {
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "serviceMonitorSelector": {
              "description": "ServiceMonitors to be selected for target discovery. *Deprecated:* if neither this nor podMonitorSelector are specified, configuration is unmanaged.",
              "type": "object",
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "type": "array",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                    "type": "object",
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "matchLabels": {
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "sha": {
              "description": "SHA of Prometheus container image to be deployed. Defaults to the value of `version`. Similar to a tag, but the SHA explicitly deploys an immutable container image. Version and Tag are ignored if SHA is set. Deprecated: use 'image' instead.  The image digest can be specified as part of the image URL.",
              "type": "string"
            },
            "storage": {
              "description": "Storage spec to specify how storage shall be used.",
              "type": "object",
              "properties": {
                "disableMountSubPath": {
                  "description": "Deprecated: subPath usage will be disabled by default in a future release, this option will become unnecessary. DisableMountSubPath allows to remove any subPath usage in volume mounts.",
                  "type": "boolean"
                },
                "emptyDir": {
                  "description": "EmptyDirVolumeSource to be used by the Prometheus StatefulSets. If specified, used in place of any volumeClaimTemplate. More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir",
                  "type": "object",
                  "properties": {
                    "medium": {
                      "description": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
                      "type": "string"
                    },
                    "sizeLimit": {
                      "description": "Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir",
                      "type": "string"
                    }
                  }
                },
                "volumeClaimTemplate": {
                  "description": "A PVC spec to be used by the Prometheus StatefulSets.",
                  "type": "object",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "description": "EmbeddedMetadata contains metadata relevant to an EmbeddedResource.",
                      "type": "object",
                      "properties": {
                        "annotations": {
                          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "labels": {
                          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "name": {
                          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                          "type": "string"
                        }
                      }
                    },
                    "spec": {
                      "description": "Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                      "type": "object",
                      "properties": {
                        "accessModes": {
                          "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "dataSource": {
                          "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot - Beta) * An existing PVC (PersistentVolumeClaim) * An existing custom resource/object that implements data population (Alpha) In order to use VolumeSnapshot object types, the appropriate feature gate must be enabled (VolumeSnapshotDataSource or AnyVolumeDataSource) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the specified data source is not supported, the volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.",
                          "type": "object",
                          "required": [
                            "kind",
                            "name"
                          ],
                          "properties": {
                            "apiGroup": {
                              "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
                              "type": "string"
                            },
                            "kind": {
                              "description": "Kind is the type of resource being referenced",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name is the name of resource being referenced",
                              "type": "string"
                            }
                          }
                        },
                        "resources": {
                          "description": "Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                          "type": "object",
                          "properties": {
                            "limits": {
                              "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "requests": {
                              "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "selector": {
                          "description": "A label query over volumes to consider for binding.",
                          "type": "object",
                          "properties": {
                            "matchExpressions": {
                              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                              "type": "array",
                              "items": {
                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                "type": "object",
                                "required": [
                                  "key",
                                  "operator"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "key is the label key that the selector applies to.",
                                    "type": "string"
                                  },
                                  "operator": {
                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                    "type": "string"
                                  },
                                  "values": {
                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            },
                            "matchLabels": {
                              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "storageClassName": {
                          "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
                          "type": "string"
                        },
                        "volumeMode": {
                          "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
                          "type": "string"
                        },
                        "volumeName": {
                          "description": "VolumeName is the binding reference to the PersistentVolume backing this claim.",
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "description": "Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                      "type": "object",
                      "properties": {
                        "accessModes": {
                          "description": "AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "capacity": {
                          "description": "Represents the actual resources of the underlying volume.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "conditions": {
                          "description": "Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.",
                          "type": "array",
                          "items": {
                            "description": "PersistentVolumeClaimCondition contails details about state of pvc",
                            "type": "object",
                            "required": [
                              "status",
                              "type"
                            ],
                            "properties": {
                              "lastProbeTime": {
                                "description": "Last time we probed the condition.",
                                "type": "string",
                                "format": "date-time"
                              },
                              "lastTransitionTime": {
                                "description": "Last time the condition transitioned from one status to another.",
                                "type": "string",
                                "format": "date-time"
                              },
                              "message": {
                                "description": "Human-readable message indicating details about last transition.",
                                "type": "string"
                              },
                              "reason": {
                                "description": "Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports \"ResizeStarted\" that means the underlying persistent volume is being resized.",
                                "type": "string"
                              },
                              "status": {
                                "type": "string"
                              },
                              "type": {
                                "description": "PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "phase": {
                          "description": "Phase represents the current phase of PersistentVolumeClaim.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "tag": {
              "description": "Tag of Prometheus container image to be deployed. Defaults to the value of `version`. Version is ignored if Tag is set. Deprecated: use 'image' instead.  The image tag can be specified as part of the image URL.",
              "type": "string"
            },
            "thanos": {
              "description": "Thanos configuration allows configuring various aspects of a Prometheus server in a Thanos environment. \n This section is experimental, it may change significantly without deprecation notice in any release. \n This is experimental and may change significantly without backward compatibility in any release.",
              "type": "object",
              "properties": {
                "baseImage": {
                  "description": "Thanos base image if other than default. Deprecated: use 'image' instead",
                  "type": "string"
                },
                "grpcServerTlsConfig": {
                  "description": "GRPCServerTLSConfig configures the gRPC server from which Thanos Querier reads recorded rule data. Note: Currently only the CAFile, CertFile, and KeyFile fields are supported. Maps to the '--grpc-server-tls-*' CLI args.",
                  "type": "object",
                  "properties": {
                    "ca": {
                      "description": "Stuct containing the CA cert to use for the targets.",
                      "type": "object",
                      "properties": {
                        "configMap": {
                          "description": "ConfigMap containing data to use for the targets.",
                          "type": "object",
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "key": {
                              "description": "The key to select.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            },
                            "optional": {
                              "description": "Specify whether the ConfigMap or its key must be defined",
                              "type": "boolean"
                            }
                          }
                        },
                        "secret": {
                          "description": "Secret containing data to use for the targets.",
                          "type": "object",
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "key": {
                              "description": "The key of the secret to select from.  Must be a valid secret key.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            },
                            "optional": {
                              "description": "Specify whether the Secret or its key must be defined",
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    },
                    "caFile": {
                      "description": "Path to the CA cert in the Prometheus container to use for the targets.",
                      "type": "string"
                    },
                    "cert": {
                      "description": "Struct containing the client cert file for the targets.",
                      "type": "object",
                      "properties": {
                        "configMap": {
                          "description": "ConfigMap containing data to use for the targets.",
                          "type": "object",
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "key": {
                              "description": "The key to select.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            },
                            "optional": {
                              "description": "Specify whether the ConfigMap or its key must be defined",
                              "type": "boolean"
                            }
                          }
                        },
                        "secret": {
                          "description": "Secret containing data to use for the targets.",
                          "type": "object",
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "key": {
                              "description": "The key of the secret to select from.  Must be a valid secret key.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            },
                            "optional": {
                              "description": "Specify whether the Secret or its key must be defined",
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    },
                    "certFile": {
                      "description": "Path to the client cert file in the Prometheus container for the targets.",
                      "type": "string"
                    },
                    "insecureSkipVerify": {
                      "description": "Disable target certificate validation.",
                      "type": "boolean"
                    },
                    "keyFile": {
                      "description": "Path to the client key file in the Prometheus container for the targets.",
                      "type": "string"
                    },
                    "keySecret": {
                      "description": "Secret containing the client key file for the targets.",
                      "type": "object",
                      "required": [
                        "key"
                      ],
                      "properties": {
                        "key": {
                          "description": "The key of the secret to select from.  Must be a valid secret key.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                          "type": "string"
                        },
                        "optional": {
                          "description": "Specify whether the Secret or its key must be defined",
                          "type": "boolean"
                        }
                      }
                    },
                    "serverName": {
                      "description": "Used to verify the hostname for the targets.",
                      "type": "string"
                    }
                  }
                },
                "image": {
                  "description": "Image if specified has precedence over baseImage, tag and sha combinations. Specifying the version is still necessary to ensure the Prometheus Operator knows what version of Thanos is being configured.",
                  "type": "string"
                },
                "listenLocal": {
                  "description": "ListenLocal makes the Thanos sidecar listen on loopback, so that it does not bind against the Pod IP.",
                  "type": "boolean"
                },
                "logFormat": {
                  "description": "LogFormat for Thanos sidecar to be configured with.",
                  "type": "string"
                },
                "logLevel": {
                  "description": "LogLevel for Thanos sidecar to be configured with.",
                  "type": "string"
                },
                "minTime": {
                  "description": "MinTime for Thanos sidecar to be configured with. Option can be a constant time in RFC3339 format or time duration relative to current time, such as -1d or 2h45m. Valid duration units are ms, s, m, h, d, w, y.",
                  "type": "string"
                },
                "objectStorageConfig": {
                  "description": "ObjectStorageConfig configures object storage in Thanos.",
                  "type": "object",
                  "required": [
                    "key"
                  ],
                  "properties": {
                    "key": {
                      "description": "The key of the secret to select from.  Must be a valid secret key.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                      "type": "string"
                    },
                    "optional": {
                      "description": "Specify whether the Secret or its key must be defined",
                      "type": "boolean"
                    }
                  }
                },
                "resources": {
                  "description": "Resources defines the resource requirements for the Thanos sidecar. If not provided, no requests/limits will be set",
                  "type": "object",
                  "properties": {
                    "limits": {
                      "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "requests": {
                      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  }
                },
                "sha": {
                  "description": "SHA of Thanos container image to be deployed. Defaults to the value of `version`. Similar to a tag, but the SHA explicitly deploys an immutable container image. Version and Tag are ignored if SHA is set. Deprecated: use 'image' instead.  The image digest can be specified as part of the image URL.",
                  "type": "string"
                },
                "tag": {
                  "description": "Tag of Thanos sidecar container image to be deployed. Defaults to the value of `version`. Version is ignored if Tag is set. Deprecated: use 'image' instead.  The image tag can be specified as part of the image URL.",
                  "type": "string"
                },
                "tracingConfig": {
                  "description": "TracingConfig configures tracing in Thanos. This is an experimental feature, it may change in any upcoming release in a breaking way.",
                  "type": "object",
                  "required": [
                    "key"
                  ],
                  "properties": {
                    "key": {
                      "description": "The key of the secret to select from.  Must be a valid secret key.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                      "type": "string"
                    },
                    "optional": {
                      "description": "Specify whether the Secret or its key must be defined",
                      "type": "boolean"
                    }
                  }
                },
                "version": {
                  "description": "Version describes the version of Thanos to use.",
                  "type": "string"
                }
              }
            },
            "tolerations": {
              "description": "If specified, the pod's tolerations.",
              "type": "array",
              "items": {
                "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
                "type": "object",
                "properties": {
                  "effect": {
                    "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                    "type": "string"
                  },
                  "key": {
                    "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                    "type": "string"
                  },
                  "tolerationSeconds": {
                    "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "value": {
                    "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                    "type": "string"
                  }
                }
              }
            },
            "version": {
              "description": "Version of Prometheus to be deployed.",
              "type": "string"
            },
            "volumeMounts": {
              "description": "VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition. VolumeMounts specified will be appended to other VolumeMounts in the prometheus container, that are generated as a result of StorageSpec objects.",
              "type": "array",
              "items": {
                "description": "VolumeMount describes a mounting of a Volume within a container.",
                "type": "object",
                "required": [
                  "mountPath",
                  "name"
                ],
                "properties": {
                  "mountPath": {
                    "description": "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                    "type": "string"
                  },
                  "mountPropagation": {
                    "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
                    "type": "string"
                  },
                  "name": {
                    "description": "This must match the Name of a Volume.",
                    "type": "string"
                  },
                  "readOnly": {
                    "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
                    "type": "boolean"
                  },
                  "subPath": {
                    "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
                    "type": "string"
                  },
                  "subPathExpr": {
                    "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.",
                    "type": "string"
                  }
                }
              }
            },
            "volumes": {
              "description": "Volumes allows configuration of additional volumes on the output StatefulSet definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.",
              "type": "array",
              "items": {
                "description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "awsElasticBlockStore": {
                    "description": "AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
                    "type": "object",
                    "required": [
                      "volumeID"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine",
                        "type": "string"
                      },
                      "partition": {
                        "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).",
                        "type": "integer",
                        "format": "int32"
                      },
                      "readOnly": {
                        "description": "Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
                        "type": "boolean"
                      },
                      "volumeID": {
                        "description": "Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
                        "type": "string"
                      }
                    }
                  },
                  "azureDisk": {
                    "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
                    "type": "object",
                    "required": [
                      "diskName",
                      "diskURI"
                    ],
                    "properties": {
                      "cachingMode": {
                        "description": "Host Caching mode: None, Read Only, Read Write.",
                        "type": "string"
                      },
                      "diskName": {
                        "description": "The Name of the data disk in the blob storage",
                        "type": "string"
                      },
                      "diskURI": {
                        "description": "The URI the data disk in the blob storage",
                        "type": "string"
                      },
                      "fsType": {
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      }
                    }
                  },
                  "azureFile": {
                    "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
                    "type": "object",
                    "required": [
                      "secretName",
                      "shareName"
                    ],
                    "properties": {
                      "readOnly": {
                        "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      },
                      "secretName": {
                        "description": "the name of secret that contains Azure Storage Account Name and Key",
                        "type": "string"
                      },
                      "shareName": {
                        "description": "Share Name",
                        "type": "string"
                      }
                    }
                  },
                  "cephfs": {
                    "description": "CephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
                    "type": "object",
                    "required": [
                      "monitors"
                    ],
                    "properties": {
                      "monitors": {
                        "description": "Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "path": {
                        "description": "Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                        "type": "boolean"
                      },
                      "secretFile": {
                        "description": "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                        "type": "string"
                      },
                      "secretRef": {
                        "description": "Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          }
                        }
                      },
                      "user": {
                        "description": "Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                        "type": "string"
                      }
                    }
                  },
                  "cinder": {
                    "description": "Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                    "type": "object",
                    "required": [
                      "volumeID"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                        "type": "boolean"
                      },
                      "secretRef": {
                        "description": "Optional: points to a secret object containing parameters used to connect to OpenStack.",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          }
                        }
                      },
                      "volumeID": {
                        "description": "volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                        "type": "string"
                      }
                    }
                  },
                  "configMap": {
                    "description": "ConfigMap represents a configMap that should populate this volume",
                    "type": "object",
                    "properties": {
                      "defaultMode": {
                        "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "items": {
                        "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                        "type": "array",
                        "items": {
                          "description": "Maps a string key to a path within a volume.",
                          "type": "object",
                          "required": [
                            "key",
                            "path"
                          ],
                          "properties": {
                            "key": {
                              "description": "The key to project.",
                              "type": "string"
                            },
                            "mode": {
                              "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "path": {
                              "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "name": {
                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                        "type": "string"
                      },
                      "optional": {
                        "description": "Specify whether the ConfigMap or its keys must be defined",
                        "type": "boolean"
                      }
                    }
                  },
                  "csi": {
                    "description": "CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature).",
                    "type": "object",
                    "required": [
                      "driver"
                    ],
                    "properties": {
                      "driver": {
                        "description": "Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.",
                        "type": "string"
                      },
                      "fsType": {
                        "description": "Filesystem type to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.",
                        "type": "string"
                      },
                      "nodePublishSecretRef": {
                        "description": "NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          }
                        }
                      },
                      "readOnly": {
                        "description": "Specifies a read-only configuration for the volume. Defaults to false (read/write).",
                        "type": "boolean"
                      },
                      "volumeAttributes": {
                        "description": "VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "downwardAPI": {
                    "description": "DownwardAPI represents downward API about the pod that should populate this volume",
                    "type": "object",
                    "properties": {
                      "defaultMode": {
                        "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "items": {
                        "description": "Items is a list of downward API volume file",
                        "type": "array",
                        "items": {
                          "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
                          "type": "object",
                          "required": [
                            "path"
                          ],
                          "properties": {
                            "fieldRef": {
                              "description": "Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.",
                              "type": "object",
                              "required": [
                                "fieldPath"
                              ],
                              "properties": {
                                "apiVersion": {
                                  "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                  "type": "string"
                                },
                                "fieldPath": {
                                  "description": "Path of the field to select in the specified API version.",
                                  "type": "string"
                                }
                              }
                            },
                            "mode": {
                              "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "path": {
                              "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                              "type": "string"
                            },
                            "resourceFieldRef": {
                              "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.",
                              "type": "object",
                              "required": [
                                "resource"
                              ],
                              "properties": {
                                "containerName": {
                                  "description": "Container name: required for volumes, optional for env vars",
                                  "type": "string"
                                },
                                "divisor": {
                                  "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                  "type": "string"
                                },
                                "resource": {
                                  "description": "Required: resource to select",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "emptyDir": {
                    "description": "EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
                    "type": "object",
                    "properties": {
                      "medium": {
                        "description": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
                        "type": "string"
                      },
                      "sizeLimit": {
                        "description": "Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir",
                        "type": "string"
                      }
                    }
                  },
                  "fc": {
                    "description": "FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
                    "type": "object",
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine",
                        "type": "string"
                      },
                      "lun": {
                        "description": "Optional: FC target lun number",
                        "type": "integer",
                        "format": "int32"
                      },
                      "readOnly": {
                        "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      },
                      "targetWWNs": {
                        "description": "Optional: FC target worldwide names (WWNs)",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "wwids": {
                        "description": "Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "flexVolume": {
                    "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
                    "type": "object",
                    "required": [
                      "driver"
                    ],
                    "properties": {
                      "driver": {
                        "description": "Driver is the name of the driver to use for this volume.",
                        "type": "string"
                      },
                      "fsType": {
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.",
                        "type": "string"
                      },
                      "options": {
                        "description": "Optional: Extra command options if any.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "readOnly": {
                        "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      },
                      "secretRef": {
                        "description": "Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "flocker": {
                    "description": "Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running",
                    "type": "object",
                    "properties": {
                      "datasetName": {
                        "description": "Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated",
                        "type": "string"
                      },
                      "datasetUUID": {
                        "description": "UUID of the dataset. This is unique identifier of a Flocker dataset",
                        "type": "string"
                      }
                    }
                  },
                  "gcePersistentDisk": {
                    "description": "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                    "type": "object",
                    "required": [
                      "pdName"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine",
                        "type": "string"
                      },
                      "partition": {
                        "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                        "type": "integer",
                        "format": "int32"
                      },
                      "pdName": {
                        "description": "Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                        "type": "boolean"
                      }
                    }
                  },
                  "gitRepo": {
                    "description": "GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
                    "type": "object",
                    "required": [
                      "repository"
                    ],
                    "properties": {
                      "directory": {
                        "description": "Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.",
                        "type": "string"
                      },
                      "repository": {
                        "description": "Repository URL",
                        "type": "string"
                      },
                      "revision": {
                        "description": "Commit hash for the specified revision.",
                        "type": "string"
                      }
                    }
                  },
                  "glusterfs": {
                    "description": "Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md",
                    "type": "object",
                    "required": [
                      "endpoints",
                      "path"
                    ],
                    "properties": {
                      "endpoints": {
                        "description": "EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                        "type": "string"
                      },
                      "path": {
                        "description": "Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                        "type": "boolean"
                      }
                    }
                  },
                  "hostPath": {
                    "description": "HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.",
                    "type": "object",
                    "required": [
                      "path"
                    ],
                    "properties": {
                      "path": {
                        "description": "Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
                        "type": "string"
                      },
                      "type": {
                        "description": "Type for HostPath Volume Defaults to \"\" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
                        "type": "string"
                      }
                    }
                  },
                  "iscsi": {
                    "description": "ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md",
                    "type": "object",
                    "required": [
                      "iqn",
                      "lun",
                      "targetPortal"
                    ],
                    "properties": {
                      "chapAuthDiscovery": {
                        "description": "whether support iSCSI Discovery CHAP authentication",
                        "type": "boolean"
                      },
                      "chapAuthSession": {
                        "description": "whether support iSCSI Session CHAP authentication",
                        "type": "boolean"
                      },
                      "fsType": {
                        "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine",
                        "type": "string"
                      },
                      "initiatorName": {
                        "description": "Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.",
                        "type": "string"
                      },
                      "iqn": {
                        "description": "Target iSCSI Qualified Name.",
                        "type": "string"
                      },
                      "iscsiInterface": {
                        "description": "iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
                        "type": "string"
                      },
                      "lun": {
                        "description": "iSCSI Target Lun number.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "portals": {
                        "description": "iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "readOnly": {
                        "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.",
                        "type": "boolean"
                      },
                      "secretRef": {
                        "description": "CHAP Secret for iSCSI target and initiator authentication",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          }
                        }
                      },
                      "targetPortal": {
                        "description": "iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
                        "type": "string"
                      }
                    }
                  },
                  "name": {
                    "description": "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                  },
                  "nfs": {
                    "description": "NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                    "type": "object",
                    "required": [
                      "path",
                      "server"
                    ],
                    "properties": {
                      "path": {
                        "description": "Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                        "type": "boolean"
                      },
                      "server": {
                        "description": "Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                        "type": "string"
                      }
                    }
                  },
                  "persistentVolumeClaim": {
                    "description": "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                    "type": "object",
                    "required": [
                      "claimName"
                    ],
                    "properties": {
                      "claimName": {
                        "description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "Will force the ReadOnly setting in VolumeMounts. Default false.",
                        "type": "boolean"
                      }
                    }
                  },
                  "photonPersistentDisk": {
                    "description": "PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
                    "type": "object",
                    "required": [
                      "pdID"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                        "type": "string"
                      },
                      "pdID": {
                        "description": "ID that identifies Photon Controller persistent disk",
                        "type": "string"
                      }
                    }
                  },
                  "portworxVolume": {
                    "description": "PortworxVolume represents a portworx volume attached and mounted on kubelets host machine",
                    "type": "object",
                    "required": [
                      "volumeID"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      },
                      "volumeID": {
                        "description": "VolumeID uniquely identifies a Portworx volume",
                        "type": "string"
                      }
                    }
                  },
                  "projected": {
                    "description": "Items for all in one resources secrets, configmaps, and downward API",
                    "type": "object",
                    "required": [
                      "sources"
                    ],
                    "properties": {
                      "defaultMode": {
                        "description": "Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "sources": {
                        "description": "list of volume projections",
                        "type": "array",
                        "items": {
                          "description": "Projection that may be projected along with other supported volume types",
                          "type": "object",
                          "properties": {
                            "configMap": {
                              "description": "information about the configMap data to project",
                              "type": "object",
                              "properties": {
                                "items": {
                                  "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                                  "type": "array",
                                  "items": {
                                    "description": "Maps a string key to a path within a volume.",
                                    "type": "object",
                                    "required": [
                                      "key",
                                      "path"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "The key to project.",
                                        "type": "string"
                                      },
                                      "mode": {
                                        "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                                        "type": "integer",
                                        "format": "int32"
                                      },
                                      "path": {
                                        "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "name": {
                                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                },
                                "optional": {
                                  "description": "Specify whether the ConfigMap or its keys must be defined",
                                  "type": "boolean"
                                }
                              }
                            },
                            "downwardAPI": {
                              "description": "information about the downwardAPI data to project",
                              "type": "object",
                              "properties": {
                                "items": {
                                  "description": "Items is a list of DownwardAPIVolume file",
                                  "type": "array",
                                  "items": {
                                    "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
                                    "type": "object",
                                    "required": [
                                      "path"
                                    ],
                                    "properties": {
                                      "fieldRef": {
                                        "description": "Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.",
                                        "type": "object",
                                        "required": [
                                          "fieldPath"
                                        ],
                                        "properties": {
                                          "apiVersion": {
                                            "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                            "type": "string"
                                          },
                                          "fieldPath": {
                                            "description": "Path of the field to select in the specified API version.",
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "mode": {
                                        "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                                        "type": "integer",
                                        "format": "int32"
                                      },
                                      "path": {
                                        "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                                        "type": "string"
                                      },
                                      "resourceFieldRef": {
                                        "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.",
                                        "type": "object",
                                        "required": [
                                          "resource"
                                        ],
                                        "properties": {
                                          "containerName": {
                                            "description": "Container name: required for volumes, optional for env vars",
                                            "type": "string"
                                          },
                                          "divisor": {
                                            "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                            "type": "string"
                                          },
                                          "resource": {
                                            "description": "Required: resource to select",
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "secret": {
                              "description": "information about the secret data to project",
                              "type": "object",
                              "properties": {
                                "items": {
                                  "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                                  "type": "array",
                                  "items": {
                                    "description": "Maps a string key to a path within a volume.",
                                    "type": "object",
                                    "required": [
                                      "key",
                                      "path"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "The key to project.",
                                        "type": "string"
                                      },
                                      "mode": {
                                        "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                                        "type": "integer",
                                        "format": "int32"
                                      },
                                      "path": {
                                        "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "name": {
                                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                },
                                "optional": {
                                  "description": "Specify whether the Secret or its key must be defined",
                                  "type": "boolean"
                                }
                              }
                            },
                            "serviceAccountToken": {
                              "description": "information about the serviceAccountToken data to project",
                              "type": "object",
                              "required": [
                                "path"
                              ],
                              "properties": {
                                "audience": {
                                  "description": "Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.",
                                  "type": "string"
                                },
                                "expirationSeconds": {
                                  "description": "ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.",
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "path": {
                                  "description": "Path is the path relative to the mount point of the file to project the token into.",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "quobyte": {
                    "description": "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
                    "type": "object",
                    "required": [
                      "registry",
                      "volume"
                    ],
                    "properties": {
                      "group": {
                        "description": "Group to map volume access to Default is no group",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.",
                        "type": "boolean"
                      },
                      "registry": {
                        "description": "Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes",
                        "type": "string"
                      },
                      "tenant": {
                        "description": "Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin",
                        "type": "string"
                      },
                      "user": {
                        "description": "User to map volume access to Defaults to serivceaccount user",
                        "type": "string"
                      },
                      "volume": {
                        "description": "Volume is a string that references an already created Quobyte volume by name.",
                        "type": "string"
                      }
                    }
                  },
                  "rbd": {
                    "description": "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md",
                    "type": "object",
                    "required": [
                      "image",
                      "monitors"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine",
                        "type": "string"
                      },
                      "image": {
                        "description": "The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                        "type": "string"
                      },
                      "keyring": {
                        "description": "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                        "type": "string"
                      },
                      "monitors": {
                        "description": "A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "pool": {
                        "description": "The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                        "type": "boolean"
                      },
                      "secretRef": {
                        "description": "SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          }
                        }
                      },
                      "user": {
                        "description": "The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                        "type": "string"
                      }
                    }
                  },
                  "scaleIO": {
                    "description": "ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.",
                    "type": "object",
                    "required": [
                      "gateway",
                      "secretRef",
                      "system"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\".",
                        "type": "string"
                      },
                      "gateway": {
                        "description": "The host address of the ScaleIO API Gateway.",
                        "type": "string"
                      },
                      "protectionDomain": {
                        "description": "The name of the ScaleIO Protection Domain for the configured storage.",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      },
                      "secretRef": {
                        "description": "SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          }
                        }
                      },
                      "sslEnabled": {
                        "description": "Flag to enable/disable SSL communication with Gateway, default false",
                        "type": "boolean"
                      },
                      "storageMode": {
                        "description": "Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.",
                        "type": "string"
                      },
                      "storagePool": {
                        "description": "The ScaleIO Storage Pool associated with the protection domain.",
                        "type": "string"
                      },
                      "system": {
                        "description": "The name of the storage system as configured in ScaleIO.",
                        "type": "string"
                      },
                      "volumeName": {
                        "description": "The name of a volume already created in the ScaleIO system that is associated with this volume source.",
                        "type": "string"
                      }
                    }
                  },
                  "secret": {
                    "description": "Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
                    "type": "object",
                    "properties": {
                      "defaultMode": {
                        "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "items": {
                        "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                        "type": "array",
                        "items": {
                          "description": "Maps a string key to a path within a volume.",
                          "type": "object",
                          "required": [
                            "key",
                            "path"
                          ],
                          "properties": {
                            "key": {
                              "description": "The key to project.",
                              "type": "string"
                            },
                            "mode": {
                              "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "path": {
                              "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "optional": {
                        "description": "Specify whether the Secret or its keys must be defined",
                        "type": "boolean"
                      },
                      "secretName": {
                        "description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
                        "type": "string"
                      }
                    }
                  },
                  "storageos": {
                    "description": "StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.",
                    "type": "object",
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      },
                      "secretRef": {
                        "description": "SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          }
                        }
                      },
                      "volumeName": {
                        "description": "VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.",
                        "type": "string"
                      },
                      "volumeNamespace": {
                        "description": "VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.",
                        "type": "string"
                      }
                    }
                  },
                  "vsphereVolume": {
                    "description": "VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine",
                    "type": "object",
                    "required": [
                      "volumePath"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                        "type": "string"
                      },
                      "storagePolicyID": {
                        "description": "Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.",
                        "type": "string"
                      },
                      "storagePolicyName": {
                        "description": "Storage Policy Based Management (SPBM) profile name.",
                        "type": "string"
                      },
                      "volumePath": {
                        "description": "Path that identifies vSphere volume vmdk",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "walCompression": {
              "description": "Enable compression of the write-ahead log using Snappy. This flag is only available in versions of Prometheus >= 2.11.0.",
              "type": "boolean"
            }
          }
        },
        "status": {
          "description": "Most recent observed status of the Prometheus cluster. Read-only. Not included when requesting from the apiserver, only from the Prometheus Operator API itself. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "type": "object",
          "required": [
            "availableReplicas",
            "paused",
            "replicas",
            "unavailableReplicas",
            "updatedReplicas"
          ],
          "properties": {
            "availableReplicas": {
              "description": "Total number of available pods (ready for at least minReadySeconds) targeted by this Prometheus deployment.",
              "type": "integer",
              "format": "int32"
            },
            "paused": {
              "description": "Represents whether any actions on the underlaying managed objects are being performed. Only delete actions will be performed.",
              "type": "boolean"
            },
            "replicas": {
              "description": "Total number of non-terminated pods targeted by this Prometheus deployment (their labels match the selector).",
              "type": "integer",
              "format": "int32"
            },
            "unavailableReplicas": {
              "description": "Total number of unavailable pods targeted by this Prometheus deployment.",
              "type": "integer",
              "format": "int32"
            },
            "updatedReplicas": {
              "description": "Total number of non-terminated pods targeted by this Prometheus deployment that have the desired version spec.",
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "monitoring.coreos.com",
          "kind": "Prometheus",
          "version": "v1"
        }
      ]
    },
    "com.coreos.monitoring.v1.PrometheusList": {
      "description": "PrometheusList is a list of Prometheus",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "monitoring.coreos.com/v1"
          ]
        },
        "items": {
          "description": "List of prometheuses. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.v1.Prometheus"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PrometheusList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "monitoring.coreos.com",
          "kind": "PrometheusList",
          "version": "v1"
        }
      ]
    },
    "com.coreos.monitoring.v1.PrometheusRule": {
      "description": "PrometheusRule defines alerting rules for a Prometheus instance",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "monitoring.coreos.com/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PrometheusRule"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of desired alerting rule definitions for Prometheus.",
          "type": "object",
          "properties": {
            "groups": {
              "description": "Content of Prometheus rule file",
              "type": "array",
              "items": {
                "description": "RuleGroup is a list of sequentially evaluated recording and alerting rules. Note: PartialResponseStrategy is only used by ThanosRuler and will be ignored by Prometheus instances.  Valid values for this field are 'warn' or 'abort'.  More info: https://github.com/thanos-io/thanos/blob/master/docs/components/rule.md#partial-response",
                "type": "object",
                "required": [
                  "name",
                  "rules"
                ],
                "properties": {
                  "interval": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "partial_response_strategy": {
                    "type": "string"
                  },
                  "rules": {
                    "type": "array",
                    "items": {
                      "description": "Rule describes an alerting or recording rule.",
                      "type": "object",
                      "required": [
                        "expr"
                      ],
                      "properties": {
                        "alert": {
                          "type": "string"
                        },
                        "annotations": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "expr": {
                          "x-kubernetes-int-or-string": true
                        },
                        "for": {
                          "type": "string"
                        },
                        "labels": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "record": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "monitoring.coreos.com",
          "kind": "PrometheusRule",
          "version": "v1"
        }
      ]
    },
    "com.coreos.monitoring.v1.PrometheusRuleList": {
      "description": "PrometheusRuleList is a list of PrometheusRule",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "monitoring.coreos.com/v1"
          ]
        },
        "items": {
          "description": "List of prometheusrules. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.v1.PrometheusRule"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PrometheusRuleList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "monitoring.coreos.com",
          "kind": "PrometheusRuleList",
          "version": "v1"
        }
      ]
    },
    "com.coreos.monitoring.v1.ServiceMonitor": {
      "description": "ServiceMonitor defines monitoring for a set of services.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "monitoring.coreos.com/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ServiceMonitor"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of desired Service selection for target discovery by Prometheus.",
          "type": "object",
          "required": [
            "endpoints",
            "selector"
          ],
          "properties": {
            "endpoints": {
              "description": "A list of endpoints allowed as part of this ServiceMonitor.",
              "type": "array",
              "items": {
                "description": "Endpoint defines a scrapeable endpoint serving Prometheus metrics.",
                "type": "object",
                "properties": {
                  "basicAuth": {
                    "description": "BasicAuth allow an endpoint to authenticate over basic authentication More info: https://prometheus.io/docs/operating/configuration/#endpoints",
                    "type": "object",
                    "properties": {
                      "password": {
                        "description": "The secret in the service monitor namespace that contains the password for authentication.",
                        "type": "object",
                        "required": [
                          "key"
                        ],
                        "properties": {
                          "key": {
                            "description": "The key of the secret to select from.  Must be a valid secret key.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          },
                          "optional": {
                            "description": "Specify whether the Secret or its key must be defined",
                            "type": "boolean"
                          }
                        }
                      },
                      "username": {
                        "description": "The secret in the service monitor namespace that contains the username for authentication.",
                        "type": "object",
                        "required": [
                          "key"
                        ],
                        "properties": {
                          "key": {
                            "description": "The key of the secret to select from.  Must be a valid secret key.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          },
                          "optional": {
                            "description": "Specify whether the Secret or its key must be defined",
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  },
                  "bearerTokenFile": {
                    "description": "File to read bearer token for scraping targets.",
                    "type": "string"
                  },
                  "bearerTokenSecret": {
                    "description": "Secret to mount to read bearer token for scraping targets. The secret needs to be in the same namespace as the service monitor and accessible by the Prometheus Operator.",
                    "type": "object",
                    "required": [
                      "key"
                    ],
                    "properties": {
                      "key": {
                        "description": "The key of the secret to select from.  Must be a valid secret key.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                        "type": "string"
                      },
                      "optional": {
                        "description": "Specify whether the Secret or its key must be defined",
                        "type": "boolean"
                      }
                    }
                  },
                  "honorLabels": {
                    "description": "HonorLabels chooses the metric's labels on collisions with target labels.",
                    "type": "boolean"
                  },
                  "honorTimestamps": {
                    "description": "HonorTimestamps controls whether Prometheus respects the timestamps present in scraped data.",
                    "type": "boolean"
                  },
                  "interval": {
                    "description": "Interval at which metrics should be scraped",
                    "type": "string"
                  },
                  "metricRelabelings": {
                    "description": "MetricRelabelConfigs to apply to samples before ingestion.",
                    "type": "array",
                    "items": {
                      "description": "RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of Prometheus configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs",
                      "type": "object",
                      "properties": {
                        "action": {
                          "description": "Action to perform based on regex matching. Default is 'replace'",
                          "type": "string"
                        },
                        "modulus": {
                          "description": "Modulus to take of the hash of the source label values.",
                          "type": "integer",
                          "format": "int64"
                        },
                        "regex": {
                          "description": "Regular expression against which the extracted value is matched. Default is '(.*)'",
                          "type": "string"
                        },
                        "replacement": {
                          "description": "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
                          "type": "string"
                        },
                        "separator": {
                          "description": "Separator placed between concatenated source label values. default is ';'.",
                          "type": "string"
                        },
                        "sourceLabels": {
                          "description": "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "targetLabel": {
                          "description": "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "params": {
                    "description": "Optional HTTP URL parameters",
                    "type": "object",
                    "additionalProperties": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "path": {
                    "description": "HTTP path to scrape for metrics.",
                    "type": "string"
                  },
                  "port": {
                    "description": "Name of the service port this endpoint refers to. Mutually exclusive with targetPort.",
                    "type": "string"
                  },
                  "proxyUrl": {
                    "description": "ProxyURL eg http://proxyserver:2195 Directs scrapes to proxy through this endpoint.",
                    "type": "string"
                  },
                  "relabelings": {
                    "description": "RelabelConfigs to apply to samples before scraping. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config",
                    "type": "array",
                    "items": {
                      "description": "RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of Prometheus configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs",
                      "type": "object",
                      "properties": {
                        "action": {
                          "description": "Action to perform based on regex matching. Default is 'replace'",
                          "type": "string"
                        },
                        "modulus": {
                          "description": "Modulus to take of the hash of the source label values.",
                          "type": "integer",
                          "format": "int64"
                        },
                        "regex": {
                          "description": "Regular expression against which the extracted value is matched. Default is '(.*)'",
                          "type": "string"
                        },
                        "replacement": {
                          "description": "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
                          "type": "string"
                        },
                        "separator": {
                          "description": "Separator placed between concatenated source label values. default is ';'.",
                          "type": "string"
                        },
                        "sourceLabels": {
                          "description": "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "targetLabel": {
                          "description": "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "scheme": {
                    "description": "HTTP scheme to use for scraping.",
                    "type": "string"
                  },
                  "scrapeTimeout": {
                    "description": "Timeout after which the scrape is ended",
                    "type": "string"
                  },
                  "targetPort": {
                    "description": "Name or number of the target port of the Pod behind the Service, the port must be specified with container port property. Mutually exclusive with port.",
                    "x-kubernetes-int-or-string": true
                  },
                  "tlsConfig": {
                    "description": "TLS configuration to use when scraping the endpoint",
                    "type": "object",
                    "properties": {
                      "ca": {
                        "description": "Stuct containing the CA cert to use for the targets.",
                        "type": "object",
                        "properties": {
                          "configMap": {
                            "description": "ConfigMap containing data to use for the targets.",
                            "type": "object",
                            "required": [
                              "key"
                            ],
                            "properties": {
                              "key": {
                                "description": "The key to select.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                "type": "string"
                              },
                              "optional": {
                                "description": "Specify whether the ConfigMap or its key must be defined",
                                "type": "boolean"
                              }
                            }
                          },
                          "secret": {
                            "description": "Secret containing data to use for the targets.",
                            "type": "object",
                            "required": [
                              "key"
                            ],
                            "properties": {
                              "key": {
                                "description": "The key of the secret to select from.  Must be a valid secret key.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                "type": "string"
                              },
                              "optional": {
                                "description": "Specify whether the Secret or its key must be defined",
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      },
                      "caFile": {
                        "description": "Path to the CA cert in the Prometheus container to use for the targets.",
                        "type": "string"
                      },
                      "cert": {
                        "description": "Struct containing the client cert file for the targets.",
                        "type": "object",
                        "properties": {
                          "configMap": {
                            "description": "ConfigMap containing data to use for the targets.",
                            "type": "object",
                            "required": [
                              "key"
                            ],
                            "properties": {
                              "key": {
                                "description": "The key to select.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                "type": "string"
                              },
                              "optional": {
                                "description": "Specify whether the ConfigMap or its key must be defined",
                                "type": "boolean"
                              }
                            }
                          },
                          "secret": {
                            "description": "Secret containing data to use for the targets.",
                            "type": "object",
                            "required": [
                              "key"
                            ],
                            "properties": {
                              "key": {
                                "description": "The key of the secret to select from.  Must be a valid secret key.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                "type": "string"
                              },
                              "optional": {
                                "description": "Specify whether the Secret or its key must be defined",
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      },
                      "certFile": {
                        "description": "Path to the client cert file in the Prometheus container for the targets.",
                        "type": "string"
                      },
                      "insecureSkipVerify": {
                        "description": "Disable target certificate validation.",
                        "type": "boolean"
                      },
                      "keyFile": {
                        "description": "Path to the client key file in the Prometheus container for the targets.",
                        "type": "string"
                      },
                      "keySecret": {
                        "description": "Secret containing the client key file for the targets.",
                        "type": "object",
                        "required": [
                          "key"
                        ],
                        "properties": {
                          "key": {
                            "description": "The key of the secret to select from.  Must be a valid secret key.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          },
                          "optional": {
                            "description": "Specify whether the Secret or its key must be defined",
                            "type": "boolean"
                          }
                        }
                      },
                      "serverName": {
                        "description": "Used to verify the hostname for the targets.",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "jobLabel": {
              "description": "The label to use to retrieve the job name from.",
              "type": "string"
            },
            "namespaceSelector": {
              "description": "Selector to select which namespaces the Endpoints objects are discovered from.",
              "type": "object",
              "properties": {
                "any": {
                  "description": "Boolean describing whether all namespaces are selected in contrast to a list restricting them.",
                  "type": "boolean"
                },
                "matchNames": {
                  "description": "List of namespace names.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "podTargetLabels": {
              "description": "PodTargetLabels transfers labels on the Kubernetes Pod onto the target.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "sampleLimit": {
              "description": "SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.",
              "type": "integer",
              "format": "int64"
            },
            "selector": {
              "description": "Selector to select Endpoints objects.",
              "type": "object",
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "type": "array",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                    "type": "object",
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "matchLabels": {
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "targetLabels": {
              "description": "TargetLabels transfers labels on the Kubernetes Service onto the target.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "monitoring.coreos.com",
          "kind": "ServiceMonitor",
          "version": "v1"
        }
      ]
    },
    "com.coreos.monitoring.v1.ServiceMonitorList": {
      "description": "ServiceMonitorList is a list of ServiceMonitor",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "monitoring.coreos.com/v1"
          ]
        },
        "items": {
          "description": "List of servicemonitors. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.v1.ServiceMonitor"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ServiceMonitorList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "monitoring.coreos.com",
          "kind": "ServiceMonitorList",
          "version": "v1"
        }
      ]
    },
    "com.coreos.monitoring.v1.ThanosRuler": {
      "description": "ThanosRuler defines a ThanosRuler deployment.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "monitoring.coreos.com/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ThanosRuler"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of the ThanosRuler cluster. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "type": "object",
          "properties": {
            "affinity": {
              "description": "If specified, the pod's scheduling constraints.",
              "type": "object",
              "properties": {
                "nodeAffinity": {
                  "description": "Describes node affinity scheduling rules for the pod.",
                  "type": "object",
                  "properties": {
                    "preferredDuringSchedulingIgnoredDuringExecution": {
                      "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
                      "type": "array",
                      "items": {
                        "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                        "type": "object",
                        "required": [
                          "preference",
                          "weight"
                        ],
                        "properties": {
                          "preference": {
                            "description": "A node selector term, associated with the corresponding weight.",
                            "type": "object",
                            "properties": {
                              "matchExpressions": {
                                "description": "A list of node selector requirements by node's labels.",
                                "type": "array",
                                "items": {
                                  "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "The label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              "matchFields": {
                                "description": "A list of node selector requirements by node's fields.",
                                "type": "array",
                                "items": {
                                  "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "The label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "weight": {
                            "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      }
                    },
                    "requiredDuringSchedulingIgnoredDuringExecution": {
                      "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.",
                      "type": "object",
                      "required": [
                        "nodeSelectorTerms"
                      ],
                      "properties": {
                        "nodeSelectorTerms": {
                          "description": "Required. A list of node selector terms. The terms are ORed.",
                          "type": "array",
                          "items": {
                            "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                            "type": "object",
                            "properties": {
                              "matchExpressions": {
                                "description": "A list of node selector requirements by node's labels.",
                                "type": "array",
                                "items": {
                                  "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "The label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              "matchFields": {
                                "description": "A list of node selector requirements by node's fields.",
                                "type": "array",
                                "items": {
                                  "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "The label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "podAffinity": {
                  "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).",
                  "type": "object",
                  "properties": {
                    "preferredDuringSchedulingIgnoredDuringExecution": {
                      "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                      "type": "array",
                      "items": {
                        "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                        "type": "object",
                        "required": [
                          "podAffinityTerm",
                          "weight"
                        ],
                        "properties": {
                          "podAffinityTerm": {
                            "description": "Required. A pod affinity term, associated with the corresponding weight.",
                            "type": "object",
                            "required": [
                              "topologyKey"
                            ],
                            "properties": {
                              "labelSelector": {
                                "description": "A label query over a set of resources, in this case pods.",
                                "type": "object",
                                "properties": {
                                  "matchExpressions": {
                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                    "type": "array",
                                    "items": {
                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                      "type": "object",
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "description": "key is the label key that the selector applies to.",
                                          "type": "string"
                                        },
                                        "operator": {
                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                          "type": "string"
                                        },
                                        "values": {
                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "matchLabels": {
                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "namespaces": {
                                "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "topologyKey": {
                                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                "type": "string"
                              }
                            }
                          },
                          "weight": {
                            "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      }
                    },
                    "requiredDuringSchedulingIgnoredDuringExecution": {
                      "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                      "type": "array",
                      "items": {
                        "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                        "type": "object",
                        "required": [
                          "topologyKey"
                        ],
                        "properties": {
                          "labelSelector": {
                            "description": "A label query over a set of resources, in this case pods.",
                            "type": "object",
                            "properties": {
                              "matchExpressions": {
                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                "type": "array",
                                "items": {
                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "key is the label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              "matchLabels": {
                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "namespaces": {
                            "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "topologyKey": {
                            "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "podAntiAffinity": {
                  "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).",
                  "type": "object",
                  "properties": {
                    "preferredDuringSchedulingIgnoredDuringExecution": {
                      "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                      "type": "array",
                      "items": {
                        "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                        "type": "object",
                        "required": [
                          "podAffinityTerm",
                          "weight"
                        ],
                        "properties": {
                          "podAffinityTerm": {
                            "description": "Required. A pod affinity term, associated with the corresponding weight.",
                            "type": "object",
                            "required": [
                              "topologyKey"
                            ],
                            "properties": {
                              "labelSelector": {
                                "description": "A label query over a set of resources, in this case pods.",
                                "type": "object",
                                "properties": {
                                  "matchExpressions": {
                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                    "type": "array",
                                    "items": {
                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                      "type": "object",
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "description": "key is the label key that the selector applies to.",
                                          "type": "string"
                                        },
                                        "operator": {
                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                          "type": "string"
                                        },
                                        "values": {
                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "matchLabels": {
                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "namespaces": {
                                "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "topologyKey": {
                                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                "type": "string"
                              }
                            }
                          },
                          "weight": {
                            "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      }
                    },
                    "requiredDuringSchedulingIgnoredDuringExecution": {
                      "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                      "type": "array",
                      "items": {
                        "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                        "type": "object",
                        "required": [
                          "topologyKey"
                        ],
                        "properties": {
                          "labelSelector": {
                            "description": "A label query over a set of resources, in this case pods.",
                            "type": "object",
                            "properties": {
                              "matchExpressions": {
                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                "type": "array",
                                "items": {
                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "key is the label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              "matchLabels": {
                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "namespaces": {
                            "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "topologyKey": {
                            "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "alertDropLabels": {
              "description": "AlertDropLabels configure the label names which should be dropped in ThanosRuler alerts. If `labels` field is not provided, `thanos_ruler_replica` will be dropped in alerts by default.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "alertQueryUrl": {
              "description": "The external Query URL the Thanos Ruler will set in the 'Source' field of all alerts. Maps to the '--alert.query-url' CLI arg.",
              "type": "string"
            },
            "alertmanagersConfig": {
              "description": "Define configuration for connecting to alertmanager.  Only available with thanos v0.10.0 and higher.  Maps to the `alertmanagers.config` arg.",
              "type": "object",
              "required": [
                "key"
              ],
              "properties": {
                "key": {
                  "description": "The key of the secret to select from.  Must be a valid secret key.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                  "type": "string"
                },
                "optional": {
                  "description": "Specify whether the Secret or its key must be defined",
                  "type": "boolean"
                }
              }
            },
            "alertmanagersUrl": {
              "description": "Define URLs to send alerts to Alertmanager.  For Thanos v0.10.0 and higher, AlertManagersConfig should be used instead.  Note: this field will be ignored if AlertManagersConfig is specified. Maps to the `alertmanagers.url` arg.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "containers": {
              "description": "Containers allows injecting additional containers or modifying operator generated containers. This can be used to allow adding an authentication proxy to a ThanosRuler pod or to change the behavior of an operator generated container. Containers described here modify an operator generated container if they share the same name and modifications are done via a strategic merge patch. The current container names are: `thanos-ruler` and `rules-configmap-reloader`. Overriding containers is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.",
              "type": "array",
              "items": {
                "description": "A single application container that you want to run within a pod.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "args": {
                    "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "command": {
                    "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "env": {
                    "description": "List of environment variables to set in the container. Cannot be updated.",
                    "type": "array",
                    "items": {
                      "description": "EnvVar represents an environment variable present in a Container.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
                          "type": "string"
                        },
                        "valueFrom": {
                          "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                          "type": "object",
                          "properties": {
                            "configMapKeyRef": {
                              "description": "Selects a key of a ConfigMap.",
                              "type": "object",
                              "required": [
                                "key"
                              ],
                              "properties": {
                                "key": {
                                  "description": "The key to select.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                },
                                "optional": {
                                  "description": "Specify whether the ConfigMap or its key must be defined",
                                  "type": "boolean"
                                }
                              }
                            },
                            "fieldRef": {
                              "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                              "type": "object",
                              "required": [
                                "fieldPath"
                              ],
                              "properties": {
                                "apiVersion": {
                                  "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                  "type": "string"
                                },
                                "fieldPath": {
                                  "description": "Path of the field to select in the specified API version.",
                                  "type": "string"
                                }
                              }
                            },
                            "resourceFieldRef": {
                              "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                              "type": "object",
                              "required": [
                                "resource"
                              ],
                              "properties": {
                                "containerName": {
                                  "description": "Container name: required for volumes, optional for env vars",
                                  "type": "string"
                                },
                                "divisor": {
                                  "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                  "type": "string"
                                },
                                "resource": {
                                  "description": "Required: resource to select",
                                  "type": "string"
                                }
                              }
                            },
                            "secretKeyRef": {
                              "description": "Selects a key of a secret in the pod's namespace",
                              "type": "object",
                              "required": [
                                "key"
                              ],
                              "properties": {
                                "key": {
                                  "description": "The key of the secret to select from.  Must be a valid secret key.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                },
                                "optional": {
                                  "description": "Specify whether the Secret or its key must be defined",
                                  "type": "boolean"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "envFrom": {
                    "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                    "type": "array",
                    "items": {
                      "description": "EnvFromSource represents the source of a set of ConfigMaps",
                      "type": "object",
                      "properties": {
                        "configMapRef": {
                          "description": "The ConfigMap to select from",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            },
                            "optional": {
                              "description": "Specify whether the ConfigMap must be defined",
                              "type": "boolean"
                            }
                          }
                        },
                        "prefix": {
                          "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
                          "type": "string"
                        },
                        "secretRef": {
                          "description": "The Secret to select from",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            },
                            "optional": {
                              "description": "Specify whether the Secret must be defined",
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  },
                  "image": {
                    "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
                    "type": "string"
                  },
                  "imagePullPolicy": {
                    "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                    "type": "string"
                  },
                  "lifecycle": {
                    "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated.",
                    "type": "object",
                    "properties": {
                      "postStart": {
                        "description": "PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                        "type": "object",
                        "properties": {
                          "exec": {
                            "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                            "type": "object",
                            "properties": {
                              "command": {
                                "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "httpGet": {
                            "description": "HTTPGet specifies the http request to perform.",
                            "type": "object",
                            "required": [
                              "port"
                            ],
                            "properties": {
                              "host": {
                                "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                "type": "string"
                              },
                              "httpHeaders": {
                                "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                "type": "array",
                                "items": {
                                  "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "value"
                                  ],
                                  "properties": {
                                    "name": {
                                      "description": "The header field name",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The header field value",
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "path": {
                                "description": "Path to access on the HTTP server.",
                                "type": "string"
                              },
                              "port": {
                                "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                "x-kubernetes-int-or-string": true
                              },
                              "scheme": {
                                "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                "type": "string"
                              }
                            }
                          },
                          "tcpSocket": {
                            "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                            "type": "object",
                            "required": [
                              "port"
                            ],
                            "properties": {
                              "host": {
                                "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                "type": "string"
                              },
                              "port": {
                                "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                "x-kubernetes-int-or-string": true
                              }
                            }
                          }
                        }
                      },
                      "preStop": {
                        "description": "PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                        "type": "object",
                        "properties": {
                          "exec": {
                            "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                            "type": "object",
                            "properties": {
                              "command": {
                                "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "httpGet": {
                            "description": "HTTPGet specifies the http request to perform.",
                            "type": "object",
                            "required": [
                              "port"
                            ],
                            "properties": {
                              "host": {
                                "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                "type": "string"
                              },
                              "httpHeaders": {
                                "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                "type": "array",
                                "items": {
                                  "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "value"
                                  ],
                                  "properties": {
                                    "name": {
                                      "description": "The header field name",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The header field value",
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "path": {
                                "description": "Path to access on the HTTP server.",
                                "type": "string"
                              },
                              "port": {
                                "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                "x-kubernetes-int-or-string": true
                              },
                              "scheme": {
                                "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                "type": "string"
                              }
                            }
                          },
                          "tcpSocket": {
                            "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                            "type": "object",
                            "required": [
                              "port"
                            ],
                            "properties": {
                              "host": {
                                "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                "type": "string"
                              },
                              "port": {
                                "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                "x-kubernetes-int-or-string": true
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "livenessProbe": {
                    "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "type": "object",
                    "properties": {
                      "exec": {
                        "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                        "type": "object",
                        "properties": {
                          "command": {
                            "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "failureThreshold": {
                        "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "httpGet": {
                        "description": "HTTPGet specifies the http request to perform.",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                            "type": "string"
                          },
                          "httpHeaders": {
                            "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                            "type": "array",
                            "items": {
                              "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                              "type": "object",
                              "required": [
                                "name",
                                "value"
                              ],
                              "properties": {
                                "name": {
                                  "description": "The header field name",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "The header field value",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "path": {
                            "description": "Path to access on the HTTP server.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          },
                          "scheme": {
                            "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                            "type": "string"
                          }
                        }
                      },
                      "initialDelaySeconds": {
                        "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      },
                      "periodSeconds": {
                        "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "successThreshold": {
                        "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "tcpSocket": {
                        "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Optional: Host name to connect to, defaults to the pod IP.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      },
                      "timeoutSeconds": {
                        "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "name": {
                    "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
                    "type": "string"
                  },
                  "ports": {
                    "description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
                    "type": "array",
                    "items": {
                      "description": "ContainerPort represents a network port in a single container.",
                      "type": "object",
                      "required": [
                        "containerPort"
                      ],
                      "properties": {
                        "containerPort": {
                          "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "hostIP": {
                          "description": "What host IP to bind the external port to.",
                          "type": "string"
                        },
                        "hostPort": {
                          "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "name": {
                          "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.",
                          "type": "string"
                        },
                        "protocol": {
                          "description": "Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "readinessProbe": {
                    "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "type": "object",
                    "properties": {
                      "exec": {
                        "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                        "type": "object",
                        "properties": {
                          "command": {
                            "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "failureThreshold": {
                        "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "httpGet": {
                        "description": "HTTPGet specifies the http request to perform.",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                            "type": "string"
                          },
                          "httpHeaders": {
                            "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                            "type": "array",
                            "items": {
                              "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                              "type": "object",
                              "required": [
                                "name",
                                "value"
                              ],
                              "properties": {
                                "name": {
                                  "description": "The header field name",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "The header field value",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "path": {
                            "description": "Path to access on the HTTP server.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          },
                          "scheme": {
                            "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                            "type": "string"
                          }
                        }
                      },
                      "initialDelaySeconds": {
                        "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      },
                      "periodSeconds": {
                        "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "successThreshold": {
                        "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "tcpSocket": {
                        "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Optional: Host name to connect to, defaults to the pod IP.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      },
                      "timeoutSeconds": {
                        "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "resources": {
                    "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                    "type": "object",
                    "properties": {
                      "limits": {
                        "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "requests": {
                        "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "securityContext": {
                    "description": "Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                    "type": "object",
                    "properties": {
                      "allowPrivilegeEscalation": {
                        "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN",
                        "type": "boolean"
                      },
                      "capabilities": {
                        "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.",
                        "type": "object",
                        "properties": {
                          "add": {
                            "description": "Added capabilities",
                            "type": "array",
                            "items": {
                              "description": "Capability represent POSIX capabilities type",
                              "type": "string"
                            }
                          },
                          "drop": {
                            "description": "Removed capabilities",
                            "type": "array",
                            "items": {
                              "description": "Capability represent POSIX capabilities type",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "privileged": {
                        "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.",
                        "type": "boolean"
                      },
                      "procMount": {
                        "description": "procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.",
                        "type": "string"
                      },
                      "readOnlyRootFilesystem": {
                        "description": "Whether this container has a read-only root filesystem. Default is false.",
                        "type": "boolean"
                      },
                      "runAsGroup": {
                        "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "runAsNonRoot": {
                        "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                        "type": "boolean"
                      },
                      "runAsUser": {
                        "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "seLinuxOptions": {
                        "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                        "type": "object",
                        "properties": {
                          "level": {
                            "description": "Level is SELinux level label that applies to the container.",
                            "type": "string"
                          },
                          "role": {
                            "description": "Role is a SELinux role label that applies to the container.",
                            "type": "string"
                          },
                          "type": {
                            "description": "Type is a SELinux type label that applies to the container.",
                            "type": "string"
                          },
                          "user": {
                            "description": "User is a SELinux user label that applies to the container.",
                            "type": "string"
                          }
                        }
                      },
                      "windowsOptions": {
                        "description": "The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                        "type": "object",
                        "properties": {
                          "gmsaCredentialSpec": {
                            "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
                            "type": "string"
                          },
                          "gmsaCredentialSpecName": {
                            "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                            "type": "string"
                          },
                          "runAsUserName": {
                            "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "startupProbe": {
                    "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "type": "object",
                    "properties": {
                      "exec": {
                        "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                        "type": "object",
                        "properties": {
                          "command": {
                            "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "failureThreshold": {
                        "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "httpGet": {
                        "description": "HTTPGet specifies the http request to perform.",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                            "type": "string"
                          },
                          "httpHeaders": {
                            "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                            "type": "array",
                            "items": {
                              "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                              "type": "object",
                              "required": [
                                "name",
                                "value"
                              ],
                              "properties": {
                                "name": {
                                  "description": "The header field name",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "The header field value",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "path": {
                            "description": "Path to access on the HTTP server.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          },
                          "scheme": {
                            "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                            "type": "string"
                          }
                        }
                      },
                      "initialDelaySeconds": {
                        "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      },
                      "periodSeconds": {
                        "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "successThreshold": {
                        "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "tcpSocket": {
                        "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Optional: Host name to connect to, defaults to the pod IP.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      },
                      "timeoutSeconds": {
                        "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "stdin": {
                    "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
                    "type": "boolean"
                  },
                  "stdinOnce": {
                    "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
                    "type": "boolean"
                  },
                  "terminationMessagePath": {
                    "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                    "type": "string"
                  },
                  "terminationMessagePolicy": {
                    "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
                    "type": "string"
                  },
                  "tty": {
                    "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                    "type": "boolean"
                  },
                  "volumeDevices": {
                    "description": "volumeDevices is the list of block devices to be used by the container.",
                    "type": "array",
                    "items": {
                      "description": "volumeDevice describes a mapping of a raw block device within a container.",
                      "type": "object",
                      "required": [
                        "devicePath",
                        "name"
                      ],
                      "properties": {
                        "devicePath": {
                          "description": "devicePath is the path inside of the container that the device will be mapped to.",
                          "type": "string"
                        },
                        "name": {
                          "description": "name must match the name of a persistentVolumeClaim in the pod",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "volumeMounts": {
                    "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                    "type": "array",
                    "items": {
                      "description": "VolumeMount describes a mounting of a Volume within a container.",
                      "type": "object",
                      "required": [
                        "mountPath",
                        "name"
                      ],
                      "properties": {
                        "mountPath": {
                          "description": "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                          "type": "string"
                        },
                        "mountPropagation": {
                          "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
                          "type": "string"
                        },
                        "name": {
                          "description": "This must match the Name of a Volume.",
                          "type": "string"
                        },
                        "readOnly": {
                          "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
                          "type": "boolean"
                        },
                        "subPath": {
                          "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
                          "type": "string"
                        },
                        "subPathExpr": {
                          "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "workingDir": {
                    "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                    "type": "string"
                  }
                }
              }
            },
            "enforcedNamespaceLabel": {
              "description": "EnforcedNamespaceLabel enforces adding a namespace label of origin for each alert and metric that is user created. The label value will always be the namespace of the object that is being created.",
              "type": "string"
            },
            "evaluationInterval": {
              "description": "Interval between consecutive evaluations.",
              "type": "string"
            },
            "externalPrefix": {
              "description": "The external URL the Thanos Ruler instances will be available under. This is necessary to generate correct URLs. This is necessary if Thanos Ruler is not served from root of a DNS name.",
              "type": "string"
            },
            "grpcServerTlsConfig": {
              "description": "GRPCServerTLSConfig configures the gRPC server from which Thanos Querier reads recorded rule data. Note: Currently only the CAFile, CertFile, and KeyFile fields are supported. Maps to the '--grpc-server-tls-*' CLI args.",
              "type": "object",
              "properties": {
                "ca": {
                  "description": "Stuct containing the CA cert to use for the targets.",
                  "type": "object",
                  "properties": {
                    "configMap": {
                      "description": "ConfigMap containing data to use for the targets.",
                      "type": "object",
                      "required": [
                        "key"
                      ],
                      "properties": {
                        "key": {
                          "description": "The key to select.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                          "type": "string"
                        },
                        "optional": {
                          "description": "Specify whether the ConfigMap or its key must be defined",
                          "type": "boolean"
                        }
                      }
                    },
                    "secret": {
                      "description": "Secret containing data to use for the targets.",
                      "type": "object",
                      "required": [
                        "key"
                      ],
                      "properties": {
                        "key": {
                          "description": "The key of the secret to select from.  Must be a valid secret key.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                          "type": "string"
                        },
                        "optional": {
                          "description": "Specify whether the Secret or its key must be defined",
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "caFile": {
                  "description": "Path to the CA cert in the Prometheus container to use for the targets.",
                  "type": "string"
                },
                "cert": {
                  "description": "Struct containing the client cert file for the targets.",
                  "type": "object",
                  "properties": {
                    "configMap": {
                      "description": "ConfigMap containing data to use for the targets.",
                      "type": "object",
                      "required": [
                        "key"
                      ],
                      "properties": {
                        "key": {
                          "description": "The key to select.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                          "type": "string"
                        },
                        "optional": {
                          "description": "Specify whether the ConfigMap or its key must be defined",
                          "type": "boolean"
                        }
                      }
                    },
                    "secret": {
                      "description": "Secret containing data to use for the targets.",
                      "type": "object",
                      "required": [
                        "key"
                      ],
                      "properties": {
                        "key": {
                          "description": "The key of the secret to select from.  Must be a valid secret key.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                          "type": "string"
                        },
                        "optional": {
                          "description": "Specify whether the Secret or its key must be defined",
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "certFile": {
                  "description": "Path to the client cert file in the Prometheus container for the targets.",
                  "type": "string"
                },
                "insecureSkipVerify": {
                  "description": "Disable target certificate validation.",
                  "type": "boolean"
                },
                "keyFile": {
                  "description": "Path to the client key file in the Prometheus container for the targets.",
                  "type": "string"
                },
                "keySecret": {
                  "description": "Secret containing the client key file for the targets.",
                  "type": "object",
                  "required": [
                    "key"
                  ],
                  "properties": {
                    "key": {
                      "description": "The key of the secret to select from.  Must be a valid secret key.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                      "type": "string"
                    },
                    "optional": {
                      "description": "Specify whether the Secret or its key must be defined",
                      "type": "boolean"
                    }
                  }
                },
                "serverName": {
                  "description": "Used to verify the hostname for the targets.",
                  "type": "string"
                }
              }
            },
            "image": {
              "description": "Thanos container image URL.",
              "type": "string"
            },
            "imagePullSecrets": {
              "description": "An optional list of references to secrets in the same namespace to use for pulling thanos images from registries see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod",
              "type": "array",
              "items": {
                "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                    "type": "string"
                  }
                }
              }
            },
            "initContainers": {
              "description": "InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the ThanosRuler configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ Using initContainers for any use case other then secret fetching is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.",
              "type": "array",
              "items": {
                "description": "A single application container that you want to run within a pod.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "args": {
                    "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "command": {
                    "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "env": {
                    "description": "List of environment variables to set in the container. Cannot be updated.",
                    "type": "array",
                    "items": {
                      "description": "EnvVar represents an environment variable present in a Container.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
                          "type": "string"
                        },
                        "valueFrom": {
                          "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                          "type": "object",
                          "properties": {
                            "configMapKeyRef": {
                              "description": "Selects a key of a ConfigMap.",
                              "type": "object",
                              "required": [
                                "key"
                              ],
                              "properties": {
                                "key": {
                                  "description": "The key to select.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                },
                                "optional": {
                                  "description": "Specify whether the ConfigMap or its key must be defined",
                                  "type": "boolean"
                                }
                              }
                            },
                            "fieldRef": {
                              "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                              "type": "object",
                              "required": [
                                "fieldPath"
                              ],
                              "properties": {
                                "apiVersion": {
                                  "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                  "type": "string"
                                },
                                "fieldPath": {
                                  "description": "Path of the field to select in the specified API version.",
                                  "type": "string"
                                }
                              }
                            },
                            "resourceFieldRef": {
                              "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                              "type": "object",
                              "required": [
                                "resource"
                              ],
                              "properties": {
                                "containerName": {
                                  "description": "Container name: required for volumes, optional for env vars",
                                  "type": "string"
                                },
                                "divisor": {
                                  "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                  "type": "string"
                                },
                                "resource": {
                                  "description": "Required: resource to select",
                                  "type": "string"
                                }
                              }
                            },
                            "secretKeyRef": {
                              "description": "Selects a key of a secret in the pod's namespace",
                              "type": "object",
                              "required": [
                                "key"
                              ],
                              "properties": {
                                "key": {
                                  "description": "The key of the secret to select from.  Must be a valid secret key.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                },
                                "optional": {
                                  "description": "Specify whether the Secret or its key must be defined",
                                  "type": "boolean"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "envFrom": {
                    "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                    "type": "array",
                    "items": {
                      "description": "EnvFromSource represents the source of a set of ConfigMaps",
                      "type": "object",
                      "properties": {
                        "configMapRef": {
                          "description": "The ConfigMap to select from",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            },
                            "optional": {
                              "description": "Specify whether the ConfigMap must be defined",
                              "type": "boolean"
                            }
                          }
                        },
                        "prefix": {
                          "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
                          "type": "string"
                        },
                        "secretRef": {
                          "description": "The Secret to select from",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            },
                            "optional": {
                              "description": "Specify whether the Secret must be defined",
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  },
                  "image": {
                    "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
                    "type": "string"
                  },
                  "imagePullPolicy": {
                    "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                    "type": "string"
                  },
                  "lifecycle": {
                    "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated.",
                    "type": "object",
                    "properties": {
                      "postStart": {
                        "description": "PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                        "type": "object",
                        "properties": {
                          "exec": {
                            "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                            "type": "object",
                            "properties": {
                              "command": {
                                "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "httpGet": {
                            "description": "HTTPGet specifies the http request to perform.",
                            "type": "object",
                            "required": [
                              "port"
                            ],
                            "properties": {
                              "host": {
                                "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                "type": "string"
                              },
                              "httpHeaders": {
                                "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                "type": "array",
                                "items": {
                                  "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "value"
                                  ],
                                  "properties": {
                                    "name": {
                                      "description": "The header field name",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The header field value",
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "path": {
                                "description": "Path to access on the HTTP server.",
                                "type": "string"
                              },
                              "port": {
                                "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                "x-kubernetes-int-or-string": true
                              },
                              "scheme": {
                                "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                "type": "string"
                              }
                            }
                          },
                          "tcpSocket": {
                            "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                            "type": "object",
                            "required": [
                              "port"
                            ],
                            "properties": {
                              "host": {
                                "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                "type": "string"
                              },
                              "port": {
                                "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                "x-kubernetes-int-or-string": true
                              }
                            }
                          }
                        }
                      },
                      "preStop": {
                        "description": "PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                        "type": "object",
                        "properties": {
                          "exec": {
                            "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                            "type": "object",
                            "properties": {
                              "command": {
                                "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "httpGet": {
                            "description": "HTTPGet specifies the http request to perform.",
                            "type": "object",
                            "required": [
                              "port"
                            ],
                            "properties": {
                              "host": {
                                "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                "type": "string"
                              },
                              "httpHeaders": {
                                "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                "type": "array",
                                "items": {
                                  "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "value"
                                  ],
                                  "properties": {
                                    "name": {
                                      "description": "The header field name",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The header field value",
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "path": {
                                "description": "Path to access on the HTTP server.",
                                "type": "string"
                              },
                              "port": {
                                "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                "x-kubernetes-int-or-string": true
                              },
                              "scheme": {
                                "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                "type": "string"
                              }
                            }
                          },
                          "tcpSocket": {
                            "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                            "type": "object",
                            "required": [
                              "port"
                            ],
                            "properties": {
                              "host": {
                                "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                "type": "string"
                              },
                              "port": {
                                "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                "x-kubernetes-int-or-string": true
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "livenessProbe": {
                    "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "type": "object",
                    "properties": {
                      "exec": {
                        "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                        "type": "object",
                        "properties": {
                          "command": {
                            "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "failureThreshold": {
                        "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "httpGet": {
                        "description": "HTTPGet specifies the http request to perform.",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                            "type": "string"
                          },
                          "httpHeaders": {
                            "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                            "type": "array",
                            "items": {
                              "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                              "type": "object",
                              "required": [
                                "name",
                                "value"
                              ],
                              "properties": {
                                "name": {
                                  "description": "The header field name",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "The header field value",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "path": {
                            "description": "Path to access on the HTTP server.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          },
                          "scheme": {
                            "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                            "type": "string"
                          }
                        }
                      },
                      "initialDelaySeconds": {
                        "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      },
                      "periodSeconds": {
                        "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "successThreshold": {
                        "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "tcpSocket": {
                        "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Optional: Host name to connect to, defaults to the pod IP.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      },
                      "timeoutSeconds": {
                        "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "name": {
                    "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
                    "type": "string"
                  },
                  "ports": {
                    "description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
                    "type": "array",
                    "items": {
                      "description": "ContainerPort represents a network port in a single container.",
                      "type": "object",
                      "required": [
                        "containerPort"
                      ],
                      "properties": {
                        "containerPort": {
                          "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "hostIP": {
                          "description": "What host IP to bind the external port to.",
                          "type": "string"
                        },
                        "hostPort": {
                          "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "name": {
                          "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.",
                          "type": "string"
                        },
                        "protocol": {
                          "description": "Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "readinessProbe": {
                    "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "type": "object",
                    "properties": {
                      "exec": {
                        "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                        "type": "object",
                        "properties": {
                          "command": {
                            "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "failureThreshold": {
                        "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "httpGet": {
                        "description": "HTTPGet specifies the http request to perform.",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                            "type": "string"
                          },
                          "httpHeaders": {
                            "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                            "type": "array",
                            "items": {
                              "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                              "type": "object",
                              "required": [
                                "name",
                                "value"
                              ],
                              "properties": {
                                "name": {
                                  "description": "The header field name",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "The header field value",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "path": {
                            "description": "Path to access on the HTTP server.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          },
                          "scheme": {
                            "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                            "type": "string"
                          }
                        }
                      },
                      "initialDelaySeconds": {
                        "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      },
                      "periodSeconds": {
                        "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "successThreshold": {
                        "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "tcpSocket": {
                        "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Optional: Host name to connect to, defaults to the pod IP.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      },
                      "timeoutSeconds": {
                        "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "resources": {
                    "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                    "type": "object",
                    "properties": {
                      "limits": {
                        "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "requests": {
                        "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "securityContext": {
                    "description": "Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                    "type": "object",
                    "properties": {
                      "allowPrivilegeEscalation": {
                        "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN",
                        "type": "boolean"
                      },
                      "capabilities": {
                        "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.",
                        "type": "object",
                        "properties": {
                          "add": {
                            "description": "Added capabilities",
                            "type": "array",
                            "items": {
                              "description": "Capability represent POSIX capabilities type",
                              "type": "string"
                            }
                          },
                          "drop": {
                            "description": "Removed capabilities",
                            "type": "array",
                            "items": {
                              "description": "Capability represent POSIX capabilities type",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "privileged": {
                        "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.",
                        "type": "boolean"
                      },
                      "procMount": {
                        "description": "procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.",
                        "type": "string"
                      },
                      "readOnlyRootFilesystem": {
                        "description": "Whether this container has a read-only root filesystem. Default is false.",
                        "type": "boolean"
                      },
                      "runAsGroup": {
                        "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "runAsNonRoot": {
                        "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                        "type": "boolean"
                      },
                      "runAsUser": {
                        "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "seLinuxOptions": {
                        "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                        "type": "object",
                        "properties": {
                          "level": {
                            "description": "Level is SELinux level label that applies to the container.",
                            "type": "string"
                          },
                          "role": {
                            "description": "Role is a SELinux role label that applies to the container.",
                            "type": "string"
                          },
                          "type": {
                            "description": "Type is a SELinux type label that applies to the container.",
                            "type": "string"
                          },
                          "user": {
                            "description": "User is a SELinux user label that applies to the container.",
                            "type": "string"
                          }
                        }
                      },
                      "windowsOptions": {
                        "description": "The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                        "type": "object",
                        "properties": {
                          "gmsaCredentialSpec": {
                            "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
                            "type": "string"
                          },
                          "gmsaCredentialSpecName": {
                            "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                            "type": "string"
                          },
                          "runAsUserName": {
                            "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "startupProbe": {
                    "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "type": "object",
                    "properties": {
                      "exec": {
                        "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                        "type": "object",
                        "properties": {
                          "command": {
                            "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "failureThreshold": {
                        "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "httpGet": {
                        "description": "HTTPGet specifies the http request to perform.",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                            "type": "string"
                          },
                          "httpHeaders": {
                            "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                            "type": "array",
                            "items": {
                              "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                              "type": "object",
                              "required": [
                                "name",
                                "value"
                              ],
                              "properties": {
                                "name": {
                                  "description": "The header field name",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "The header field value",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "path": {
                            "description": "Path to access on the HTTP server.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          },
                          "scheme": {
                            "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                            "type": "string"
                          }
                        }
                      },
                      "initialDelaySeconds": {
                        "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      },
                      "periodSeconds": {
                        "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "successThreshold": {
                        "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "tcpSocket": {
                        "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Optional: Host name to connect to, defaults to the pod IP.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      },
                      "timeoutSeconds": {
                        "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  },
                  "stdin": {
                    "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
                    "type": "boolean"
                  },
                  "stdinOnce": {
                    "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
                    "type": "boolean"
                  },
                  "terminationMessagePath": {
                    "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                    "type": "string"
                  },
                  "terminationMessagePolicy": {
                    "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
                    "type": "string"
                  },
                  "tty": {
                    "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                    "type": "boolean"
                  },
                  "volumeDevices": {
                    "description": "volumeDevices is the list of block devices to be used by the container.",
                    "type": "array",
                    "items": {
                      "description": "volumeDevice describes a mapping of a raw block device within a container.",
                      "type": "object",
                      "required": [
                        "devicePath",
                        "name"
                      ],
                      "properties": {
                        "devicePath": {
                          "description": "devicePath is the path inside of the container that the device will be mapped to.",
                          "type": "string"
                        },
                        "name": {
                          "description": "name must match the name of a persistentVolumeClaim in the pod",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "volumeMounts": {
                    "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                    "type": "array",
                    "items": {
                      "description": "VolumeMount describes a mounting of a Volume within a container.",
                      "type": "object",
                      "required": [
                        "mountPath",
                        "name"
                      ],
                      "properties": {
                        "mountPath": {
                          "description": "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                          "type": "string"
                        },
                        "mountPropagation": {
                          "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
                          "type": "string"
                        },
                        "name": {
                          "description": "This must match the Name of a Volume.",
                          "type": "string"
                        },
                        "readOnly": {
                          "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
                          "type": "boolean"
                        },
                        "subPath": {
                          "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
                          "type": "string"
                        },
                        "subPathExpr": {
                          "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "workingDir": {
                    "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                    "type": "string"
                  }
                }
              }
            },
            "labels": {
              "description": "Labels configure the external label pairs to ThanosRuler. If not provided, default replica label `thanos_ruler_replica` will be added as a label and be dropped in alerts.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "listenLocal": {
              "description": "ListenLocal makes the Thanos ruler listen on loopback, so that it does not bind against the Pod IP.",
              "type": "boolean"
            },
            "logFormat": {
              "description": "Log format for ThanosRuler to be configured with.",
              "type": "string"
            },
            "logLevel": {
              "description": "Log level for ThanosRuler to be configured with.",
              "type": "string"
            },
            "nodeSelector": {
              "description": "Define which Nodes the Pods are scheduled on.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "objectStorageConfig": {
              "description": "ObjectStorageConfig configures object storage in Thanos.",
              "type": "object",
              "required": [
                "key"
              ],
              "properties": {
                "key": {
                  "description": "The key of the secret to select from.  Must be a valid secret key.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                  "type": "string"
                },
                "optional": {
                  "description": "Specify whether the Secret or its key must be defined",
                  "type": "boolean"
                }
              }
            },
            "paused": {
              "description": "When a ThanosRuler deployment is paused, no actions except for deletion will be performed on the underlying objects.",
              "type": "boolean"
            },
            "podMetadata": {
              "description": "PodMetadata contains Labels and Annotations gets propagated to the thanos ruler pods.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labels": {
                  "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "name": {
                  "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                  "type": "string"
                }
              }
            },
            "portName": {
              "description": "Port name used for the pods and governing service. This defaults to web",
              "type": "string"
            },
            "priorityClassName": {
              "description": "Priority class assigned to the Pods",
              "type": "string"
            },
            "prometheusRulesExcludedFromEnforce": {
              "description": "PrometheusRulesExcludedFromEnforce - list of Prometheus rules to be excluded from enforcing of adding namespace labels. Works only if enforcedNamespaceLabel set to true. Make sure both ruleNamespace and ruleName are set for each pair",
              "type": "array",
              "items": {
                "description": "PrometheusRuleExcludeConfig enables users to configure excluded PrometheusRule names and their namespaces to be ignored while enforcing namespace label for alerts and metrics.",
                "type": "object",
                "required": [
                  "ruleName",
                  "ruleNamespace"
                ],
                "properties": {
                  "ruleName": {
                    "description": "RuleNamespace - name of excluded rule",
                    "type": "string"
                  },
                  "ruleNamespace": {
                    "description": "RuleNamespace - namespace of excluded rule",
                    "type": "string"
                  }
                }
              }
            },
            "queryConfig": {
              "description": "Define configuration for connecting to thanos query instances. If this is defined, the QueryEndpoints field will be ignored. Maps to the `query.config` CLI argument. Only available with thanos v0.11.0 and higher.",
              "type": "object",
              "required": [
                "key"
              ],
              "properties": {
                "key": {
                  "description": "The key of the secret to select from.  Must be a valid secret key.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                  "type": "string"
                },
                "optional": {
                  "description": "Specify whether the Secret or its key must be defined",
                  "type": "boolean"
                }
              }
            },
            "queryEndpoints": {
              "description": "QueryEndpoints defines Thanos querier endpoints from which to query metrics. Maps to the --query flag of thanos ruler.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "replicas": {
              "description": "Number of thanos ruler instances to deploy.",
              "type": "integer",
              "format": "int32"
            },
            "resources": {
              "description": "Resources defines the resource requirements for single Pods. If not provided, no requests/limits will be set",
              "type": "object",
              "properties": {
                "limits": {
                  "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "requests": {
                  "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "retention": {
              "description": "Time duration ThanosRuler shall retain data for. Default is '24h', and must match the regular expression `[0-9]+(ms|s|m|h|d|w|y)` (milliseconds seconds minutes hours days weeks years).",
              "type": "string"
            },
            "routePrefix": {
              "description": "The route prefix ThanosRuler registers HTTP handlers for. This allows thanos UI to be served on a sub-path.",
              "type": "string"
            },
            "ruleNamespaceSelector": {
              "description": "Namespaces to be selected for Rules discovery. If unspecified, only the same namespace as the ThanosRuler object is in is used.",
              "type": "object",
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "type": "array",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                    "type": "object",
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "matchLabels": {
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "ruleSelector": {
              "description": "A label selector to select which PrometheusRules to mount for alerting and recording.",
              "type": "object",
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "type": "array",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                    "type": "object",
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "matchLabels": {
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "securityContext": {
              "description": "SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext.",
              "type": "object",
              "properties": {
                "fsGroup": {
                  "description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: \n 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- \n If unset, the Kubelet will not modify the ownership and permissions of any volume.",
                  "type": "integer",
                  "format": "int64"
                },
                "fsGroupChangePolicy": {
                  "description": "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified defaults to \"Always\".",
                  "type": "string"
                },
                "runAsGroup": {
                  "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
                  "type": "integer",
                  "format": "int64"
                },
                "runAsNonRoot": {
                  "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                  "type": "boolean"
                },
                "runAsUser": {
                  "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
                  "type": "integer",
                  "format": "int64"
                },
                "seLinuxOptions": {
                  "description": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
                  "type": "object",
                  "properties": {
                    "level": {
                      "description": "Level is SELinux level label that applies to the container.",
                      "type": "string"
                    },
                    "role": {
                      "description": "Role is a SELinux role label that applies to the container.",
                      "type": "string"
                    },
                    "type": {
                      "description": "Type is a SELinux type label that applies to the container.",
                      "type": "string"
                    },
                    "user": {
                      "description": "User is a SELinux user label that applies to the container.",
                      "type": "string"
                    }
                  }
                },
                "supplementalGroups": {
                  "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.",
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64"
                  }
                },
                "sysctls": {
                  "description": "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.",
                  "type": "array",
                  "items": {
                    "description": "Sysctl defines a kernel parameter to be set",
                    "type": "object",
                    "required": [
                      "name",
                      "value"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of a property to set",
                        "type": "string"
                      },
                      "value": {
                        "description": "Value of a property to set",
                        "type": "string"
                      }
                    }
                  }
                },
                "windowsOptions": {
                  "description": "The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                  "type": "object",
                  "properties": {
                    "gmsaCredentialSpec": {
                      "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
                      "type": "string"
                    },
                    "gmsaCredentialSpecName": {
                      "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                      "type": "string"
                    },
                    "runAsUserName": {
                      "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "serviceAccountName": {
              "description": "ServiceAccountName is the name of the ServiceAccount to use to run the Thanos Ruler Pods.",
              "type": "string"
            },
            "storage": {
              "description": "Storage spec to specify how storage shall be used.",
              "type": "object",
              "properties": {
                "disableMountSubPath": {
                  "description": "Deprecated: subPath usage will be disabled by default in a future release, this option will become unnecessary. DisableMountSubPath allows to remove any subPath usage in volume mounts.",
                  "type": "boolean"
                },
                "emptyDir": {
                  "description": "EmptyDirVolumeSource to be used by the Prometheus StatefulSets. If specified, used in place of any volumeClaimTemplate. More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir",
                  "type": "object",
                  "properties": {
                    "medium": {
                      "description": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
                      "type": "string"
                    },
                    "sizeLimit": {
                      "description": "Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir",
                      "type": "string"
                    }
                  }
                },
                "volumeClaimTemplate": {
                  "description": "A PVC spec to be used by the Prometheus StatefulSets.",
                  "type": "object",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "description": "EmbeddedMetadata contains metadata relevant to an EmbeddedResource.",
                      "type": "object",
                      "properties": {
                        "annotations": {
                          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "labels": {
                          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "name": {
                          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                          "type": "string"
                        }
                      }
                    },
                    "spec": {
                      "description": "Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                      "type": "object",
                      "properties": {
                        "accessModes": {
                          "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "dataSource": {
                          "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot - Beta) * An existing PVC (PersistentVolumeClaim) * An existing custom resource/object that implements data population (Alpha) In order to use VolumeSnapshot object types, the appropriate feature gate must be enabled (VolumeSnapshotDataSource or AnyVolumeDataSource) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the specified data source is not supported, the volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.",
                          "type": "object",
                          "required": [
                            "kind",
                            "name"
                          ],
                          "properties": {
                            "apiGroup": {
                              "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
                              "type": "string"
                            },
                            "kind": {
                              "description": "Kind is the type of resource being referenced",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name is the name of resource being referenced",
                              "type": "string"
                            }
                          }
                        },
                        "resources": {
                          "description": "Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                          "type": "object",
                          "properties": {
                            "limits": {
                              "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "requests": {
                              "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "selector": {
                          "description": "A label query over volumes to consider for binding.",
                          "type": "object",
                          "properties": {
                            "matchExpressions": {
                              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                              "type": "array",
                              "items": {
                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                "type": "object",
                                "required": [
                                  "key",
                                  "operator"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "key is the label key that the selector applies to.",
                                    "type": "string"
                                  },
                                  "operator": {
                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                    "type": "string"
                                  },
                                  "values": {
                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            },
                            "matchLabels": {
                              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "storageClassName": {
                          "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
                          "type": "string"
                        },
                        "volumeMode": {
                          "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
                          "type": "string"
                        },
                        "volumeName": {
                          "description": "VolumeName is the binding reference to the PersistentVolume backing this claim.",
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "description": "Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                      "type": "object",
                      "properties": {
                        "accessModes": {
                          "description": "AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "capacity": {
                          "description": "Represents the actual resources of the underlying volume.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "conditions": {
                          "description": "Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.",
                          "type": "array",
                          "items": {
                            "description": "PersistentVolumeClaimCondition contails details about state of pvc",
                            "type": "object",
                            "required": [
                              "status",
                              "type"
                            ],
                            "properties": {
                              "lastProbeTime": {
                                "description": "Last time we probed the condition.",
                                "type": "string",
                                "format": "date-time"
                              },
                              "lastTransitionTime": {
                                "description": "Last time the condition transitioned from one status to another.",
                                "type": "string",
                                "format": "date-time"
                              },
                              "message": {
                                "description": "Human-readable message indicating details about last transition.",
                                "type": "string"
                              },
                              "reason": {
                                "description": "Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports \"ResizeStarted\" that means the underlying persistent volume is being resized.",
                                "type": "string"
                              },
                              "status": {
                                "type": "string"
                              },
                              "type": {
                                "description": "PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "phase": {
                          "description": "Phase represents the current phase of PersistentVolumeClaim.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "tolerations": {
              "description": "If specified, the pod's tolerations.",
              "type": "array",
              "items": {
                "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
                "type": "object",
                "properties": {
                  "effect": {
                    "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                    "type": "string"
                  },
                  "key": {
                    "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                    "type": "string"
                  },
                  "tolerationSeconds": {
                    "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "value": {
                    "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                    "type": "string"
                  }
                }
              }
            },
            "tracingConfig": {
              "description": "TracingConfig configures tracing in Thanos. This is an experimental feature, it may change in any upcoming release in a breaking way.",
              "type": "object",
              "required": [
                "key"
              ],
              "properties": {
                "key": {
                  "description": "The key of the secret to select from.  Must be a valid secret key.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                  "type": "string"
                },
                "optional": {
                  "description": "Specify whether the Secret or its key must be defined",
                  "type": "boolean"
                }
              }
            },
            "volumes": {
              "description": "Volumes allows configuration of additional volumes on the output StatefulSet definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.",
              "type": "array",
              "items": {
                "description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "awsElasticBlockStore": {
                    "description": "AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
                    "type": "object",
                    "required": [
                      "volumeID"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine",
                        "type": "string"
                      },
                      "partition": {
                        "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).",
                        "type": "integer",
                        "format": "int32"
                      },
                      "readOnly": {
                        "description": "Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
                        "type": "boolean"
                      },
                      "volumeID": {
                        "description": "Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
                        "type": "string"
                      }
                    }
                  },
                  "azureDisk": {
                    "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
                    "type": "object",
                    "required": [
                      "diskName",
                      "diskURI"
                    ],
                    "properties": {
                      "cachingMode": {
                        "description": "Host Caching mode: None, Read Only, Read Write.",
                        "type": "string"
                      },
                      "diskName": {
                        "description": "The Name of the data disk in the blob storage",
                        "type": "string"
                      },
                      "diskURI": {
                        "description": "The URI the data disk in the blob storage",
                        "type": "string"
                      },
                      "fsType": {
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      }
                    }
                  },
                  "azureFile": {
                    "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
                    "type": "object",
                    "required": [
                      "secretName",
                      "shareName"
                    ],
                    "properties": {
                      "readOnly": {
                        "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      },
                      "secretName": {
                        "description": "the name of secret that contains Azure Storage Account Name and Key",
                        "type": "string"
                      },
                      "shareName": {
                        "description": "Share Name",
                        "type": "string"
                      }
                    }
                  },
                  "cephfs": {
                    "description": "CephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
                    "type": "object",
                    "required": [
                      "monitors"
                    ],
                    "properties": {
                      "monitors": {
                        "description": "Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "path": {
                        "description": "Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                        "type": "boolean"
                      },
                      "secretFile": {
                        "description": "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                        "type": "string"
                      },
                      "secretRef": {
                        "description": "Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          }
                        }
                      },
                      "user": {
                        "description": "Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                        "type": "string"
                      }
                    }
                  },
                  "cinder": {
                    "description": "Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                    "type": "object",
                    "required": [
                      "volumeID"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                        "type": "boolean"
                      },
                      "secretRef": {
                        "description": "Optional: points to a secret object containing parameters used to connect to OpenStack.",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          }
                        }
                      },
                      "volumeID": {
                        "description": "volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                        "type": "string"
                      }
                    }
                  },
                  "configMap": {
                    "description": "ConfigMap represents a configMap that should populate this volume",
                    "type": "object",
                    "properties": {
                      "defaultMode": {
                        "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "items": {
                        "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                        "type": "array",
                        "items": {
                          "description": "Maps a string key to a path within a volume.",
                          "type": "object",
                          "required": [
                            "key",
                            "path"
                          ],
                          "properties": {
                            "key": {
                              "description": "The key to project.",
                              "type": "string"
                            },
                            "mode": {
                              "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "path": {
                              "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "name": {
                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                        "type": "string"
                      },
                      "optional": {
                        "description": "Specify whether the ConfigMap or its keys must be defined",
                        "type": "boolean"
                      }
                    }
                  },
                  "csi": {
                    "description": "CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature).",
                    "type": "object",
                    "required": [
                      "driver"
                    ],
                    "properties": {
                      "driver": {
                        "description": "Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.",
                        "type": "string"
                      },
                      "fsType": {
                        "description": "Filesystem type to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.",
                        "type": "string"
                      },
                      "nodePublishSecretRef": {
                        "description": "NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          }
                        }
                      },
                      "readOnly": {
                        "description": "Specifies a read-only configuration for the volume. Defaults to false (read/write).",
                        "type": "boolean"
                      },
                      "volumeAttributes": {
                        "description": "VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "downwardAPI": {
                    "description": "DownwardAPI represents downward API about the pod that should populate this volume",
                    "type": "object",
                    "properties": {
                      "defaultMode": {
                        "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "items": {
                        "description": "Items is a list of downward API volume file",
                        "type": "array",
                        "items": {
                          "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
                          "type": "object",
                          "required": [
                            "path"
                          ],
                          "properties": {
                            "fieldRef": {
                              "description": "Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.",
                              "type": "object",
                              "required": [
                                "fieldPath"
                              ],
                              "properties": {
                                "apiVersion": {
                                  "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                  "type": "string"
                                },
                                "fieldPath": {
                                  "description": "Path of the field to select in the specified API version.",
                                  "type": "string"
                                }
                              }
                            },
                            "mode": {
                              "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "path": {
                              "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                              "type": "string"
                            },
                            "resourceFieldRef": {
                              "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.",
                              "type": "object",
                              "required": [
                                "resource"
                              ],
                              "properties": {
                                "containerName": {
                                  "description": "Container name: required for volumes, optional for env vars",
                                  "type": "string"
                                },
                                "divisor": {
                                  "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                  "type": "string"
                                },
                                "resource": {
                                  "description": "Required: resource to select",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "emptyDir": {
                    "description": "EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
                    "type": "object",
                    "properties": {
                      "medium": {
                        "description": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
                        "type": "string"
                      },
                      "sizeLimit": {
                        "description": "Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir",
                        "type": "string"
                      }
                    }
                  },
                  "fc": {
                    "description": "FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
                    "type": "object",
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine",
                        "type": "string"
                      },
                      "lun": {
                        "description": "Optional: FC target lun number",
                        "type": "integer",
                        "format": "int32"
                      },
                      "readOnly": {
                        "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      },
                      "targetWWNs": {
                        "description": "Optional: FC target worldwide names (WWNs)",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "wwids": {
                        "description": "Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "flexVolume": {
                    "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
                    "type": "object",
                    "required": [
                      "driver"
                    ],
                    "properties": {
                      "driver": {
                        "description": "Driver is the name of the driver to use for this volume.",
                        "type": "string"
                      },
                      "fsType": {
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.",
                        "type": "string"
                      },
                      "options": {
                        "description": "Optional: Extra command options if any.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "readOnly": {
                        "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      },
                      "secretRef": {
                        "description": "Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "flocker": {
                    "description": "Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running",
                    "type": "object",
                    "properties": {
                      "datasetName": {
                        "description": "Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated",
                        "type": "string"
                      },
                      "datasetUUID": {
                        "description": "UUID of the dataset. This is unique identifier of a Flocker dataset",
                        "type": "string"
                      }
                    }
                  },
                  "gcePersistentDisk": {
                    "description": "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                    "type": "object",
                    "required": [
                      "pdName"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine",
                        "type": "string"
                      },
                      "partition": {
                        "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                        "type": "integer",
                        "format": "int32"
                      },
                      "pdName": {
                        "description": "Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                        "type": "boolean"
                      }
                    }
                  },
                  "gitRepo": {
                    "description": "GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
                    "type": "object",
                    "required": [
                      "repository"
                    ],
                    "properties": {
                      "directory": {
                        "description": "Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.",
                        "type": "string"
                      },
                      "repository": {
                        "description": "Repository URL",
                        "type": "string"
                      },
                      "revision": {
                        "description": "Commit hash for the specified revision.",
                        "type": "string"
                      }
                    }
                  },
                  "glusterfs": {
                    "description": "Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md",
                    "type": "object",
                    "required": [
                      "endpoints",
                      "path"
                    ],
                    "properties": {
                      "endpoints": {
                        "description": "EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                        "type": "string"
                      },
                      "path": {
                        "description": "Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                        "type": "boolean"
                      }
                    }
                  },
                  "hostPath": {
                    "description": "HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.",
                    "type": "object",
                    "required": [
                      "path"
                    ],
                    "properties": {
                      "path": {
                        "description": "Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
                        "type": "string"
                      },
                      "type": {
                        "description": "Type for HostPath Volume Defaults to \"\" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
                        "type": "string"
                      }
                    }
                  },
                  "iscsi": {
                    "description": "ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md",
                    "type": "object",
                    "required": [
                      "iqn",
                      "lun",
                      "targetPortal"
                    ],
                    "properties": {
                      "chapAuthDiscovery": {
                        "description": "whether support iSCSI Discovery CHAP authentication",
                        "type": "boolean"
                      },
                      "chapAuthSession": {
                        "description": "whether support iSCSI Session CHAP authentication",
                        "type": "boolean"
                      },
                      "fsType": {
                        "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine",
                        "type": "string"
                      },
                      "initiatorName": {
                        "description": "Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.",
                        "type": "string"
                      },
                      "iqn": {
                        "description": "Target iSCSI Qualified Name.",
                        "type": "string"
                      },
                      "iscsiInterface": {
                        "description": "iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
                        "type": "string"
                      },
                      "lun": {
                        "description": "iSCSI Target Lun number.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "portals": {
                        "description": "iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "readOnly": {
                        "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.",
                        "type": "boolean"
                      },
                      "secretRef": {
                        "description": "CHAP Secret for iSCSI target and initiator authentication",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          }
                        }
                      },
                      "targetPortal": {
                        "description": "iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
                        "type": "string"
                      }
                    }
                  },
                  "name": {
                    "description": "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                  },
                  "nfs": {
                    "description": "NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                    "type": "object",
                    "required": [
                      "path",
                      "server"
                    ],
                    "properties": {
                      "path": {
                        "description": "Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                        "type": "boolean"
                      },
                      "server": {
                        "description": "Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                        "type": "string"
                      }
                    }
                  },
                  "persistentVolumeClaim": {
                    "description": "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                    "type": "object",
                    "required": [
                      "claimName"
                    ],
                    "properties": {
                      "claimName": {
                        "description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "Will force the ReadOnly setting in VolumeMounts. Default false.",
                        "type": "boolean"
                      }
                    }
                  },
                  "photonPersistentDisk": {
                    "description": "PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
                    "type": "object",
                    "required": [
                      "pdID"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                        "type": "string"
                      },
                      "pdID": {
                        "description": "ID that identifies Photon Controller persistent disk",
                        "type": "string"
                      }
                    }
                  },
                  "portworxVolume": {
                    "description": "PortworxVolume represents a portworx volume attached and mounted on kubelets host machine",
                    "type": "object",
                    "required": [
                      "volumeID"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      },
                      "volumeID": {
                        "description": "VolumeID uniquely identifies a Portworx volume",
                        "type": "string"
                      }
                    }
                  },
                  "projected": {
                    "description": "Items for all in one resources secrets, configmaps, and downward API",
                    "type": "object",
                    "required": [
                      "sources"
                    ],
                    "properties": {
                      "defaultMode": {
                        "description": "Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "sources": {
                        "description": "list of volume projections",
                        "type": "array",
                        "items": {
                          "description": "Projection that may be projected along with other supported volume types",
                          "type": "object",
                          "properties": {
                            "configMap": {
                              "description": "information about the configMap data to project",
                              "type": "object",
                              "properties": {
                                "items": {
                                  "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                                  "type": "array",
                                  "items": {
                                    "description": "Maps a string key to a path within a volume.",
                                    "type": "object",
                                    "required": [
                                      "key",
                                      "path"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "The key to project.",
                                        "type": "string"
                                      },
                                      "mode": {
                                        "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                                        "type": "integer",
                                        "format": "int32"
                                      },
                                      "path": {
                                        "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "name": {
                                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                },
                                "optional": {
                                  "description": "Specify whether the ConfigMap or its keys must be defined",
                                  "type": "boolean"
                                }
                              }
                            },
                            "downwardAPI": {
                              "description": "information about the downwardAPI data to project",
                              "type": "object",
                              "properties": {
                                "items": {
                                  "description": "Items is a list of DownwardAPIVolume file",
                                  "type": "array",
                                  "items": {
                                    "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
                                    "type": "object",
                                    "required": [
                                      "path"
                                    ],
                                    "properties": {
                                      "fieldRef": {
                                        "description": "Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.",
                                        "type": "object",
                                        "required": [
                                          "fieldPath"
                                        ],
                                        "properties": {
                                          "apiVersion": {
                                            "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                            "type": "string"
                                          },
                                          "fieldPath": {
                                            "description": "Path of the field to select in the specified API version.",
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "mode": {
                                        "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                                        "type": "integer",
                                        "format": "int32"
                                      },
                                      "path": {
                                        "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                                        "type": "string"
                                      },
                                      "resourceFieldRef": {
                                        "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.",
                                        "type": "object",
                                        "required": [
                                          "resource"
                                        ],
                                        "properties": {
                                          "containerName": {
                                            "description": "Container name: required for volumes, optional for env vars",
                                            "type": "string"
                                          },
                                          "divisor": {
                                            "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                            "type": "string"
                                          },
                                          "resource": {
                                            "description": "Required: resource to select",
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "secret": {
                              "description": "information about the secret data to project",
                              "type": "object",
                              "properties": {
                                "items": {
                                  "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                                  "type": "array",
                                  "items": {
                                    "description": "Maps a string key to a path within a volume.",
                                    "type": "object",
                                    "required": [
                                      "key",
                                      "path"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "The key to project.",
                                        "type": "string"
                                      },
                                      "mode": {
                                        "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                                        "type": "integer",
                                        "format": "int32"
                                      },
                                      "path": {
                                        "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "name": {
                                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                },
                                "optional": {
                                  "description": "Specify whether the Secret or its key must be defined",
                                  "type": "boolean"
                                }
                              }
                            },
                            "serviceAccountToken": {
                              "description": "information about the serviceAccountToken data to project",
                              "type": "object",
                              "required": [
                                "path"
                              ],
                              "properties": {
                                "audience": {
                                  "description": "Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.",
                                  "type": "string"
                                },
                                "expirationSeconds": {
                                  "description": "ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.",
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "path": {
                                  "description": "Path is the path relative to the mount point of the file to project the token into.",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "quobyte": {
                    "description": "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
                    "type": "object",
                    "required": [
                      "registry",
                      "volume"
                    ],
                    "properties": {
                      "group": {
                        "description": "Group to map volume access to Default is no group",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.",
                        "type": "boolean"
                      },
                      "registry": {
                        "description": "Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes",
                        "type": "string"
                      },
                      "tenant": {
                        "description": "Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin",
                        "type": "string"
                      },
                      "user": {
                        "description": "User to map volume access to Defaults to serivceaccount user",
                        "type": "string"
                      },
                      "volume": {
                        "description": "Volume is a string that references an already created Quobyte volume by name.",
                        "type": "string"
                      }
                    }
                  },
                  "rbd": {
                    "description": "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md",
                    "type": "object",
                    "required": [
                      "image",
                      "monitors"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine",
                        "type": "string"
                      },
                      "image": {
                        "description": "The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                        "type": "string"
                      },
                      "keyring": {
                        "description": "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                        "type": "string"
                      },
                      "monitors": {
                        "description": "A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "pool": {
                        "description": "The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                        "type": "boolean"
                      },
                      "secretRef": {
                        "description": "SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          }
                        }
                      },
                      "user": {
                        "description": "The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                        "type": "string"
                      }
                    }
                  },
                  "scaleIO": {
                    "description": "ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.",
                    "type": "object",
                    "required": [
                      "gateway",
                      "secretRef",
                      "system"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\".",
                        "type": "string"
                      },
                      "gateway": {
                        "description": "The host address of the ScaleIO API Gateway.",
                        "type": "string"
                      },
                      "protectionDomain": {
                        "description": "The name of the ScaleIO Protection Domain for the configured storage.",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      },
                      "secretRef": {
                        "description": "SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          }
                        }
                      },
                      "sslEnabled": {
                        "description": "Flag to enable/disable SSL communication with Gateway, default false",
                        "type": "boolean"
                      },
                      "storageMode": {
                        "description": "Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.",
                        "type": "string"
                      },
                      "storagePool": {
                        "description": "The ScaleIO Storage Pool associated with the protection domain.",
                        "type": "string"
                      },
                      "system": {
                        "description": "The name of the storage system as configured in ScaleIO.",
                        "type": "string"
                      },
                      "volumeName": {
                        "description": "The name of a volume already created in the ScaleIO system that is associated with this volume source.",
                        "type": "string"
                      }
                    }
                  },
                  "secret": {
                    "description": "Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
                    "type": "object",
                    "properties": {
                      "defaultMode": {
                        "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "items": {
                        "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                        "type": "array",
                        "items": {
                          "description": "Maps a string key to a path within a volume.",
                          "type": "object",
                          "required": [
                            "key",
                            "path"
                          ],
                          "properties": {
                            "key": {
                              "description": "The key to project.",
                              "type": "string"
                            },
                            "mode": {
                              "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "path": {
                              "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "optional": {
                        "description": "Specify whether the Secret or its keys must be defined",
                        "type": "boolean"
                      },
                      "secretName": {
                        "description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
                        "type": "string"
                      }
                    }
                  },
                  "storageos": {
                    "description": "StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.",
                    "type": "object",
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      },
                      "secretRef": {
                        "description": "SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          }
                        }
                      },
                      "volumeName": {
                        "description": "VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.",
                        "type": "string"
                      },
                      "volumeNamespace": {
                        "description": "VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.",
                        "type": "string"
                      }
                    }
                  },
                  "vsphereVolume": {
                    "description": "VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine",
                    "type": "object",
                    "required": [
                      "volumePath"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                        "type": "string"
                      },
                      "storagePolicyID": {
                        "description": "Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.",
                        "type": "string"
                      },
                      "storagePolicyName": {
                        "description": "Storage Policy Based Management (SPBM) profile name.",
                        "type": "string"
                      },
                      "volumePath": {
                        "description": "Path that identifies vSphere volume vmdk",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "status": {
          "description": "Most recent observed status of the ThanosRuler cluster. Read-only. Not included when requesting from the apiserver, only from the ThanosRuler Operator API itself. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "type": "object",
          "required": [
            "availableReplicas",
            "paused",
            "replicas",
            "unavailableReplicas",
            "updatedReplicas"
          ],
          "properties": {
            "availableReplicas": {
              "description": "Total number of available pods (ready for at least minReadySeconds) targeted by this ThanosRuler deployment.",
              "type": "integer",
              "format": "int32"
            },
            "paused": {
              "description": "Represents whether any actions on the underlying managed objects are being performed. Only delete actions will be performed.",
              "type": "boolean"
            },
            "replicas": {
              "description": "Total number of non-terminated pods targeted by this ThanosRuler deployment (their labels match the selector).",
              "type": "integer",
              "format": "int32"
            },
            "unavailableReplicas": {
              "description": "Total number of unavailable pods targeted by this ThanosRuler deployment.",
              "type": "integer",
              "format": "int32"
            },
            "updatedReplicas": {
              "description": "Total number of non-terminated pods targeted by this ThanosRuler deployment that have the desired version spec.",
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "monitoring.coreos.com",
          "kind": "ThanosRuler",
          "version": "v1"
        }
      ]
    },
    "com.coreos.monitoring.v1.ThanosRulerList": {
      "description": "ThanosRulerList is a list of ThanosRuler",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "monitoring.coreos.com/v1"
          ]
        },
        "items": {
          "description": "List of thanosrulers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.v1.ThanosRuler"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ThanosRulerList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "monitoring.coreos.com",
          "kind": "ThanosRulerList",
          "version": "v1"
        }
      ]
    },
    "com.coreos.operators.v1.Operator": {
      "description": "Operator represents a cluster operator.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operators.coreos.com/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Operator"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "OperatorSpec defines the desired state of Operator",
          "type": "object"
        },
        "status": {
          "description": "OperatorStatus defines the observed state of an Operator and its components",
          "type": "object",
          "properties": {
            "components": {
              "description": "Components describes resources that compose the operator.",
              "type": "object",
              "required": [
                "labelSelector"
              ],
              "properties": {
                "labelSelector": {
                  "description": "LabelSelector is a label query over a set of resources used to select the operator's components",
                  "type": "object",
                  "properties": {
                    "matchExpressions": {
                      "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                      "type": "array",
                      "items": {
                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                        "type": "object",
                        "required": [
                          "key",
                          "operator"
                        ],
                        "properties": {
                          "key": {
                            "description": "key is the label key that the selector applies to.",
                            "type": "string"
                          },
                          "operator": {
                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                            "type": "string"
                          },
                          "values": {
                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "matchLabels": {
                      "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  }
                },
                "refs": {
                  "description": "Refs are a set of references to the operator's component resources, selected with LabelSelector.",
                  "type": "array",
                  "items": {
                    "description": "RichReference is a reference to a resource, enriched with its status conditions.",
                    "type": "object",
                    "properties": {
                      "apiVersion": {
                        "description": "API version of the referent.",
                        "type": "string"
                      },
                      "conditions": {
                        "description": "Conditions represents the latest state of the component.",
                        "type": "array",
                        "items": {
                          "description": "Condition represent the latest available observations of an component's state.",
                          "type": "object",
                          "required": [
                            "status",
                            "type"
                          ],
                          "properties": {
                            "lastTransitionTime": {
                              "description": "Last time the condition transitioned from one status to another.",
                              "type": "string",
                              "format": "date-time"
                            },
                            "lastUpdateTime": {
                              "description": "Last time the condition was probed",
                              "type": "string",
                              "format": "date-time"
                            },
                            "message": {
                              "description": "A human readable message indicating details about the transition.",
                              "type": "string"
                            },
                            "reason": {
                              "description": "The reason for the condition's last transition.",
                              "type": "string"
                            },
                            "status": {
                              "description": "Status of the condition, one of True, False, Unknown.",
                              "type": "string"
                            },
                            "type": {
                              "description": "Type of condition.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "fieldPath": {
                        "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                        "type": "string"
                      },
                      "resourceVersion": {
                        "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                        "type": "string"
                      },
                      "uid": {
                        "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operators.coreos.com",
          "kind": "Operator",
          "version": "v1"
        }
      ]
    },
    "com.coreos.operators.v1.OperatorGroup": {
      "description": "OperatorGroup is the unit of multitenancy for OLM managed operators. It constrains the installation of operators in its namespace to a specified set of target namespaces.",
      "type": "object",
      "required": [
        "metadata"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operators.coreos.com/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "OperatorGroup"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "OperatorGroupSpec is the spec for an OperatorGroup resource.",
          "type": "object",
          "properties": {
            "selector": {
              "description": "Selector selects the OperatorGroup's target namespaces.",
              "type": "object",
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "type": "array",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                    "type": "object",
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "matchLabels": {
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "serviceAccountName": {
              "description": "ServiceAccountName is the admin specified service account which will be used to deploy operator(s) in this operator group.",
              "type": "string"
            },
            "staticProvidedAPIs": {
              "description": "Static tells OLM not to update the OperatorGroup's providedAPIs annotation",
              "type": "boolean"
            },
            "targetNamespaces": {
              "description": "TargetNamespaces is an explicit set of namespaces to target. If it is set, Selector is ignored.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            }
          }
        },
        "status": {
          "description": "OperatorGroupStatus is the status for an OperatorGroupResource.",
          "type": "object",
          "required": [
            "lastUpdated"
          ],
          "properties": {
            "lastUpdated": {
              "description": "LastUpdated is a timestamp of the last time the OperatorGroup's status was Updated.",
              "type": "string",
              "format": "date-time"
            },
            "namespaces": {
              "description": "Namespaces is the set of target namespaces for the OperatorGroup.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "serviceAccountRef": {
              "description": "ServiceAccountRef references the service account object specified.",
              "type": "object",
              "properties": {
                "apiVersion": {
                  "description": "API version of the referent.",
                  "type": "string"
                },
                "fieldPath": {
                  "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                  "type": "string"
                },
                "resourceVersion": {
                  "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                  "type": "string"
                },
                "uid": {
                  "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operators.coreos.com",
          "kind": "OperatorGroup",
          "version": "v1"
        }
      ]
    },
    "com.coreos.operators.v1.OperatorGroupList": {
      "description": "OperatorGroupList is a list of OperatorGroup",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operators.coreos.com/v1"
          ]
        },
        "items": {
          "description": "List of operatorgroups. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.coreos.operators.v1.OperatorGroup"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "OperatorGroupList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operators.coreos.com",
          "kind": "OperatorGroupList",
          "version": "v1"
        }
      ]
    },
    "com.coreos.operators.v1.OperatorList": {
      "description": "OperatorList is a list of Operator",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operators.coreos.com/v1"
          ]
        },
        "items": {
          "description": "List of operators. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.coreos.operators.v1.Operator"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "OperatorList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operators.coreos.com",
          "kind": "OperatorList",
          "version": "v1"
        }
      ]
    },
    "com.coreos.operators.v1alpha1.CatalogSource": {
      "description": "CatalogSource is a repository of CSVs, CRDs, and operator packages.",
      "type": "object",
      "required": [
        "metadata",
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operators.coreos.com/v1alpha1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "CatalogSource"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "type": "object",
          "required": [
            "sourceType"
          ],
          "properties": {
            "address": {
              "description": "Address is a host that OLM can use to connect to a pre-existing registry. Format: <registry-host or ip>:<port> Only used when SourceType = SourceTypeGrpc. Ignored when the Image field is set.",
              "type": "string"
            },
            "configMap": {
              "description": "ConfigMap is the name of the ConfigMap to be used to back a configmap-server registry. Only used when SourceType = SourceTypeConfigmap or SourceTypeInternal.",
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "displayName": {
              "description": "Metadata",
              "type": "string"
            },
            "icon": {
              "type": "object",
              "required": [
                "base64data",
                "mediatype"
              ],
              "properties": {
                "base64data": {
                  "type": "string"
                },
                "mediatype": {
                  "type": "string"
                }
              }
            },
            "image": {
              "description": "Image is an operator-registry container image to instantiate a registry-server with. Only used when SourceType = SourceTypeGrpc. If present, the address field is ignored.",
              "type": "string"
            },
            "priority": {
              "description": "Priority field assigns a weight to the catalog source to prioritize them so that it can be consumed by the dependency resolver. Usage: Higher weight indicates that this catalog source is preferred over lower weighted catalog sources during dependency resolution. The range of the priority value can go from positive to negative in the range of int32. The default value to a catalog source with unassigned priority would be 0. The catalog source with the same priority values will be ranked lexicographically based on its name.",
              "type": "integer"
            },
            "publisher": {
              "type": "string"
            },
            "secrets": {
              "description": "Secrets represent set of secrets that can be used to access the contents of the catalog. It is best to keep this list small, since each will need to be tried for every catalog entry.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "sourceType": {
              "description": "SourceType is the type of source",
              "type": "string"
            },
            "updateStrategy": {
              "description": "UpdateStrategy defines how updated catalog source images can be discovered Consists of an interval that defines polling duration and an embedded strategy type",
              "type": "object",
              "properties": {
                "registryPoll": {
                  "type": "object",
                  "properties": {
                    "interval": {
                      "description": "Interval is used to determine the time interval between checks of the latest catalog source version. The catalog operator polls to see if a new version of the catalog source is available. If available, the latest image is pulled and gRPC traffic is directed to the latest catalog source.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "status": {
          "type": "object",
          "properties": {
            "configMapReference": {
              "type": "object",
              "required": [
                "name",
                "namespace"
              ],
              "properties": {
                "lastUpdateTime": {
                  "type": "string",
                  "format": "date-time"
                },
                "name": {
                  "type": "string"
                },
                "namespace": {
                  "type": "string"
                },
                "resourceVersion": {
                  "type": "string"
                },
                "uid": {
                  "description": "UID is a type that holds unique ID values, including UUIDs.  Because we don't ONLY use UUIDs, this is an alias to string.  Being a type captures intent and helps make sure that UIDs and names do not get conflated.",
                  "type": "string"
                }
              }
            },
            "connectionState": {
              "type": "object",
              "required": [
                "lastObservedState"
              ],
              "properties": {
                "address": {
                  "type": "string"
                },
                "lastConnect": {
                  "type": "string",
                  "format": "date-time"
                },
                "lastObservedState": {
                  "type": "string"
                }
              }
            },
            "latestImageRegistryPoll": {
              "description": "The last time the CatalogSource image registry has been polled to ensure the image is up-to-date",
              "type": "string",
              "format": "date-time"
            },
            "message": {
              "description": "A human readable message indicating details about why the CatalogSource is in this condition.",
              "type": "string"
            },
            "reason": {
              "description": "Reason is the reason the CatalogSource was transitioned to its current state.",
              "type": "string"
            },
            "registryService": {
              "type": "object",
              "properties": {
                "createdAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "port": {
                  "type": "string"
                },
                "protocol": {
                  "type": "string"
                },
                "serviceName": {
                  "type": "string"
                },
                "serviceNamespace": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operators.coreos.com",
          "kind": "CatalogSource",
          "version": "v1alpha1"
        }
      ]
    },
    "com.coreos.operators.v1alpha1.CatalogSourceList": {
      "description": "CatalogSourceList is a list of CatalogSource",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operators.coreos.com/v1alpha1"
          ]
        },
        "items": {
          "description": "List of catalogsources. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.coreos.operators.v1alpha1.CatalogSource"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "CatalogSourceList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operators.coreos.com",
          "kind": "CatalogSourceList",
          "version": "v1alpha1"
        }
      ]
    },
    "com.coreos.operators.v1alpha1.ClusterServiceVersion": {
      "description": "ClusterServiceVersion is a Custom Resource of type `ClusterServiceVersionSpec`.",
      "type": "object",
      "required": [
        "metadata",
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operators.coreos.com/v1alpha1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterServiceVersion"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "ClusterServiceVersionSpec declarations tell OLM how to install an operator that can manage apps for a given version.",
          "type": "object",
          "required": [
            "displayName",
            "install"
          ],
          "properties": {
            "annotations": {
              "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "apiservicedefinitions": {
              "description": "APIServiceDefinitions declares all of the extension apis managed or required by an operator being ran by ClusterServiceVersion.",
              "type": "object",
              "properties": {
                "owned": {
                  "type": "array",
                  "items": {
                    "description": "APIServiceDescription provides details to OLM about apis provided via aggregation",
                    "type": "object",
                    "required": [
                      "group",
                      "kind",
                      "name",
                      "version"
                    ],
                    "properties": {
                      "actionDescriptors": {
                        "type": "array",
                        "items": {
                          "description": "ActionDescriptor describes a declarative action that can be performed on a custom resource instance",
                          "type": "object",
                          "required": [
                            "path"
                          ],
                          "properties": {
                            "description": {
                              "type": "string"
                            },
                            "displayName": {
                              "type": "string"
                            },
                            "path": {
                              "type": "string"
                            },
                            "value": {
                              "description": "RawMessage is a raw encoded JSON value. It implements Marshaler and Unmarshaler and can be used to delay JSON decoding or precompute a JSON encoding.",
                              "type": "string",
                              "format": "byte"
                            },
                            "x-descriptors": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "containerPort": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "deploymentName": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "displayName": {
                        "type": "string"
                      },
                      "group": {
                        "type": "string"
                      },
                      "kind": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "resources": {
                        "type": "array",
                        "items": {
                          "description": "APIResourceReference is a Kubernetes resource type used by a custom resource",
                          "type": "object",
                          "required": [
                            "kind",
                            "name",
                            "version"
                          ],
                          "properties": {
                            "kind": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "version": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "specDescriptors": {
                        "type": "array",
                        "items": {
                          "description": "SpecDescriptor describes a field in a spec block of a CRD so that OLM can consume it",
                          "type": "object",
                          "required": [
                            "path"
                          ],
                          "properties": {
                            "description": {
                              "type": "string"
                            },
                            "displayName": {
                              "type": "string"
                            },
                            "path": {
                              "type": "string"
                            },
                            "value": {
                              "description": "RawMessage is a raw encoded JSON value. It implements Marshaler and Unmarshaler and can be used to delay JSON decoding or precompute a JSON encoding.",
                              "type": "string",
                              "format": "byte"
                            },
                            "x-descriptors": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "statusDescriptors": {
                        "type": "array",
                        "items": {
                          "description": "StatusDescriptor describes a field in a status block of a CRD so that OLM can consume it",
                          "type": "object",
                          "required": [
                            "path"
                          ],
                          "properties": {
                            "description": {
                              "type": "string"
                            },
                            "displayName": {
                              "type": "string"
                            },
                            "path": {
                              "type": "string"
                            },
                            "value": {
                              "description": "RawMessage is a raw encoded JSON value. It implements Marshaler and Unmarshaler and can be used to delay JSON decoding or precompute a JSON encoding.",
                              "type": "string",
                              "format": "byte"
                            },
                            "x-descriptors": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "version": {
                        "type": "string"
                      }
                    }
                  }
                },
                "required": {
                  "type": "array",
                  "items": {
                    "description": "APIServiceDescription provides details to OLM about apis provided via aggregation",
                    "type": "object",
                    "required": [
                      "group",
                      "kind",
                      "name",
                      "version"
                    ],
                    "properties": {
                      "actionDescriptors": {
                        "type": "array",
                        "items": {
                          "description": "ActionDescriptor describes a declarative action that can be performed on a custom resource instance",
                          "type": "object",
                          "required": [
                            "path"
                          ],
                          "properties": {
                            "description": {
                              "type": "string"
                            },
                            "displayName": {
                              "type": "string"
                            },
                            "path": {
                              "type": "string"
                            },
                            "value": {
                              "description": "RawMessage is a raw encoded JSON value. It implements Marshaler and Unmarshaler and can be used to delay JSON decoding or precompute a JSON encoding.",
                              "type": "string",
                              "format": "byte"
                            },
                            "x-descriptors": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "containerPort": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "deploymentName": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "displayName": {
                        "type": "string"
                      },
                      "group": {
                        "type": "string"
                      },
                      "kind": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "resources": {
                        "type": "array",
                        "items": {
                          "description": "APIResourceReference is a Kubernetes resource type used by a custom resource",
                          "type": "object",
                          "required": [
                            "kind",
                            "name",
                            "version"
                          ],
                          "properties": {
                            "kind": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "version": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "specDescriptors": {
                        "type": "array",
                        "items": {
                          "description": "SpecDescriptor describes a field in a spec block of a CRD so that OLM can consume it",
                          "type": "object",
                          "required": [
                            "path"
                          ],
                          "properties": {
                            "description": {
                              "type": "string"
                            },
                            "displayName": {
                              "type": "string"
                            },
                            "path": {
                              "type": "string"
                            },
                            "value": {
                              "description": "RawMessage is a raw encoded JSON value. It implements Marshaler and Unmarshaler and can be used to delay JSON decoding or precompute a JSON encoding.",
                              "type": "string",
                              "format": "byte"
                            },
                            "x-descriptors": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "statusDescriptors": {
                        "type": "array",
                        "items": {
                          "description": "StatusDescriptor describes a field in a status block of a CRD so that OLM can consume it",
                          "type": "object",
                          "required": [
                            "path"
                          ],
                          "properties": {
                            "description": {
                              "type": "string"
                            },
                            "displayName": {
                              "type": "string"
                            },
                            "path": {
                              "type": "string"
                            },
                            "value": {
                              "description": "RawMessage is a raw encoded JSON value. It implements Marshaler and Unmarshaler and can be used to delay JSON decoding or precompute a JSON encoding.",
                              "type": "string",
                              "format": "byte"
                            },
                            "x-descriptors": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "version": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "customresourcedefinitions": {
              "description": "CustomResourceDefinitions declares all of the CRDs managed or required by an operator being ran by ClusterServiceVersion. \n If the CRD is present in the Owned list, it is implicitly required.",
              "type": "object",
              "properties": {
                "owned": {
                  "type": "array",
                  "items": {
                    "description": "CRDDescription provides details to OLM about the CRDs",
                    "type": "object",
                    "required": [
                      "kind",
                      "name",
                      "version"
                    ],
                    "properties": {
                      "actionDescriptors": {
                        "type": "array",
                        "items": {
                          "description": "ActionDescriptor describes a declarative action that can be performed on a custom resource instance",
                          "type": "object",
                          "required": [
                            "path"
                          ],
                          "properties": {
                            "description": {
                              "type": "string"
                            },
                            "displayName": {
                              "type": "string"
                            },
                            "path": {
                              "type": "string"
                            },
                            "value": {
                              "description": "RawMessage is a raw encoded JSON value. It implements Marshaler and Unmarshaler and can be used to delay JSON decoding or precompute a JSON encoding.",
                              "type": "string",
                              "format": "byte"
                            },
                            "x-descriptors": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "description": {
                        "type": "string"
                      },
                      "displayName": {
                        "type": "string"
                      },
                      "kind": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "resources": {
                        "type": "array",
                        "items": {
                          "description": "APIResourceReference is a Kubernetes resource type used by a custom resource",
                          "type": "object",
                          "required": [
                            "kind",
                            "name",
                            "version"
                          ],
                          "properties": {
                            "kind": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "version": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "specDescriptors": {
                        "type": "array",
                        "items": {
                          "description": "SpecDescriptor describes a field in a spec block of a CRD so that OLM can consume it",
                          "type": "object",
                          "required": [
                            "path"
                          ],
                          "properties": {
                            "description": {
                              "type": "string"
                            },
                            "displayName": {
                              "type": "string"
                            },
                            "path": {
                              "type": "string"
                            },
                            "value": {
                              "description": "RawMessage is a raw encoded JSON value. It implements Marshaler and Unmarshaler and can be used to delay JSON decoding or precompute a JSON encoding.",
                              "type": "string",
                              "format": "byte"
                            },
                            "x-descriptors": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "statusDescriptors": {
                        "type": "array",
                        "items": {
                          "description": "StatusDescriptor describes a field in a status block of a CRD so that OLM can consume it",
                          "type": "object",
                          "required": [
                            "path"
                          ],
                          "properties": {
                            "description": {
                              "type": "string"
                            },
                            "displayName": {
                              "type": "string"
                            },
                            "path": {
                              "type": "string"
                            },
                            "value": {
                              "description": "RawMessage is a raw encoded JSON value. It implements Marshaler and Unmarshaler and can be used to delay JSON decoding or precompute a JSON encoding.",
                              "type": "string",
                              "format": "byte"
                            },
                            "x-descriptors": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "version": {
                        "type": "string"
                      }
                    }
                  }
                },
                "required": {
                  "type": "array",
                  "items": {
                    "description": "CRDDescription provides details to OLM about the CRDs",
                    "type": "object",
                    "required": [
                      "kind",
                      "name",
                      "version"
                    ],
                    "properties": {
                      "actionDescriptors": {
                        "type": "array",
                        "items": {
                          "description": "ActionDescriptor describes a declarative action that can be performed on a custom resource instance",
                          "type": "object",
                          "required": [
                            "path"
                          ],
                          "properties": {
                            "description": {
                              "type": "string"
                            },
                            "displayName": {
                              "type": "string"
                            },
                            "path": {
                              "type": "string"
                            },
                            "value": {
                              "description": "RawMessage is a raw encoded JSON value. It implements Marshaler and Unmarshaler and can be used to delay JSON decoding or precompute a JSON encoding.",
                              "type": "string",
                              "format": "byte"
                            },
                            "x-descriptors": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "description": {
                        "type": "string"
                      },
                      "displayName": {
                        "type": "string"
                      },
                      "kind": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "resources": {
                        "type": "array",
                        "items": {
                          "description": "APIResourceReference is a Kubernetes resource type used by a custom resource",
                          "type": "object",
                          "required": [
                            "kind",
                            "name",
                            "version"
                          ],
                          "properties": {
                            "kind": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "version": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "specDescriptors": {
                        "type": "array",
                        "items": {
                          "description": "SpecDescriptor describes a field in a spec block of a CRD so that OLM can consume it",
                          "type": "object",
                          "required": [
                            "path"
                          ],
                          "properties": {
                            "description": {
                              "type": "string"
                            },
                            "displayName": {
                              "type": "string"
                            },
                            "path": {
                              "type": "string"
                            },
                            "value": {
                              "description": "RawMessage is a raw encoded JSON value. It implements Marshaler and Unmarshaler and can be used to delay JSON decoding or precompute a JSON encoding.",
                              "type": "string",
                              "format": "byte"
                            },
                            "x-descriptors": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "statusDescriptors": {
                        "type": "array",
                        "items": {
                          "description": "StatusDescriptor describes a field in a status block of a CRD so that OLM can consume it",
                          "type": "object",
                          "required": [
                            "path"
                          ],
                          "properties": {
                            "description": {
                              "type": "string"
                            },
                            "displayName": {
                              "type": "string"
                            },
                            "path": {
                              "type": "string"
                            },
                            "value": {
                              "description": "RawMessage is a raw encoded JSON value. It implements Marshaler and Unmarshaler and can be used to delay JSON decoding or precompute a JSON encoding.",
                              "type": "string",
                              "format": "byte"
                            },
                            "x-descriptors": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "version": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "description": {
              "type": "string"
            },
            "displayName": {
              "type": "string"
            },
            "icon": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "base64data",
                  "mediatype"
                ],
                "properties": {
                  "base64data": {
                    "type": "string"
                  },
                  "mediatype": {
                    "type": "string"
                  }
                }
              }
            },
            "install": {
              "description": "NamedInstallStrategy represents the block of an ClusterServiceVersion resource where the install strategy is specified.",
              "type": "object",
              "required": [
                "strategy"
              ],
              "properties": {
                "spec": {
                  "description": "StrategyDetailsDeployment represents the parsed details of a Deployment InstallStrategy.",
                  "type": "object",
                  "required": [
                    "deployments"
                  ],
                  "properties": {
                    "clusterPermissions": {
                      "type": "array",
                      "items": {
                        "description": "StrategyDeploymentPermissions describe the rbac rules and service account needed by the install strategy",
                        "type": "object",
                        "required": [
                          "rules",
                          "serviceAccountName"
                        ],
                        "properties": {
                          "rules": {
                            "type": "array",
                            "items": {
                              "description": "PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.",
                              "type": "object",
                              "required": [
                                "verbs"
                              ],
                              "properties": {
                                "apiGroups": {
                                  "description": "APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "nonResourceURLs": {
                                  "description": "NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"),  but not both.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "resourceNames": {
                                  "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "resources": {
                                  "description": "Resources is a list of resources this rule applies to.  ResourceAll represents all resources.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "verbs": {
                                  "description": "Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          },
                          "serviceAccountName": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "deployments": {
                      "type": "array",
                      "items": {
                        "description": "StrategyDeploymentSpec contains the name, spec and labels for the deployment ALM should create",
                        "type": "object",
                        "required": [
                          "name",
                          "spec"
                        ],
                        "properties": {
                          "label": {
                            "description": "Set is a map of label:value. It implements Labels.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "name": {
                            "type": "string"
                          },
                          "spec": {
                            "description": "DeploymentSpec is the specification of the desired behavior of the Deployment.",
                            "type": "object",
                            "required": [
                              "selector",
                              "template"
                            ],
                            "properties": {
                              "minReadySeconds": {
                                "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
                                "type": "integer",
                                "format": "int32"
                              },
                              "paused": {
                                "description": "Indicates that the deployment is paused.",
                                "type": "boolean"
                              },
                              "progressDeadlineSeconds": {
                                "description": "The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.",
                                "type": "integer",
                                "format": "int32"
                              },
                              "replicas": {
                                "description": "Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.",
                                "type": "integer",
                                "format": "int32"
                              },
                              "revisionHistoryLimit": {
                                "description": "The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.",
                                "type": "integer",
                                "format": "int32"
                              },
                              "selector": {
                                "description": "Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment. It must match the pod template's labels.",
                                "type": "object",
                                "properties": {
                                  "matchExpressions": {
                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                    "type": "array",
                                    "items": {
                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                      "type": "object",
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "description": "key is the label key that the selector applies to.",
                                          "type": "string"
                                        },
                                        "operator": {
                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                          "type": "string"
                                        },
                                        "values": {
                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "matchLabels": {
                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "strategy": {
                                "description": "The deployment strategy to use to replace existing pods with new ones.",
                                "type": "object",
                                "properties": {
                                  "rollingUpdate": {
                                    "description": "Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate. --- TODO: Update this to follow our convention for oneOf, whatever we decide it to be.",
                                    "type": "object",
                                    "properties": {
                                      "maxSurge": {
                                        "description": "The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.",
                                        "x-kubernetes-int-or-string": true
                                      },
                                      "maxUnavailable": {
                                        "description": "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.",
                                        "x-kubernetes-int-or-string": true
                                      }
                                    }
                                  },
                                  "type": {
                                    "description": "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.",
                                    "type": "string"
                                  }
                                }
                              },
                              "template": {
                                "description": "Template describes the pods that will be created.",
                                "type": "object",
                                "properties": {
                                  "metadata": {
                                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                                    "type": "object",
                                    "x-kubernetes-preserve-unknown-fields": true
                                  },
                                  "spec": {
                                    "description": "Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                                    "type": "object",
                                    "required": [
                                      "containers"
                                    ],
                                    "properties": {
                                      "activeDeadlineSeconds": {
                                        "description": "Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.",
                                        "type": "integer",
                                        "format": "int64"
                                      },
                                      "affinity": {
                                        "description": "If specified, the pod's scheduling constraints",
                                        "type": "object",
                                        "properties": {
                                          "nodeAffinity": {
                                            "description": "Describes node affinity scheduling rules for the pod.",
                                            "type": "object",
                                            "properties": {
                                              "preferredDuringSchedulingIgnoredDuringExecution": {
                                                "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
                                                "type": "array",
                                                "items": {
                                                  "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                                                  "type": "object",
                                                  "required": [
                                                    "preference",
                                                    "weight"
                                                  ],
                                                  "properties": {
                                                    "preference": {
                                                      "description": "A node selector term, associated with the corresponding weight.",
                                                      "type": "object",
                                                      "properties": {
                                                        "matchExpressions": {
                                                          "description": "A list of node selector requirements by node's labels.",
                                                          "type": "array",
                                                          "items": {
                                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                            "type": "object",
                                                            "required": [
                                                              "key",
                                                              "operator"
                                                            ],
                                                            "properties": {
                                                              "key": {
                                                                "description": "The label key that the selector applies to.",
                                                                "type": "string"
                                                              },
                                                              "operator": {
                                                                "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                                "type": "string"
                                                              },
                                                              "values": {
                                                                "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        "matchFields": {
                                                          "description": "A list of node selector requirements by node's fields.",
                                                          "type": "array",
                                                          "items": {
                                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                            "type": "object",
                                                            "required": [
                                                              "key",
                                                              "operator"
                                                            ],
                                                            "properties": {
                                                              "key": {
                                                                "description": "The label key that the selector applies to.",
                                                                "type": "string"
                                                              },
                                                              "operator": {
                                                                "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                                "type": "string"
                                                              },
                                                              "values": {
                                                                "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "weight": {
                                                      "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                                                      "type": "integer",
                                                      "format": "int32"
                                                    }
                                                  }
                                                }
                                              },
                                              "requiredDuringSchedulingIgnoredDuringExecution": {
                                                "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.",
                                                "type": "object",
                                                "required": [
                                                  "nodeSelectorTerms"
                                                ],
                                                "properties": {
                                                  "nodeSelectorTerms": {
                                                    "description": "Required. A list of node selector terms. The terms are ORed.",
                                                    "type": "array",
                                                    "items": {
                                                      "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                                                      "type": "object",
                                                      "properties": {
                                                        "matchExpressions": {
                                                          "description": "A list of node selector requirements by node's labels.",
                                                          "type": "array",
                                                          "items": {
                                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                            "type": "object",
                                                            "required": [
                                                              "key",
                                                              "operator"
                                                            ],
                                                            "properties": {
                                                              "key": {
                                                                "description": "The label key that the selector applies to.",
                                                                "type": "string"
                                                              },
                                                              "operator": {
                                                                "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                                "type": "string"
                                                              },
                                                              "values": {
                                                                "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        "matchFields": {
                                                          "description": "A list of node selector requirements by node's fields.",
                                                          "type": "array",
                                                          "items": {
                                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                            "type": "object",
                                                            "required": [
                                                              "key",
                                                              "operator"
                                                            ],
                                                            "properties": {
                                                              "key": {
                                                                "description": "The label key that the selector applies to.",
                                                                "type": "string"
                                                              },
                                                              "operator": {
                                                                "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                                "type": "string"
                                                              },
                                                              "values": {
                                                                "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "podAffinity": {
                                            "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).",
                                            "type": "object",
                                            "properties": {
                                              "preferredDuringSchedulingIgnoredDuringExecution": {
                                                "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                                                "type": "array",
                                                "items": {
                                                  "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                                                  "type": "object",
                                                  "required": [
                                                    "podAffinityTerm",
                                                    "weight"
                                                  ],
                                                  "properties": {
                                                    "podAffinityTerm": {
                                                      "description": "Required. A pod affinity term, associated with the corresponding weight.",
                                                      "type": "object",
                                                      "required": [
                                                        "topologyKey"
                                                      ],
                                                      "properties": {
                                                        "labelSelector": {
                                                          "description": "A label query over a set of resources, in this case pods.",
                                                          "type": "object",
                                                          "properties": {
                                                            "matchExpressions": {
                                                              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                              "type": "array",
                                                              "items": {
                                                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                "type": "object",
                                                                "required": [
                                                                  "key",
                                                                  "operator"
                                                                ],
                                                                "properties": {
                                                                  "key": {
                                                                    "description": "key is the label key that the selector applies to.",
                                                                    "type": "string"
                                                                  },
                                                                  "operator": {
                                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                    "type": "string"
                                                                  },
                                                                  "values": {
                                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                    "type": "array",
                                                                    "items": {
                                                                      "type": "string"
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            },
                                                            "matchLabels": {
                                                              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                              "type": "object",
                                                              "additionalProperties": {
                                                                "type": "string"
                                                              }
                                                            }
                                                          }
                                                        },
                                                        "namespaces": {
                                                          "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        },
                                                        "topologyKey": {
                                                          "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "weight": {
                                                      "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                                                      "type": "integer",
                                                      "format": "int32"
                                                    }
                                                  }
                                                }
                                              },
                                              "requiredDuringSchedulingIgnoredDuringExecution": {
                                                "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                                                "type": "array",
                                                "items": {
                                                  "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                                  "type": "object",
                                                  "required": [
                                                    "topologyKey"
                                                  ],
                                                  "properties": {
                                                    "labelSelector": {
                                                      "description": "A label query over a set of resources, in this case pods.",
                                                      "type": "object",
                                                      "properties": {
                                                        "matchExpressions": {
                                                          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                          "type": "array",
                                                          "items": {
                                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                            "type": "object",
                                                            "required": [
                                                              "key",
                                                              "operator"
                                                            ],
                                                            "properties": {
                                                              "key": {
                                                                "description": "key is the label key that the selector applies to.",
                                                                "type": "string"
                                                              },
                                                              "operator": {
                                                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                "type": "string"
                                                              },
                                                              "values": {
                                                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        "matchLabels": {
                                                          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                          "type": "object",
                                                          "additionalProperties": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "namespaces": {
                                                      "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "topologyKey": {
                                                      "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "podAntiAffinity": {
                                            "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).",
                                            "type": "object",
                                            "properties": {
                                              "preferredDuringSchedulingIgnoredDuringExecution": {
                                                "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                                                "type": "array",
                                                "items": {
                                                  "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                                                  "type": "object",
                                                  "required": [
                                                    "podAffinityTerm",
                                                    "weight"
                                                  ],
                                                  "properties": {
                                                    "podAffinityTerm": {
                                                      "description": "Required. A pod affinity term, associated with the corresponding weight.",
                                                      "type": "object",
                                                      "required": [
                                                        "topologyKey"
                                                      ],
                                                      "properties": {
                                                        "labelSelector": {
                                                          "description": "A label query over a set of resources, in this case pods.",
                                                          "type": "object",
                                                          "properties": {
                                                            "matchExpressions": {
                                                              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                              "type": "array",
                                                              "items": {
                                                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                                "type": "object",
                                                                "required": [
                                                                  "key",
                                                                  "operator"
                                                                ],
                                                                "properties": {
                                                                  "key": {
                                                                    "description": "key is the label key that the selector applies to.",
                                                                    "type": "string"
                                                                  },
                                                                  "operator": {
                                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                    "type": "string"
                                                                  },
                                                                  "values": {
                                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                    "type": "array",
                                                                    "items": {
                                                                      "type": "string"
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            },
                                                            "matchLabels": {
                                                              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                              "type": "object",
                                                              "additionalProperties": {
                                                                "type": "string"
                                                              }
                                                            }
                                                          }
                                                        },
                                                        "namespaces": {
                                                          "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        },
                                                        "topologyKey": {
                                                          "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "weight": {
                                                      "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                                                      "type": "integer",
                                                      "format": "int32"
                                                    }
                                                  }
                                                }
                                              },
                                              "requiredDuringSchedulingIgnoredDuringExecution": {
                                                "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                                                "type": "array",
                                                "items": {
                                                  "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                                  "type": "object",
                                                  "required": [
                                                    "topologyKey"
                                                  ],
                                                  "properties": {
                                                    "labelSelector": {
                                                      "description": "A label query over a set of resources, in this case pods.",
                                                      "type": "object",
                                                      "properties": {
                                                        "matchExpressions": {
                                                          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                          "type": "array",
                                                          "items": {
                                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                            "type": "object",
                                                            "required": [
                                                              "key",
                                                              "operator"
                                                            ],
                                                            "properties": {
                                                              "key": {
                                                                "description": "key is the label key that the selector applies to.",
                                                                "type": "string"
                                                              },
                                                              "operator": {
                                                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                                "type": "string"
                                                              },
                                                              "values": {
                                                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        "matchLabels": {
                                                          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                          "type": "object",
                                                          "additionalProperties": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "namespaces": {
                                                      "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "topologyKey": {
                                                      "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "automountServiceAccountToken": {
                                        "description": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.",
                                        "type": "boolean"
                                      },
                                      "containers": {
                                        "description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
                                        "type": "array",
                                        "items": {
                                          "description": "A single application container that you want to run within a pod.",
                                          "type": "object",
                                          "required": [
                                            "name"
                                          ],
                                          "properties": {
                                            "args": {
                                              "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              }
                                            },
                                            "command": {
                                              "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              }
                                            },
                                            "env": {
                                              "description": "List of environment variables to set in the container. Cannot be updated.",
                                              "type": "array",
                                              "items": {
                                                "description": "EnvVar represents an environment variable present in a Container.",
                                                "type": "object",
                                                "required": [
                                                  "name"
                                                ],
                                                "properties": {
                                                  "name": {
                                                    "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                                                    "type": "string"
                                                  },
                                                  "value": {
                                                    "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
                                                    "type": "string"
                                                  },
                                                  "valueFrom": {
                                                    "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                                                    "type": "object",
                                                    "properties": {
                                                      "configMapKeyRef": {
                                                        "description": "Selects a key of a ConfigMap.",
                                                        "type": "object",
                                                        "required": [
                                                          "key"
                                                        ],
                                                        "properties": {
                                                          "key": {
                                                            "description": "The key to select.",
                                                            "type": "string"
                                                          },
                                                          "name": {
                                                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                                            "type": "string"
                                                          },
                                                          "optional": {
                                                            "description": "Specify whether the ConfigMap or its key must be defined",
                                                            "type": "boolean"
                                                          }
                                                        }
                                                      },
                                                      "fieldRef": {
                                                        "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                                                        "type": "object",
                                                        "required": [
                                                          "fieldPath"
                                                        ],
                                                        "properties": {
                                                          "apiVersion": {
                                                            "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                                            "type": "string"
                                                          },
                                                          "fieldPath": {
                                                            "description": "Path of the field to select in the specified API version.",
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "resourceFieldRef": {
                                                        "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                                                        "type": "object",
                                                        "required": [
                                                          "resource"
                                                        ],
                                                        "properties": {
                                                          "containerName": {
                                                            "description": "Container name: required for volumes, optional for env vars",
                                                            "type": "string"
                                                          },
                                                          "divisor": {
                                                            "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                            "x-kubernetes-int-or-string": true
                                                          },
                                                          "resource": {
                                                            "description": "Required: resource to select",
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "secretKeyRef": {
                                                        "description": "Selects a key of a secret in the pod's namespace",
                                                        "type": "object",
                                                        "required": [
                                                          "key"
                                                        ],
                                                        "properties": {
                                                          "key": {
                                                            "description": "The key of the secret to select from.  Must be a valid secret key.",
                                                            "type": "string"
                                                          },
                                                          "name": {
                                                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                                            "type": "string"
                                                          },
                                                          "optional": {
                                                            "description": "Specify whether the Secret or its key must be defined",
                                                            "type": "boolean"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "envFrom": {
                                              "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                                              "type": "array",
                                              "items": {
                                                "description": "EnvFromSource represents the source of a set of ConfigMaps",
                                                "type": "object",
                                                "properties": {
                                                  "configMapRef": {
                                                    "description": "The ConfigMap to select from",
                                                    "type": "object",
                                                    "properties": {
                                                      "name": {
                                                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                                        "type": "string"
                                                      },
                                                      "optional": {
                                                        "description": "Specify whether the ConfigMap must be defined",
                                                        "type": "boolean"
                                                      }
                                                    }
                                                  },
                                                  "prefix": {
                                                    "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
                                                    "type": "string"
                                                  },
                                                  "secretRef": {
                                                    "description": "The Secret to select from",
                                                    "type": "object",
                                                    "properties": {
                                                      "name": {
                                                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                                        "type": "string"
                                                      },
                                                      "optional": {
                                                        "description": "Specify whether the Secret must be defined",
                                                        "type": "boolean"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "image": {
                                              "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
                                              "type": "string"
                                            },
                                            "imagePullPolicy": {
                                              "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                                              "type": "string"
                                            },
                                            "lifecycle": {
                                              "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated.",
                                              "type": "object",
                                              "properties": {
                                                "postStart": {
                                                  "description": "PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                                                  "type": "object",
                                                  "properties": {
                                                    "exec": {
                                                      "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                                                      "type": "object",
                                                      "properties": {
                                                        "command": {
                                                          "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "httpGet": {
                                                      "description": "HTTPGet specifies the http request to perform.",
                                                      "type": "object",
                                                      "required": [
                                                        "port"
                                                      ],
                                                      "properties": {
                                                        "host": {
                                                          "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                                          "type": "string"
                                                        },
                                                        "httpHeaders": {
                                                          "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                                          "type": "array",
                                                          "items": {
                                                            "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                                            "type": "object",
                                                            "required": [
                                                              "name",
                                                              "value"
                                                            ],
                                                            "properties": {
                                                              "name": {
                                                                "description": "The header field name",
                                                                "type": "string"
                                                              },
                                                              "value": {
                                                                "description": "The header field value",
                                                                "type": "string"
                                                              }
                                                            }
                                                          }
                                                        },
                                                        "path": {
                                                          "description": "Path to access on the HTTP server.",
                                                          "type": "string"
                                                        },
                                                        "port": {
                                                          "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                          "x-kubernetes-int-or-string": true
                                                        },
                                                        "scheme": {
                                                          "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "tcpSocket": {
                                                      "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                                                      "type": "object",
                                                      "required": [
                                                        "port"
                                                      ],
                                                      "properties": {
                                                        "host": {
                                                          "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                                          "type": "string"
                                                        },
                                                        "port": {
                                                          "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                          "x-kubernetes-int-or-string": true
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "preStop": {
                                                  "description": "PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                                                  "type": "object",
                                                  "properties": {
                                                    "exec": {
                                                      "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                                                      "type": "object",
                                                      "properties": {
                                                        "command": {
                                                          "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "httpGet": {
                                                      "description": "HTTPGet specifies the http request to perform.",
                                                      "type": "object",
                                                      "required": [
                                                        "port"
                                                      ],
                                                      "properties": {
                                                        "host": {
                                                          "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                                          "type": "string"
                                                        },
                                                        "httpHeaders": {
                                                          "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                                          "type": "array",
                                                          "items": {
                                                            "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                                            "type": "object",
                                                            "required": [
                                                              "name",
                                                              "value"
                                                            ],
                                                            "properties": {
                                                              "name": {
                                                                "description": "The header field name",
                                                                "type": "string"
                                                              },
                                                              "value": {
                                                                "description": "The header field value",
                                                                "type": "string"
                                                              }
                                                            }
                                                          }
                                                        },
                                                        "path": {
                                                          "description": "Path to access on the HTTP server.",
                                                          "type": "string"
                                                        },
                                                        "port": {
                                                          "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                          "x-kubernetes-int-or-string": true
                                                        },
                                                        "scheme": {
                                                          "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "tcpSocket": {
                                                      "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                                                      "type": "object",
                                                      "required": [
                                                        "port"
                                                      ],
                                                      "properties": {
                                                        "host": {
                                                          "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                                          "type": "string"
                                                        },
                                                        "port": {
                                                          "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                          "x-kubernetes-int-or-string": true
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "livenessProbe": {
                                              "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                              "type": "object",
                                              "properties": {
                                                "exec": {
                                                  "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                                                  "type": "object",
                                                  "properties": {
                                                    "command": {
                                                      "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "failureThreshold": {
                                                  "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "httpGet": {
                                                  "description": "HTTPGet specifies the http request to perform.",
                                                  "type": "object",
                                                  "required": [
                                                    "port"
                                                  ],
                                                  "properties": {
                                                    "host": {
                                                      "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                                      "type": "string"
                                                    },
                                                    "httpHeaders": {
                                                      "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                                      "type": "array",
                                                      "items": {
                                                        "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                                        "type": "object",
                                                        "required": [
                                                          "name",
                                                          "value"
                                                        ],
                                                        "properties": {
                                                          "name": {
                                                            "description": "The header field name",
                                                            "type": "string"
                                                          },
                                                          "value": {
                                                            "description": "The header field value",
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "path": {
                                                      "description": "Path to access on the HTTP server.",
                                                      "type": "string"
                                                    },
                                                    "port": {
                                                      "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                      "x-kubernetes-int-or-string": true
                                                    },
                                                    "scheme": {
                                                      "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "initialDelaySeconds": {
                                                  "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "periodSeconds": {
                                                  "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "successThreshold": {
                                                  "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "tcpSocket": {
                                                  "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                                                  "type": "object",
                                                  "required": [
                                                    "port"
                                                  ],
                                                  "properties": {
                                                    "host": {
                                                      "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                                      "type": "string"
                                                    },
                                                    "port": {
                                                      "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                      "x-kubernetes-int-or-string": true
                                                    }
                                                  }
                                                },
                                                "timeoutSeconds": {
                                                  "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                                  "type": "integer",
                                                  "format": "int32"
                                                }
                                              }
                                            },
                                            "name": {
                                              "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
                                              "type": "string"
                                            },
                                            "ports": {
                                              "description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
                                              "type": "array",
                                              "items": {
                                                "description": "ContainerPort represents a network port in a single container.",
                                                "type": "object",
                                                "required": [
                                                  "containerPort"
                                                ],
                                                "properties": {
                                                  "containerPort": {
                                                    "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
                                                    "type": "integer",
                                                    "format": "int32"
                                                  },
                                                  "hostIP": {
                                                    "description": "What host IP to bind the external port to.",
                                                    "type": "string"
                                                  },
                                                  "hostPort": {
                                                    "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
                                                    "type": "integer",
                                                    "format": "int32"
                                                  },
                                                  "name": {
                                                    "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.",
                                                    "type": "string"
                                                  },
                                                  "protocol": {
                                                    "description": "Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".",
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "x-kubernetes-list-map-keys": [
                                                "containerPort",
                                                "protocol"
                                              ],
                                              "x-kubernetes-list-type": "map"
                                            },
                                            "readinessProbe": {
                                              "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                              "type": "object",
                                              "properties": {
                                                "exec": {
                                                  "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                                                  "type": "object",
                                                  "properties": {
                                                    "command": {
                                                      "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "failureThreshold": {
                                                  "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "httpGet": {
                                                  "description": "HTTPGet specifies the http request to perform.",
                                                  "type": "object",
                                                  "required": [
                                                    "port"
                                                  ],
                                                  "properties": {
                                                    "host": {
                                                      "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                                      "type": "string"
                                                    },
                                                    "httpHeaders": {
                                                      "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                                      "type": "array",
                                                      "items": {
                                                        "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                                        "type": "object",
                                                        "required": [
                                                          "name",
                                                          "value"
                                                        ],
                                                        "properties": {
                                                          "name": {
                                                            "description": "The header field name",
                                                            "type": "string"
                                                          },
                                                          "value": {
                                                            "description": "The header field value",
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "path": {
                                                      "description": "Path to access on the HTTP server.",
                                                      "type": "string"
                                                    },
                                                    "port": {
                                                      "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                      "x-kubernetes-int-or-string": true
                                                    },
                                                    "scheme": {
                                                      "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "initialDelaySeconds": {
                                                  "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "periodSeconds": {
                                                  "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "successThreshold": {
                                                  "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "tcpSocket": {
                                                  "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                                                  "type": "object",
                                                  "required": [
                                                    "port"
                                                  ],
                                                  "properties": {
                                                    "host": {
                                                      "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                                      "type": "string"
                                                    },
                                                    "port": {
                                                      "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                      "x-kubernetes-int-or-string": true
                                                    }
                                                  }
                                                },
                                                "timeoutSeconds": {
                                                  "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                                  "type": "integer",
                                                  "format": "int32"
                                                }
                                              }
                                            },
                                            "resources": {
                                              "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                                              "type": "object",
                                              "properties": {
                                                "limits": {
                                                  "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                                                  "type": "object",
                                                  "additionalProperties": {
                                                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                    "x-kubernetes-int-or-string": true
                                                  }
                                                },
                                                "requests": {
                                                  "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                                                  "type": "object",
                                                  "additionalProperties": {
                                                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                    "x-kubernetes-int-or-string": true
                                                  }
                                                }
                                              }
                                            },
                                            "securityContext": {
                                              "description": "Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                                              "type": "object",
                                              "properties": {
                                                "allowPrivilegeEscalation": {
                                                  "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN",
                                                  "type": "boolean"
                                                },
                                                "capabilities": {
                                                  "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.",
                                                  "type": "object",
                                                  "properties": {
                                                    "add": {
                                                      "description": "Added capabilities",
                                                      "type": "array",
                                                      "items": {
                                                        "description": "Capability represent POSIX capabilities type",
                                                        "type": "string"
                                                      }
                                                    },
                                                    "drop": {
                                                      "description": "Removed capabilities",
                                                      "type": "array",
                                                      "items": {
                                                        "description": "Capability represent POSIX capabilities type",
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "privileged": {
                                                  "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.",
                                                  "type": "boolean"
                                                },
                                                "procMount": {
                                                  "description": "procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.",
                                                  "type": "string"
                                                },
                                                "readOnlyRootFilesystem": {
                                                  "description": "Whether this container has a read-only root filesystem. Default is false.",
                                                  "type": "boolean"
                                                },
                                                "runAsGroup": {
                                                  "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                                  "type": "integer",
                                                  "format": "int64"
                                                },
                                                "runAsNonRoot": {
                                                  "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                                  "type": "boolean"
                                                },
                                                "runAsUser": {
                                                  "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                                  "type": "integer",
                                                  "format": "int64"
                                                },
                                                "seLinuxOptions": {
                                                  "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                                  "type": "object",
                                                  "properties": {
                                                    "level": {
                                                      "description": "Level is SELinux level label that applies to the container.",
                                                      "type": "string"
                                                    },
                                                    "role": {
                                                      "description": "Role is a SELinux role label that applies to the container.",
                                                      "type": "string"
                                                    },
                                                    "type": {
                                                      "description": "Type is a SELinux type label that applies to the container.",
                                                      "type": "string"
                                                    },
                                                    "user": {
                                                      "description": "User is a SELinux user label that applies to the container.",
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "windowsOptions": {
                                                  "description": "The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                                  "type": "object",
                                                  "properties": {
                                                    "gmsaCredentialSpec": {
                                                      "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
                                                      "type": "string"
                                                    },
                                                    "gmsaCredentialSpecName": {
                                                      "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                                                      "type": "string"
                                                    },
                                                    "runAsUserName": {
                                                      "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "startupProbe": {
                                              "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                              "type": "object",
                                              "properties": {
                                                "exec": {
                                                  "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                                                  "type": "object",
                                                  "properties": {
                                                    "command": {
                                                      "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "failureThreshold": {
                                                  "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "httpGet": {
                                                  "description": "HTTPGet specifies the http request to perform.",
                                                  "type": "object",
                                                  "required": [
                                                    "port"
                                                  ],
                                                  "properties": {
                                                    "host": {
                                                      "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                                      "type": "string"
                                                    },
                                                    "httpHeaders": {
                                                      "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                                      "type": "array",
                                                      "items": {
                                                        "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                                        "type": "object",
                                                        "required": [
                                                          "name",
                                                          "value"
                                                        ],
                                                        "properties": {
                                                          "name": {
                                                            "description": "The header field name",
                                                            "type": "string"
                                                          },
                                                          "value": {
                                                            "description": "The header field value",
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "path": {
                                                      "description": "Path to access on the HTTP server.",
                                                      "type": "string"
                                                    },
                                                    "port": {
                                                      "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                      "x-kubernetes-int-or-string": true
                                                    },
                                                    "scheme": {
                                                      "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "initialDelaySeconds": {
                                                  "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "periodSeconds": {
                                                  "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "successThreshold": {
                                                  "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "tcpSocket": {
                                                  "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                                                  "type": "object",
                                                  "required": [
                                                    "port"
                                                  ],
                                                  "properties": {
                                                    "host": {
                                                      "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                                      "type": "string"
                                                    },
                                                    "port": {
                                                      "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                      "x-kubernetes-int-or-string": true
                                                    }
                                                  }
                                                },
                                                "timeoutSeconds": {
                                                  "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                                  "type": "integer",
                                                  "format": "int32"
                                                }
                                              }
                                            },
                                            "stdin": {
                                              "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
                                              "type": "boolean"
                                            },
                                            "stdinOnce": {
                                              "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
                                              "type": "boolean"
                                            },
                                            "terminationMessagePath": {
                                              "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                                              "type": "string"
                                            },
                                            "terminationMessagePolicy": {
                                              "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
                                              "type": "string"
                                            },
                                            "tty": {
                                              "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                                              "type": "boolean"
                                            },
                                            "volumeDevices": {
                                              "description": "volumeDevices is the list of block devices to be used by the container.",
                                              "type": "array",
                                              "items": {
                                                "description": "volumeDevice describes a mapping of a raw block device within a container.",
                                                "type": "object",
                                                "required": [
                                                  "devicePath",
                                                  "name"
                                                ],
                                                "properties": {
                                                  "devicePath": {
                                                    "description": "devicePath is the path inside of the container that the device will be mapped to.",
                                                    "type": "string"
                                                  },
                                                  "name": {
                                                    "description": "name must match the name of a persistentVolumeClaim in the pod",
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "volumeMounts": {
                                              "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                                              "type": "array",
                                              "items": {
                                                "description": "VolumeMount describes a mounting of a Volume within a container.",
                                                "type": "object",
                                                "required": [
                                                  "mountPath",
                                                  "name"
                                                ],
                                                "properties": {
                                                  "mountPath": {
                                                    "description": "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                                                    "type": "string"
                                                  },
                                                  "mountPropagation": {
                                                    "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
                                                    "type": "string"
                                                  },
                                                  "name": {
                                                    "description": "This must match the Name of a Volume.",
                                                    "type": "string"
                                                  },
                                                  "readOnly": {
                                                    "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
                                                    "type": "boolean"
                                                  },
                                                  "subPath": {
                                                    "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
                                                    "type": "string"
                                                  },
                                                  "subPathExpr": {
                                                    "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.",
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "workingDir": {
                                              "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                                              "type": "string"
                                            }
                                          }
                                        }
                                      },
                                      "dnsConfig": {
                                        "description": "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.",
                                        "type": "object",
                                        "properties": {
                                          "nameservers": {
                                            "description": "A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.",
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            }
                                          },
                                          "options": {
                                            "description": "A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.",
                                            "type": "array",
                                            "items": {
                                              "description": "PodDNSConfigOption defines DNS resolver options of a pod.",
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "description": "Required.",
                                                  "type": "string"
                                                },
                                                "value": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          },
                                          "searches": {
                                            "description": "A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.",
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            }
                                          }
                                        }
                                      },
                                      "dnsPolicy": {
                                        "description": "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.",
                                        "type": "string"
                                      },
                                      "enableServiceLinks": {
                                        "description": "EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.",
                                        "type": "boolean"
                                      },
                                      "ephemeralContainers": {
                                        "description": "List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource. This field is alpha-level and is only honored by servers that enable the EphemeralContainers feature.",
                                        "type": "array",
                                        "items": {
                                          "description": "An EphemeralContainer is a container that may be added temporarily to an existing pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a pod is removed or restarted. If an ephemeral container causes a pod to exceed its resource allocation, the pod may be evicted. Ephemeral containers may not be added by directly updating the pod spec. They must be added via the pod's ephemeralcontainers subresource, and they will appear in the pod spec once added. This is an alpha feature enabled by the EphemeralContainers feature flag.",
                                          "type": "object",
                                          "required": [
                                            "name"
                                          ],
                                          "properties": {
                                            "args": {
                                              "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              }
                                            },
                                            "command": {
                                              "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              }
                                            },
                                            "env": {
                                              "description": "List of environment variables to set in the container. Cannot be updated.",
                                              "type": "array",
                                              "items": {
                                                "description": "EnvVar represents an environment variable present in a Container.",
                                                "type": "object",
                                                "required": [
                                                  "name"
                                                ],
                                                "properties": {
                                                  "name": {
                                                    "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                                                    "type": "string"
                                                  },
                                                  "value": {
                                                    "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
                                                    "type": "string"
                                                  },
                                                  "valueFrom": {
                                                    "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                                                    "type": "object",
                                                    "properties": {
                                                      "configMapKeyRef": {
                                                        "description": "Selects a key of a ConfigMap.",
                                                        "type": "object",
                                                        "required": [
                                                          "key"
                                                        ],
                                                        "properties": {
                                                          "key": {
                                                            "description": "The key to select.",
                                                            "type": "string"
                                                          },
                                                          "name": {
                                                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                                            "type": "string"
                                                          },
                                                          "optional": {
                                                            "description": "Specify whether the ConfigMap or its key must be defined",
                                                            "type": "boolean"
                                                          }
                                                        }
                                                      },
                                                      "fieldRef": {
                                                        "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                                                        "type": "object",
                                                        "required": [
                                                          "fieldPath"
                                                        ],
                                                        "properties": {
                                                          "apiVersion": {
                                                            "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                                            "type": "string"
                                                          },
                                                          "fieldPath": {
                                                            "description": "Path of the field to select in the specified API version.",
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "resourceFieldRef": {
                                                        "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                                                        "type": "object",
                                                        "required": [
                                                          "resource"
                                                        ],
                                                        "properties": {
                                                          "containerName": {
                                                            "description": "Container name: required for volumes, optional for env vars",
                                                            "type": "string"
                                                          },
                                                          "divisor": {
                                                            "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                            "x-kubernetes-int-or-string": true
                                                          },
                                                          "resource": {
                                                            "description": "Required: resource to select",
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "secretKeyRef": {
                                                        "description": "Selects a key of a secret in the pod's namespace",
                                                        "type": "object",
                                                        "required": [
                                                          "key"
                                                        ],
                                                        "properties": {
                                                          "key": {
                                                            "description": "The key of the secret to select from.  Must be a valid secret key.",
                                                            "type": "string"
                                                          },
                                                          "name": {
                                                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                                            "type": "string"
                                                          },
                                                          "optional": {
                                                            "description": "Specify whether the Secret or its key must be defined",
                                                            "type": "boolean"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "envFrom": {
                                              "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                                              "type": "array",
                                              "items": {
                                                "description": "EnvFromSource represents the source of a set of ConfigMaps",
                                                "type": "object",
                                                "properties": {
                                                  "configMapRef": {
                                                    "description": "The ConfigMap to select from",
                                                    "type": "object",
                                                    "properties": {
                                                      "name": {
                                                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                                        "type": "string"
                                                      },
                                                      "optional": {
                                                        "description": "Specify whether the ConfigMap must be defined",
                                                        "type": "boolean"
                                                      }
                                                    }
                                                  },
                                                  "prefix": {
                                                    "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
                                                    "type": "string"
                                                  },
                                                  "secretRef": {
                                                    "description": "The Secret to select from",
                                                    "type": "object",
                                                    "properties": {
                                                      "name": {
                                                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                                        "type": "string"
                                                      },
                                                      "optional": {
                                                        "description": "Specify whether the Secret must be defined",
                                                        "type": "boolean"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "image": {
                                              "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images",
                                              "type": "string"
                                            },
                                            "imagePullPolicy": {
                                              "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                                              "type": "string"
                                            },
                                            "lifecycle": {
                                              "description": "Lifecycle is not allowed for ephemeral containers.",
                                              "type": "object",
                                              "properties": {
                                                "postStart": {
                                                  "description": "PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                                                  "type": "object",
                                                  "properties": {
                                                    "exec": {
                                                      "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                                                      "type": "object",
                                                      "properties": {
                                                        "command": {
                                                          "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "httpGet": {
                                                      "description": "HTTPGet specifies the http request to perform.",
                                                      "type": "object",
                                                      "required": [
                                                        "port"
                                                      ],
                                                      "properties": {
                                                        "host": {
                                                          "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                                          "type": "string"
                                                        },
                                                        "httpHeaders": {
                                                          "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                                          "type": "array",
                                                          "items": {
                                                            "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                                            "type": "object",
                                                            "required": [
                                                              "name",
                                                              "value"
                                                            ],
                                                            "properties": {
                                                              "name": {
                                                                "description": "The header field name",
                                                                "type": "string"
                                                              },
                                                              "value": {
                                                                "description": "The header field value",
                                                                "type": "string"
                                                              }
                                                            }
                                                          }
                                                        },
                                                        "path": {
                                                          "description": "Path to access on the HTTP server.",
                                                          "type": "string"
                                                        },
                                                        "port": {
                                                          "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                          "x-kubernetes-int-or-string": true
                                                        },
                                                        "scheme": {
                                                          "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "tcpSocket": {
                                                      "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                                                      "type": "object",
                                                      "required": [
                                                        "port"
                                                      ],
                                                      "properties": {
                                                        "host": {
                                                          "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                                          "type": "string"
                                                        },
                                                        "port": {
                                                          "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                          "x-kubernetes-int-or-string": true
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "preStop": {
                                                  "description": "PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                                                  "type": "object",
                                                  "properties": {
                                                    "exec": {
                                                      "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                                                      "type": "object",
                                                      "properties": {
                                                        "command": {
                                                          "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "httpGet": {
                                                      "description": "HTTPGet specifies the http request to perform.",
                                                      "type": "object",
                                                      "required": [
                                                        "port"
                                                      ],
                                                      "properties": {
                                                        "host": {
                                                          "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                                          "type": "string"
                                                        },
                                                        "httpHeaders": {
                                                          "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                                          "type": "array",
                                                          "items": {
                                                            "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                                            "type": "object",
                                                            "required": [
                                                              "name",
                                                              "value"
                                                            ],
                                                            "properties": {
                                                              "name": {
                                                                "description": "The header field name",
                                                                "type": "string"
                                                              },
                                                              "value": {
                                                                "description": "The header field value",
                                                                "type": "string"
                                                              }
                                                            }
                                                          }
                                                        },
                                                        "path": {
                                                          "description": "Path to access on the HTTP server.",
                                                          "type": "string"
                                                        },
                                                        "port": {
                                                          "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                          "x-kubernetes-int-or-string": true
                                                        },
                                                        "scheme": {
                                                          "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "tcpSocket": {
                                                      "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                                                      "type": "object",
                                                      "required": [
                                                        "port"
                                                      ],
                                                      "properties": {
                                                        "host": {
                                                          "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                                          "type": "string"
                                                        },
                                                        "port": {
                                                          "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                          "x-kubernetes-int-or-string": true
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "livenessProbe": {
                                              "description": "Probes are not allowed for ephemeral containers.",
                                              "type": "object",
                                              "properties": {
                                                "exec": {
                                                  "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                                                  "type": "object",
                                                  "properties": {
                                                    "command": {
                                                      "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "failureThreshold": {
                                                  "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "httpGet": {
                                                  "description": "HTTPGet specifies the http request to perform.",
                                                  "type": "object",
                                                  "required": [
                                                    "port"
                                                  ],
                                                  "properties": {
                                                    "host": {
                                                      "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                                      "type": "string"
                                                    },
                                                    "httpHeaders": {
                                                      "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                                      "type": "array",
                                                      "items": {
                                                        "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                                        "type": "object",
                                                        "required": [
                                                          "name",
                                                          "value"
                                                        ],
                                                        "properties": {
                                                          "name": {
                                                            "description": "The header field name",
                                                            "type": "string"
                                                          },
                                                          "value": {
                                                            "description": "The header field value",
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "path": {
                                                      "description": "Path to access on the HTTP server.",
                                                      "type": "string"
                                                    },
                                                    "port": {
                                                      "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                      "x-kubernetes-int-or-string": true
                                                    },
                                                    "scheme": {
                                                      "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "initialDelaySeconds": {
                                                  "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "periodSeconds": {
                                                  "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "successThreshold": {
                                                  "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "tcpSocket": {
                                                  "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                                                  "type": "object",
                                                  "required": [
                                                    "port"
                                                  ],
                                                  "properties": {
                                                    "host": {
                                                      "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                                      "type": "string"
                                                    },
                                                    "port": {
                                                      "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                      "x-kubernetes-int-or-string": true
                                                    }
                                                  }
                                                },
                                                "timeoutSeconds": {
                                                  "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                                  "type": "integer",
                                                  "format": "int32"
                                                }
                                              }
                                            },
                                            "name": {
                                              "description": "Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.",
                                              "type": "string"
                                            },
                                            "ports": {
                                              "description": "Ports are not allowed for ephemeral containers.",
                                              "type": "array",
                                              "items": {
                                                "description": "ContainerPort represents a network port in a single container.",
                                                "type": "object",
                                                "required": [
                                                  "containerPort"
                                                ],
                                                "properties": {
                                                  "containerPort": {
                                                    "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
                                                    "type": "integer",
                                                    "format": "int32"
                                                  },
                                                  "hostIP": {
                                                    "description": "What host IP to bind the external port to.",
                                                    "type": "string"
                                                  },
                                                  "hostPort": {
                                                    "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
                                                    "type": "integer",
                                                    "format": "int32"
                                                  },
                                                  "name": {
                                                    "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.",
                                                    "type": "string"
                                                  },
                                                  "protocol": {
                                                    "description": "Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".",
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "readinessProbe": {
                                              "description": "Probes are not allowed for ephemeral containers.",
                                              "type": "object",
                                              "properties": {
                                                "exec": {
                                                  "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                                                  "type": "object",
                                                  "properties": {
                                                    "command": {
                                                      "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "failureThreshold": {
                                                  "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "httpGet": {
                                                  "description": "HTTPGet specifies the http request to perform.",
                                                  "type": "object",
                                                  "required": [
                                                    "port"
                                                  ],
                                                  "properties": {
                                                    "host": {
                                                      "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                                      "type": "string"
                                                    },
                                                    "httpHeaders": {
                                                      "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                                      "type": "array",
                                                      "items": {
                                                        "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                                        "type": "object",
                                                        "required": [
                                                          "name",
                                                          "value"
                                                        ],
                                                        "properties": {
                                                          "name": {
                                                            "description": "The header field name",
                                                            "type": "string"
                                                          },
                                                          "value": {
                                                            "description": "The header field value",
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "path": {
                                                      "description": "Path to access on the HTTP server.",
                                                      "type": "string"
                                                    },
                                                    "port": {
                                                      "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                      "x-kubernetes-int-or-string": true
                                                    },
                                                    "scheme": {
                                                      "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "initialDelaySeconds": {
                                                  "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "periodSeconds": {
                                                  "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "successThreshold": {
                                                  "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "tcpSocket": {
                                                  "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                                                  "type": "object",
                                                  "required": [
                                                    "port"
                                                  ],
                                                  "properties": {
                                                    "host": {
                                                      "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                                      "type": "string"
                                                    },
                                                    "port": {
                                                      "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                      "x-kubernetes-int-or-string": true
                                                    }
                                                  }
                                                },
                                                "timeoutSeconds": {
                                                  "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                                  "type": "integer",
                                                  "format": "int32"
                                                }
                                              }
                                            },
                                            "resources": {
                                              "description": "Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.",
                                              "type": "object",
                                              "properties": {
                                                "limits": {
                                                  "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                                                  "type": "object",
                                                  "additionalProperties": {
                                                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                    "x-kubernetes-int-or-string": true
                                                  }
                                                },
                                                "requests": {
                                                  "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                                                  "type": "object",
                                                  "additionalProperties": {
                                                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                    "x-kubernetes-int-or-string": true
                                                  }
                                                }
                                              }
                                            },
                                            "securityContext": {
                                              "description": "SecurityContext is not allowed for ephemeral containers.",
                                              "type": "object",
                                              "properties": {
                                                "allowPrivilegeEscalation": {
                                                  "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN",
                                                  "type": "boolean"
                                                },
                                                "capabilities": {
                                                  "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.",
                                                  "type": "object",
                                                  "properties": {
                                                    "add": {
                                                      "description": "Added capabilities",
                                                      "type": "array",
                                                      "items": {
                                                        "description": "Capability represent POSIX capabilities type",
                                                        "type": "string"
                                                      }
                                                    },
                                                    "drop": {
                                                      "description": "Removed capabilities",
                                                      "type": "array",
                                                      "items": {
                                                        "description": "Capability represent POSIX capabilities type",
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "privileged": {
                                                  "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.",
                                                  "type": "boolean"
                                                },
                                                "procMount": {
                                                  "description": "procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.",
                                                  "type": "string"
                                                },
                                                "readOnlyRootFilesystem": {
                                                  "description": "Whether this container has a read-only root filesystem. Default is false.",
                                                  "type": "boolean"
                                                },
                                                "runAsGroup": {
                                                  "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                                  "type": "integer",
                                                  "format": "int64"
                                                },
                                                "runAsNonRoot": {
                                                  "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                                  "type": "boolean"
                                                },
                                                "runAsUser": {
                                                  "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                                  "type": "integer",
                                                  "format": "int64"
                                                },
                                                "seLinuxOptions": {
                                                  "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                                  "type": "object",
                                                  "properties": {
                                                    "level": {
                                                      "description": "Level is SELinux level label that applies to the container.",
                                                      "type": "string"
                                                    },
                                                    "role": {
                                                      "description": "Role is a SELinux role label that applies to the container.",
                                                      "type": "string"
                                                    },
                                                    "type": {
                                                      "description": "Type is a SELinux type label that applies to the container.",
                                                      "type": "string"
                                                    },
                                                    "user": {
                                                      "description": "User is a SELinux user label that applies to the container.",
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "windowsOptions": {
                                                  "description": "The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                                  "type": "object",
                                                  "properties": {
                                                    "gmsaCredentialSpec": {
                                                      "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
                                                      "type": "string"
                                                    },
                                                    "gmsaCredentialSpecName": {
                                                      "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                                                      "type": "string"
                                                    },
                                                    "runAsUserName": {
                                                      "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "startupProbe": {
                                              "description": "Probes are not allowed for ephemeral containers.",
                                              "type": "object",
                                              "properties": {
                                                "exec": {
                                                  "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                                                  "type": "object",
                                                  "properties": {
                                                    "command": {
                                                      "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "failureThreshold": {
                                                  "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "httpGet": {
                                                  "description": "HTTPGet specifies the http request to perform.",
                                                  "type": "object",
                                                  "required": [
                                                    "port"
                                                  ],
                                                  "properties": {
                                                    "host": {
                                                      "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                                      "type": "string"
                                                    },
                                                    "httpHeaders": {
                                                      "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                                      "type": "array",
                                                      "items": {
                                                        "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                                        "type": "object",
                                                        "required": [
                                                          "name",
                                                          "value"
                                                        ],
                                                        "properties": {
                                                          "name": {
                                                            "description": "The header field name",
                                                            "type": "string"
                                                          },
                                                          "value": {
                                                            "description": "The header field value",
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "path": {
                                                      "description": "Path to access on the HTTP server.",
                                                      "type": "string"
                                                    },
                                                    "port": {
                                                      "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                      "x-kubernetes-int-or-string": true
                                                    },
                                                    "scheme": {
                                                      "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "initialDelaySeconds": {
                                                  "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "periodSeconds": {
                                                  "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "successThreshold": {
                                                  "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "tcpSocket": {
                                                  "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                                                  "type": "object",
                                                  "required": [
                                                    "port"
                                                  ],
                                                  "properties": {
                                                    "host": {
                                                      "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                                      "type": "string"
                                                    },
                                                    "port": {
                                                      "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                      "x-kubernetes-int-or-string": true
                                                    }
                                                  }
                                                },
                                                "timeoutSeconds": {
                                                  "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                                  "type": "integer",
                                                  "format": "int32"
                                                }
                                              }
                                            },
                                            "stdin": {
                                              "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
                                              "type": "boolean"
                                            },
                                            "stdinOnce": {
                                              "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
                                              "type": "boolean"
                                            },
                                            "targetContainerName": {
                                              "description": "If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container is run in whatever namespaces are shared for the pod. Note that the container runtime must support this feature.",
                                              "type": "string"
                                            },
                                            "terminationMessagePath": {
                                              "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                                              "type": "string"
                                            },
                                            "terminationMessagePolicy": {
                                              "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
                                              "type": "string"
                                            },
                                            "tty": {
                                              "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                                              "type": "boolean"
                                            },
                                            "volumeDevices": {
                                              "description": "volumeDevices is the list of block devices to be used by the container.",
                                              "type": "array",
                                              "items": {
                                                "description": "volumeDevice describes a mapping of a raw block device within a container.",
                                                "type": "object",
                                                "required": [
                                                  "devicePath",
                                                  "name"
                                                ],
                                                "properties": {
                                                  "devicePath": {
                                                    "description": "devicePath is the path inside of the container that the device will be mapped to.",
                                                    "type": "string"
                                                  },
                                                  "name": {
                                                    "description": "name must match the name of a persistentVolumeClaim in the pod",
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "volumeMounts": {
                                              "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                                              "type": "array",
                                              "items": {
                                                "description": "VolumeMount describes a mounting of a Volume within a container.",
                                                "type": "object",
                                                "required": [
                                                  "mountPath",
                                                  "name"
                                                ],
                                                "properties": {
                                                  "mountPath": {
                                                    "description": "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                                                    "type": "string"
                                                  },
                                                  "mountPropagation": {
                                                    "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
                                                    "type": "string"
                                                  },
                                                  "name": {
                                                    "description": "This must match the Name of a Volume.",
                                                    "type": "string"
                                                  },
                                                  "readOnly": {
                                                    "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
                                                    "type": "boolean"
                                                  },
                                                  "subPath": {
                                                    "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
                                                    "type": "string"
                                                  },
                                                  "subPathExpr": {
                                                    "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.",
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "workingDir": {
                                              "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                                              "type": "string"
                                            }
                                          }
                                        }
                                      },
                                      "hostAliases": {
                                        "description": "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.",
                                        "type": "array",
                                        "items": {
                                          "description": "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.",
                                          "type": "object",
                                          "properties": {
                                            "hostnames": {
                                              "description": "Hostnames for the above IP address.",
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              }
                                            },
                                            "ip": {
                                              "description": "IP address of the host file entry.",
                                              "type": "string"
                                            }
                                          }
                                        }
                                      },
                                      "hostIPC": {
                                        "description": "Use the host's ipc namespace. Optional: Default to false.",
                                        "type": "boolean"
                                      },
                                      "hostNetwork": {
                                        "description": "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.",
                                        "type": "boolean"
                                      },
                                      "hostPID": {
                                        "description": "Use the host's pid namespace. Optional: Default to false.",
                                        "type": "boolean"
                                      },
                                      "hostname": {
                                        "description": "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.",
                                        "type": "string"
                                      },
                                      "imagePullSecrets": {
                                        "description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
                                        "type": "array",
                                        "items": {
                                          "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                              "type": "string"
                                            }
                                          }
                                        }
                                      },
                                      "initContainers": {
                                        "description": "List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
                                        "type": "array",
                                        "items": {
                                          "description": "A single application container that you want to run within a pod.",
                                          "type": "object",
                                          "required": [
                                            "name"
                                          ],
                                          "properties": {
                                            "args": {
                                              "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              }
                                            },
                                            "command": {
                                              "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              }
                                            },
                                            "env": {
                                              "description": "List of environment variables to set in the container. Cannot be updated.",
                                              "type": "array",
                                              "items": {
                                                "description": "EnvVar represents an environment variable present in a Container.",
                                                "type": "object",
                                                "required": [
                                                  "name"
                                                ],
                                                "properties": {
                                                  "name": {
                                                    "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                                                    "type": "string"
                                                  },
                                                  "value": {
                                                    "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
                                                    "type": "string"
                                                  },
                                                  "valueFrom": {
                                                    "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                                                    "type": "object",
                                                    "properties": {
                                                      "configMapKeyRef": {
                                                        "description": "Selects a key of a ConfigMap.",
                                                        "type": "object",
                                                        "required": [
                                                          "key"
                                                        ],
                                                        "properties": {
                                                          "key": {
                                                            "description": "The key to select.",
                                                            "type": "string"
                                                          },
                                                          "name": {
                                                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                                            "type": "string"
                                                          },
                                                          "optional": {
                                                            "description": "Specify whether the ConfigMap or its key must be defined",
                                                            "type": "boolean"
                                                          }
                                                        }
                                                      },
                                                      "fieldRef": {
                                                        "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                                                        "type": "object",
                                                        "required": [
                                                          "fieldPath"
                                                        ],
                                                        "properties": {
                                                          "apiVersion": {
                                                            "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                                            "type": "string"
                                                          },
                                                          "fieldPath": {
                                                            "description": "Path of the field to select in the specified API version.",
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "resourceFieldRef": {
                                                        "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                                                        "type": "object",
                                                        "required": [
                                                          "resource"
                                                        ],
                                                        "properties": {
                                                          "containerName": {
                                                            "description": "Container name: required for volumes, optional for env vars",
                                                            "type": "string"
                                                          },
                                                          "divisor": {
                                                            "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                            "x-kubernetes-int-or-string": true
                                                          },
                                                          "resource": {
                                                            "description": "Required: resource to select",
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "secretKeyRef": {
                                                        "description": "Selects a key of a secret in the pod's namespace",
                                                        "type": "object",
                                                        "required": [
                                                          "key"
                                                        ],
                                                        "properties": {
                                                          "key": {
                                                            "description": "The key of the secret to select from.  Must be a valid secret key.",
                                                            "type": "string"
                                                          },
                                                          "name": {
                                                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                                            "type": "string"
                                                          },
                                                          "optional": {
                                                            "description": "Specify whether the Secret or its key must be defined",
                                                            "type": "boolean"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "envFrom": {
                                              "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                                              "type": "array",
                                              "items": {
                                                "description": "EnvFromSource represents the source of a set of ConfigMaps",
                                                "type": "object",
                                                "properties": {
                                                  "configMapRef": {
                                                    "description": "The ConfigMap to select from",
                                                    "type": "object",
                                                    "properties": {
                                                      "name": {
                                                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                                        "type": "string"
                                                      },
                                                      "optional": {
                                                        "description": "Specify whether the ConfigMap must be defined",
                                                        "type": "boolean"
                                                      }
                                                    }
                                                  },
                                                  "prefix": {
                                                    "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
                                                    "type": "string"
                                                  },
                                                  "secretRef": {
                                                    "description": "The Secret to select from",
                                                    "type": "object",
                                                    "properties": {
                                                      "name": {
                                                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                                        "type": "string"
                                                      },
                                                      "optional": {
                                                        "description": "Specify whether the Secret must be defined",
                                                        "type": "boolean"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "image": {
                                              "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
                                              "type": "string"
                                            },
                                            "imagePullPolicy": {
                                              "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                                              "type": "string"
                                            },
                                            "lifecycle": {
                                              "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated.",
                                              "type": "object",
                                              "properties": {
                                                "postStart": {
                                                  "description": "PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                                                  "type": "object",
                                                  "properties": {
                                                    "exec": {
                                                      "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                                                      "type": "object",
                                                      "properties": {
                                                        "command": {
                                                          "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "httpGet": {
                                                      "description": "HTTPGet specifies the http request to perform.",
                                                      "type": "object",
                                                      "required": [
                                                        "port"
                                                      ],
                                                      "properties": {
                                                        "host": {
                                                          "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                                          "type": "string"
                                                        },
                                                        "httpHeaders": {
                                                          "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                                          "type": "array",
                                                          "items": {
                                                            "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                                            "type": "object",
                                                            "required": [
                                                              "name",
                                                              "value"
                                                            ],
                                                            "properties": {
                                                              "name": {
                                                                "description": "The header field name",
                                                                "type": "string"
                                                              },
                                                              "value": {
                                                                "description": "The header field value",
                                                                "type": "string"
                                                              }
                                                            }
                                                          }
                                                        },
                                                        "path": {
                                                          "description": "Path to access on the HTTP server.",
                                                          "type": "string"
                                                        },
                                                        "port": {
                                                          "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                          "x-kubernetes-int-or-string": true
                                                        },
                                                        "scheme": {
                                                          "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "tcpSocket": {
                                                      "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                                                      "type": "object",
                                                      "required": [
                                                        "port"
                                                      ],
                                                      "properties": {
                                                        "host": {
                                                          "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                                          "type": "string"
                                                        },
                                                        "port": {
                                                          "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                          "x-kubernetes-int-or-string": true
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "preStop": {
                                                  "description": "PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                                                  "type": "object",
                                                  "properties": {
                                                    "exec": {
                                                      "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                                                      "type": "object",
                                                      "properties": {
                                                        "command": {
                                                          "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "httpGet": {
                                                      "description": "HTTPGet specifies the http request to perform.",
                                                      "type": "object",
                                                      "required": [
                                                        "port"
                                                      ],
                                                      "properties": {
                                                        "host": {
                                                          "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                                          "type": "string"
                                                        },
                                                        "httpHeaders": {
                                                          "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                                          "type": "array",
                                                          "items": {
                                                            "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                                            "type": "object",
                                                            "required": [
                                                              "name",
                                                              "value"
                                                            ],
                                                            "properties": {
                                                              "name": {
                                                                "description": "The header field name",
                                                                "type": "string"
                                                              },
                                                              "value": {
                                                                "description": "The header field value",
                                                                "type": "string"
                                                              }
                                                            }
                                                          }
                                                        },
                                                        "path": {
                                                          "description": "Path to access on the HTTP server.",
                                                          "type": "string"
                                                        },
                                                        "port": {
                                                          "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                          "x-kubernetes-int-or-string": true
                                                        },
                                                        "scheme": {
                                                          "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "tcpSocket": {
                                                      "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                                                      "type": "object",
                                                      "required": [
                                                        "port"
                                                      ],
                                                      "properties": {
                                                        "host": {
                                                          "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                                          "type": "string"
                                                        },
                                                        "port": {
                                                          "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                          "x-kubernetes-int-or-string": true
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "livenessProbe": {
                                              "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                              "type": "object",
                                              "properties": {
                                                "exec": {
                                                  "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                                                  "type": "object",
                                                  "properties": {
                                                    "command": {
                                                      "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "failureThreshold": {
                                                  "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "httpGet": {
                                                  "description": "HTTPGet specifies the http request to perform.",
                                                  "type": "object",
                                                  "required": [
                                                    "port"
                                                  ],
                                                  "properties": {
                                                    "host": {
                                                      "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                                      "type": "string"
                                                    },
                                                    "httpHeaders": {
                                                      "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                                      "type": "array",
                                                      "items": {
                                                        "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                                        "type": "object",
                                                        "required": [
                                                          "name",
                                                          "value"
                                                        ],
                                                        "properties": {
                                                          "name": {
                                                            "description": "The header field name",
                                                            "type": "string"
                                                          },
                                                          "value": {
                                                            "description": "The header field value",
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "path": {
                                                      "description": "Path to access on the HTTP server.",
                                                      "type": "string"
                                                    },
                                                    "port": {
                                                      "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                      "x-kubernetes-int-or-string": true
                                                    },
                                                    "scheme": {
                                                      "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "initialDelaySeconds": {
                                                  "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "periodSeconds": {
                                                  "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "successThreshold": {
                                                  "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "tcpSocket": {
                                                  "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                                                  "type": "object",
                                                  "required": [
                                                    "port"
                                                  ],
                                                  "properties": {
                                                    "host": {
                                                      "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                                      "type": "string"
                                                    },
                                                    "port": {
                                                      "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                      "x-kubernetes-int-or-string": true
                                                    }
                                                  }
                                                },
                                                "timeoutSeconds": {
                                                  "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                                  "type": "integer",
                                                  "format": "int32"
                                                }
                                              }
                                            },
                                            "name": {
                                              "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
                                              "type": "string"
                                            },
                                            "ports": {
                                              "description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
                                              "type": "array",
                                              "items": {
                                                "description": "ContainerPort represents a network port in a single container.",
                                                "type": "object",
                                                "required": [
                                                  "containerPort"
                                                ],
                                                "properties": {
                                                  "containerPort": {
                                                    "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
                                                    "type": "integer",
                                                    "format": "int32"
                                                  },
                                                  "hostIP": {
                                                    "description": "What host IP to bind the external port to.",
                                                    "type": "string"
                                                  },
                                                  "hostPort": {
                                                    "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
                                                    "type": "integer",
                                                    "format": "int32"
                                                  },
                                                  "name": {
                                                    "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.",
                                                    "type": "string"
                                                  },
                                                  "protocol": {
                                                    "description": "Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".",
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "x-kubernetes-list-map-keys": [
                                                "containerPort",
                                                "protocol"
                                              ],
                                              "x-kubernetes-list-type": "map"
                                            },
                                            "readinessProbe": {
                                              "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                              "type": "object",
                                              "properties": {
                                                "exec": {
                                                  "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                                                  "type": "object",
                                                  "properties": {
                                                    "command": {
                                                      "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "failureThreshold": {
                                                  "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "httpGet": {
                                                  "description": "HTTPGet specifies the http request to perform.",
                                                  "type": "object",
                                                  "required": [
                                                    "port"
                                                  ],
                                                  "properties": {
                                                    "host": {
                                                      "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                                      "type": "string"
                                                    },
                                                    "httpHeaders": {
                                                      "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                                      "type": "array",
                                                      "items": {
                                                        "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                                        "type": "object",
                                                        "required": [
                                                          "name",
                                                          "value"
                                                        ],
                                                        "properties": {
                                                          "name": {
                                                            "description": "The header field name",
                                                            "type": "string"
                                                          },
                                                          "value": {
                                                            "description": "The header field value",
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "path": {
                                                      "description": "Path to access on the HTTP server.",
                                                      "type": "string"
                                                    },
                                                    "port": {
                                                      "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                      "x-kubernetes-int-or-string": true
                                                    },
                                                    "scheme": {
                                                      "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "initialDelaySeconds": {
                                                  "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "periodSeconds": {
                                                  "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "successThreshold": {
                                                  "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "tcpSocket": {
                                                  "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                                                  "type": "object",
                                                  "required": [
                                                    "port"
                                                  ],
                                                  "properties": {
                                                    "host": {
                                                      "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                                      "type": "string"
                                                    },
                                                    "port": {
                                                      "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                      "x-kubernetes-int-or-string": true
                                                    }
                                                  }
                                                },
                                                "timeoutSeconds": {
                                                  "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                                  "type": "integer",
                                                  "format": "int32"
                                                }
                                              }
                                            },
                                            "resources": {
                                              "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                                              "type": "object",
                                              "properties": {
                                                "limits": {
                                                  "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                                                  "type": "object",
                                                  "additionalProperties": {
                                                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                    "x-kubernetes-int-or-string": true
                                                  }
                                                },
                                                "requests": {
                                                  "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                                                  "type": "object",
                                                  "additionalProperties": {
                                                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                    "x-kubernetes-int-or-string": true
                                                  }
                                                }
                                              }
                                            },
                                            "securityContext": {
                                              "description": "Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                                              "type": "object",
                                              "properties": {
                                                "allowPrivilegeEscalation": {
                                                  "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN",
                                                  "type": "boolean"
                                                },
                                                "capabilities": {
                                                  "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.",
                                                  "type": "object",
                                                  "properties": {
                                                    "add": {
                                                      "description": "Added capabilities",
                                                      "type": "array",
                                                      "items": {
                                                        "description": "Capability represent POSIX capabilities type",
                                                        "type": "string"
                                                      }
                                                    },
                                                    "drop": {
                                                      "description": "Removed capabilities",
                                                      "type": "array",
                                                      "items": {
                                                        "description": "Capability represent POSIX capabilities type",
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "privileged": {
                                                  "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.",
                                                  "type": "boolean"
                                                },
                                                "procMount": {
                                                  "description": "procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.",
                                                  "type": "string"
                                                },
                                                "readOnlyRootFilesystem": {
                                                  "description": "Whether this container has a read-only root filesystem. Default is false.",
                                                  "type": "boolean"
                                                },
                                                "runAsGroup": {
                                                  "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                                  "type": "integer",
                                                  "format": "int64"
                                                },
                                                "runAsNonRoot": {
                                                  "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                                  "type": "boolean"
                                                },
                                                "runAsUser": {
                                                  "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                                  "type": "integer",
                                                  "format": "int64"
                                                },
                                                "seLinuxOptions": {
                                                  "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                                  "type": "object",
                                                  "properties": {
                                                    "level": {
                                                      "description": "Level is SELinux level label that applies to the container.",
                                                      "type": "string"
                                                    },
                                                    "role": {
                                                      "description": "Role is a SELinux role label that applies to the container.",
                                                      "type": "string"
                                                    },
                                                    "type": {
                                                      "description": "Type is a SELinux type label that applies to the container.",
                                                      "type": "string"
                                                    },
                                                    "user": {
                                                      "description": "User is a SELinux user label that applies to the container.",
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "windowsOptions": {
                                                  "description": "The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                                  "type": "object",
                                                  "properties": {
                                                    "gmsaCredentialSpec": {
                                                      "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
                                                      "type": "string"
                                                    },
                                                    "gmsaCredentialSpecName": {
                                                      "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                                                      "type": "string"
                                                    },
                                                    "runAsUserName": {
                                                      "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "startupProbe": {
                                              "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                              "type": "object",
                                              "properties": {
                                                "exec": {
                                                  "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                                                  "type": "object",
                                                  "properties": {
                                                    "command": {
                                                      "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "failureThreshold": {
                                                  "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "httpGet": {
                                                  "description": "HTTPGet specifies the http request to perform.",
                                                  "type": "object",
                                                  "required": [
                                                    "port"
                                                  ],
                                                  "properties": {
                                                    "host": {
                                                      "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                                      "type": "string"
                                                    },
                                                    "httpHeaders": {
                                                      "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                                      "type": "array",
                                                      "items": {
                                                        "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                                        "type": "object",
                                                        "required": [
                                                          "name",
                                                          "value"
                                                        ],
                                                        "properties": {
                                                          "name": {
                                                            "description": "The header field name",
                                                            "type": "string"
                                                          },
                                                          "value": {
                                                            "description": "The header field value",
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "path": {
                                                      "description": "Path to access on the HTTP server.",
                                                      "type": "string"
                                                    },
                                                    "port": {
                                                      "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                      "x-kubernetes-int-or-string": true
                                                    },
                                                    "scheme": {
                                                      "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "initialDelaySeconds": {
                                                  "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "periodSeconds": {
                                                  "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "successThreshold": {
                                                  "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "tcpSocket": {
                                                  "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                                                  "type": "object",
                                                  "required": [
                                                    "port"
                                                  ],
                                                  "properties": {
                                                    "host": {
                                                      "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                                      "type": "string"
                                                    },
                                                    "port": {
                                                      "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                                      "x-kubernetes-int-or-string": true
                                                    }
                                                  }
                                                },
                                                "timeoutSeconds": {
                                                  "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                                  "type": "integer",
                                                  "format": "int32"
                                                }
                                              }
                                            },
                                            "stdin": {
                                              "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
                                              "type": "boolean"
                                            },
                                            "stdinOnce": {
                                              "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
                                              "type": "boolean"
                                            },
                                            "terminationMessagePath": {
                                              "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                                              "type": "string"
                                            },
                                            "terminationMessagePolicy": {
                                              "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
                                              "type": "string"
                                            },
                                            "tty": {
                                              "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                                              "type": "boolean"
                                            },
                                            "volumeDevices": {
                                              "description": "volumeDevices is the list of block devices to be used by the container.",
                                              "type": "array",
                                              "items": {
                                                "description": "volumeDevice describes a mapping of a raw block device within a container.",
                                                "type": "object",
                                                "required": [
                                                  "devicePath",
                                                  "name"
                                                ],
                                                "properties": {
                                                  "devicePath": {
                                                    "description": "devicePath is the path inside of the container that the device will be mapped to.",
                                                    "type": "string"
                                                  },
                                                  "name": {
                                                    "description": "name must match the name of a persistentVolumeClaim in the pod",
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "volumeMounts": {
                                              "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                                              "type": "array",
                                              "items": {
                                                "description": "VolumeMount describes a mounting of a Volume within a container.",
                                                "type": "object",
                                                "required": [
                                                  "mountPath",
                                                  "name"
                                                ],
                                                "properties": {
                                                  "mountPath": {
                                                    "description": "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                                                    "type": "string"
                                                  },
                                                  "mountPropagation": {
                                                    "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
                                                    "type": "string"
                                                  },
                                                  "name": {
                                                    "description": "This must match the Name of a Volume.",
                                                    "type": "string"
                                                  },
                                                  "readOnly": {
                                                    "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
                                                    "type": "boolean"
                                                  },
                                                  "subPath": {
                                                    "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
                                                    "type": "string"
                                                  },
                                                  "subPathExpr": {
                                                    "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.",
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "workingDir": {
                                              "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                                              "type": "string"
                                            }
                                          }
                                        }
                                      },
                                      "nodeName": {
                                        "description": "NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.",
                                        "type": "string"
                                      },
                                      "nodeSelector": {
                                        "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
                                        "type": "object",
                                        "additionalProperties": {
                                          "type": "string"
                                        }
                                      },
                                      "overhead": {
                                        "description": "Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.16, and is only honored by servers that enable the PodOverhead feature.",
                                        "type": "object",
                                        "additionalProperties": {
                                          "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                          "x-kubernetes-int-or-string": true
                                        }
                                      },
                                      "preemptionPolicy": {
                                        "description": "PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is alpha-level and is only honored by servers that enable the NonPreemptingPriority feature.",
                                        "type": "string"
                                      },
                                      "priority": {
                                        "description": "The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.",
                                        "type": "integer",
                                        "format": "int32"
                                      },
                                      "priorityClassName": {
                                        "description": "If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.",
                                        "type": "string"
                                      },
                                      "readinessGates": {
                                        "description": "If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to \"True\" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md",
                                        "type": "array",
                                        "items": {
                                          "description": "PodReadinessGate contains the reference to a pod condition",
                                          "type": "object",
                                          "required": [
                                            "conditionType"
                                          ],
                                          "properties": {
                                            "conditionType": {
                                              "description": "ConditionType refers to a condition in the pod's condition list with matching type.",
                                              "type": "string"
                                            }
                                          }
                                        }
                                      },
                                      "restartPolicy": {
                                        "description": "Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy",
                                        "type": "string"
                                      },
                                      "runtimeClassName": {
                                        "description": "RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md This is a beta feature as of Kubernetes v1.14.",
                                        "type": "string"
                                      },
                                      "schedulerName": {
                                        "description": "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.",
                                        "type": "string"
                                      },
                                      "securityContext": {
                                        "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.",
                                        "type": "object",
                                        "properties": {
                                          "fsGroup": {
                                            "description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: \n 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- \n If unset, the Kubelet will not modify the ownership and permissions of any volume.",
                                            "type": "integer",
                                            "format": "int64"
                                          },
                                          "fsGroupChangePolicy": {
                                            "description": "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified defaults to \"Always\".",
                                            "type": "string"
                                          },
                                          "runAsGroup": {
                                            "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
                                            "type": "integer",
                                            "format": "int64"
                                          },
                                          "runAsNonRoot": {
                                            "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                            "type": "boolean"
                                          },
                                          "runAsUser": {
                                            "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
                                            "type": "integer",
                                            "format": "int64"
                                          },
                                          "seLinuxOptions": {
                                            "description": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
                                            "type": "object",
                                            "properties": {
                                              "level": {
                                                "description": "Level is SELinux level label that applies to the container.",
                                                "type": "string"
                                              },
                                              "role": {
                                                "description": "Role is a SELinux role label that applies to the container.",
                                                "type": "string"
                                              },
                                              "type": {
                                                "description": "Type is a SELinux type label that applies to the container.",
                                                "type": "string"
                                              },
                                              "user": {
                                                "description": "User is a SELinux user label that applies to the container.",
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "supplementalGroups": {
                                            "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.",
                                            "type": "array",
                                            "items": {
                                              "type": "integer",
                                              "format": "int64"
                                            }
                                          },
                                          "sysctls": {
                                            "description": "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.",
                                            "type": "array",
                                            "items": {
                                              "description": "Sysctl defines a kernel parameter to be set",
                                              "type": "object",
                                              "required": [
                                                "name",
                                                "value"
                                              ],
                                              "properties": {
                                                "name": {
                                                  "description": "Name of a property to set",
                                                  "type": "string"
                                                },
                                                "value": {
                                                  "description": "Value of a property to set",
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          },
                                          "windowsOptions": {
                                            "description": "The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                            "type": "object",
                                            "properties": {
                                              "gmsaCredentialSpec": {
                                                "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
                                                "type": "string"
                                              },
                                              "gmsaCredentialSpecName": {
                                                "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                                                "type": "string"
                                              },
                                              "runAsUserName": {
                                                "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "serviceAccount": {
                                        "description": "DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.",
                                        "type": "string"
                                      },
                                      "serviceAccountName": {
                                        "description": "ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
                                        "type": "string"
                                      },
                                      "shareProcessNamespace": {
                                        "description": "Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.",
                                        "type": "boolean"
                                      },
                                      "subdomain": {
                                        "description": "If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.",
                                        "type": "string"
                                      },
                                      "terminationGracePeriodSeconds": {
                                        "description": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.",
                                        "type": "integer",
                                        "format": "int64"
                                      },
                                      "tolerations": {
                                        "description": "If specified, the pod's tolerations.",
                                        "type": "array",
                                        "items": {
                                          "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
                                          "type": "object",
                                          "properties": {
                                            "effect": {
                                              "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                                              "type": "string"
                                            },
                                            "key": {
                                              "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                                              "type": "string"
                                            },
                                            "operator": {
                                              "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                                              "type": "string"
                                            },
                                            "tolerationSeconds": {
                                              "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                                              "type": "integer",
                                              "format": "int64"
                                            },
                                            "value": {
                                              "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                                              "type": "string"
                                            }
                                          }
                                        }
                                      },
                                      "topologySpreadConstraints": {
                                        "description": "TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. This field is only honored by clusters that enable the EvenPodsSpread feature. All topologySpreadConstraints are ANDed.",
                                        "type": "array",
                                        "items": {
                                          "description": "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
                                          "type": "object",
                                          "required": [
                                            "maxSkew",
                                            "topologyKey",
                                            "whenUnsatisfiable"
                                          ],
                                          "properties": {
                                            "labelSelector": {
                                              "description": "LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.",
                                              "type": "object",
                                              "properties": {
                                                "matchExpressions": {
                                                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                  "type": "array",
                                                  "items": {
                                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                    "type": "object",
                                                    "required": [
                                                      "key",
                                                      "operator"
                                                    ],
                                                    "properties": {
                                                      "key": {
                                                        "description": "key is the label key that the selector applies to.",
                                                        "type": "string"
                                                      },
                                                      "operator": {
                                                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                        "type": "string"
                                                      },
                                                      "values": {
                                                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                        "type": "array",
                                                        "items": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "matchLabels": {
                                                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                  "type": "object",
                                                  "additionalProperties": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "maxSkew": {
                                              "description": "MaxSkew describes the degree to which pods may be unevenly distributed. It's the maximum permitted difference between the number of matching pods in any two topology domains of a given topology type. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. It's a required field. Default value is 1 and 0 is not allowed.",
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "topologyKey": {
                                              "description": "TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a \"bucket\", and try to put balanced number of pods into each bucket. It's a required field.",
                                              "type": "string"
                                            },
                                            "whenUnsatisfiable": {
                                              "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it - ScheduleAnyway tells the scheduler to still schedule it It's considered as \"Unsatisfiable\" if and only if placing incoming pod on any topology violates \"MaxSkew\". For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.",
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "x-kubernetes-list-map-keys": [
                                          "topologyKey",
                                          "whenUnsatisfiable"
                                        ],
                                        "x-kubernetes-list-type": "map"
                                      },
                                      "volumes": {
                                        "description": "List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes",
                                        "type": "array",
                                        "items": {
                                          "description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
                                          "type": "object",
                                          "required": [
                                            "name"
                                          ],
                                          "properties": {
                                            "awsElasticBlockStore": {
                                              "description": "AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
                                              "type": "object",
                                              "required": [
                                                "volumeID"
                                              ],
                                              "properties": {
                                                "fsType": {
                                                  "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine",
                                                  "type": "string"
                                                },
                                                "partition": {
                                                  "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "readOnly": {
                                                  "description": "Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
                                                  "type": "boolean"
                                                },
                                                "volumeID": {
                                                  "description": "Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "azureDisk": {
                                              "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
                                              "type": "object",
                                              "required": [
                                                "diskName",
                                                "diskURI"
                                              ],
                                              "properties": {
                                                "cachingMode": {
                                                  "description": "Host Caching mode: None, Read Only, Read Write.",
                                                  "type": "string"
                                                },
                                                "diskName": {
                                                  "description": "The Name of the data disk in the blob storage",
                                                  "type": "string"
                                                },
                                                "diskURI": {
                                                  "description": "The URI the data disk in the blob storage",
                                                  "type": "string"
                                                },
                                                "fsType": {
                                                  "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                                                  "type": "string"
                                                },
                                                "kind": {
                                                  "description": "Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared",
                                                  "type": "string"
                                                },
                                                "readOnly": {
                                                  "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                                                  "type": "boolean"
                                                }
                                              }
                                            },
                                            "azureFile": {
                                              "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
                                              "type": "object",
                                              "required": [
                                                "secretName",
                                                "shareName"
                                              ],
                                              "properties": {
                                                "readOnly": {
                                                  "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                                                  "type": "boolean"
                                                },
                                                "secretName": {
                                                  "description": "the name of secret that contains Azure Storage Account Name and Key",
                                                  "type": "string"
                                                },
                                                "shareName": {
                                                  "description": "Share Name",
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "cephfs": {
                                              "description": "CephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
                                              "type": "object",
                                              "required": [
                                                "monitors"
                                              ],
                                              "properties": {
                                                "monitors": {
                                                  "description": "Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                },
                                                "path": {
                                                  "description": "Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
                                                  "type": "string"
                                                },
                                                "readOnly": {
                                                  "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                                                  "type": "boolean"
                                                },
                                                "secretFile": {
                                                  "description": "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                                                  "type": "string"
                                                },
                                                "secretRef": {
                                                  "description": "Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                                                  "type": "object",
                                                  "properties": {
                                                    "name": {
                                                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "user": {
                                                  "description": "Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "cinder": {
                                              "description": "Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                                              "type": "object",
                                              "required": [
                                                "volumeID"
                                              ],
                                              "properties": {
                                                "fsType": {
                                                  "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                                                  "type": "string"
                                                },
                                                "readOnly": {
                                                  "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                                                  "type": "boolean"
                                                },
                                                "secretRef": {
                                                  "description": "Optional: points to a secret object containing parameters used to connect to OpenStack.",
                                                  "type": "object",
                                                  "properties": {
                                                    "name": {
                                                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "volumeID": {
                                                  "description": "volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "configMap": {
                                              "description": "ConfigMap represents a configMap that should populate this volume",
                                              "type": "object",
                                              "properties": {
                                                "defaultMode": {
                                                  "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "items": {
                                                  "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                                                  "type": "array",
                                                  "items": {
                                                    "description": "Maps a string key to a path within a volume.",
                                                    "type": "object",
                                                    "required": [
                                                      "key",
                                                      "path"
                                                    ],
                                                    "properties": {
                                                      "key": {
                                                        "description": "The key to project.",
                                                        "type": "string"
                                                      },
                                                      "mode": {
                                                        "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "path": {
                                                        "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "name": {
                                                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                                  "type": "string"
                                                },
                                                "optional": {
                                                  "description": "Specify whether the ConfigMap or its keys must be defined",
                                                  "type": "boolean"
                                                }
                                              }
                                            },
                                            "csi": {
                                              "description": "CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature).",
                                              "type": "object",
                                              "required": [
                                                "driver"
                                              ],
                                              "properties": {
                                                "driver": {
                                                  "description": "Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.",
                                                  "type": "string"
                                                },
                                                "fsType": {
                                                  "description": "Filesystem type to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.",
                                                  "type": "string"
                                                },
                                                "nodePublishSecretRef": {
                                                  "description": "NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.",
                                                  "type": "object",
                                                  "properties": {
                                                    "name": {
                                                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "readOnly": {
                                                  "description": "Specifies a read-only configuration for the volume. Defaults to false (read/write).",
                                                  "type": "boolean"
                                                },
                                                "volumeAttributes": {
                                                  "description": "VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.",
                                                  "type": "object",
                                                  "additionalProperties": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "downwardAPI": {
                                              "description": "DownwardAPI represents downward API about the pod that should populate this volume",
                                              "type": "object",
                                              "properties": {
                                                "defaultMode": {
                                                  "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "items": {
                                                  "description": "Items is a list of downward API volume file",
                                                  "type": "array",
                                                  "items": {
                                                    "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
                                                    "type": "object",
                                                    "required": [
                                                      "path"
                                                    ],
                                                    "properties": {
                                                      "fieldRef": {
                                                        "description": "Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.",
                                                        "type": "object",
                                                        "required": [
                                                          "fieldPath"
                                                        ],
                                                        "properties": {
                                                          "apiVersion": {
                                                            "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                                            "type": "string"
                                                          },
                                                          "fieldPath": {
                                                            "description": "Path of the field to select in the specified API version.",
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "mode": {
                                                        "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "path": {
                                                        "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                                                        "type": "string"
                                                      },
                                                      "resourceFieldRef": {
                                                        "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.",
                                                        "type": "object",
                                                        "required": [
                                                          "resource"
                                                        ],
                                                        "properties": {
                                                          "containerName": {
                                                            "description": "Container name: required for volumes, optional for env vars",
                                                            "type": "string"
                                                          },
                                                          "divisor": {
                                                            "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                            "x-kubernetes-int-or-string": true
                                                          },
                                                          "resource": {
                                                            "description": "Required: resource to select",
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "emptyDir": {
                                              "description": "EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
                                              "type": "object",
                                              "properties": {
                                                "medium": {
                                                  "description": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
                                                  "type": "string"
                                                },
                                                "sizeLimit": {
                                                  "description": "Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir",
                                                  "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                  "x-kubernetes-int-or-string": true
                                                }
                                              }
                                            },
                                            "fc": {
                                              "description": "FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
                                              "type": "object",
                                              "properties": {
                                                "fsType": {
                                                  "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine",
                                                  "type": "string"
                                                },
                                                "lun": {
                                                  "description": "Optional: FC target lun number",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "readOnly": {
                                                  "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                                                  "type": "boolean"
                                                },
                                                "targetWWNs": {
                                                  "description": "Optional: FC target worldwide names (WWNs)",
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                },
                                                "wwids": {
                                                  "description": "Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.",
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "flexVolume": {
                                              "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
                                              "type": "object",
                                              "required": [
                                                "driver"
                                              ],
                                              "properties": {
                                                "driver": {
                                                  "description": "Driver is the name of the driver to use for this volume.",
                                                  "type": "string"
                                                },
                                                "fsType": {
                                                  "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.",
                                                  "type": "string"
                                                },
                                                "options": {
                                                  "description": "Optional: Extra command options if any.",
                                                  "type": "object",
                                                  "additionalProperties": {
                                                    "type": "string"
                                                  }
                                                },
                                                "readOnly": {
                                                  "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                                                  "type": "boolean"
                                                },
                                                "secretRef": {
                                                  "description": "Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.",
                                                  "type": "object",
                                                  "properties": {
                                                    "name": {
                                                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "flocker": {
                                              "description": "Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running",
                                              "type": "object",
                                              "properties": {
                                                "datasetName": {
                                                  "description": "Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated",
                                                  "type": "string"
                                                },
                                                "datasetUUID": {
                                                  "description": "UUID of the dataset. This is unique identifier of a Flocker dataset",
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "gcePersistentDisk": {
                                              "description": "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                                              "type": "object",
                                              "required": [
                                                "pdName"
                                              ],
                                              "properties": {
                                                "fsType": {
                                                  "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine",
                                                  "type": "string"
                                                },
                                                "partition": {
                                                  "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "pdName": {
                                                  "description": "Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                                                  "type": "string"
                                                },
                                                "readOnly": {
                                                  "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                                                  "type": "boolean"
                                                }
                                              }
                                            },
                                            "gitRepo": {
                                              "description": "GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
                                              "type": "object",
                                              "required": [
                                                "repository"
                                              ],
                                              "properties": {
                                                "directory": {
                                                  "description": "Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.",
                                                  "type": "string"
                                                },
                                                "repository": {
                                                  "description": "Repository URL",
                                                  "type": "string"
                                                },
                                                "revision": {
                                                  "description": "Commit hash for the specified revision.",
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "glusterfs": {
                                              "description": "Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md",
                                              "type": "object",
                                              "required": [
                                                "endpoints",
                                                "path"
                                              ],
                                              "properties": {
                                                "endpoints": {
                                                  "description": "EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                                                  "type": "string"
                                                },
                                                "path": {
                                                  "description": "Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                                                  "type": "string"
                                                },
                                                "readOnly": {
                                                  "description": "ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                                                  "type": "boolean"
                                                }
                                              }
                                            },
                                            "hostPath": {
                                              "description": "HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.",
                                              "type": "object",
                                              "required": [
                                                "path"
                                              ],
                                              "properties": {
                                                "path": {
                                                  "description": "Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
                                                  "type": "string"
                                                },
                                                "type": {
                                                  "description": "Type for HostPath Volume Defaults to \"\" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "iscsi": {
                                              "description": "ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md",
                                              "type": "object",
                                              "required": [
                                                "iqn",
                                                "lun",
                                                "targetPortal"
                                              ],
                                              "properties": {
                                                "chapAuthDiscovery": {
                                                  "description": "whether support iSCSI Discovery CHAP authentication",
                                                  "type": "boolean"
                                                },
                                                "chapAuthSession": {
                                                  "description": "whether support iSCSI Session CHAP authentication",
                                                  "type": "boolean"
                                                },
                                                "fsType": {
                                                  "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine",
                                                  "type": "string"
                                                },
                                                "initiatorName": {
                                                  "description": "Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.",
                                                  "type": "string"
                                                },
                                                "iqn": {
                                                  "description": "Target iSCSI Qualified Name.",
                                                  "type": "string"
                                                },
                                                "iscsiInterface": {
                                                  "description": "iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
                                                  "type": "string"
                                                },
                                                "lun": {
                                                  "description": "iSCSI Target Lun number.",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "portals": {
                                                  "description": "iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                },
                                                "readOnly": {
                                                  "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.",
                                                  "type": "boolean"
                                                },
                                                "secretRef": {
                                                  "description": "CHAP Secret for iSCSI target and initiator authentication",
                                                  "type": "object",
                                                  "properties": {
                                                    "name": {
                                                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "targetPortal": {
                                                  "description": "iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "name": {
                                              "description": "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                              "type": "string"
                                            },
                                            "nfs": {
                                              "description": "NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                                              "type": "object",
                                              "required": [
                                                "path",
                                                "server"
                                              ],
                                              "properties": {
                                                "path": {
                                                  "description": "Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                                                  "type": "string"
                                                },
                                                "readOnly": {
                                                  "description": "ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                                                  "type": "boolean"
                                                },
                                                "server": {
                                                  "description": "Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "persistentVolumeClaim": {
                                              "description": "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                                              "type": "object",
                                              "required": [
                                                "claimName"
                                              ],
                                              "properties": {
                                                "claimName": {
                                                  "description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                                                  "type": "string"
                                                },
                                                "readOnly": {
                                                  "description": "Will force the ReadOnly setting in VolumeMounts. Default false.",
                                                  "type": "boolean"
                                                }
                                              }
                                            },
                                            "photonPersistentDisk": {
                                              "description": "PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
                                              "type": "object",
                                              "required": [
                                                "pdID"
                                              ],
                                              "properties": {
                                                "fsType": {
                                                  "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                                                  "type": "string"
                                                },
                                                "pdID": {
                                                  "description": "ID that identifies Photon Controller persistent disk",
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "portworxVolume": {
                                              "description": "PortworxVolume represents a portworx volume attached and mounted on kubelets host machine",
                                              "type": "object",
                                              "required": [
                                                "volumeID"
                                              ],
                                              "properties": {
                                                "fsType": {
                                                  "description": "FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                                                  "type": "string"
                                                },
                                                "readOnly": {
                                                  "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                                                  "type": "boolean"
                                                },
                                                "volumeID": {
                                                  "description": "VolumeID uniquely identifies a Portworx volume",
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "projected": {
                                              "description": "Items for all in one resources secrets, configmaps, and downward API",
                                              "type": "object",
                                              "required": [
                                                "sources"
                                              ],
                                              "properties": {
                                                "defaultMode": {
                                                  "description": "Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "sources": {
                                                  "description": "list of volume projections",
                                                  "type": "array",
                                                  "items": {
                                                    "description": "Projection that may be projected along with other supported volume types",
                                                    "type": "object",
                                                    "properties": {
                                                      "configMap": {
                                                        "description": "information about the configMap data to project",
                                                        "type": "object",
                                                        "properties": {
                                                          "items": {
                                                            "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                                                            "type": "array",
                                                            "items": {
                                                              "description": "Maps a string key to a path within a volume.",
                                                              "type": "object",
                                                              "required": [
                                                                "key",
                                                                "path"
                                                              ],
                                                              "properties": {
                                                                "key": {
                                                                  "description": "The key to project.",
                                                                  "type": "string"
                                                                },
                                                                "mode": {
                                                                  "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                                                                  "type": "integer",
                                                                  "format": "int32"
                                                                },
                                                                "path": {
                                                                  "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "name": {
                                                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                                            "type": "string"
                                                          },
                                                          "optional": {
                                                            "description": "Specify whether the ConfigMap or its keys must be defined",
                                                            "type": "boolean"
                                                          }
                                                        }
                                                      },
                                                      "downwardAPI": {
                                                        "description": "information about the downwardAPI data to project",
                                                        "type": "object",
                                                        "properties": {
                                                          "items": {
                                                            "description": "Items is a list of DownwardAPIVolume file",
                                                            "type": "array",
                                                            "items": {
                                                              "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
                                                              "type": "object",
                                                              "required": [
                                                                "path"
                                                              ],
                                                              "properties": {
                                                                "fieldRef": {
                                                                  "description": "Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.",
                                                                  "type": "object",
                                                                  "required": [
                                                                    "fieldPath"
                                                                  ],
                                                                  "properties": {
                                                                    "apiVersion": {
                                                                      "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                                                      "type": "string"
                                                                    },
                                                                    "fieldPath": {
                                                                      "description": "Path of the field to select in the specified API version.",
                                                                      "type": "string"
                                                                    }
                                                                  }
                                                                },
                                                                "mode": {
                                                                  "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                                                                  "type": "integer",
                                                                  "format": "int32"
                                                                },
                                                                "path": {
                                                                  "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                                                                  "type": "string"
                                                                },
                                                                "resourceFieldRef": {
                                                                  "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.",
                                                                  "type": "object",
                                                                  "required": [
                                                                    "resource"
                                                                  ],
                                                                  "properties": {
                                                                    "containerName": {
                                                                      "description": "Container name: required for volumes, optional for env vars",
                                                                      "type": "string"
                                                                    },
                                                                    "divisor": {
                                                                      "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                                                      "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                                      "x-kubernetes-int-or-string": true
                                                                    },
                                                                    "resource": {
                                                                      "description": "Required: resource to select",
                                                                      "type": "string"
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "secret": {
                                                        "description": "information about the secret data to project",
                                                        "type": "object",
                                                        "properties": {
                                                          "items": {
                                                            "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                                                            "type": "array",
                                                            "items": {
                                                              "description": "Maps a string key to a path within a volume.",
                                                              "type": "object",
                                                              "required": [
                                                                "key",
                                                                "path"
                                                              ],
                                                              "properties": {
                                                                "key": {
                                                                  "description": "The key to project.",
                                                                  "type": "string"
                                                                },
                                                                "mode": {
                                                                  "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                                                                  "type": "integer",
                                                                  "format": "int32"
                                                                },
                                                                "path": {
                                                                  "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "name": {
                                                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                                            "type": "string"
                                                          },
                                                          "optional": {
                                                            "description": "Specify whether the Secret or its key must be defined",
                                                            "type": "boolean"
                                                          }
                                                        }
                                                      },
                                                      "serviceAccountToken": {
                                                        "description": "information about the serviceAccountToken data to project",
                                                        "type": "object",
                                                        "required": [
                                                          "path"
                                                        ],
                                                        "properties": {
                                                          "audience": {
                                                            "description": "Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.",
                                                            "type": "string"
                                                          },
                                                          "expirationSeconds": {
                                                            "description": "ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.",
                                                            "type": "integer",
                                                            "format": "int64"
                                                          },
                                                          "path": {
                                                            "description": "Path is the path relative to the mount point of the file to project the token into.",
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "quobyte": {
                                              "description": "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
                                              "type": "object",
                                              "required": [
                                                "registry",
                                                "volume"
                                              ],
                                              "properties": {
                                                "group": {
                                                  "description": "Group to map volume access to Default is no group",
                                                  "type": "string"
                                                },
                                                "readOnly": {
                                                  "description": "ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.",
                                                  "type": "boolean"
                                                },
                                                "registry": {
                                                  "description": "Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes",
                                                  "type": "string"
                                                },
                                                "tenant": {
                                                  "description": "Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin",
                                                  "type": "string"
                                                },
                                                "user": {
                                                  "description": "User to map volume access to Defaults to serivceaccount user",
                                                  "type": "string"
                                                },
                                                "volume": {
                                                  "description": "Volume is a string that references an already created Quobyte volume by name.",
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "rbd": {
                                              "description": "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md",
                                              "type": "object",
                                              "required": [
                                                "image",
                                                "monitors"
                                              ],
                                              "properties": {
                                                "fsType": {
                                                  "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine",
                                                  "type": "string"
                                                },
                                                "image": {
                                                  "description": "The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                                                  "type": "string"
                                                },
                                                "keyring": {
                                                  "description": "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                                                  "type": "string"
                                                },
                                                "monitors": {
                                                  "description": "A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                },
                                                "pool": {
                                                  "description": "The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                                                  "type": "string"
                                                },
                                                "readOnly": {
                                                  "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                                                  "type": "boolean"
                                                },
                                                "secretRef": {
                                                  "description": "SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                                                  "type": "object",
                                                  "properties": {
                                                    "name": {
                                                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "user": {
                                                  "description": "The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "scaleIO": {
                                              "description": "ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.",
                                              "type": "object",
                                              "required": [
                                                "gateway",
                                                "secretRef",
                                                "system"
                                              ],
                                              "properties": {
                                                "fsType": {
                                                  "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\".",
                                                  "type": "string"
                                                },
                                                "gateway": {
                                                  "description": "The host address of the ScaleIO API Gateway.",
                                                  "type": "string"
                                                },
                                                "protectionDomain": {
                                                  "description": "The name of the ScaleIO Protection Domain for the configured storage.",
                                                  "type": "string"
                                                },
                                                "readOnly": {
                                                  "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                                                  "type": "boolean"
                                                },
                                                "secretRef": {
                                                  "description": "SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.",
                                                  "type": "object",
                                                  "properties": {
                                                    "name": {
                                                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "sslEnabled": {
                                                  "description": "Flag to enable/disable SSL communication with Gateway, default false",
                                                  "type": "boolean"
                                                },
                                                "storageMode": {
                                                  "description": "Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.",
                                                  "type": "string"
                                                },
                                                "storagePool": {
                                                  "description": "The ScaleIO Storage Pool associated with the protection domain.",
                                                  "type": "string"
                                                },
                                                "system": {
                                                  "description": "The name of the storage system as configured in ScaleIO.",
                                                  "type": "string"
                                                },
                                                "volumeName": {
                                                  "description": "The name of a volume already created in the ScaleIO system that is associated with this volume source.",
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "secret": {
                                              "description": "Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
                                              "type": "object",
                                              "properties": {
                                                "defaultMode": {
                                                  "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "items": {
                                                  "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                                                  "type": "array",
                                                  "items": {
                                                    "description": "Maps a string key to a path within a volume.",
                                                    "type": "object",
                                                    "required": [
                                                      "key",
                                                      "path"
                                                    ],
                                                    "properties": {
                                                      "key": {
                                                        "description": "The key to project.",
                                                        "type": "string"
                                                      },
                                                      "mode": {
                                                        "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "path": {
                                                        "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "optional": {
                                                  "description": "Specify whether the Secret or its keys must be defined",
                                                  "type": "boolean"
                                                },
                                                "secretName": {
                                                  "description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "storageos": {
                                              "description": "StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.",
                                              "type": "object",
                                              "properties": {
                                                "fsType": {
                                                  "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                                                  "type": "string"
                                                },
                                                "readOnly": {
                                                  "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                                                  "type": "boolean"
                                                },
                                                "secretRef": {
                                                  "description": "SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.",
                                                  "type": "object",
                                                  "properties": {
                                                    "name": {
                                                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "volumeName": {
                                                  "description": "VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.",
                                                  "type": "string"
                                                },
                                                "volumeNamespace": {
                                                  "description": "VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.",
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "vsphereVolume": {
                                              "description": "VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine",
                                              "type": "object",
                                              "required": [
                                                "volumePath"
                                              ],
                                              "properties": {
                                                "fsType": {
                                                  "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                                                  "type": "string"
                                                },
                                                "storagePolicyID": {
                                                  "description": "Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.",
                                                  "type": "string"
                                                },
                                                "storagePolicyName": {
                                                  "description": "Storage Policy Based Management (SPBM) profile name.",
                                                  "type": "string"
                                                },
                                                "volumePath": {
                                                  "description": "Path that identifies vSphere volume vmdk",
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "permissions": {
                      "type": "array",
                      "items": {
                        "description": "StrategyDeploymentPermissions describe the rbac rules and service account needed by the install strategy",
                        "type": "object",
                        "required": [
                          "rules",
                          "serviceAccountName"
                        ],
                        "properties": {
                          "rules": {
                            "type": "array",
                            "items": {
                              "description": "PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.",
                              "type": "object",
                              "required": [
                                "verbs"
                              ],
                              "properties": {
                                "apiGroups": {
                                  "description": "APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "nonResourceURLs": {
                                  "description": "NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"),  but not both.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "resourceNames": {
                                  "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "resources": {
                                  "description": "Resources is a list of resources this rule applies to.  ResourceAll represents all resources.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "verbs": {
                                  "description": "Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          },
                          "serviceAccountName": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "strategy": {
                  "type": "string"
                }
              }
            },
            "installModes": {
              "description": "InstallModes specify supported installation types",
              "type": "array",
              "items": {
                "description": "InstallMode associates an InstallModeType with a flag representing if the CSV supports it",
                "type": "object",
                "required": [
                  "supported",
                  "type"
                ],
                "properties": {
                  "supported": {
                    "type": "boolean"
                  },
                  "type": {
                    "description": "InstallModeType is a supported type of install mode for CSV installation",
                    "type": "string"
                  }
                }
              }
            },
            "keywords": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "labels": {
              "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "links": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  }
                }
              }
            },
            "maintainers": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                }
              }
            },
            "maturity": {
              "type": "string"
            },
            "minKubeVersion": {
              "type": "string"
            },
            "nativeAPIs": {
              "type": "array",
              "items": {
                "description": "GroupVersionKind unambiguously identifies a kind.  It doesn't anonymously include GroupVersion to avoid automatic coersion.  It doesn't use a GroupVersion to avoid custom marshalling",
                "type": "object",
                "required": [
                  "group",
                  "kind",
                  "version"
                ],
                "properties": {
                  "group": {
                    "type": "string"
                  },
                  "kind": {
                    "type": "string"
                  },
                  "version": {
                    "type": "string"
                  }
                }
              }
            },
            "provider": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            },
            "replaces": {
              "description": "The name of a CSV this one replaces. Should match the `metadata.Name` field of the old CSV.",
              "type": "string"
            },
            "selector": {
              "description": "Label selector for related resources.",
              "type": "object",
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "type": "array",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                    "type": "object",
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "matchLabels": {
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "version": {
              "description": "OperatorVersion is a wrapper around semver.Version which supports correct marshaling to YAML and JSON.",
              "type": "string"
            },
            "webhookdefinitions": {
              "type": "array",
              "items": {
                "description": "WebhookDescription provides details to OLM about required webhooks",
                "type": "object",
                "required": [
                  "admissionReviewVersions",
                  "generateName",
                  "sideEffects",
                  "type"
                ],
                "properties": {
                  "admissionReviewVersions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "containerPort": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "conversionCRDs": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "deploymentName": {
                    "type": "string"
                  },
                  "failurePolicy": {
                    "type": "string"
                  },
                  "generateName": {
                    "type": "string"
                  },
                  "matchPolicy": {
                    "description": "MatchPolicyType specifies the type of match policy",
                    "type": "string"
                  },
                  "objectSelector": {
                    "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                    "type": "object",
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "type": "array",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                          "type": "object",
                          "required": [
                            "key",
                            "operator"
                          ],
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "matchLabels": {
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "reinvocationPolicy": {
                    "description": "ReinvocationPolicyType specifies what type of policy the admission hook uses.",
                    "type": "string"
                  },
                  "rules": {
                    "type": "array",
                    "items": {
                      "description": "RuleWithOperations is a tuple of Operations and Resources. It is recommended to make sure that all the tuple expansions are valid.",
                      "type": "object",
                      "properties": {
                        "apiGroups": {
                          "description": "APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "apiVersions": {
                          "description": "APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "operations": {
                          "description": "Operations is the operations the admission hook cares about - CREATE, UPDATE, or * for all operations. If '*' is present, the length of the slice must be one. Required.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "resources": {
                          "description": "Resources is a list of resources this rule applies to. \n For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources. \n If wildcard is present, the validation rule will ensure resources do not overlap with each other. \n Depending on the enclosing object, subresources might not be allowed. Required.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "scope": {
                          "description": "scope specifies the scope of this rule. Valid values are \"Cluster\", \"Namespaced\", and \"*\" \"Cluster\" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. \"Namespaced\" means that only namespaced resources will match this rule. \"*\" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is \"*\".",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "sideEffects": {
                    "type": "string"
                  },
                  "targetPort": {
                    "x-kubernetes-int-or-string": true
                  },
                  "timeoutSeconds": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "type": {
                    "description": "WebhookAdmissionType is the type of admission webhooks supported by OLM",
                    "type": "string",
                    "enum": [
                      "ValidatingAdmissionWebhook",
                      "MutatingAdmissionWebhook",
                      "ConversionWebhook"
                    ]
                  },
                  "webhookPath": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "status": {
          "description": "ClusterServiceVersionStatus represents information about the status of a pod. Status may trail the actual state of a system.",
          "type": "object",
          "properties": {
            "certsLastUpdated": {
              "description": "Last time the owned APIService certs were updated",
              "type": "string",
              "format": "date-time"
            },
            "certsRotateAt": {
              "description": "Time the owned APIService certs will rotate next",
              "type": "string",
              "format": "date-time"
            },
            "conditions": {
              "description": "List of conditions, a history of state transitions",
              "type": "array",
              "items": {
                "description": "Conditions appear in the status as a record of state transitions on the ClusterServiceVersion",
                "type": "object",
                "properties": {
                  "lastTransitionTime": {
                    "description": "Last time the status transitioned from one status to another.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "lastUpdateTime": {
                    "description": "Last time we updated the status",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "A human readable message indicating details about why the ClusterServiceVersion is in this condition.",
                    "type": "string"
                  },
                  "phase": {
                    "description": "Condition of the ClusterServiceVersion",
                    "type": "string"
                  },
                  "reason": {
                    "description": "A brief CamelCase message indicating details about why the ClusterServiceVersion is in this state. e.g. 'RequirementsNotMet'",
                    "type": "string"
                  }
                }
              }
            },
            "lastTransitionTime": {
              "description": "Last time the status transitioned from one status to another.",
              "type": "string",
              "format": "date-time"
            },
            "lastUpdateTime": {
              "description": "Last time we updated the status",
              "type": "string",
              "format": "date-time"
            },
            "message": {
              "description": "A human readable message indicating details about why the ClusterServiceVersion is in this condition.",
              "type": "string"
            },
            "phase": {
              "description": "Current condition of the ClusterServiceVersion",
              "type": "string"
            },
            "reason": {
              "description": "A brief CamelCase message indicating details about why the ClusterServiceVersion is in this state. e.g. 'RequirementsNotMet'",
              "type": "string"
            },
            "requirementStatus": {
              "description": "The status of each requirement for this CSV",
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "group",
                  "kind",
                  "message",
                  "name",
                  "status",
                  "version"
                ],
                "properties": {
                  "dependents": {
                    "type": "array",
                    "items": {
                      "description": "DependentStatus is the status for a dependent requirement (to prevent infinite nesting)",
                      "type": "object",
                      "required": [
                        "group",
                        "kind",
                        "status",
                        "version"
                      ],
                      "properties": {
                        "group": {
                          "type": "string"
                        },
                        "kind": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        },
                        "status": {
                          "description": "StatusReason is a camelcased reason for the status of a RequirementStatus or DependentStatus",
                          "type": "string"
                        },
                        "uuid": {
                          "type": "string"
                        },
                        "version": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "group": {
                    "type": "string"
                  },
                  "kind": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "status": {
                    "description": "StatusReason is a camelcased reason for the status of a RequirementStatus or DependentStatus",
                    "type": "string"
                  },
                  "uuid": {
                    "type": "string"
                  },
                  "version": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operators.coreos.com",
          "kind": "ClusterServiceVersion",
          "version": "v1alpha1"
        }
      ]
    },
    "com.coreos.operators.v1alpha1.ClusterServiceVersionList": {
      "description": "ClusterServiceVersionList is a list of ClusterServiceVersion",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operators.coreos.com/v1alpha1"
          ]
        },
        "items": {
          "description": "List of clusterserviceversions. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.coreos.operators.v1alpha1.ClusterServiceVersion"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterServiceVersionList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operators.coreos.com",
          "kind": "ClusterServiceVersionList",
          "version": "v1alpha1"
        }
      ]
    },
    "com.coreos.operators.v1alpha1.InstallPlan": {
      "description": "InstallPlan defines the installation of a set of operators.",
      "type": "object",
      "required": [
        "metadata",
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operators.coreos.com/v1alpha1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "InstallPlan"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "InstallPlanSpec defines a set of Application resources to be installed",
          "type": "object",
          "required": [
            "approval",
            "approved",
            "clusterServiceVersionNames"
          ],
          "properties": {
            "approval": {
              "description": "Approval is the user approval policy for an InstallPlan. It must be one of \"Automatic\" or \"Manual\".",
              "type": "string"
            },
            "approved": {
              "type": "boolean"
            },
            "clusterServiceVersionNames": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "generation": {
              "type": "integer"
            },
            "source": {
              "type": "string"
            },
            "sourceNamespace": {
              "type": "string"
            }
          }
        },
        "status": {
          "description": "InstallPlanStatus represents the information about the status of steps required to complete installation. \n Status may trail the actual state of a system.",
          "type": "object",
          "required": [
            "catalogSources",
            "phase"
          ],
          "properties": {
            "attenuatedServiceAccountRef": {
              "description": "AttenuatedServiceAccountRef references the service account that is used to do scoped operator install.",
              "type": "object",
              "properties": {
                "apiVersion": {
                  "description": "API version of the referent.",
                  "type": "string"
                },
                "fieldPath": {
                  "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                  "type": "string"
                },
                "resourceVersion": {
                  "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                  "type": "string"
                },
                "uid": {
                  "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                  "type": "string"
                }
              }
            },
            "bundleLookups": {
              "description": "BundleLookups is the set of in-progress requests to pull and unpackage bundle content to the cluster.",
              "type": "array",
              "items": {
                "description": "BundleLookup is a request to pull and unpackage the content of a bundle to the cluster.",
                "type": "object",
                "required": [
                  "catalogSourceRef",
                  "identifier",
                  "path",
                  "replaces"
                ],
                "properties": {
                  "catalogSourceRef": {
                    "description": "CatalogSourceRef is a reference to the CatalogSource the bundle path was resolved from.",
                    "type": "object",
                    "properties": {
                      "apiVersion": {
                        "description": "API version of the referent.",
                        "type": "string"
                      },
                      "fieldPath": {
                        "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                        "type": "string"
                      },
                      "resourceVersion": {
                        "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                        "type": "string"
                      },
                      "uid": {
                        "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                        "type": "string"
                      }
                    }
                  },
                  "conditions": {
                    "description": "Conditions represents the overall state of a BundleLookup.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "Last time the condition transitioned from one status to another.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "lastUpdateTime": {
                          "description": "Last time the condition was probed.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "A human readable message indicating details about the transition.",
                          "type": "string"
                        },
                        "reason": {
                          "description": "The reason for the condition's last transition.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Status of the condition, one of True, False, Unknown.",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of condition.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "identifier": {
                    "description": "Identifier is the catalog-unique name of the operator (the name of the CSV for bundles that contain CSVs)",
                    "type": "string"
                  },
                  "path": {
                    "description": "Path refers to the location of a bundle to pull. It's typically an image reference.",
                    "type": "string"
                  },
                  "properties": {
                    "description": "The effective properties of the unpacked bundle.",
                    "type": "string"
                  },
                  "replaces": {
                    "description": "Replaces is the name of the bundle to replace with the one found at Path.",
                    "type": "string"
                  }
                }
              }
            },
            "catalogSources": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "conditions": {
              "type": "array",
              "items": {
                "description": "InstallPlanCondition represents the overall status of the execution of an InstallPlan.",
                "type": "object",
                "properties": {
                  "lastTransitionTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "lastUpdateTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "type": "string"
                  },
                  "reason": {
                    "description": "ConditionReason is a camelcased reason for the state transition.",
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "type": {
                    "description": "InstallPlanConditionType describes the state of an InstallPlan at a certain point as a whole.",
                    "type": "string"
                  }
                }
              }
            },
            "phase": {
              "description": "InstallPlanPhase is the current status of a InstallPlan as a whole.",
              "type": "string"
            },
            "plan": {
              "type": "array",
              "items": {
                "description": "Step represents the status of an individual step in an InstallPlan.",
                "type": "object",
                "required": [
                  "resolving",
                  "resource",
                  "status"
                ],
                "properties": {
                  "resolving": {
                    "type": "string"
                  },
                  "resource": {
                    "description": "StepResource represents the status of a resource to be tracked by an InstallPlan.",
                    "type": "object",
                    "required": [
                      "group",
                      "kind",
                      "name",
                      "sourceName",
                      "sourceNamespace",
                      "version"
                    ],
                    "properties": {
                      "group": {
                        "type": "string"
                      },
                      "kind": {
                        "type": "string"
                      },
                      "manifest": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "sourceName": {
                        "type": "string"
                      },
                      "sourceNamespace": {
                        "type": "string"
                      },
                      "version": {
                        "type": "string"
                      }
                    }
                  },
                  "status": {
                    "description": "StepStatus is the current status of a particular resource an in InstallPlan",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operators.coreos.com",
          "kind": "InstallPlan",
          "version": "v1alpha1"
        }
      ]
    },
    "com.coreos.operators.v1alpha1.InstallPlanList": {
      "description": "InstallPlanList is a list of InstallPlan",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operators.coreos.com/v1alpha1"
          ]
        },
        "items": {
          "description": "List of installplans. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.coreos.operators.v1alpha1.InstallPlan"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "InstallPlanList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operators.coreos.com",
          "kind": "InstallPlanList",
          "version": "v1alpha1"
        }
      ]
    },
    "com.coreos.operators.v1alpha1.Subscription": {
      "description": "Subscription keeps operators up to date by tracking changes to Catalogs.",
      "type": "object",
      "required": [
        "metadata",
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operators.coreos.com/v1alpha1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Subscription"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "SubscriptionSpec defines an Application that can be installed",
          "type": "object",
          "required": [
            "name",
            "source",
            "sourceNamespace"
          ],
          "properties": {
            "channel": {
              "type": "string"
            },
            "config": {
              "description": "SubscriptionConfig contains configuration specified for a subscription.",
              "type": "object",
              "properties": {
                "env": {
                  "description": "Env is a list of environment variables to set in the container. Cannot be updated.",
                  "type": "array",
                  "items": {
                    "description": "EnvVar represents an environment variable present in a Container.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
                        "type": "string"
                      },
                      "valueFrom": {
                        "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                        "type": "object",
                        "properties": {
                          "configMapKeyRef": {
                            "description": "Selects a key of a ConfigMap.",
                            "type": "object",
                            "required": [
                              "key"
                            ],
                            "properties": {
                              "key": {
                                "description": "The key to select.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                "type": "string"
                              },
                              "optional": {
                                "description": "Specify whether the ConfigMap or its key must be defined",
                                "type": "boolean"
                              }
                            }
                          },
                          "fieldRef": {
                            "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                            "type": "object",
                            "required": [
                              "fieldPath"
                            ],
                            "properties": {
                              "apiVersion": {
                                "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                "type": "string"
                              },
                              "fieldPath": {
                                "description": "Path of the field to select in the specified API version.",
                                "type": "string"
                              }
                            }
                          },
                          "resourceFieldRef": {
                            "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                            "type": "object",
                            "required": [
                              "resource"
                            ],
                            "properties": {
                              "containerName": {
                                "description": "Container name: required for volumes, optional for env vars",
                                "type": "string"
                              },
                              "divisor": {
                                "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              },
                              "resource": {
                                "description": "Required: resource to select",
                                "type": "string"
                              }
                            }
                          },
                          "secretKeyRef": {
                            "description": "Selects a key of a secret in the pod's namespace",
                            "type": "object",
                            "required": [
                              "key"
                            ],
                            "properties": {
                              "key": {
                                "description": "The key of the secret to select from.  Must be a valid secret key.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                "type": "string"
                              },
                              "optional": {
                                "description": "Specify whether the Secret or its key must be defined",
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "envFrom": {
                  "description": "EnvFrom is a list of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Immutable.",
                  "type": "array",
                  "items": {
                    "description": "EnvFromSource represents the source of a set of ConfigMaps",
                    "type": "object",
                    "properties": {
                      "configMapRef": {
                        "description": "The ConfigMap to select from",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          },
                          "optional": {
                            "description": "Specify whether the ConfigMap must be defined",
                            "type": "boolean"
                          }
                        }
                      },
                      "prefix": {
                        "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
                        "type": "string"
                      },
                      "secretRef": {
                        "description": "The Secret to select from",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          },
                          "optional": {
                            "description": "Specify whether the Secret must be defined",
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  }
                },
                "nodeSelector": {
                  "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "resources": {
                  "description": "Resources represents compute resources required by this container. Immutable. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                  "type": "object",
                  "properties": {
                    "limits": {
                      "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                      "type": "object",
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      }
                    },
                    "requests": {
                      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                      "type": "object",
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      }
                    }
                  }
                },
                "selector": {
                  "description": "Selector is the label selector for pods to be configured. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment. It must match the pod template's labels.",
                  "type": "object",
                  "properties": {
                    "matchExpressions": {
                      "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                      "type": "array",
                      "items": {
                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                        "type": "object",
                        "required": [
                          "key",
                          "operator"
                        ],
                        "properties": {
                          "key": {
                            "description": "key is the label key that the selector applies to.",
                            "type": "string"
                          },
                          "operator": {
                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                            "type": "string"
                          },
                          "values": {
                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "matchLabels": {
                      "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  }
                },
                "tolerations": {
                  "description": "Tolerations are the pod's tolerations.",
                  "type": "array",
                  "items": {
                    "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
                    "type": "object",
                    "properties": {
                      "effect": {
                        "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                        "type": "string"
                      },
                      "key": {
                        "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                        "type": "string"
                      },
                      "tolerationSeconds": {
                        "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "value": {
                        "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                        "type": "string"
                      }
                    }
                  }
                },
                "volumeMounts": {
                  "description": "List of VolumeMounts to set in the container.",
                  "type": "array",
                  "items": {
                    "description": "VolumeMount describes a mounting of a Volume within a container.",
                    "type": "object",
                    "required": [
                      "mountPath",
                      "name"
                    ],
                    "properties": {
                      "mountPath": {
                        "description": "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                        "type": "string"
                      },
                      "mountPropagation": {
                        "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
                        "type": "string"
                      },
                      "name": {
                        "description": "This must match the Name of a Volume.",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
                        "type": "boolean"
                      },
                      "subPath": {
                        "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
                        "type": "string"
                      },
                      "subPathExpr": {
                        "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.",
                        "type": "string"
                      }
                    }
                  }
                },
                "volumes": {
                  "description": "List of Volumes to set in the podSpec.",
                  "type": "array",
                  "items": {
                    "description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "awsElasticBlockStore": {
                        "description": "AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
                        "type": "object",
                        "required": [
                          "volumeID"
                        ],
                        "properties": {
                          "fsType": {
                            "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine",
                            "type": "string"
                          },
                          "partition": {
                            "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).",
                            "type": "integer",
                            "format": "int32"
                          },
                          "readOnly": {
                            "description": "Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
                            "type": "boolean"
                          },
                          "volumeID": {
                            "description": "Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
                            "type": "string"
                          }
                        }
                      },
                      "azureDisk": {
                        "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
                        "type": "object",
                        "required": [
                          "diskName",
                          "diskURI"
                        ],
                        "properties": {
                          "cachingMode": {
                            "description": "Host Caching mode: None, Read Only, Read Write.",
                            "type": "string"
                          },
                          "diskName": {
                            "description": "The Name of the data disk in the blob storage",
                            "type": "string"
                          },
                          "diskURI": {
                            "description": "The URI the data disk in the blob storage",
                            "type": "string"
                          },
                          "fsType": {
                            "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                            "type": "string"
                          },
                          "kind": {
                            "description": "Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared",
                            "type": "string"
                          },
                          "readOnly": {
                            "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                            "type": "boolean"
                          }
                        }
                      },
                      "azureFile": {
                        "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
                        "type": "object",
                        "required": [
                          "secretName",
                          "shareName"
                        ],
                        "properties": {
                          "readOnly": {
                            "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                            "type": "boolean"
                          },
                          "secretName": {
                            "description": "the name of secret that contains Azure Storage Account Name and Key",
                            "type": "string"
                          },
                          "shareName": {
                            "description": "Share Name",
                            "type": "string"
                          }
                        }
                      },
                      "cephfs": {
                        "description": "CephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
                        "type": "object",
                        "required": [
                          "monitors"
                        ],
                        "properties": {
                          "monitors": {
                            "description": "Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "path": {
                            "description": "Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
                            "type": "string"
                          },
                          "readOnly": {
                            "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                            "type": "boolean"
                          },
                          "secretFile": {
                            "description": "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                            "type": "string"
                          },
                          "secretRef": {
                            "description": "Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                "type": "string"
                              }
                            }
                          },
                          "user": {
                            "description": "Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                            "type": "string"
                          }
                        }
                      },
                      "cinder": {
                        "description": "Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                        "type": "object",
                        "required": [
                          "volumeID"
                        ],
                        "properties": {
                          "fsType": {
                            "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                            "type": "string"
                          },
                          "readOnly": {
                            "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                            "type": "boolean"
                          },
                          "secretRef": {
                            "description": "Optional: points to a secret object containing parameters used to connect to OpenStack.",
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                "type": "string"
                              }
                            }
                          },
                          "volumeID": {
                            "description": "volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                            "type": "string"
                          }
                        }
                      },
                      "configMap": {
                        "description": "ConfigMap represents a configMap that should populate this volume",
                        "type": "object",
                        "properties": {
                          "defaultMode": {
                            "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "items": {
                            "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                            "type": "array",
                            "items": {
                              "description": "Maps a string key to a path within a volume.",
                              "type": "object",
                              "required": [
                                "key",
                                "path"
                              ],
                              "properties": {
                                "key": {
                                  "description": "The key to project.",
                                  "type": "string"
                                },
                                "mode": {
                                  "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "path": {
                                  "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          },
                          "optional": {
                            "description": "Specify whether the ConfigMap or its keys must be defined",
                            "type": "boolean"
                          }
                        }
                      },
                      "csi": {
                        "description": "CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature).",
                        "type": "object",
                        "required": [
                          "driver"
                        ],
                        "properties": {
                          "driver": {
                            "description": "Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.",
                            "type": "string"
                          },
                          "fsType": {
                            "description": "Filesystem type to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.",
                            "type": "string"
                          },
                          "nodePublishSecretRef": {
                            "description": "NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.",
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                "type": "string"
                              }
                            }
                          },
                          "readOnly": {
                            "description": "Specifies a read-only configuration for the volume. Defaults to false (read/write).",
                            "type": "boolean"
                          },
                          "volumeAttributes": {
                            "description": "VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "downwardAPI": {
                        "description": "DownwardAPI represents downward API about the pod that should populate this volume",
                        "type": "object",
                        "properties": {
                          "defaultMode": {
                            "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "items": {
                            "description": "Items is a list of downward API volume file",
                            "type": "array",
                            "items": {
                              "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
                              "type": "object",
                              "required": [
                                "path"
                              ],
                              "properties": {
                                "fieldRef": {
                                  "description": "Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.",
                                  "type": "object",
                                  "required": [
                                    "fieldPath"
                                  ],
                                  "properties": {
                                    "apiVersion": {
                                      "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                      "type": "string"
                                    },
                                    "fieldPath": {
                                      "description": "Path of the field to select in the specified API version.",
                                      "type": "string"
                                    }
                                  }
                                },
                                "mode": {
                                  "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "path": {
                                  "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                                  "type": "string"
                                },
                                "resourceFieldRef": {
                                  "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.",
                                  "type": "object",
                                  "required": [
                                    "resource"
                                  ],
                                  "properties": {
                                    "containerName": {
                                      "description": "Container name: required for volumes, optional for env vars",
                                      "type": "string"
                                    },
                                    "divisor": {
                                      "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                      "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                      "x-kubernetes-int-or-string": true
                                    },
                                    "resource": {
                                      "description": "Required: resource to select",
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "emptyDir": {
                        "description": "EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
                        "type": "object",
                        "properties": {
                          "medium": {
                            "description": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
                            "type": "string"
                          },
                          "sizeLimit": {
                            "description": "Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir",
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      },
                      "fc": {
                        "description": "FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
                        "type": "object",
                        "properties": {
                          "fsType": {
                            "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine",
                            "type": "string"
                          },
                          "lun": {
                            "description": "Optional: FC target lun number",
                            "type": "integer",
                            "format": "int32"
                          },
                          "readOnly": {
                            "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                            "type": "boolean"
                          },
                          "targetWWNs": {
                            "description": "Optional: FC target worldwide names (WWNs)",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "wwids": {
                            "description": "Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "flexVolume": {
                        "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
                        "type": "object",
                        "required": [
                          "driver"
                        ],
                        "properties": {
                          "driver": {
                            "description": "Driver is the name of the driver to use for this volume.",
                            "type": "string"
                          },
                          "fsType": {
                            "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.",
                            "type": "string"
                          },
                          "options": {
                            "description": "Optional: Extra command options if any.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "readOnly": {
                            "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                            "type": "boolean"
                          },
                          "secretRef": {
                            "description": "Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.",
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "flocker": {
                        "description": "Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running",
                        "type": "object",
                        "properties": {
                          "datasetName": {
                            "description": "Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated",
                            "type": "string"
                          },
                          "datasetUUID": {
                            "description": "UUID of the dataset. This is unique identifier of a Flocker dataset",
                            "type": "string"
                          }
                        }
                      },
                      "gcePersistentDisk": {
                        "description": "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                        "type": "object",
                        "required": [
                          "pdName"
                        ],
                        "properties": {
                          "fsType": {
                            "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine",
                            "type": "string"
                          },
                          "partition": {
                            "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                            "type": "integer",
                            "format": "int32"
                          },
                          "pdName": {
                            "description": "Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                            "type": "string"
                          },
                          "readOnly": {
                            "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                            "type": "boolean"
                          }
                        }
                      },
                      "gitRepo": {
                        "description": "GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
                        "type": "object",
                        "required": [
                          "repository"
                        ],
                        "properties": {
                          "directory": {
                            "description": "Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.",
                            "type": "string"
                          },
                          "repository": {
                            "description": "Repository URL",
                            "type": "string"
                          },
                          "revision": {
                            "description": "Commit hash for the specified revision.",
                            "type": "string"
                          }
                        }
                      },
                      "glusterfs": {
                        "description": "Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md",
                        "type": "object",
                        "required": [
                          "endpoints",
                          "path"
                        ],
                        "properties": {
                          "endpoints": {
                            "description": "EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                            "type": "string"
                          },
                          "path": {
                            "description": "Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                            "type": "string"
                          },
                          "readOnly": {
                            "description": "ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                            "type": "boolean"
                          }
                        }
                      },
                      "hostPath": {
                        "description": "HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.",
                        "type": "object",
                        "required": [
                          "path"
                        ],
                        "properties": {
                          "path": {
                            "description": "Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
                            "type": "string"
                          },
                          "type": {
                            "description": "Type for HostPath Volume Defaults to \"\" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
                            "type": "string"
                          }
                        }
                      },
                      "iscsi": {
                        "description": "ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md",
                        "type": "object",
                        "required": [
                          "iqn",
                          "lun",
                          "targetPortal"
                        ],
                        "properties": {
                          "chapAuthDiscovery": {
                            "description": "whether support iSCSI Discovery CHAP authentication",
                            "type": "boolean"
                          },
                          "chapAuthSession": {
                            "description": "whether support iSCSI Session CHAP authentication",
                            "type": "boolean"
                          },
                          "fsType": {
                            "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine",
                            "type": "string"
                          },
                          "initiatorName": {
                            "description": "Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.",
                            "type": "string"
                          },
                          "iqn": {
                            "description": "Target iSCSI Qualified Name.",
                            "type": "string"
                          },
                          "iscsiInterface": {
                            "description": "iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
                            "type": "string"
                          },
                          "lun": {
                            "description": "iSCSI Target Lun number.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "portals": {
                            "description": "iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "readOnly": {
                            "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.",
                            "type": "boolean"
                          },
                          "secretRef": {
                            "description": "CHAP Secret for iSCSI target and initiator authentication",
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                "type": "string"
                              }
                            }
                          },
                          "targetPortal": {
                            "description": "iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "description": "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                        "type": "string"
                      },
                      "nfs": {
                        "description": "NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                        "type": "object",
                        "required": [
                          "path",
                          "server"
                        ],
                        "properties": {
                          "path": {
                            "description": "Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                            "type": "string"
                          },
                          "readOnly": {
                            "description": "ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                            "type": "boolean"
                          },
                          "server": {
                            "description": "Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                            "type": "string"
                          }
                        }
                      },
                      "persistentVolumeClaim": {
                        "description": "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                        "type": "object",
                        "required": [
                          "claimName"
                        ],
                        "properties": {
                          "claimName": {
                            "description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                            "type": "string"
                          },
                          "readOnly": {
                            "description": "Will force the ReadOnly setting in VolumeMounts. Default false.",
                            "type": "boolean"
                          }
                        }
                      },
                      "photonPersistentDisk": {
                        "description": "PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
                        "type": "object",
                        "required": [
                          "pdID"
                        ],
                        "properties": {
                          "fsType": {
                            "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                            "type": "string"
                          },
                          "pdID": {
                            "description": "ID that identifies Photon Controller persistent disk",
                            "type": "string"
                          }
                        }
                      },
                      "portworxVolume": {
                        "description": "PortworxVolume represents a portworx volume attached and mounted on kubelets host machine",
                        "type": "object",
                        "required": [
                          "volumeID"
                        ],
                        "properties": {
                          "fsType": {
                            "description": "FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                            "type": "string"
                          },
                          "readOnly": {
                            "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                            "type": "boolean"
                          },
                          "volumeID": {
                            "description": "VolumeID uniquely identifies a Portworx volume",
                            "type": "string"
                          }
                        }
                      },
                      "projected": {
                        "description": "Items for all in one resources secrets, configmaps, and downward API",
                        "type": "object",
                        "required": [
                          "sources"
                        ],
                        "properties": {
                          "defaultMode": {
                            "description": "Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "sources": {
                            "description": "list of volume projections",
                            "type": "array",
                            "items": {
                              "description": "Projection that may be projected along with other supported volume types",
                              "type": "object",
                              "properties": {
                                "configMap": {
                                  "description": "information about the configMap data to project",
                                  "type": "object",
                                  "properties": {
                                    "items": {
                                      "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                                      "type": "array",
                                      "items": {
                                        "description": "Maps a string key to a path within a volume.",
                                        "type": "object",
                                        "required": [
                                          "key",
                                          "path"
                                        ],
                                        "properties": {
                                          "key": {
                                            "description": "The key to project.",
                                            "type": "string"
                                          },
                                          "mode": {
                                            "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "path": {
                                            "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                            "type": "string"
                                          }
                                        }
                                      }
                                    },
                                    "name": {
                                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                      "type": "string"
                                    },
                                    "optional": {
                                      "description": "Specify whether the ConfigMap or its keys must be defined",
                                      "type": "boolean"
                                    }
                                  }
                                },
                                "downwardAPI": {
                                  "description": "information about the downwardAPI data to project",
                                  "type": "object",
                                  "properties": {
                                    "items": {
                                      "description": "Items is a list of DownwardAPIVolume file",
                                      "type": "array",
                                      "items": {
                                        "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
                                        "type": "object",
                                        "required": [
                                          "path"
                                        ],
                                        "properties": {
                                          "fieldRef": {
                                            "description": "Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.",
                                            "type": "object",
                                            "required": [
                                              "fieldPath"
                                            ],
                                            "properties": {
                                              "apiVersion": {
                                                "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                                "type": "string"
                                              },
                                              "fieldPath": {
                                                "description": "Path of the field to select in the specified API version.",
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "mode": {
                                            "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "path": {
                                            "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                                            "type": "string"
                                          },
                                          "resourceFieldRef": {
                                            "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.",
                                            "type": "object",
                                            "required": [
                                              "resource"
                                            ],
                                            "properties": {
                                              "containerName": {
                                                "description": "Container name: required for volumes, optional for env vars",
                                                "type": "string"
                                              },
                                              "divisor": {
                                                "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                "x-kubernetes-int-or-string": true
                                              },
                                              "resource": {
                                                "description": "Required: resource to select",
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "secret": {
                                  "description": "information about the secret data to project",
                                  "type": "object",
                                  "properties": {
                                    "items": {
                                      "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                                      "type": "array",
                                      "items": {
                                        "description": "Maps a string key to a path within a volume.",
                                        "type": "object",
                                        "required": [
                                          "key",
                                          "path"
                                        ],
                                        "properties": {
                                          "key": {
                                            "description": "The key to project.",
                                            "type": "string"
                                          },
                                          "mode": {
                                            "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "path": {
                                            "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                            "type": "string"
                                          }
                                        }
                                      }
                                    },
                                    "name": {
                                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                      "type": "string"
                                    },
                                    "optional": {
                                      "description": "Specify whether the Secret or its key must be defined",
                                      "type": "boolean"
                                    }
                                  }
                                },
                                "serviceAccountToken": {
                                  "description": "information about the serviceAccountToken data to project",
                                  "type": "object",
                                  "required": [
                                    "path"
                                  ],
                                  "properties": {
                                    "audience": {
                                      "description": "Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.",
                                      "type": "string"
                                    },
                                    "expirationSeconds": {
                                      "description": "ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.",
                                      "type": "integer",
                                      "format": "int64"
                                    },
                                    "path": {
                                      "description": "Path is the path relative to the mount point of the file to project the token into.",
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "quobyte": {
                        "description": "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
                        "type": "object",
                        "required": [
                          "registry",
                          "volume"
                        ],
                        "properties": {
                          "group": {
                            "description": "Group to map volume access to Default is no group",
                            "type": "string"
                          },
                          "readOnly": {
                            "description": "ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.",
                            "type": "boolean"
                          },
                          "registry": {
                            "description": "Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes",
                            "type": "string"
                          },
                          "tenant": {
                            "description": "Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin",
                            "type": "string"
                          },
                          "user": {
                            "description": "User to map volume access to Defaults to serivceaccount user",
                            "type": "string"
                          },
                          "volume": {
                            "description": "Volume is a string that references an already created Quobyte volume by name.",
                            "type": "string"
                          }
                        }
                      },
                      "rbd": {
                        "description": "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md",
                        "type": "object",
                        "required": [
                          "image",
                          "monitors"
                        ],
                        "properties": {
                          "fsType": {
                            "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine",
                            "type": "string"
                          },
                          "image": {
                            "description": "The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                            "type": "string"
                          },
                          "keyring": {
                            "description": "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                            "type": "string"
                          },
                          "monitors": {
                            "description": "A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "pool": {
                            "description": "The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                            "type": "string"
                          },
                          "readOnly": {
                            "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                            "type": "boolean"
                          },
                          "secretRef": {
                            "description": "SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                "type": "string"
                              }
                            }
                          },
                          "user": {
                            "description": "The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                            "type": "string"
                          }
                        }
                      },
                      "scaleIO": {
                        "description": "ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.",
                        "type": "object",
                        "required": [
                          "gateway",
                          "secretRef",
                          "system"
                        ],
                        "properties": {
                          "fsType": {
                            "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\".",
                            "type": "string"
                          },
                          "gateway": {
                            "description": "The host address of the ScaleIO API Gateway.",
                            "type": "string"
                          },
                          "protectionDomain": {
                            "description": "The name of the ScaleIO Protection Domain for the configured storage.",
                            "type": "string"
                          },
                          "readOnly": {
                            "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                            "type": "boolean"
                          },
                          "secretRef": {
                            "description": "SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.",
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                "type": "string"
                              }
                            }
                          },
                          "sslEnabled": {
                            "description": "Flag to enable/disable SSL communication with Gateway, default false",
                            "type": "boolean"
                          },
                          "storageMode": {
                            "description": "Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.",
                            "type": "string"
                          },
                          "storagePool": {
                            "description": "The ScaleIO Storage Pool associated with the protection domain.",
                            "type": "string"
                          },
                          "system": {
                            "description": "The name of the storage system as configured in ScaleIO.",
                            "type": "string"
                          },
                          "volumeName": {
                            "description": "The name of a volume already created in the ScaleIO system that is associated with this volume source.",
                            "type": "string"
                          }
                        }
                      },
                      "secret": {
                        "description": "Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
                        "type": "object",
                        "properties": {
                          "defaultMode": {
                            "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "items": {
                            "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                            "type": "array",
                            "items": {
                              "description": "Maps a string key to a path within a volume.",
                              "type": "object",
                              "required": [
                                "key",
                                "path"
                              ],
                              "properties": {
                                "key": {
                                  "description": "The key to project.",
                                  "type": "string"
                                },
                                "mode": {
                                  "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "path": {
                                  "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "optional": {
                            "description": "Specify whether the Secret or its keys must be defined",
                            "type": "boolean"
                          },
                          "secretName": {
                            "description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
                            "type": "string"
                          }
                        }
                      },
                      "storageos": {
                        "description": "StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.",
                        "type": "object",
                        "properties": {
                          "fsType": {
                            "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                            "type": "string"
                          },
                          "readOnly": {
                            "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                            "type": "boolean"
                          },
                          "secretRef": {
                            "description": "SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.",
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                "type": "string"
                              }
                            }
                          },
                          "volumeName": {
                            "description": "VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.",
                            "type": "string"
                          },
                          "volumeNamespace": {
                            "description": "VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.",
                            "type": "string"
                          }
                        }
                      },
                      "vsphereVolume": {
                        "description": "VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine",
                        "type": "object",
                        "required": [
                          "volumePath"
                        ],
                        "properties": {
                          "fsType": {
                            "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                            "type": "string"
                          },
                          "storagePolicyID": {
                            "description": "Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.",
                            "type": "string"
                          },
                          "storagePolicyName": {
                            "description": "Storage Policy Based Management (SPBM) profile name.",
                            "type": "string"
                          },
                          "volumePath": {
                            "description": "Path that identifies vSphere volume vmdk",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "installPlanApproval": {
              "description": "Approval is the user approval policy for an InstallPlan. It must be one of \"Automatic\" or \"Manual\".",
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "source": {
              "type": "string"
            },
            "sourceNamespace": {
              "type": "string"
            },
            "startingCSV": {
              "type": "string"
            }
          }
        },
        "status": {
          "type": "object",
          "required": [
            "lastUpdated"
          ],
          "properties": {
            "catalogHealth": {
              "description": "CatalogHealth contains the Subscription's view of its relevant CatalogSources' status. It is used to determine SubscriptionStatusConditions related to CatalogSources.",
              "type": "array",
              "items": {
                "description": "SubscriptionCatalogHealth describes the health of a CatalogSource the Subscription knows about.",
                "type": "object",
                "required": [
                  "catalogSourceRef",
                  "healthy",
                  "lastUpdated"
                ],
                "properties": {
                  "catalogSourceRef": {
                    "description": "CatalogSourceRef is a reference to a CatalogSource.",
                    "type": "object",
                    "properties": {
                      "apiVersion": {
                        "description": "API version of the referent.",
                        "type": "string"
                      },
                      "fieldPath": {
                        "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                        "type": "string"
                      },
                      "resourceVersion": {
                        "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                        "type": "string"
                      },
                      "uid": {
                        "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                        "type": "string"
                      }
                    }
                  },
                  "healthy": {
                    "description": "Healthy is true if the CatalogSource is healthy; false otherwise.",
                    "type": "boolean"
                  },
                  "lastUpdated": {
                    "description": "LastUpdated represents the last time that the CatalogSourceHealth changed",
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            },
            "conditions": {
              "description": "Conditions is a list of the latest available observations about a Subscription's current state.",
              "type": "array",
              "items": {
                "description": "SubscriptionCondition represents the latest available observations of a Subscription's state.",
                "type": "object",
                "required": [
                  "status",
                  "type"
                ],
                "properties": {
                  "lastHeartbeatTime": {
                    "description": "LastHeartbeatTime is the last time we got an update on a given condition",
                    "type": "string",
                    "format": "date-time"
                  },
                  "lastTransitionTime": {
                    "description": "LastTransitionTime is the last time the condition transit from one status to another",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "Message is a human-readable message indicating details about last transition.",
                    "type": "string"
                  },
                  "reason": {
                    "description": "Reason is a one-word CamelCase reason for the condition's last transition.",
                    "type": "string"
                  },
                  "status": {
                    "description": "Status is the status of the condition, one of True, False, Unknown.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type is the type of Subscription condition.",
                    "type": "string"
                  }
                }
              }
            },
            "currentCSV": {
              "description": "CurrentCSV is the CSV the Subscription is progressing to.",
              "type": "string"
            },
            "installPlanGeneration": {
              "description": "InstallPlanGeneration is the current generation of the installplan",
              "type": "integer"
            },
            "installPlanRef": {
              "description": "InstallPlanRef is a reference to the latest InstallPlan that contains the Subscription's current CSV.",
              "type": "object",
              "properties": {
                "apiVersion": {
                  "description": "API version of the referent.",
                  "type": "string"
                },
                "fieldPath": {
                  "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                  "type": "string"
                },
                "resourceVersion": {
                  "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                  "type": "string"
                },
                "uid": {
                  "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                  "type": "string"
                }
              }
            },
            "installedCSV": {
              "description": "InstalledCSV is the CSV currently installed by the Subscription.",
              "type": "string"
            },
            "installplan": {
              "description": "Install is a reference to the latest InstallPlan generated for the Subscription. DEPRECATED: InstallPlanRef",
              "type": "object",
              "required": [
                "apiVersion",
                "kind",
                "name",
                "uuid"
              ],
              "properties": {
                "apiVersion": {
                  "type": "string"
                },
                "kind": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "uuid": {
                  "description": "UID is a type that holds unique ID values, including UUIDs.  Because we don't ONLY use UUIDs, this is an alias to string.  Being a type captures intent and helps make sure that UIDs and names do not get conflated.",
                  "type": "string"
                }
              }
            },
            "lastUpdated": {
              "description": "LastUpdated represents the last time that the Subscription status was updated.",
              "type": "string",
              "format": "date-time"
            },
            "reason": {
              "description": "Reason is the reason the Subscription was transitioned to its current state.",
              "type": "string"
            },
            "state": {
              "description": "State represents the current state of the Subscription",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operators.coreos.com",
          "kind": "Subscription",
          "version": "v1alpha1"
        }
      ]
    },
    "com.coreos.operators.v1alpha1.SubscriptionList": {
      "description": "SubscriptionList is a list of Subscription",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operators.coreos.com/v1alpha1"
          ]
        },
        "items": {
          "description": "List of subscriptions. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.coreos.operators.v1alpha1.Subscription"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "SubscriptionList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operators.coreos.com",
          "kind": "SubscriptionList",
          "version": "v1alpha1"
        }
      ]
    },
    "com.coreos.operators.v1alpha2.OperatorGroup": {
      "description": "OperatorGroup is the unit of multitenancy for OLM managed operators. It constrains the installation of operators in its namespace to a specified set of target namespaces.",
      "type": "object",
      "required": [
        "metadata"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operators.coreos.com/v1alpha2"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "OperatorGroup"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "OperatorGroupSpec is the spec for an OperatorGroup resource.",
          "type": "object",
          "properties": {
            "selector": {
              "description": "Selector selects the OperatorGroup's target namespaces.",
              "type": "object",
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "type": "array",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                    "type": "object",
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "matchLabels": {
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "serviceAccountName": {
              "description": "ServiceAccountName is the admin specified service account which will be used to deploy operator(s) in this operator group.",
              "type": "string"
            },
            "staticProvidedAPIs": {
              "description": "Static tells OLM not to update the OperatorGroup's providedAPIs annotation",
              "type": "boolean"
            },
            "targetNamespaces": {
              "description": "TargetNamespaces is an explicit set of namespaces to target. If it is set, Selector is ignored.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "status": {
          "description": "OperatorGroupStatus is the status for an OperatorGroupResource.",
          "type": "object",
          "required": [
            "lastUpdated"
          ],
          "properties": {
            "lastUpdated": {
              "description": "LastUpdated is a timestamp of the last time the OperatorGroup's status was Updated.",
              "type": "string",
              "format": "date-time"
            },
            "namespaces": {
              "description": "Namespaces is the set of target namespaces for the OperatorGroup.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "serviceAccountRef": {
              "description": "ServiceAccountRef references the service account object specified.",
              "type": "object",
              "properties": {
                "apiVersion": {
                  "description": "API version of the referent.",
                  "type": "string"
                },
                "fieldPath": {
                  "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                  "type": "string"
                },
                "resourceVersion": {
                  "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                  "type": "string"
                },
                "uid": {
                  "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operators.coreos.com",
          "kind": "OperatorGroup",
          "version": "v1alpha2"
        }
      ]
    },
    "com.coreos.operators.v1alpha2.OperatorGroupList": {
      "description": "OperatorGroupList is a list of OperatorGroup",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operators.coreos.com/v1alpha2"
          ]
        },
        "items": {
          "description": "List of operatorgroups. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.coreos.operators.v1alpha2.OperatorGroup"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "OperatorGroupList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operators.coreos.com",
          "kind": "OperatorGroupList",
          "version": "v1alpha2"
        }
      ]
    },
    "com.github.openshift.api.apps.v1.CustomDeploymentStrategyParams": {
      "description": "CustomDeploymentStrategyParams are the input to the Custom deployment strategy.",
      "type": "object",
      "properties": {
        "command": {
          "description": "Command is optional and overrides CMD in the container Image.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "environment": {
          "description": "Environment holds the environment which will be given to the container for Image.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          }
        },
        "image": {
          "description": "Image specifies a container image which can carry out a deployment.",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.apps.v1.DeploymentCause": {
      "description": "DeploymentCause captures information about a particular cause of a deployment.",
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "imageTrigger": {
          "description": "ImageTrigger contains the image trigger details, if this trigger was fired based on an image change",
          "$ref": "#/definitions/com.github.openshift.api.apps.v1.DeploymentCauseImageTrigger"
        },
        "type": {
          "description": "Type of the trigger that resulted in the creation of a new deployment",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.apps.v1.DeploymentCauseImageTrigger": {
      "description": "DeploymentCauseImageTrigger represents details about the cause of a deployment originating from an image change trigger",
      "type": "object",
      "required": [
        "from"
      ],
      "properties": {
        "from": {
          "description": "From is a reference to the changed object which triggered a deployment. The field may have the kinds DockerImage, ImageStreamTag, or ImageStreamImage.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        }
      }
    },
    "com.github.openshift.api.apps.v1.DeploymentCondition": {
      "description": "DeploymentCondition describes the state of a deployment config at a certain point.",
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "The last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "lastUpdateTime": {
          "description": "The last time this condition was updated.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of deployment condition.",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.apps.v1.DeploymentConfig": {
      "description": "Deployment Configs define the template for a pod and manages deploying new images or configuration changes. A single deployment configuration is usually analogous to a single micro-service. Can support many different deployment patterns, including full restart, customizable rolling updates, and  fully custom behaviors, as well as pre- and post- deployment hooks. Each individual deployment is represented as a replication controller.\n\nA deployment is \"triggered\" when its configuration is changed or a tag in an Image Stream is changed. Triggers can be disabled to allow manual control over a deployment. The \"strategy\" determines how the deployment is carried out and may be changed at any time. The `latestVersion` field is updated when a new deployment is triggered by any means.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "apps.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "DeploymentConfig"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec represents a desired deployment state and how to deploy to it.",
          "$ref": "#/definitions/com.github.openshift.api.apps.v1.DeploymentConfigSpec"
        },
        "status": {
          "description": "Status represents the current deployment state.",
          "$ref": "#/definitions/com.github.openshift.api.apps.v1.DeploymentConfigStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "DeploymentConfig",
          "version": "v1"
        },
        {
          "group": "apps.openshift.io",
          "kind": "DeploymentConfig",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.apps.v1.DeploymentConfigList": {
      "description": "DeploymentConfigList is a collection of deployment configs.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "apps.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is a list of deployment configs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.apps.v1.DeploymentConfig"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "DeploymentConfigList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "DeploymentConfigList",
          "version": "v1"
        },
        {
          "group": "apps.openshift.io",
          "kind": "DeploymentConfigList",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.apps.v1.DeploymentConfigRollback": {
      "description": "DeploymentConfigRollback provides the input to rollback generation.",
      "type": "object",
      "required": [
        "name",
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "apps.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "DeploymentConfigRollback"
          ]
        },
        "name": {
          "description": "Name of the deployment config that will be rolled back.",
          "type": "string"
        },
        "spec": {
          "description": "Spec defines the options to rollback generation.",
          "$ref": "#/definitions/com.github.openshift.api.apps.v1.DeploymentConfigRollbackSpec"
        },
        "updatedAnnotations": {
          "description": "UpdatedAnnotations is a set of new annotations that will be added in the deployment config.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "DeploymentConfigRollback",
          "version": "v1"
        },
        {
          "group": "apps.openshift.io",
          "kind": "DeploymentConfigRollback",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.apps.v1.DeploymentConfigRollbackSpec": {
      "description": "DeploymentConfigRollbackSpec represents the options for rollback generation.",
      "type": "object",
      "required": [
        "from",
        "includeTriggers",
        "includeTemplate",
        "includeReplicationMeta",
        "includeStrategy"
      ],
      "properties": {
        "from": {
          "description": "From points to a ReplicationController which is a deployment.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "includeReplicationMeta": {
          "description": "IncludeReplicationMeta specifies whether to include the replica count and selector.",
          "type": "boolean"
        },
        "includeStrategy": {
          "description": "IncludeStrategy specifies whether to include the deployment Strategy.",
          "type": "boolean"
        },
        "includeTemplate": {
          "description": "IncludeTemplate specifies whether to include the PodTemplateSpec.",
          "type": "boolean"
        },
        "includeTriggers": {
          "description": "IncludeTriggers specifies whether to include config Triggers.",
          "type": "boolean"
        },
        "revision": {
          "description": "Revision to rollback to. If set to 0, rollback to the last revision.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "com.github.openshift.api.apps.v1.DeploymentConfigSpec": {
      "description": "DeploymentConfigSpec represents the desired state of the deployment.",
      "type": "object",
      "properties": {
        "minReadySeconds": {
          "description": "MinReadySeconds is the minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
          "type": "integer",
          "format": "int32"
        },
        "paused": {
          "description": "Paused indicates that the deployment config is paused resulting in no new deployments on template changes or changes in the template caused by other triggers.",
          "type": "boolean"
        },
        "replicas": {
          "description": "Replicas is the number of desired replicas.",
          "type": "integer",
          "format": "int32"
        },
        "revisionHistoryLimit": {
          "description": "RevisionHistoryLimit is the number of old ReplicationControllers to retain to allow for rollbacks. This field is a pointer to allow for differentiation between an explicit zero and not specified. Defaults to 10. (This only applies to DeploymentConfigs created via the new group API resource, not the legacy resource.)",
          "type": "integer",
          "format": "int32"
        },
        "selector": {
          "description": "Selector is a label query over pods that should match the Replicas count.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "strategy": {
          "description": "Strategy describes how a deployment is executed.",
          "$ref": "#/definitions/com.github.openshift.api.apps.v1.DeploymentStrategy"
        },
        "template": {
          "description": "Template is the object that describes the pod that will be created if insufficient replicas are detected.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        },
        "test": {
          "description": "Test ensures that this deployment config will have zero replicas except while a deployment is running. This allows the deployment config to be used as a continuous deployment test - triggering on images, running the deployment, and then succeeding or failing. Post strategy hooks and After actions can be used to integrate successful deployment with an action.",
          "type": "boolean"
        },
        "triggers": {
          "description": "Triggers determine how updates to a DeploymentConfig result in new deployments. If no triggers are defined, a new deployment can only occur as a result of an explicit client update to the DeploymentConfig with a new LatestVersion. If null, defaults to having a config change trigger.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.apps.v1.DeploymentTriggerPolicy"
          }
        }
      }
    },
    "com.github.openshift.api.apps.v1.DeploymentConfigStatus": {
      "description": "DeploymentConfigStatus represents the current deployment state.",
      "type": "object",
      "required": [
        "latestVersion",
        "observedGeneration",
        "replicas",
        "updatedReplicas",
        "availableReplicas",
        "unavailableReplicas"
      ],
      "properties": {
        "availableReplicas": {
          "description": "AvailableReplicas is the total number of available pods targeted by this deployment config.",
          "type": "integer",
          "format": "int32"
        },
        "conditions": {
          "description": "Conditions represents the latest available observations of a deployment config's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.apps.v1.DeploymentCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "details": {
          "description": "Details are the reasons for the update to this deployment config. This could be based on a change made by the user or caused by an automatic trigger",
          "$ref": "#/definitions/com.github.openshift.api.apps.v1.DeploymentDetails"
        },
        "latestVersion": {
          "description": "LatestVersion is used to determine whether the current deployment associated with a deployment config is out of sync.",
          "type": "integer",
          "format": "int64"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the most recent generation observed by the deployment config controller.",
          "type": "integer",
          "format": "int64"
        },
        "readyReplicas": {
          "description": "Total number of ready pods targeted by this deployment.",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "Replicas is the total number of pods targeted by this deployment config.",
          "type": "integer",
          "format": "int32"
        },
        "unavailableReplicas": {
          "description": "UnavailableReplicas is the total number of unavailable pods targeted by this deployment config.",
          "type": "integer",
          "format": "int32"
        },
        "updatedReplicas": {
          "description": "UpdatedReplicas is the total number of non-terminated pods targeted by this deployment config that have the desired template spec.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "com.github.openshift.api.apps.v1.DeploymentDetails": {
      "description": "DeploymentDetails captures information about the causes of a deployment.",
      "type": "object",
      "required": [
        "causes"
      ],
      "properties": {
        "causes": {
          "description": "Causes are extended data associated with all the causes for creating a new deployment",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.apps.v1.DeploymentCause"
          }
        },
        "message": {
          "description": "Message is the user specified change message, if this deployment was triggered manually by the user",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.apps.v1.DeploymentLog": {
      "description": "DeploymentLog represents the logs for a deployment",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "apps.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "DeploymentLog"
          ]
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "DeploymentLog",
          "version": "v1"
        },
        {
          "group": "apps.openshift.io",
          "kind": "DeploymentLog",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.apps.v1.DeploymentRequest": {
      "description": "DeploymentRequest is a request to a deployment config for a new deployment.",
      "type": "object",
      "required": [
        "name",
        "latest",
        "force"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "apps.openshift.io/v1"
          ]
        },
        "excludeTriggers": {
          "description": "ExcludeTriggers instructs the instantiator to avoid processing the specified triggers. This field overrides the triggers from latest and allows clients to control specific logic. This field is ignored if not specified.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "force": {
          "description": "Force will try to force a new deployment to run. If the deployment config is paused, then setting this to true will return an Invalid error.",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "DeploymentRequest"
          ]
        },
        "latest": {
          "description": "Latest will update the deployment config with the latest state from all triggers.",
          "type": "boolean"
        },
        "name": {
          "description": "Name of the deployment config for requesting a new deployment.",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "DeploymentRequest",
          "version": "v1"
        },
        {
          "group": "apps.openshift.io",
          "kind": "DeploymentRequest",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.apps.v1.DeploymentStrategy": {
      "description": "DeploymentStrategy describes how to perform a deployment.",
      "type": "object",
      "properties": {
        "activeDeadlineSeconds": {
          "description": "ActiveDeadlineSeconds is the duration in seconds that the deployer pods for this deployment config may be active on a node before the system actively tries to terminate them.",
          "type": "integer",
          "format": "int64"
        },
        "annotations": {
          "description": "Annotations is a set of key, value pairs added to custom deployer and lifecycle pre/post hook pods.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "customParams": {
          "description": "CustomParams are the input to the Custom deployment strategy, and may also be specified for the Recreate and Rolling strategies to customize the execution process that runs the deployment.",
          "$ref": "#/definitions/com.github.openshift.api.apps.v1.CustomDeploymentStrategyParams"
        },
        "labels": {
          "description": "Labels is a set of key, value pairs added to custom deployer and lifecycle pre/post hook pods.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "recreateParams": {
          "description": "RecreateParams are the input to the Recreate deployment strategy.",
          "$ref": "#/definitions/com.github.openshift.api.apps.v1.RecreateDeploymentStrategyParams"
        },
        "resources": {
          "description": "Resources contains resource requirements to execute the deployment and any hooks.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
        },
        "rollingParams": {
          "description": "RollingParams are the input to the Rolling deployment strategy.",
          "$ref": "#/definitions/com.github.openshift.api.apps.v1.RollingDeploymentStrategyParams"
        },
        "type": {
          "description": "Type is the name of a deployment strategy.",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.apps.v1.DeploymentTriggerImageChangeParams": {
      "description": "DeploymentTriggerImageChangeParams represents the parameters to the ImageChange trigger.",
      "type": "object",
      "required": [
        "from"
      ],
      "properties": {
        "automatic": {
          "description": "Automatic means that the detection of a new tag value should result in an image update inside the pod template.",
          "type": "boolean"
        },
        "containerNames": {
          "description": "ContainerNames is used to restrict tag updates to the specified set of container names in a pod. If multiple triggers point to the same containers, the resulting behavior is undefined. Future API versions will make this a validation error. If ContainerNames does not point to a valid container, the trigger will be ignored. Future API versions will make this a validation error.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "from": {
          "description": "From is a reference to an image stream tag to watch for changes. From.Name is the only required subfield - if From.Namespace is blank, the namespace of the current deployment trigger will be used.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "lastTriggeredImage": {
          "description": "LastTriggeredImage is the last image to be triggered.",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.apps.v1.DeploymentTriggerPolicy": {
      "description": "DeploymentTriggerPolicy describes a policy for a single trigger that results in a new deployment.",
      "type": "object",
      "properties": {
        "imageChangeParams": {
          "description": "ImageChangeParams represents the parameters for the ImageChange trigger.",
          "$ref": "#/definitions/com.github.openshift.api.apps.v1.DeploymentTriggerImageChangeParams"
        },
        "type": {
          "description": "Type of the trigger",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.apps.v1.ExecNewPodHook": {
      "description": "ExecNewPodHook is a hook implementation which runs a command in a new pod based on the specified container which is assumed to be part of the deployment template.",
      "type": "object",
      "required": [
        "command",
        "containerName"
      ],
      "properties": {
        "command": {
          "description": "Command is the action command and its arguments.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "containerName": {
          "description": "ContainerName is the name of a container in the deployment pod template whose container image will be used for the hook pod's container.",
          "type": "string"
        },
        "env": {
          "description": "Env is a set of environment variables to supply to the hook pod's container.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          }
        },
        "volumes": {
          "description": "Volumes is a list of named volumes from the pod template which should be copied to the hook pod. Volumes names not found in pod spec are ignored. An empty list means no volumes will be copied.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "com.github.openshift.api.apps.v1.LifecycleHook": {
      "description": "LifecycleHook defines a specific deployment lifecycle action. Only one type of action may be specified at any time.",
      "type": "object",
      "required": [
        "failurePolicy"
      ],
      "properties": {
        "execNewPod": {
          "description": "ExecNewPod specifies the options for a lifecycle hook backed by a pod.",
          "$ref": "#/definitions/com.github.openshift.api.apps.v1.ExecNewPodHook"
        },
        "failurePolicy": {
          "description": "FailurePolicy specifies what action to take if the hook fails.",
          "type": "string"
        },
        "tagImages": {
          "description": "TagImages instructs the deployer to tag the current image referenced under a container onto an image stream tag.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.apps.v1.TagImageHook"
          }
        }
      }
    },
    "com.github.openshift.api.apps.v1.RecreateDeploymentStrategyParams": {
      "description": "RecreateDeploymentStrategyParams are the input to the Recreate deployment strategy.",
      "type": "object",
      "properties": {
        "mid": {
          "description": "Mid is a lifecycle hook which is executed while the deployment is scaled down to zero before the first new pod is created. All LifecycleHookFailurePolicy values are supported.",
          "$ref": "#/definitions/com.github.openshift.api.apps.v1.LifecycleHook"
        },
        "post": {
          "description": "Post is a lifecycle hook which is executed after the strategy has finished all deployment logic. All LifecycleHookFailurePolicy values are supported.",
          "$ref": "#/definitions/com.github.openshift.api.apps.v1.LifecycleHook"
        },
        "pre": {
          "description": "Pre is a lifecycle hook which is executed before the strategy manipulates the deployment. All LifecycleHookFailurePolicy values are supported.",
          "$ref": "#/definitions/com.github.openshift.api.apps.v1.LifecycleHook"
        },
        "timeoutSeconds": {
          "description": "TimeoutSeconds is the time to wait for updates before giving up. If the value is nil, a default will be used.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "com.github.openshift.api.apps.v1.RollingDeploymentStrategyParams": {
      "description": "RollingDeploymentStrategyParams are the input to the Rolling deployment strategy.",
      "type": "object",
      "properties": {
        "intervalSeconds": {
          "description": "IntervalSeconds is the time to wait between polling deployment status after update. If the value is nil, a default will be used.",
          "type": "integer",
          "format": "int64"
        },
        "maxSurge": {
          "description": "MaxSurge is the maximum number of pods that can be scheduled above the original number of pods. Value can be an absolute number (ex: 5) or a percentage of total pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up.\n\nThis cannot be 0 if MaxUnavailable is 0. By default, 25% is used.\n\nExample: when this is set to 30%, the new RC can be scaled up by 30% immediately when the rolling update starts. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of original pods.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        },
        "maxUnavailable": {
          "description": "MaxUnavailable is the maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total pods at the start of update (ex: 10%). Absolute number is calculated from percentage by rounding down.\n\nThis cannot be 0 if MaxSurge is 0. By default, 25% is used.\n\nExample: when this is set to 30%, the old RC can be scaled down by 30% immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that at least 70% of original number of pods are available at all times during the update.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        },
        "post": {
          "description": "Post is a lifecycle hook which is executed after the strategy has finished all deployment logic. All LifecycleHookFailurePolicy values are supported.",
          "$ref": "#/definitions/com.github.openshift.api.apps.v1.LifecycleHook"
        },
        "pre": {
          "description": "Pre is a lifecycle hook which is executed before the deployment process begins. All LifecycleHookFailurePolicy values are supported.",
          "$ref": "#/definitions/com.github.openshift.api.apps.v1.LifecycleHook"
        },
        "timeoutSeconds": {
          "description": "TimeoutSeconds is the time to wait for updates before giving up. If the value is nil, a default will be used.",
          "type": "integer",
          "format": "int64"
        },
        "updatePeriodSeconds": {
          "description": "UpdatePeriodSeconds is the time to wait between individual pod updates. If the value is nil, a default will be used.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "com.github.openshift.api.apps.v1.TagImageHook": {
      "description": "TagImageHook is a request to tag the image in a particular container onto an ImageStreamTag.",
      "type": "object",
      "required": [
        "containerName",
        "to"
      ],
      "properties": {
        "containerName": {
          "description": "ContainerName is the name of a container in the deployment config whose image value will be used as the source of the tag. If there is only a single container this value will be defaulted to the name of that container.",
          "type": "string"
        },
        "to": {
          "description": "To is the target ImageStreamTag to set the container's image onto.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        }
      }
    },
    "com.github.openshift.api.authorization.v1.ClusterRole": {
      "description": "ClusterRole is a logical grouping of PolicyRules that can be referenced as a unit by ClusterRoleBindings.",
      "type": "object",
      "required": [
        "rules"
      ],
      "properties": {
        "aggregationRule": {
          "description": "AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller.",
          "$ref": "#/definitions/io.k8s.api.rbac.v1.AggregationRule"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "authorization.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterRole"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "rules": {
          "description": "Rules holds all the PolicyRules for this ClusterRole",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.authorization.v1.PolicyRule"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ClusterRole",
          "version": "v1"
        },
        {
          "group": "authorization.openshift.io",
          "kind": "ClusterRole",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.authorization.v1.ClusterRoleBinding": {
      "description": "ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference any ClusterRole in the same namespace or in the global namespace. It adds who information via (Users and Groups) OR Subjects and namespace information by which namespace it exists in. ClusterRoleBindings in a given namespace only have effect in that namespace (excepting the master namespace which has power in all namespaces).",
      "type": "object",
      "required": [
        "subjects",
        "roleRef"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "authorization.openshift.io/v1"
          ]
        },
        "groupNames": {
          "description": "GroupNames holds all the groups directly bound to the role. This field should only be specified when supporting legacy clients and servers. See Subjects for further details.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterRoleBinding"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "roleRef": {
          "description": "RoleRef can only reference the current namespace and the global namespace. If the ClusterRoleRef cannot be resolved, the Authorizer must return an error. Since Policy is a singleton, this is sufficient knowledge to locate a role.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "subjects": {
          "description": "Subjects hold object references to authorize with this rule. This field is ignored if UserNames or GroupNames are specified to support legacy clients and servers. Thus newer clients that do not need to support backwards compatibility should send only fully qualified Subjects and should omit the UserNames and GroupNames fields. Clients that need to support backwards compatibility can use this field to build the UserNames and GroupNames.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
          }
        },
        "userNames": {
          "description": "UserNames holds all the usernames directly bound to the role. This field should only be specified when supporting legacy clients and servers. See Subjects for further details.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ClusterRoleBinding",
          "version": "v1"
        },
        {
          "group": "authorization.openshift.io",
          "kind": "ClusterRoleBinding",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.authorization.v1.ClusterRoleBindingList": {
      "description": "ClusterRoleBindingList is a collection of ClusterRoleBindings",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "authorization.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is a list of ClusterRoleBindings",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.authorization.v1.ClusterRoleBinding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterRoleBindingList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ClusterRoleBindingList",
          "version": "v1"
        },
        {
          "group": "authorization.openshift.io",
          "kind": "ClusterRoleBindingList",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.authorization.v1.ClusterRoleList": {
      "description": "ClusterRoleList is a collection of ClusterRoles",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "authorization.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is a list of ClusterRoles",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.authorization.v1.ClusterRole"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterRoleList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ClusterRoleList",
          "version": "v1"
        },
        {
          "group": "authorization.openshift.io",
          "kind": "ClusterRoleList",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.authorization.v1.LocalResourceAccessReview": {
      "description": "LocalResourceAccessReview is a means to request a list of which users and groups are authorized to perform the action specified by spec in a particular namespace",
      "type": "object",
      "required": [
        "namespace",
        "verb",
        "resourceAPIGroup",
        "resourceAPIVersion",
        "resource",
        "resourceName",
        "path",
        "isNonResourceURL"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "authorization.openshift.io/v1"
          ]
        },
        "content": {
          "description": "Content is the actual content of the request for create and update",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        },
        "isNonResourceURL": {
          "description": "IsNonResourceURL is true if this is a request for a non-resource URL (outside of the resource hierarchy)",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "LocalResourceAccessReview"
          ]
        },
        "namespace": {
          "description": "Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces",
          "type": "string"
        },
        "path": {
          "description": "Path is the path of a non resource URL",
          "type": "string"
        },
        "resource": {
          "description": "Resource is one of the existing resource types",
          "type": "string"
        },
        "resourceAPIGroup": {
          "description": "Group is the API group of the resource Serialized as resourceAPIGroup to avoid confusion with the 'groups' field when inlined",
          "type": "string"
        },
        "resourceAPIVersion": {
          "description": "Version is the API version of the resource Serialized as resourceAPIVersion to avoid confusion with TypeMeta.apiVersion and ObjectMeta.resourceVersion when inlined",
          "type": "string"
        },
        "resourceName": {
          "description": "ResourceName is the name of the resource being requested for a \"get\" or deleted for a \"delete\"",
          "type": "string"
        },
        "verb": {
          "description": "Verb is one of: get, list, watch, create, update, delete",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "LocalResourceAccessReview",
          "version": "v1"
        },
        {
          "group": "authorization.openshift.io",
          "kind": "LocalResourceAccessReview",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.authorization.v1.LocalSubjectAccessReview": {
      "description": "LocalSubjectAccessReview is an object for requesting information about whether a user or group can perform an action in a particular namespace",
      "type": "object",
      "required": [
        "namespace",
        "verb",
        "resourceAPIGroup",
        "resourceAPIVersion",
        "resource",
        "resourceName",
        "path",
        "isNonResourceURL",
        "user",
        "groups",
        "scopes"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "authorization.openshift.io/v1"
          ]
        },
        "content": {
          "description": "Content is the actual content of the request for create and update",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        },
        "groups": {
          "description": "Groups is optional.  Groups is the list of groups to which the User belongs.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isNonResourceURL": {
          "description": "IsNonResourceURL is true if this is a request for a non-resource URL (outside of the resource hierarchy)",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "LocalSubjectAccessReview"
          ]
        },
        "namespace": {
          "description": "Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces",
          "type": "string"
        },
        "path": {
          "description": "Path is the path of a non resource URL",
          "type": "string"
        },
        "resource": {
          "description": "Resource is one of the existing resource types",
          "type": "string"
        },
        "resourceAPIGroup": {
          "description": "Group is the API group of the resource Serialized as resourceAPIGroup to avoid confusion with the 'groups' field when inlined",
          "type": "string"
        },
        "resourceAPIVersion": {
          "description": "Version is the API version of the resource Serialized as resourceAPIVersion to avoid confusion with TypeMeta.apiVersion and ObjectMeta.resourceVersion when inlined",
          "type": "string"
        },
        "resourceName": {
          "description": "ResourceName is the name of the resource being requested for a \"get\" or deleted for a \"delete\"",
          "type": "string"
        },
        "scopes": {
          "description": "Scopes to use for the evaluation.  Empty means \"use the unscoped (full) permissions of the user/groups\". Nil for a self-SAR, means \"use the scopes on this request\". Nil for a regular SAR, means the same as empty.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "user": {
          "description": "User is optional.  If both User and Groups are empty, the current authenticated user is used.",
          "type": "string"
        },
        "verb": {
          "description": "Verb is one of: get, list, watch, create, update, delete",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "LocalSubjectAccessReview",
          "version": "v1"
        },
        {
          "group": "authorization.openshift.io",
          "kind": "LocalSubjectAccessReview",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.authorization.v1.PolicyRule": {
      "description": "PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.",
      "type": "object",
      "required": [
        "verbs",
        "resources"
      ],
      "properties": {
        "apiGroups": {
          "description": "APIGroups is the name of the APIGroup that contains the resources.  If this field is empty, then both kubernetes and origin API groups are assumed. That means that if an action is requested against one of the enumerated resources in either the kubernetes or the origin API group, the request will be allowed",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "attributeRestrictions": {
          "description": "AttributeRestrictions will vary depending on what the Authorizer/AuthorizationAttributeBuilder pair supports. If the Authorizer does not recognize how to handle the AttributeRestrictions, the Authorizer should report an error.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        },
        "nonResourceURLs": {
          "description": "NonResourceURLsSlice is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path This name is intentionally different than the internal type so that the DefaultConvert works nicely and because the ordering may be different.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resourceNames": {
          "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resources": {
          "description": "Resources is a list of resources this rule applies to.  ResourceAll represents all resources.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "verbs": {
          "description": "Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "com.github.openshift.api.authorization.v1.ResourceAccessReview": {
      "description": "ResourceAccessReview is a means to request a list of which users and groups are authorized to perform the action specified by spec",
      "type": "object",
      "required": [
        "namespace",
        "verb",
        "resourceAPIGroup",
        "resourceAPIVersion",
        "resource",
        "resourceName",
        "path",
        "isNonResourceURL"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "authorization.openshift.io/v1"
          ]
        },
        "content": {
          "description": "Content is the actual content of the request for create and update",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        },
        "isNonResourceURL": {
          "description": "IsNonResourceURL is true if this is a request for a non-resource URL (outside of the resource hierarchy)",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ResourceAccessReview"
          ]
        },
        "namespace": {
          "description": "Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces",
          "type": "string"
        },
        "path": {
          "description": "Path is the path of a non resource URL",
          "type": "string"
        },
        "resource": {
          "description": "Resource is one of the existing resource types",
          "type": "string"
        },
        "resourceAPIGroup": {
          "description": "Group is the API group of the resource Serialized as resourceAPIGroup to avoid confusion with the 'groups' field when inlined",
          "type": "string"
        },
        "resourceAPIVersion": {
          "description": "Version is the API version of the resource Serialized as resourceAPIVersion to avoid confusion with TypeMeta.apiVersion and ObjectMeta.resourceVersion when inlined",
          "type": "string"
        },
        "resourceName": {
          "description": "ResourceName is the name of the resource being requested for a \"get\" or deleted for a \"delete\"",
          "type": "string"
        },
        "verb": {
          "description": "Verb is one of: get, list, watch, create, update, delete",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ResourceAccessReview",
          "version": "v1"
        },
        {
          "group": "authorization.openshift.io",
          "kind": "ResourceAccessReview",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.authorization.v1.Role": {
      "description": "Role is a logical grouping of PolicyRules that can be referenced as a unit by RoleBindings.",
      "type": "object",
      "required": [
        "rules"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "authorization.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Role"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "rules": {
          "description": "Rules holds all the PolicyRules for this Role",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.authorization.v1.PolicyRule"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Role",
          "version": "v1"
        },
        {
          "group": "authorization.openshift.io",
          "kind": "Role",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.authorization.v1.RoleBinding": {
      "description": "RoleBinding references a Role, but not contain it.  It can reference any Role in the same namespace or in the global namespace. It adds who information via (Users and Groups) OR Subjects and namespace information by which namespace it exists in. RoleBindings in a given namespace only have effect in that namespace (excepting the master namespace which has power in all namespaces).",
      "type": "object",
      "required": [
        "subjects",
        "roleRef"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "authorization.openshift.io/v1"
          ]
        },
        "groupNames": {
          "description": "GroupNames holds all the groups directly bound to the role. This field should only be specified when supporting legacy clients and servers. See Subjects for further details.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "RoleBinding"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "roleRef": {
          "description": "RoleRef can only reference the current namespace and the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error. Since Policy is a singleton, this is sufficient knowledge to locate a role.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "subjects": {
          "description": "Subjects hold object references to authorize with this rule. This field is ignored if UserNames or GroupNames are specified to support legacy clients and servers. Thus newer clients that do not need to support backwards compatibility should send only fully qualified Subjects and should omit the UserNames and GroupNames fields. Clients that need to support backwards compatibility can use this field to build the UserNames and GroupNames.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
          }
        },
        "userNames": {
          "description": "UserNames holds all the usernames directly bound to the role. This field should only be specified when supporting legacy clients and servers. See Subjects for further details.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "RoleBinding",
          "version": "v1"
        },
        {
          "group": "authorization.openshift.io",
          "kind": "RoleBinding",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.authorization.v1.RoleBindingList": {
      "description": "RoleBindingList is a collection of RoleBindings",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "authorization.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is a list of RoleBindings",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.authorization.v1.RoleBinding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "RoleBindingList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "RoleBindingList",
          "version": "v1"
        },
        {
          "group": "authorization.openshift.io",
          "kind": "RoleBindingList",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.authorization.v1.RoleList": {
      "description": "RoleList is a collection of Roles",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "authorization.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is a list of Roles",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.authorization.v1.Role"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "RoleList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "RoleList",
          "version": "v1"
        },
        {
          "group": "authorization.openshift.io",
          "kind": "RoleList",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.authorization.v1.SelfSubjectRulesReview": {
      "description": "SelfSubjectRulesReview is a resource you can create to determine which actions you can perform in a namespace",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "authorization.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "SelfSubjectRulesReview"
          ]
        },
        "spec": {
          "description": "Spec adds information about how to conduct the check",
          "$ref": "#/definitions/com.github.openshift.api.authorization.v1.SelfSubjectRulesReviewSpec"
        },
        "status": {
          "description": "Status is completed by the server to tell which permissions you have",
          "$ref": "#/definitions/com.github.openshift.api.authorization.v1.SubjectRulesReviewStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "SelfSubjectRulesReview",
          "version": "v1"
        },
        {
          "group": "authorization.openshift.io",
          "kind": "SelfSubjectRulesReview",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.authorization.v1.SelfSubjectRulesReviewSpec": {
      "description": "SelfSubjectRulesReviewSpec adds information about how to conduct the check",
      "type": "object",
      "required": [
        "scopes"
      ],
      "properties": {
        "scopes": {
          "description": "Scopes to use for the evaluation.  Empty means \"use the unscoped (full) permissions of the user/groups\". Nil means \"use the scopes on this request\".",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "com.github.openshift.api.authorization.v1.SubjectAccessReview": {
      "description": "SubjectAccessReview is an object for requesting information about whether a user or group can perform an action",
      "type": "object",
      "required": [
        "namespace",
        "verb",
        "resourceAPIGroup",
        "resourceAPIVersion",
        "resource",
        "resourceName",
        "path",
        "isNonResourceURL",
        "user",
        "groups",
        "scopes"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "authorization.openshift.io/v1"
          ]
        },
        "content": {
          "description": "Content is the actual content of the request for create and update",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        },
        "groups": {
          "description": "GroupsSlice is optional. Groups is the list of groups to which the User belongs.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isNonResourceURL": {
          "description": "IsNonResourceURL is true if this is a request for a non-resource URL (outside of the resource hierarchy)",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "SubjectAccessReview"
          ]
        },
        "namespace": {
          "description": "Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces",
          "type": "string"
        },
        "path": {
          "description": "Path is the path of a non resource URL",
          "type": "string"
        },
        "resource": {
          "description": "Resource is one of the existing resource types",
          "type": "string"
        },
        "resourceAPIGroup": {
          "description": "Group is the API group of the resource Serialized as resourceAPIGroup to avoid confusion with the 'groups' field when inlined",
          "type": "string"
        },
        "resourceAPIVersion": {
          "description": "Version is the API version of the resource Serialized as resourceAPIVersion to avoid confusion with TypeMeta.apiVersion and ObjectMeta.resourceVersion when inlined",
          "type": "string"
        },
        "resourceName": {
          "description": "ResourceName is the name of the resource being requested for a \"get\" or deleted for a \"delete\"",
          "type": "string"
        },
        "scopes": {
          "description": "Scopes to use for the evaluation.  Empty means \"use the unscoped (full) permissions of the user/groups\". Nil for a self-SAR, means \"use the scopes on this request\". Nil for a regular SAR, means the same as empty.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "user": {
          "description": "User is optional. If both User and Groups are empty, the current authenticated user is used.",
          "type": "string"
        },
        "verb": {
          "description": "Verb is one of: get, list, watch, create, update, delete",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "SubjectAccessReview",
          "version": "v1"
        },
        {
          "group": "authorization.openshift.io",
          "kind": "SubjectAccessReview",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.authorization.v1.SubjectRulesReview": {
      "description": "SubjectRulesReview is a resource you can create to determine which actions another user can perform in a namespace",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "authorization.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "SubjectRulesReview"
          ]
        },
        "spec": {
          "description": "Spec adds information about how to conduct the check",
          "$ref": "#/definitions/com.github.openshift.api.authorization.v1.SubjectRulesReviewSpec"
        },
        "status": {
          "description": "Status is completed by the server to tell which permissions you have",
          "$ref": "#/definitions/com.github.openshift.api.authorization.v1.SubjectRulesReviewStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "SubjectRulesReview",
          "version": "v1"
        },
        {
          "group": "authorization.openshift.io",
          "kind": "SubjectRulesReview",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.authorization.v1.SubjectRulesReviewSpec": {
      "description": "SubjectRulesReviewSpec adds information about how to conduct the check",
      "type": "object",
      "required": [
        "user",
        "groups",
        "scopes"
      ],
      "properties": {
        "groups": {
          "description": "Groups is optional.  Groups is the list of groups to which the User belongs.  At least one of User and Groups must be specified.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "scopes": {
          "description": "Scopes to use for the evaluation.  Empty means \"use the unscoped (full) permissions of the user/groups\".",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "user": {
          "description": "User is optional.  At least one of User and Groups must be specified.",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.authorization.v1.SubjectRulesReviewStatus": {
      "description": "SubjectRulesReviewStatus is contains the result of a rules check",
      "type": "object",
      "required": [
        "rules"
      ],
      "properties": {
        "evaluationError": {
          "description": "EvaluationError can appear in combination with Rules.  It means some error happened during evaluation that may have prevented additional rules from being populated.",
          "type": "string"
        },
        "rules": {
          "description": "Rules is the list of rules (no particular sort) that are allowed for the subject",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.authorization.v1.PolicyRule"
          }
        }
      }
    },
    "com.github.openshift.api.build.v1.BinaryBuildSource": {
      "description": "BinaryBuildSource describes a binary file to be used for the Docker and Source build strategies, where the file will be extracted and used as the build source.",
      "type": "object",
      "properties": {
        "asFile": {
          "description": "asFile indicates that the provided binary input should be considered a single file within the build input. For example, specifying \"webapp.war\" would place the provided binary as `/webapp.war` for the builder. If left empty, the Docker and Source build strategies assume this file is a zip, tar, or tar.gz file and extract it as the source. The custom strategy receives this binary as standard input. This filename may not contain slashes or be '..' or '.'.",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.build.v1.BitbucketWebHookCause": {
      "description": "BitbucketWebHookCause has information about a Bitbucket webhook that triggered a build.",
      "type": "object",
      "properties": {
        "revision": {
          "description": "Revision is the git source revision information of the trigger.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.SourceRevision"
        },
        "secret": {
          "description": "Secret is the obfuscated webhook secret that triggered a build.",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.build.v1.Build": {
      "description": "Build encapsulates the inputs needed to produce a new deployable image, as well as the status of the execution and a reference to the Pod which executed the build.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "build.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Build"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is all the inputs used to execute the build.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildSpec"
        },
        "status": {
          "description": "status is the current status of the build.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Build",
          "version": "v1"
        },
        {
          "group": "build.openshift.io",
          "kind": "Build",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.build.v1.BuildCondition": {
      "description": "BuildCondition describes the state of a build at a certain point.",
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "The last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "lastUpdateTime": {
          "description": "The last time this condition was updated.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of build condition.",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.build.v1.BuildConfig": {
      "description": "Build configurations define a build process for new container images. There are three types of builds possible - a container image build using a Dockerfile, a Source-to-Image build that uses a specially prepared base image that accepts source code that it can make runnable, and a custom build that can run // arbitrary container images as a base and accept the build parameters. Builds run on the cluster and on completion are pushed to the container image registry specified in the \"output\" section. A build can be triggered via a webhook, when the base image changes, or when a user manually requests a new build be // created.\n\nEach build created by a build configuration is numbered and refers back to its parent configuration. Multiple builds can be triggered at once. Builds that do not have \"output\" set can be used to test code or run a verification build.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "build.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "BuildConfig"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec holds all the input necessary to produce a new build, and the conditions when to trigger them.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildConfigSpec"
        },
        "status": {
          "description": "status holds any relevant information about a build config",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildConfigStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "BuildConfig",
          "version": "v1"
        },
        {
          "group": "build.openshift.io",
          "kind": "BuildConfig",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.build.v1.BuildConfigList": {
      "description": "BuildConfigList is a collection of BuildConfigs.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "build.openshift.io/v1"
          ]
        },
        "items": {
          "description": "items is a list of build configs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildConfig"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "BuildConfigList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "BuildConfigList",
          "version": "v1"
        },
        {
          "group": "build.openshift.io",
          "kind": "BuildConfigList",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.build.v1.BuildConfigSpec": {
      "description": "BuildConfigSpec describes when and how builds are created",
      "type": "object",
      "required": [
        "strategy"
      ],
      "properties": {
        "completionDeadlineSeconds": {
          "description": "completionDeadlineSeconds is an optional duration in seconds, counted from the time when a build pod gets scheduled in the system, that the build may be active on a node before the system actively tries to terminate the build; value must be positive integer",
          "type": "integer",
          "format": "int64"
        },
        "failedBuildsHistoryLimit": {
          "description": "failedBuildsHistoryLimit is the number of old failed builds to retain. When a BuildConfig is created, the 5 most recent failed builds are retained unless this value is set. If removed after the BuildConfig has been created, all failed builds are retained.",
          "type": "integer",
          "format": "int32"
        },
        "nodeSelector": {
          "description": "nodeSelector is a selector which must be true for the build pod to fit on a node If nil, it can be overridden by default build nodeselector values for the cluster. If set to an empty map or a map with any values, default build nodeselector values are ignored.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "output": {
          "description": "output describes the container image the Strategy should produce.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildOutput"
        },
        "postCommit": {
          "description": "postCommit is a build hook executed after the build output image is committed, before it is pushed to a registry.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildPostCommitSpec"
        },
        "resources": {
          "description": "resources computes resource requirements to execute the build.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
        },
        "revision": {
          "description": "revision is the information from the source for a specific repo snapshot. This is optional.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.SourceRevision"
        },
        "runPolicy": {
          "description": "RunPolicy describes how the new build created from this build configuration will be scheduled for execution. This is optional, if not specified we default to \"Serial\".",
          "type": "string"
        },
        "serviceAccount": {
          "description": "serviceAccount is the name of the ServiceAccount to use to run the pod created by this build. The pod will be allowed to use secrets referenced by the ServiceAccount",
          "type": "string"
        },
        "source": {
          "description": "source describes the SCM in use.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildSource"
        },
        "strategy": {
          "description": "strategy defines how to perform a build.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildStrategy"
        },
        "successfulBuildsHistoryLimit": {
          "description": "successfulBuildsHistoryLimit is the number of old successful builds to retain. When a BuildConfig is created, the 5 most recent successful builds are retained unless this value is set. If removed after the BuildConfig has been created, all successful builds are retained.",
          "type": "integer",
          "format": "int32"
        },
        "triggers": {
          "description": "triggers determine how new Builds can be launched from a BuildConfig. If no triggers are defined, a new build can only occur as a result of an explicit client build creation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildTriggerPolicy"
          }
        }
      }
    },
    "com.github.openshift.api.build.v1.BuildConfigStatus": {
      "description": "BuildConfigStatus contains current state of the build config object.",
      "type": "object",
      "required": [
        "lastVersion"
      ],
      "properties": {
        "lastVersion": {
          "description": "lastVersion is used to inform about number of last triggered build.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "com.github.openshift.api.build.v1.BuildList": {
      "description": "BuildList is a collection of Builds.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "build.openshift.io/v1"
          ]
        },
        "items": {
          "description": "items is a list of builds",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.build.v1.Build"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "BuildList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "BuildList",
          "version": "v1"
        },
        {
          "group": "build.openshift.io",
          "kind": "BuildList",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.build.v1.BuildLog": {
      "description": "BuildLog is the (unused) resource associated with the build log redirector",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "build.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "BuildLog"
          ]
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "BuildLog",
          "version": "v1"
        },
        {
          "group": "build.openshift.io",
          "kind": "BuildLog",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.build.v1.BuildOutput": {
      "description": "BuildOutput is input to a build strategy and describes the container image that the strategy should produce.",
      "type": "object",
      "properties": {
        "imageLabels": {
          "description": "imageLabels define a list of labels that are applied to the resulting image. If there are multiple labels with the same name then the last one in the list is used.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.build.v1.ImageLabel"
          }
        },
        "pushSecret": {
          "description": "PushSecret is the name of a Secret that would be used for setting up the authentication for executing the Docker push to authentication enabled Docker Registry (or Docker Hub).",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        },
        "to": {
          "description": "to defines an optional location to push the output of this build to. Kind must be one of 'ImageStreamTag' or 'DockerImage'. This value will be used to look up a container image repository to push to. In the case of an ImageStreamTag, the ImageStreamTag will be looked for in the namespace of the build unless Namespace is specified.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        }
      }
    },
    "com.github.openshift.api.build.v1.BuildPostCommitSpec": {
      "description": "A BuildPostCommitSpec holds a build post commit hook specification. The hook executes a command in a temporary container running the build output image, immediately after the last layer of the image is committed and before the image is pushed to a registry. The command is executed with the current working directory ($PWD) set to the image's WORKDIR.\n\nThe build will be marked as failed if the hook execution fails. It will fail if the script or command return a non-zero exit code, or if there is any other error related to starting the temporary container.\n\nThere are five different ways to configure the hook. As an example, all forms below are equivalent and will execute `rake test --verbose`.\n\n1. Shell script:\n\n       \"postCommit\": {\n         \"script\": \"rake test --verbose\",\n       }\n\n    The above is a convenient form which is equivalent to:\n\n       \"postCommit\": {\n         \"command\": [\"/bin/sh\", \"-ic\"],\n         \"args\":    [\"rake test --verbose\"]\n       }\n\n2. A command as the image entrypoint:\n\n       \"postCommit\": {\n         \"commit\": [\"rake\", \"test\", \"--verbose\"]\n       }\n\n    Command overrides the image entrypoint in the exec form, as documented in\n    Docker: https://docs.docker.com/engine/reference/builder/#entrypoint.\n\n3. Pass arguments to the default entrypoint:\n\n       \"postCommit\": {\n\t\t      \"args\": [\"rake\", \"test\", \"--verbose\"]\n\t      }\n\n    This form is only useful if the image entrypoint can handle arguments.\n\n4. Shell script with arguments:\n\n       \"postCommit\": {\n         \"script\": \"rake test $1\",\n         \"args\":   [\"--verbose\"]\n       }\n\n    This form is useful if you need to pass arguments that would otherwise be\n    hard to quote properly in the shell script. In the script, $0 will be\n    \"/bin/sh\" and $1, $2, etc, are the positional arguments from Args.\n\n5. Command with arguments:\n\n       \"postCommit\": {\n         \"command\": [\"rake\", \"test\"],\n         \"args\":    [\"--verbose\"]\n       }\n\n    This form is equivalent to appending the arguments to the Command slice.\n\nIt is invalid to provide both Script and Command simultaneously. If none of the fields are specified, the hook is not executed.",
      "type": "object",
      "properties": {
        "args": {
          "description": "args is a list of arguments that are provided to either Command, Script or the container image's default entrypoint. The arguments are placed immediately after the command to be run.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "command": {
          "description": "command is the command to run. It may not be specified with Script. This might be needed if the image doesn't have `/bin/sh`, or if you do not want to use a shell. In all other cases, using Script might be more convenient.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "script": {
          "description": "script is a shell script to be run with `/bin/sh -ic`. It may not be specified with Command. Use Script when a shell script is appropriate to execute the post build hook, for example for running unit tests with `rake test`. If you need control over the image entrypoint, or if the image does not have `/bin/sh`, use Command and/or Args. The `-i` flag is needed to support CentOS and RHEL images that use Software Collections (SCL), in order to have the appropriate collections enabled in the shell. E.g., in the Ruby image, this is necessary to make `ruby`, `bundle` and other binaries available in the PATH.",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.build.v1.BuildRequest": {
      "description": "BuildRequest is the resource used to pass parameters to build generator",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "build.openshift.io/v1"
          ]
        },
        "binary": {
          "description": "binary indicates a request to build from a binary provided to the builder",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.BinaryBuildSource"
        },
        "dockerStrategyOptions": {
          "description": "DockerStrategyOptions contains additional docker-strategy specific options for the build",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.DockerStrategyOptions"
        },
        "env": {
          "description": "env contains additional environment variables you want to pass into a builder container.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          }
        },
        "from": {
          "description": "from is the reference to the ImageStreamTag that triggered the build.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "BuildRequest"
          ]
        },
        "lastVersion": {
          "description": "lastVersion (optional) is the LastVersion of the BuildConfig that was used to generate the build. If the BuildConfig in the generator doesn't match, a build will not be generated.",
          "type": "integer",
          "format": "int64"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "revision": {
          "description": "revision is the information from the source for a specific repo snapshot.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.SourceRevision"
        },
        "sourceStrategyOptions": {
          "description": "SourceStrategyOptions contains additional source-strategy specific options for the build",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.SourceStrategyOptions"
        },
        "triggeredBy": {
          "description": "triggeredBy describes which triggers started the most recent update to the build configuration and contains information about those triggers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildTriggerCause"
          }
        },
        "triggeredByImage": {
          "description": "triggeredByImage is the Image that triggered this build.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "BuildRequest",
          "version": "v1"
        },
        {
          "group": "build.openshift.io",
          "kind": "BuildRequest",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.build.v1.BuildSource": {
      "description": "BuildSource is the SCM used for the build.",
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "binary": {
          "description": "binary builds accept a binary as their input. The binary is generally assumed to be a tar, gzipped tar, or zip file depending on the strategy. For container image builds, this is the build context and an optional Dockerfile may be specified to override any Dockerfile in the build context. For Source builds, this is assumed to be an archive as described above. For Source and container image builds, if binary.asFile is set the build will receive a directory with a single file. contextDir may be used when an archive is provided. Custom builds will receive this binary as input on STDIN.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.BinaryBuildSource"
        },
        "configMaps": {
          "description": "configMaps represents a list of configMaps and their destinations that will be used for the build.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.build.v1.ConfigMapBuildSource"
          }
        },
        "contextDir": {
          "description": "contextDir specifies the sub-directory where the source code for the application exists. This allows to have buildable sources in directory other than root of repository.",
          "type": "string"
        },
        "dockerfile": {
          "description": "dockerfile is the raw contents of a Dockerfile which should be built. When this option is specified, the FROM may be modified based on your strategy base image and additional ENV stanzas from your strategy environment will be added after the FROM, but before the rest of your Dockerfile stanzas. The Dockerfile source type may be used with other options like git - in those cases the Git repo will have any innate Dockerfile replaced in the context dir.",
          "type": "string"
        },
        "git": {
          "description": "git contains optional information about git build source",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.GitBuildSource"
        },
        "images": {
          "description": "images describes a set of images to be used to provide source for the build",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.build.v1.ImageSource"
          }
        },
        "secrets": {
          "description": "secrets represents a list of secrets and their destinations that will be used only for the build.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.build.v1.SecretBuildSource"
          }
        },
        "sourceSecret": {
          "description": "sourceSecret is the name of a Secret that would be used for setting up the authentication for cloning private repository. The secret contains valid credentials for remote repository, where the data's key represent the authentication method to be used and value is the base64 encoded credentials. Supported auth methods are: ssh-privatekey.",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        },
        "type": {
          "description": "type of build input to accept",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.build.v1.BuildSpec": {
      "description": "BuildSpec has the information to represent a build and also additional information about a build",
      "type": "object",
      "required": [
        "strategy"
      ],
      "properties": {
        "completionDeadlineSeconds": {
          "description": "completionDeadlineSeconds is an optional duration in seconds, counted from the time when a build pod gets scheduled in the system, that the build may be active on a node before the system actively tries to terminate the build; value must be positive integer",
          "type": "integer",
          "format": "int64"
        },
        "nodeSelector": {
          "description": "nodeSelector is a selector which must be true for the build pod to fit on a node If nil, it can be overridden by default build nodeselector values for the cluster. If set to an empty map or a map with any values, default build nodeselector values are ignored.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "output": {
          "description": "output describes the container image the Strategy should produce.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildOutput"
        },
        "postCommit": {
          "description": "postCommit is a build hook executed after the build output image is committed, before it is pushed to a registry.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildPostCommitSpec"
        },
        "resources": {
          "description": "resources computes resource requirements to execute the build.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
        },
        "revision": {
          "description": "revision is the information from the source for a specific repo snapshot. This is optional.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.SourceRevision"
        },
        "serviceAccount": {
          "description": "serviceAccount is the name of the ServiceAccount to use to run the pod created by this build. The pod will be allowed to use secrets referenced by the ServiceAccount",
          "type": "string"
        },
        "source": {
          "description": "source describes the SCM in use.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildSource"
        },
        "strategy": {
          "description": "strategy defines how to perform a build.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildStrategy"
        },
        "triggeredBy": {
          "description": "triggeredBy describes which triggers started the most recent update to the build configuration and contains information about those triggers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildTriggerCause"
          }
        }
      }
    },
    "com.github.openshift.api.build.v1.BuildStatus": {
      "description": "BuildStatus contains the status of a build",
      "type": "object",
      "required": [
        "phase"
      ],
      "properties": {
        "cancelled": {
          "description": "cancelled describes if a cancel event was triggered for the build.",
          "type": "boolean"
        },
        "completionTimestamp": {
          "description": "completionTimestamp is a timestamp representing the server time when this Build was finished, whether that build failed or succeeded.  It reflects the time at which the Pod running the Build terminated. It is represented in RFC3339 form and is in UTC.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "conditions": {
          "description": "Conditions represents the latest available observations of a build's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "config": {
          "description": "config is an ObjectReference to the BuildConfig this Build is based on.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "duration": {
          "description": "duration contains time.Duration object describing build time.",
          "type": "integer",
          "format": "int64"
        },
        "logSnippet": {
          "description": "logSnippet is the last few lines of the build log.  This value is only set for builds that failed.",
          "type": "string"
        },
        "message": {
          "description": "message is a human-readable message indicating details about why the build has this status.",
          "type": "string"
        },
        "output": {
          "description": "output describes the container image the build has produced.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildStatusOutput"
        },
        "outputDockerImageReference": {
          "description": "outputDockerImageReference contains a reference to the container image that will be built by this build. Its value is computed from Build.Spec.Output.To, and should include the registry address, so that it can be used to push and pull the image.",
          "type": "string"
        },
        "phase": {
          "description": "phase is the point in the build lifecycle. Possible values are \"New\", \"Pending\", \"Running\", \"Complete\", \"Failed\", \"Error\", and \"Cancelled\".",
          "type": "string"
        },
        "reason": {
          "description": "reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.",
          "type": "string"
        },
        "stages": {
          "description": "stages contains details about each stage that occurs during the build including start time, duration (in milliseconds), and the steps that occured within each stage.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.build.v1.StageInfo"
          }
        },
        "startTimestamp": {
          "description": "startTimestamp is a timestamp representing the server time when this Build started running in a Pod. It is represented in RFC3339 form and is in UTC.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      }
    },
    "com.github.openshift.api.build.v1.BuildStatusOutput": {
      "description": "BuildStatusOutput contains the status of the built image.",
      "type": "object",
      "properties": {
        "to": {
          "description": "to describes the status of the built image being pushed to a registry.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildStatusOutputTo"
        }
      }
    },
    "com.github.openshift.api.build.v1.BuildStatusOutputTo": {
      "description": "BuildStatusOutputTo describes the status of the built image with regards to image registry to which it was supposed to be pushed.",
      "type": "object",
      "properties": {
        "imageDigest": {
          "description": "imageDigest is the digest of the built container image. The digest uniquely identifies the image in the registry to which it was pushed.\n\nPlease note that this field may not always be set even if the push completes successfully - e.g. when the registry returns no digest or returns it in a format that the builder doesn't understand.",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.build.v1.BuildStrategy": {
      "description": "BuildStrategy contains the details of how to perform a build.",
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "customStrategy": {
          "description": "customStrategy holds the parameters to the Custom build strategy",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.CustomBuildStrategy"
        },
        "dockerStrategy": {
          "description": "dockerStrategy holds the parameters to the container image build strategy.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.DockerBuildStrategy"
        },
        "jenkinsPipelineStrategy": {
          "description": "JenkinsPipelineStrategy holds the parameters to the Jenkins Pipeline build strategy. Deprecated: use OpenShift Pipelines",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.JenkinsPipelineBuildStrategy"
        },
        "sourceStrategy": {
          "description": "sourceStrategy holds the parameters to the Source build strategy.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.SourceBuildStrategy"
        },
        "type": {
          "description": "type is the kind of build strategy.",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.build.v1.BuildTriggerCause": {
      "description": "BuildTriggerCause holds information about a triggered build. It is used for displaying build trigger data for each build and build configuration in oc describe. It is also used to describe which triggers led to the most recent update in the build configuration.",
      "type": "object",
      "properties": {
        "bitbucketWebHook": {
          "description": "BitbucketWebHook represents data for a Bitbucket webhook that fired a specific build.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.BitbucketWebHookCause"
        },
        "genericWebHook": {
          "description": "genericWebHook holds data about a builds generic webhook trigger.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.GenericWebHookCause"
        },
        "githubWebHook": {
          "description": "gitHubWebHook represents data for a GitHub webhook that fired a specific build.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.GitHubWebHookCause"
        },
        "gitlabWebHook": {
          "description": "GitLabWebHook represents data for a GitLab webhook that fired a specific build.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.GitLabWebHookCause"
        },
        "imageChangeBuild": {
          "description": "imageChangeBuild stores information about an imagechange event that triggered a new build.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.ImageChangeCause"
        },
        "message": {
          "description": "message is used to store a human readable message for why the build was triggered. E.g.: \"Manually triggered by user\", \"Configuration change\",etc.",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.build.v1.BuildTriggerPolicy": {
      "description": "BuildTriggerPolicy describes a policy for a single trigger that results in a new Build.",
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "bitbucket": {
          "description": "BitbucketWebHook contains the parameters for a Bitbucket webhook type of trigger",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.WebHookTrigger"
        },
        "generic": {
          "description": "generic contains the parameters for a Generic webhook type of trigger",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.WebHookTrigger"
        },
        "github": {
          "description": "github contains the parameters for a GitHub webhook type of trigger",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.WebHookTrigger"
        },
        "gitlab": {
          "description": "GitLabWebHook contains the parameters for a GitLab webhook type of trigger",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.WebHookTrigger"
        },
        "imageChange": {
          "description": "imageChange contains parameters for an ImageChange type of trigger",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.ImageChangeTrigger"
        },
        "type": {
          "description": "type is the type of build trigger",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.build.v1.ConfigMapBuildSource": {
      "description": "ConfigMapBuildSource describes a configmap and its destination directory that will be used only at the build time. The content of the configmap referenced here will be copied into the destination directory instead of mounting.",
      "type": "object",
      "required": [
        "configMap"
      ],
      "properties": {
        "configMap": {
          "description": "configMap is a reference to an existing configmap that you want to use in your build.",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        },
        "destinationDir": {
          "description": "destinationDir is the directory where the files from the configmap should be available for the build time. For the Source build strategy, these will be injected into a container where the assemble script runs. For the container image build strategy, these will be copied into the build directory, where the Dockerfile is located, so users can ADD or COPY them during container image build.",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.build.v1.CustomBuildStrategy": {
      "description": "CustomBuildStrategy defines input parameters specific to Custom build.",
      "type": "object",
      "required": [
        "from"
      ],
      "properties": {
        "buildAPIVersion": {
          "description": "buildAPIVersion is the requested API version for the Build object serialized and passed to the custom builder",
          "type": "string"
        },
        "env": {
          "description": "env contains additional environment variables you want to pass into a builder container.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          }
        },
        "exposeDockerSocket": {
          "description": "exposeDockerSocket will allow running Docker commands (and build container images) from inside the container.",
          "type": "boolean"
        },
        "forcePull": {
          "description": "forcePull describes if the controller should configure the build pod to always pull the images for the builder or only pull if it is not present locally",
          "type": "boolean"
        },
        "from": {
          "description": "from is reference to an DockerImage, ImageStreamTag, or ImageStreamImage from which the container image should be pulled",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "pullSecret": {
          "description": "pullSecret is the name of a Secret that would be used for setting up the authentication for pulling the container images from the private Docker registries",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        },
        "secrets": {
          "description": "secrets is a list of additional secrets that will be included in the build pod",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.build.v1.SecretSpec"
          }
        }
      }
    },
    "com.github.openshift.api.build.v1.DockerBuildStrategy": {
      "description": "DockerBuildStrategy defines input parameters specific to container image build.",
      "type": "object",
      "properties": {
        "buildArgs": {
          "description": "buildArgs contains build arguments that will be resolved in the Dockerfile.  See https://docs.docker.com/engine/reference/builder/#/arg for more details.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          }
        },
        "dockerfilePath": {
          "description": "dockerfilePath is the path of the Dockerfile that will be used to build the container image, relative to the root of the context (contextDir). Defaults to `Dockerfile` if unset.",
          "type": "string"
        },
        "env": {
          "description": "env contains additional environment variables you want to pass into a builder container.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          }
        },
        "forcePull": {
          "description": "forcePull describes if the builder should pull the images from registry prior to building.",
          "type": "boolean"
        },
        "from": {
          "description": "from is a reference to an DockerImage, ImageStreamTag, or ImageStreamImage which overrides the FROM image in the Dockerfile for the build. If the Dockerfile uses multi-stage builds, this will replace the image in the last FROM directive of the file.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "imageOptimizationPolicy": {
          "description": "imageOptimizationPolicy describes what optimizations the system can use when building images to reduce the final size or time spent building the image. The default policy is 'None' which means the final build image will be equivalent to an image created by the container image build API. The experimental policy 'SkipLayers' will avoid commiting new layers in between each image step, and will fail if the Dockerfile cannot provide compatibility with the 'None' policy. An additional experimental policy 'SkipLayersAndWarn' is the same as 'SkipLayers' but simply warns if compatibility cannot be preserved.",
          "type": "string"
        },
        "noCache": {
          "description": "noCache if set to true indicates that the container image build must be executed with the --no-cache=true flag",
          "type": "boolean"
        },
        "pullSecret": {
          "description": "pullSecret is the name of a Secret that would be used for setting up the authentication for pulling the container images from the private Docker registries",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        }
      }
    },
    "com.github.openshift.api.build.v1.DockerStrategyOptions": {
      "description": "DockerStrategyOptions contains extra strategy options for container image builds",
      "type": "object",
      "properties": {
        "buildArgs": {
          "description": "Args contains any build arguments that are to be passed to Docker.  See https://docs.docker.com/engine/reference/builder/#/arg for more details",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          }
        },
        "noCache": {
          "description": "noCache overrides the docker-strategy noCache option in the build config",
          "type": "boolean"
        }
      }
    },
    "com.github.openshift.api.build.v1.GenericWebHookCause": {
      "description": "GenericWebHookCause holds information about a generic WebHook that triggered a build.",
      "type": "object",
      "properties": {
        "revision": {
          "description": "revision is an optional field that stores the git source revision information of the generic webhook trigger when it is available.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.SourceRevision"
        },
        "secret": {
          "description": "secret is the obfuscated webhook secret that triggered a build.",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.build.v1.GitBuildSource": {
      "description": "GitBuildSource defines the parameters of a Git SCM",
      "type": "object",
      "required": [
        "uri"
      ],
      "properties": {
        "httpProxy": {
          "description": "httpProxy is a proxy used to reach the git repository over http",
          "type": "string"
        },
        "httpsProxy": {
          "description": "httpsProxy is a proxy used to reach the git repository over https",
          "type": "string"
        },
        "noProxy": {
          "description": "noProxy is the list of domains for which the proxy should not be used",
          "type": "string"
        },
        "ref": {
          "description": "ref is the branch/tag/ref to build.",
          "type": "string"
        },
        "uri": {
          "description": "uri points to the source that will be built. The structure of the source will depend on the type of build to run",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.build.v1.GitHubWebHookCause": {
      "description": "GitHubWebHookCause has information about a GitHub webhook that triggered a build.",
      "type": "object",
      "properties": {
        "revision": {
          "description": "revision is the git revision information of the trigger.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.SourceRevision"
        },
        "secret": {
          "description": "secret is the obfuscated webhook secret that triggered a build.",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.build.v1.GitLabWebHookCause": {
      "description": "GitLabWebHookCause has information about a GitLab webhook that triggered a build.",
      "type": "object",
      "properties": {
        "revision": {
          "description": "Revision is the git source revision information of the trigger.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.SourceRevision"
        },
        "secret": {
          "description": "Secret is the obfuscated webhook secret that triggered a build.",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.build.v1.GitSourceRevision": {
      "description": "GitSourceRevision is the commit information from a git source for a build",
      "type": "object",
      "properties": {
        "author": {
          "description": "author is the author of a specific commit",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.SourceControlUser"
        },
        "commit": {
          "description": "commit is the commit hash identifying a specific commit",
          "type": "string"
        },
        "committer": {
          "description": "committer is the committer of a specific commit",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.SourceControlUser"
        },
        "message": {
          "description": "message is the description of a specific commit",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.build.v1.ImageChangeCause": {
      "description": "ImageChangeCause contains information about the image that triggered a build",
      "type": "object",
      "properties": {
        "fromRef": {
          "description": "fromRef contains detailed information about an image that triggered a build.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "imageID": {
          "description": "imageID is the ID of the image that triggered a a new build.",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.build.v1.ImageChangeTrigger": {
      "description": "ImageChangeTrigger allows builds to be triggered when an ImageStream changes",
      "type": "object",
      "properties": {
        "from": {
          "description": "from is a reference to an ImageStreamTag that will trigger a build when updated It is optional. If no From is specified, the From image from the build strategy will be used. Only one ImageChangeTrigger with an empty From reference is allowed in a build configuration.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "lastTriggeredImageID": {
          "description": "lastTriggeredImageID is used internally by the ImageChangeController to save last used image ID for build",
          "type": "string"
        },
        "paused": {
          "description": "paused is true if this trigger is temporarily disabled. Optional.",
          "type": "boolean"
        }
      }
    },
    "com.github.openshift.api.build.v1.ImageLabel": {
      "description": "ImageLabel represents a label applied to the resulting image.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "name defines the name of the label. It must have non-zero length.",
          "type": "string"
        },
        "value": {
          "description": "value defines the literal value of the label.",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.build.v1.ImageSource": {
      "description": "ImageSource is used to describe build source that will be extracted from an image or used during a multi stage build. A reference of type ImageStreamTag, ImageStreamImage or DockerImage may be used. A pull secret can be specified to pull the image from an external registry or override the default service account secret if pulling from the internal registry. Image sources can either be used to extract content from an image and place it into the build context along with the repository source, or used directly during a multi-stage container image build to allow content to be copied without overwriting the contents of the repository source (see the 'paths' and 'as' fields).",
      "type": "object",
      "required": [
        "from"
      ],
      "properties": {
        "as": {
          "description": "A list of image names that this source will be used in place of during a multi-stage container image build. For instance, a Dockerfile that uses \"COPY --from=nginx:latest\" will first check for an image source that has \"nginx:latest\" in this field before attempting to pull directly. If the Dockerfile does not reference an image source it is ignored. This field and paths may both be set, in which case the contents will be used twice.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "from": {
          "description": "from is a reference to an ImageStreamTag, ImageStreamImage, or DockerImage to copy source from.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "paths": {
          "description": "paths is a list of source and destination paths to copy from the image. This content will be copied into the build context prior to starting the build. If no paths are set, the build context will not be altered.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.build.v1.ImageSourcePath"
          }
        },
        "pullSecret": {
          "description": "pullSecret is a reference to a secret to be used to pull the image from a registry If the image is pulled from the OpenShift registry, this field does not need to be set.",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        }
      }
    },
    "com.github.openshift.api.build.v1.ImageSourcePath": {
      "description": "ImageSourcePath describes a path to be copied from a source image and its destination within the build directory.",
      "type": "object",
      "required": [
        "sourcePath",
        "destinationDir"
      ],
      "properties": {
        "destinationDir": {
          "description": "destinationDir is the relative directory within the build directory where files copied from the image are placed.",
          "type": "string"
        },
        "sourcePath": {
          "description": "sourcePath is the absolute path of the file or directory inside the image to copy to the build directory.  If the source path ends in /. then the content of the directory will be copied, but the directory itself will not be created at the destination.",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.build.v1.JenkinsPipelineBuildStrategy": {
      "description": "JenkinsPipelineBuildStrategy holds parameters specific to a Jenkins Pipeline build. Deprecated: use OpenShift Pipelines",
      "type": "object",
      "properties": {
        "env": {
          "description": "env contains additional environment variables you want to pass into a build pipeline.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          }
        },
        "jenkinsfile": {
          "description": "Jenkinsfile defines the optional raw contents of a Jenkinsfile which defines a Jenkins pipeline build.",
          "type": "string"
        },
        "jenkinsfilePath": {
          "description": "JenkinsfilePath is the optional path of the Jenkinsfile that will be used to configure the pipeline relative to the root of the context (contextDir). If both JenkinsfilePath & Jenkinsfile are both not specified, this defaults to Jenkinsfile in the root of the specified contextDir.",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.build.v1.SecretBuildSource": {
      "description": "SecretBuildSource describes a secret and its destination directory that will be used only at the build time. The content of the secret referenced here will be copied into the destination directory instead of mounting.",
      "type": "object",
      "required": [
        "secret"
      ],
      "properties": {
        "destinationDir": {
          "description": "destinationDir is the directory where the files from the secret should be available for the build time. For the Source build strategy, these will be injected into a container where the assemble script runs. Later, when the script finishes, all files injected will be truncated to zero length. For the container image build strategy, these will be copied into the build directory, where the Dockerfile is located, so users can ADD or COPY them during container image build.",
          "type": "string"
        },
        "secret": {
          "description": "secret is a reference to an existing secret that you want to use in your build.",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        }
      }
    },
    "com.github.openshift.api.build.v1.SecretLocalReference": {
      "description": "SecretLocalReference contains information that points to the local secret being used",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name is the name of the resource in the same namespace being referenced",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.build.v1.SecretSpec": {
      "description": "SecretSpec specifies a secret to be included in a build pod and its corresponding mount point",
      "type": "object",
      "required": [
        "secretSource",
        "mountPath"
      ],
      "properties": {
        "mountPath": {
          "description": "mountPath is the path at which to mount the secret",
          "type": "string"
        },
        "secretSource": {
          "description": "secretSource is a reference to the secret",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        }
      }
    },
    "com.github.openshift.api.build.v1.SourceBuildStrategy": {
      "description": "SourceBuildStrategy defines input parameters specific to an Source build.",
      "type": "object",
      "required": [
        "from"
      ],
      "properties": {
        "env": {
          "description": "env contains additional environment variables you want to pass into a builder container.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          }
        },
        "forcePull": {
          "description": "forcePull describes if the builder should pull the images from registry prior to building.",
          "type": "boolean"
        },
        "from": {
          "description": "from is reference to an DockerImage, ImageStreamTag, or ImageStreamImage from which the container image should be pulled",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "incremental": {
          "description": "incremental flag forces the Source build to do incremental builds if true.",
          "type": "boolean"
        },
        "pullSecret": {
          "description": "pullSecret is the name of a Secret that would be used for setting up the authentication for pulling the container images from the private Docker registries",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        },
        "scripts": {
          "description": "scripts is the location of Source scripts",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.build.v1.SourceControlUser": {
      "description": "SourceControlUser defines the identity of a user of source control",
      "type": "object",
      "properties": {
        "email": {
          "description": "email of the source control user",
          "type": "string"
        },
        "name": {
          "description": "name of the source control user",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.build.v1.SourceRevision": {
      "description": "SourceRevision is the revision or commit information from the source for the build",
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "git": {
          "description": "Git contains information about git-based build source",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.GitSourceRevision"
        },
        "type": {
          "description": "type of the build source, may be one of 'Source', 'Dockerfile', 'Binary', or 'Images'",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.build.v1.SourceStrategyOptions": {
      "description": "SourceStrategyOptions contains extra strategy options for Source builds",
      "type": "object",
      "properties": {
        "incremental": {
          "description": "incremental overrides the source-strategy incremental option in the build config",
          "type": "boolean"
        }
      }
    },
    "com.github.openshift.api.build.v1.StageInfo": {
      "description": "StageInfo contains details about a build stage.",
      "type": "object",
      "properties": {
        "durationMilliseconds": {
          "description": "durationMilliseconds identifies how long the stage took to complete in milliseconds. Note: the duration of a stage can exceed the sum of the duration of the steps within the stage as not all actions are accounted for in explicit build steps.",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "name is a unique identifier for each build stage that occurs.",
          "type": "string"
        },
        "startTime": {
          "description": "startTime is a timestamp representing the server time when this Stage started. It is represented in RFC3339 form and is in UTC.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "steps": {
          "description": "steps contains details about each step that occurs during a build stage including start time and duration in milliseconds.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.build.v1.StepInfo"
          }
        }
      }
    },
    "com.github.openshift.api.build.v1.StepInfo": {
      "description": "StepInfo contains details about a build step.",
      "type": "object",
      "properties": {
        "durationMilliseconds": {
          "description": "durationMilliseconds identifies how long the step took to complete in milliseconds.",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "name is a unique identifier for each build step.",
          "type": "string"
        },
        "startTime": {
          "description": "startTime is a timestamp representing the server time when this Step started. it is represented in RFC3339 form and is in UTC.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      }
    },
    "com.github.openshift.api.build.v1.WebHookTrigger": {
      "description": "WebHookTrigger is a trigger that gets invoked using a webhook type of post",
      "type": "object",
      "properties": {
        "allowEnv": {
          "description": "allowEnv determines whether the webhook can set environment variables; can only be set to true for GenericWebHook.",
          "type": "boolean"
        },
        "secret": {
          "description": "secret used to validate requests. Deprecated: use SecretReference instead.",
          "type": "string"
        },
        "secretReference": {
          "description": "secretReference is a reference to a secret in the same namespace, containing the value to be validated when the webhook is invoked. The secret being referenced must contain a key named \"WebHookSecretKey\", the value of which will be checked against the value supplied in the webhook invocation.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.SecretLocalReference"
        }
      }
    },
    "com.github.openshift.api.image.v1.Image": {
      "description": "Image is an immutable representation of a container image and metadata at a point in time. Images are named by taking a hash of their contents (metadata and content) and any change in format, content, or metadata results in a new name. The images resource is primarily for use by cluster administrators and integrations like the cluster image registry - end users instead access images via the imagestreamtags or imagestreamimages resources. While image metadata is stored in the API, any integration that implements the container image registry API must provide its own storage for the raw manifest data, image config, and layer contents.",
      "type": "object",
      "required": [
        "dockerImageLayers"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "image.openshift.io/v1"
          ]
        },
        "dockerImageConfig": {
          "description": "DockerImageConfig is a JSON blob that the runtime uses to set up the container. This is a part of manifest schema v2.",
          "type": "string"
        },
        "dockerImageLayers": {
          "description": "DockerImageLayers represents the layers in the image. May not be set if the image does not define that data.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.image.v1.ImageLayer"
          }
        },
        "dockerImageManifest": {
          "description": "DockerImageManifest is the raw JSON of the manifest",
          "type": "string"
        },
        "dockerImageManifestMediaType": {
          "description": "DockerImageManifestMediaType specifies the mediaType of manifest. This is a part of manifest schema v2.",
          "type": "string"
        },
        "dockerImageMetadata": {
          "description": "DockerImageMetadata contains metadata about this image",
          "x-kubernetes-patch-strategy": "replace",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        },
        "dockerImageMetadataVersion": {
          "description": "DockerImageMetadataVersion conveys the version of the object, which if empty defaults to \"1.0\"",
          "type": "string"
        },
        "dockerImageReference": {
          "description": "DockerImageReference is the string that can be used to pull this image.",
          "type": "string"
        },
        "dockerImageSignatures": {
          "description": "DockerImageSignatures provides the signatures as opaque blobs. This is a part of manifest schema v1.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Image"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "signatures": {
          "description": "Signatures holds all signatures of the image.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.image.v1.ImageSignature"
          },
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Image",
          "version": "v1"
        },
        {
          "group": "image.openshift.io",
          "kind": "Image",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.image.v1.ImageBlobReferences": {
      "description": "ImageBlobReferences describes the blob references within an image.",
      "type": "object",
      "properties": {
        "config": {
          "description": "config, if set, is the blob that contains the image config. Some images do not have separate config blobs and this field will be set to nil if so.",
          "type": "string"
        },
        "imageMissing": {
          "description": "imageMissing is true if the image is referenced by the image stream but the image object has been deleted from the API by an administrator. When this field is set, layers and config fields may be empty and callers that depend on the image metadata should consider the image to be unavailable for download or viewing.",
          "type": "boolean"
        },
        "layers": {
          "description": "layers is the list of blobs that compose this image, from base layer to top layer. All layers referenced by this array will be defined in the blobs map. Some images may have zero layers.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "com.github.openshift.api.image.v1.ImageImportSpec": {
      "description": "ImageImportSpec describes a request to import a specific image.",
      "type": "object",
      "required": [
        "from"
      ],
      "properties": {
        "from": {
          "description": "From is the source of an image to import; only kind DockerImage is allowed",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "importPolicy": {
          "description": "ImportPolicy is the policy controlling how the image is imported",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.TagImportPolicy"
        },
        "includeManifest": {
          "description": "IncludeManifest determines if the manifest for each image is returned in the response",
          "type": "boolean"
        },
        "referencePolicy": {
          "description": "ReferencePolicy defines how other components should consume the image",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.TagReferencePolicy"
        },
        "to": {
          "description": "To is a tag in the current image stream to assign the imported image to, if name is not specified the default tag from from.name will be used",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        }
      }
    },
    "com.github.openshift.api.image.v1.ImageImportStatus": {
      "description": "ImageImportStatus describes the result of an image import.",
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "image": {
          "description": "Image is the metadata of that image, if the image was located",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.Image"
        },
        "status": {
          "description": "Status is the status of the image import, including errors encountered while retrieving the image",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        },
        "tag": {
          "description": "Tag is the tag this image was located under, if any",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.image.v1.ImageLayer": {
      "description": "ImageLayer represents a single layer of the image. Some images may have multiple layers. Some may have none.",
      "type": "object",
      "required": [
        "name",
        "size",
        "mediaType"
      ],
      "properties": {
        "mediaType": {
          "description": "MediaType of the referenced object.",
          "type": "string"
        },
        "name": {
          "description": "Name of the layer as defined by the underlying store.",
          "type": "string"
        },
        "size": {
          "description": "Size of the layer in bytes as defined by the underlying store.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "com.github.openshift.api.image.v1.ImageLayerData": {
      "description": "ImageLayerData contains metadata about an image layer.",
      "type": "object",
      "required": [
        "size",
        "mediaType"
      ],
      "properties": {
        "mediaType": {
          "description": "MediaType of the referenced object.",
          "type": "string"
        },
        "size": {
          "description": "Size of the layer in bytes as defined by the underlying store. This field is optional if the necessary information about size is not available.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "com.github.openshift.api.image.v1.ImageList": {
      "description": "ImageList is a list of Image objects.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "image.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is a list of images",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.image.v1.Image"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ImageList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ImageList",
          "version": "v1"
        },
        {
          "group": "image.openshift.io",
          "kind": "ImageList",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.image.v1.ImageLookupPolicy": {
      "description": "ImageLookupPolicy describes how an image stream can be used to override the image references used by pods, builds, and other resources in a namespace.",
      "type": "object",
      "required": [
        "local"
      ],
      "properties": {
        "local": {
          "description": "local will change the docker short image references (like \"mysql\" or \"php:latest\") on objects in this namespace to the image ID whenever they match this image stream, instead of reaching out to a remote registry. The name will be fully qualified to an image ID if found. The tag's referencePolicy is taken into account on the replaced value. Only works within the current namespace.",
          "type": "boolean"
        }
      }
    },
    "com.github.openshift.api.image.v1.ImageSignature": {
      "description": "ImageSignature holds a signature of an image. It allows to verify image identity and possibly other claims as long as the signature is trusted. Based on this information it is possible to restrict runnable images to those matching cluster-wide policy. Mandatory fields should be parsed by clients doing image verification. The others are parsed from signature's content by the server. They serve just an informative purpose.",
      "type": "object",
      "required": [
        "type",
        "content"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "image.openshift.io/v1"
          ]
        },
        "conditions": {
          "description": "Conditions represent the latest available observations of a signature's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.image.v1.SignatureCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "content": {
          "description": "Required: An opaque binary string which is an image's signature.",
          "type": "string",
          "format": "byte"
        },
        "created": {
          "description": "If specified, it is the time of signature's creation.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "imageIdentity": {
          "description": "A human readable string representing image's identity. It could be a product name and version, or an image pull spec (e.g. \"registry.access.redhat.com/rhel7/rhel:7.2\").",
          "type": "string"
        },
        "issuedBy": {
          "description": "If specified, it holds information about an issuer of signing certificate or key (a person or entity who signed the signing certificate or key).",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.SignatureIssuer"
        },
        "issuedTo": {
          "description": "If specified, it holds information about a subject of signing certificate or key (a person or entity who signed the image).",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.SignatureSubject"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ImageSignature"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "signedClaims": {
          "description": "Contains claims from the signature.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "description": "Required: Describes a type of stored blob.",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ImageSignature",
          "version": "v1"
        },
        {
          "group": "image.openshift.io",
          "kind": "ImageSignature",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.image.v1.ImageStream": {
      "description": "An ImageStream stores a mapping of tags to images, metadata overrides that are applied when images are tagged in a stream, and an optional reference to a container image repository on a registry. Users typically update the spec.tags field to point to external images which are imported from container registries using credentials in your namespace with the pull secret type, or to existing image stream tags and images which are immediately accessible for tagging or pulling. The history of images applied to a tag is visible in the status.tags field and any user who can view an image stream is allowed to tag that image into their own image streams. Access to pull images from the integrated registry is granted by having the \"get imagestreams/layers\" permission on a given image stream. Users may remove a tag by deleting the imagestreamtag resource, which causes both spec and status for that tag to be removed. Image stream history is retained until an administrator runs the prune operation, which removes references that are no longer in use. To preserve a historical image, ensure there is a tag in spec pointing to that image by its digest.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "image.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ImageStream"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec describes the desired state of this stream",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.ImageStreamSpec"
        },
        "status": {
          "description": "Status describes the current state of this stream",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.ImageStreamStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ImageStream",
          "version": "v1"
        },
        {
          "group": "image.openshift.io",
          "kind": "ImageStream",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.image.v1.ImageStreamImage": {
      "description": "ImageStreamImage represents an Image that is retrieved by image name from an ImageStream. User interfaces and regular users can use this resource to access the metadata details of a tagged image in the image stream history for viewing, since Image resources are not directly accessible to end users. A not found error will be returned if no such image is referenced by a tag within the ImageStream. Images are created when spec tags are set on an image stream that represent an image in an external registry, when pushing to the integrated registry, or when tagging an existing image from one image stream to another. The name of an image stream image is in the form \"<STREAM>@<DIGEST>\", where the digest is the content addressible identifier for the image (sha256:xxxxx...). You can use ImageStreamImages as the from.kind of an image stream spec tag to reference an image exactly. The only operations supported on the imagestreamimage endpoint are retrieving the image.",
      "type": "object",
      "required": [
        "image"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "image.openshift.io/v1"
          ]
        },
        "image": {
          "description": "Image associated with the ImageStream and image name.",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.Image"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ImageStreamImage"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ImageStreamImage",
          "version": "v1"
        },
        {
          "group": "image.openshift.io",
          "kind": "ImageStreamImage",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.image.v1.ImageStreamImport": {
      "description": "The image stream import resource provides an easy way for a user to find and import container images from other container image registries into the server. Individual images or an entire image repository may be imported, and users may choose to see the results of the import prior to tagging the resulting images into the specified image stream.\n\nThis API is intended for end-user tools that need to see the metadata of the image prior to import (for instance, to generate an application from it). Clients that know the desired image can continue to create spec.tags directly into their image streams.",
      "type": "object",
      "required": [
        "spec",
        "status"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "image.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ImageStreamImport"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec is a description of the images that the user wishes to import",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.ImageStreamImportSpec"
        },
        "status": {
          "description": "Status is the the result of importing the image",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.ImageStreamImportStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ImageStreamImport",
          "version": "v1"
        },
        {
          "group": "image.openshift.io",
          "kind": "ImageStreamImport",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.image.v1.ImageStreamImportSpec": {
      "description": "ImageStreamImportSpec defines what images should be imported.",
      "type": "object",
      "required": [
        "import"
      ],
      "properties": {
        "images": {
          "description": "Images are a list of individual images to import.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.image.v1.ImageImportSpec"
          }
        },
        "import": {
          "description": "Import indicates whether to perform an import - if so, the specified tags are set on the spec and status of the image stream defined by the type meta.",
          "type": "boolean"
        },
        "repository": {
          "description": "Repository is an optional import of an entire container image repository. A maximum limit on the number of tags imported this way is imposed by the server.",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.RepositoryImportSpec"
        }
      }
    },
    "com.github.openshift.api.image.v1.ImageStreamImportStatus": {
      "description": "ImageStreamImportStatus contains information about the status of an image stream import.",
      "type": "object",
      "properties": {
        "images": {
          "description": "Images is set with the result of importing spec.images",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.image.v1.ImageImportStatus"
          }
        },
        "import": {
          "description": "Import is the image stream that was successfully updated or created when 'to' was set.",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.ImageStream"
        },
        "repository": {
          "description": "Repository is set if spec.repository was set to the outcome of the import",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.RepositoryImportStatus"
        }
      }
    },
    "com.github.openshift.api.image.v1.ImageStreamLayers": {
      "description": "ImageStreamLayers describes information about the layers referenced by images in this image stream.",
      "type": "object",
      "required": [
        "blobs",
        "images"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "image.openshift.io/v1"
          ]
        },
        "blobs": {
          "description": "blobs is a map of blob name to metadata about the blob.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/com.github.openshift.api.image.v1.ImageLayerData"
          }
        },
        "images": {
          "description": "images is a map between an image name and the names of the blobs and config that comprise the image.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/com.github.openshift.api.image.v1.ImageBlobReferences"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ImageStreamLayers"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "image.openshift.io",
          "kind": "ImageStreamLayers",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.image.v1.ImageStreamList": {
      "description": "ImageStreamList is a list of ImageStream objects.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "image.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is a list of imageStreams",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.image.v1.ImageStream"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ImageStreamList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ImageStreamList",
          "version": "v1"
        },
        {
          "group": "image.openshift.io",
          "kind": "ImageStreamList",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.image.v1.ImageStreamMapping": {
      "description": "ImageStreamMapping represents a mapping from a single image stream tag to a container image as well as the reference to the container image stream the image came from. This resource is used by privileged integrators to create an image resource and to associate it with an image stream in the status tags field. Creating an ImageStreamMapping will allow any user who can view the image stream to tag or pull that image, so only create mappings where the user has proven they have access to the image contents directly. The only operation supported for this resource is create and the metadata name and namespace should be set to the image stream containing the tag that should be updated.",
      "type": "object",
      "required": [
        "image",
        "tag"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "image.openshift.io/v1"
          ]
        },
        "image": {
          "description": "Image is a container image.",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.Image"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ImageStreamMapping"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "tag": {
          "description": "Tag is a string value this image can be located with inside the stream.",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ImageStreamMapping",
          "version": "v1"
        },
        {
          "group": "image.openshift.io",
          "kind": "ImageStreamMapping",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.image.v1.ImageStreamSpec": {
      "description": "ImageStreamSpec represents options for ImageStreams.",
      "type": "object",
      "properties": {
        "dockerImageRepository": {
          "description": "dockerImageRepository is optional, if specified this stream is backed by a container repository on this server Deprecated: This field is deprecated as of v3.7 and will be removed in a future release. Specify the source for the tags to be imported in each tag via the spec.tags.from reference instead.",
          "type": "string"
        },
        "lookupPolicy": {
          "description": "lookupPolicy controls how other resources reference images within this namespace.",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.ImageLookupPolicy"
        },
        "tags": {
          "description": "tags map arbitrary string values to specific image locators",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.image.v1.TagReference"
          },
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      }
    },
    "com.github.openshift.api.image.v1.ImageStreamStatus": {
      "description": "ImageStreamStatus contains information about the state of this image stream.",
      "type": "object",
      "required": [
        "dockerImageRepository"
      ],
      "properties": {
        "dockerImageRepository": {
          "description": "DockerImageRepository represents the effective location this stream may be accessed at. May be empty until the server determines where the repository is located",
          "type": "string"
        },
        "publicDockerImageRepository": {
          "description": "PublicDockerImageRepository represents the public location from where the image can be pulled outside the cluster. This field may be empty if the administrator has not exposed the integrated registry externally.",
          "type": "string"
        },
        "tags": {
          "description": "Tags are a historical record of images associated with each tag. The first entry in the TagEvent array is the currently tagged image.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.image.v1.NamedTagEventList"
          },
          "x-kubernetes-patch-merge-key": "tag",
          "x-kubernetes-patch-strategy": "merge"
        }
      }
    },
    "com.github.openshift.api.image.v1.ImageStreamTag": {
      "description": "ImageStreamTag represents an Image that is retrieved by tag name from an ImageStream. Use this resource to interact with the tags and images in an image stream by tag, or to see the image details for a particular tag. The image associated with this resource is the most recently successfully tagged, imported, or pushed image (as described in the image stream status.tags.items list for this tag). If an import is in progress or has failed the previous image will be shown. Deleting an image stream tag clears both the status and spec fields of an image stream. If no image can be retrieved for a given tag, a not found error will be returned.",
      "type": "object",
      "required": [
        "tag",
        "generation",
        "lookupPolicy",
        "image"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "image.openshift.io/v1"
          ]
        },
        "conditions": {
          "description": "conditions is an array of conditions that apply to the image stream tag.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.image.v1.TagEventCondition"
          }
        },
        "generation": {
          "description": "generation is the current generation of the tagged image - if tag is provided and this value is not equal to the tag generation, a user has requested an import that has not completed, or conditions will be filled out indicating any error.",
          "type": "integer",
          "format": "int64"
        },
        "image": {
          "description": "image associated with the ImageStream and tag.",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.Image"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ImageStreamTag"
          ]
        },
        "lookupPolicy": {
          "description": "lookupPolicy indicates whether this tag will handle image references in this namespace.",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.ImageLookupPolicy"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "tag": {
          "description": "tag is the spec tag associated with this image stream tag, and it may be null if only pushes have occurred to this image stream.",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.TagReference"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ImageStreamTag",
          "version": "v1"
        },
        {
          "group": "image.openshift.io",
          "kind": "ImageStreamTag",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.image.v1.ImageStreamTagList": {
      "description": "ImageStreamTagList is a list of ImageStreamTag objects.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "image.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is the list of image stream tags",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.image.v1.ImageStreamTag"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ImageStreamTagList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ImageStreamTagList",
          "version": "v1"
        },
        {
          "group": "image.openshift.io",
          "kind": "ImageStreamTagList",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.image.v1.ImageTag": {
      "description": "ImageTag represents a single tag within an image stream and includes the spec, the status history, and the currently referenced image (if any) of the provided tag. This type replaces the ImageStreamTag by providing a full view of the tag. ImageTags are returned for every spec or status tag present on the image stream. If no tag exists in either form a not found error will be returned by the API. A create operation will succeed if no spec tag has already been defined and the spec field is set. Delete will remove both spec and status elements from the image stream.",
      "type": "object",
      "required": [
        "spec",
        "status",
        "image"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "image.openshift.io/v1"
          ]
        },
        "image": {
          "description": "image is the details of the most recent image stream status tag, and it may be null if import has not completed or an administrator has deleted the image object. To verify this is the most recent image, you must verify the generation of the most recent status.items entry matches the spec tag (if a spec tag is set). This field will not be set when listing image tags.",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.Image"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ImageTag"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is the spec tag associated with this image stream tag, and it may be null if only pushes have occurred to this image stream.",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.TagReference"
        },
        "status": {
          "description": "status is the status tag details associated with this image stream tag, and it may be null if no push or import has been performed.",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.NamedTagEventList"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "image.openshift.io",
          "kind": "ImageTag",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.image.v1.ImageTagList": {
      "description": "ImageTagList is a list of ImageTag objects. When listing image tags, the image field is not populated. Tags are returned in alphabetical order by image stream and then tag.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "image.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is the list of image stream tags",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.image.v1.ImageTag"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ImageTagList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "image.openshift.io",
          "kind": "ImageTagList",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.image.v1.NamedTagEventList": {
      "description": "NamedTagEventList relates a tag to its image history.",
      "type": "object",
      "required": [
        "tag",
        "items"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions is an array of conditions that apply to the tag event list.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.image.v1.TagEventCondition"
          }
        },
        "items": {
          "description": "Standard object's metadata.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.image.v1.TagEvent"
          }
        },
        "tag": {
          "description": "Tag is the tag for which the history is recorded",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.image.v1.RepositoryImportSpec": {
      "description": "RepositoryImportSpec describes a request to import images from a container image repository.",
      "type": "object",
      "required": [
        "from"
      ],
      "properties": {
        "from": {
          "description": "From is the source for the image repository to import; only kind DockerImage and a name of a container image repository is allowed",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "importPolicy": {
          "description": "ImportPolicy is the policy controlling how the image is imported",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.TagImportPolicy"
        },
        "includeManifest": {
          "description": "IncludeManifest determines if the manifest for each image is returned in the response",
          "type": "boolean"
        },
        "referencePolicy": {
          "description": "ReferencePolicy defines how other components should consume the image",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.TagReferencePolicy"
        }
      }
    },
    "com.github.openshift.api.image.v1.RepositoryImportStatus": {
      "description": "RepositoryImportStatus describes the result of an image repository import",
      "type": "object",
      "properties": {
        "additionalTags": {
          "description": "AdditionalTags are tags that exist in the repository but were not imported because a maximum limit of automatic imports was applied.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "images": {
          "description": "Images is a list of images successfully retrieved by the import of the repository.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.image.v1.ImageImportStatus"
          }
        },
        "status": {
          "description": "Status reflects whether any failure occurred during import",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        }
      }
    },
    "com.github.openshift.api.image.v1.SignatureCondition": {
      "description": "SignatureCondition describes an image signature condition of particular kind at particular probe time.",
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastProbeTime": {
          "description": "Last time the condition was checked.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "lastTransitionTime": {
          "description": "Last time the condition transit from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "Human readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "(brief) reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of signature condition, Complete or Failed.",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.image.v1.SignatureIssuer": {
      "description": "SignatureIssuer holds information about an issuer of signing certificate or key.",
      "type": "object",
      "properties": {
        "commonName": {
          "description": "Common name (e.g. openshift-signing-service).",
          "type": "string"
        },
        "organization": {
          "description": "Organization name.",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.image.v1.SignatureSubject": {
      "description": "SignatureSubject holds information about a person or entity who created the signature.",
      "type": "object",
      "required": [
        "publicKeyID"
      ],
      "properties": {
        "commonName": {
          "description": "Common name (e.g. openshift-signing-service).",
          "type": "string"
        },
        "organization": {
          "description": "Organization name.",
          "type": "string"
        },
        "publicKeyID": {
          "description": "If present, it is a human readable key id of public key belonging to the subject used to verify image signature. It should contain at least 64 lowest bits of public key's fingerprint (e.g. 0x685ebe62bf278440).",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.image.v1.TagEvent": {
      "description": "TagEvent is used by ImageStreamStatus to keep a historical record of images associated with a tag.",
      "type": "object",
      "required": [
        "created",
        "dockerImageReference",
        "image",
        "generation"
      ],
      "properties": {
        "created": {
          "description": "Created holds the time the TagEvent was created",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "dockerImageReference": {
          "description": "DockerImageReference is the string that can be used to pull this image",
          "type": "string"
        },
        "generation": {
          "description": "Generation is the spec tag generation that resulted in this tag being updated",
          "type": "integer",
          "format": "int64"
        },
        "image": {
          "description": "Image is the image",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.image.v1.TagEventCondition": {
      "description": "TagEventCondition contains condition information for a tag event.",
      "type": "object",
      "required": [
        "type",
        "status",
        "generation"
      ],
      "properties": {
        "generation": {
          "description": "Generation is the spec tag generation that this status corresponds to",
          "type": "integer",
          "format": "int64"
        },
        "lastTransitionTime": {
          "description": "LastTransitionTIme is the time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "Message is a human readable description of the details about last transition, complementing reason.",
          "type": "string"
        },
        "reason": {
          "description": "Reason is a brief machine readable explanation for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of tag event condition, currently only ImportSuccess",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.image.v1.TagImportPolicy": {
      "description": "TagImportPolicy controls how images related to this tag will be imported.",
      "type": "object",
      "properties": {
        "insecure": {
          "description": "Insecure is true if the server may bypass certificate verification or connect directly over HTTP during image import.",
          "type": "boolean"
        },
        "scheduled": {
          "description": "Scheduled indicates to the server that this tag should be periodically checked to ensure it is up to date, and imported",
          "type": "boolean"
        }
      }
    },
    "com.github.openshift.api.image.v1.TagReference": {
      "description": "TagReference specifies optional annotations for images using this tag and an optional reference to an ImageStreamTag, ImageStreamImage, or DockerImage this tag should track.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "annotations": {
          "description": "Optional; if specified, annotations that are applied to images retrieved via ImageStreamTags.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "from": {
          "description": "Optional; if specified, a reference to another image that this tag should point to. Valid values are ImageStreamTag, ImageStreamImage, and DockerImage.  ImageStreamTag references can only reference a tag within this same ImageStream.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "generation": {
          "description": "Generation is a counter that tracks mutations to the spec tag (user intent). When a tag reference is changed the generation is set to match the current stream generation (which is incremented every time spec is changed). Other processes in the system like the image importer observe that the generation of spec tag is newer than the generation recorded in the status and use that as a trigger to import the newest remote tag. To trigger a new import, clients may set this value to zero which will reset the generation to the latest stream generation. Legacy clients will send this value as nil which will be merged with the current tag generation.",
          "type": "integer",
          "format": "int64"
        },
        "importPolicy": {
          "description": "ImportPolicy is information that controls how images may be imported by the server.",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.TagImportPolicy"
        },
        "name": {
          "description": "Name of the tag",
          "type": "string"
        },
        "reference": {
          "description": "Reference states if the tag will be imported. Default value is false, which means the tag will be imported.",
          "type": "boolean"
        },
        "referencePolicy": {
          "description": "ReferencePolicy defines how other components should consume the image.",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.TagReferencePolicy"
        }
      }
    },
    "com.github.openshift.api.image.v1.TagReferencePolicy": {
      "description": "TagReferencePolicy describes how pull-specs for images in this image stream tag are generated when image change triggers in deployment configs or builds are resolved. This allows the image stream author to control how images are accessed.",
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "description": "Type determines how the image pull spec should be transformed when the image stream tag is used in deployment config triggers or new builds. The default value is `Source`, indicating the original location of the image should be used (if imported). The user may also specify `Local`, indicating that the pull spec should point to the integrated container image registry and leverage the registry's ability to proxy the pull to an upstream registry. `Local` allows the credentials used to pull this image to be managed from the image stream's namespace, so others on the platform can access a remote image but have no access to the remote secret. It also allows the image layers to be mirrored into the local registry which the images can still be pulled even if the upstream registry is unavailable.",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.oauth.v1.ClusterRoleScopeRestriction": {
      "description": "ClusterRoleScopeRestriction describes restrictions on cluster role scopes",
      "type": "object",
      "required": [
        "roleNames",
        "namespaces",
        "allowEscalation"
      ],
      "properties": {
        "allowEscalation": {
          "description": "AllowEscalation indicates whether you can request roles and their escalating resources",
          "type": "boolean"
        },
        "namespaces": {
          "description": "Namespaces is the list of namespaces that can be referenced.  * means any of them (including *)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "roleNames": {
          "description": "RoleNames is the list of cluster roles that can referenced.  * means anything",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "com.github.openshift.api.oauth.v1.OAuthAccessToken": {
      "description": "OAuthAccessToken describes an OAuth access token",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "oauth.openshift.io/v1"
          ]
        },
        "authorizeToken": {
          "description": "AuthorizeToken contains the token that authorized this token",
          "type": "string"
        },
        "clientName": {
          "description": "ClientName references the client that created this token.",
          "type": "string"
        },
        "expiresIn": {
          "description": "ExpiresIn is the seconds from CreationTime before this token expires.",
          "type": "integer",
          "format": "int64"
        },
        "inactivityTimeoutSeconds": {
          "description": "InactivityTimeoutSeconds is the value in seconds, from the CreationTimestamp, after which this token can no longer be used. The value is automatically incremented when the token is used.",
          "type": "integer",
          "format": "int32"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "OAuthAccessToken"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "redirectURI": {
          "description": "RedirectURI is the redirection associated with the token.",
          "type": "string"
        },
        "refreshToken": {
          "description": "RefreshToken is the value by which this token can be renewed. Can be blank.",
          "type": "string"
        },
        "scopes": {
          "description": "Scopes is an array of the requested scopes.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userName": {
          "description": "UserName is the user name associated with this token",
          "type": "string"
        },
        "userUID": {
          "description": "UserUID is the unique UID associated with this token",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "OAuthAccessToken",
          "version": "v1"
        },
        {
          "group": "oauth.openshift.io",
          "kind": "OAuthAccessToken",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.oauth.v1.OAuthAccessTokenList": {
      "description": "OAuthAccessTokenList is a collection of OAuth access tokens",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "oauth.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is the list of OAuth access tokens",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.oauth.v1.OAuthAccessToken"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "OAuthAccessTokenList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "OAuthAccessTokenList",
          "version": "v1"
        },
        {
          "group": "oauth.openshift.io",
          "kind": "OAuthAccessTokenList",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.oauth.v1.OAuthAuthorizeToken": {
      "description": "OAuthAuthorizeToken describes an OAuth authorization token",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "oauth.openshift.io/v1"
          ]
        },
        "clientName": {
          "description": "ClientName references the client that created this token.",
          "type": "string"
        },
        "codeChallenge": {
          "description": "CodeChallenge is the optional code_challenge associated with this authorization code, as described in rfc7636",
          "type": "string"
        },
        "codeChallengeMethod": {
          "description": "CodeChallengeMethod is the optional code_challenge_method associated with this authorization code, as described in rfc7636",
          "type": "string"
        },
        "expiresIn": {
          "description": "ExpiresIn is the seconds from CreationTime before this token expires.",
          "type": "integer",
          "format": "int64"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "OAuthAuthorizeToken"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "redirectURI": {
          "description": "RedirectURI is the redirection associated with the token.",
          "type": "string"
        },
        "scopes": {
          "description": "Scopes is an array of the requested scopes.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "state": {
          "description": "State data from request",
          "type": "string"
        },
        "userName": {
          "description": "UserName is the user name associated with this token",
          "type": "string"
        },
        "userUID": {
          "description": "UserUID is the unique UID associated with this token. UserUID and UserName must both match for this token to be valid.",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "OAuthAuthorizeToken",
          "version": "v1"
        },
        {
          "group": "oauth.openshift.io",
          "kind": "OAuthAuthorizeToken",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.oauth.v1.OAuthAuthorizeTokenList": {
      "description": "OAuthAuthorizeTokenList is a collection of OAuth authorization tokens",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "oauth.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is the list of OAuth authorization tokens",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.oauth.v1.OAuthAuthorizeToken"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "OAuthAuthorizeTokenList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "OAuthAuthorizeTokenList",
          "version": "v1"
        },
        {
          "group": "oauth.openshift.io",
          "kind": "OAuthAuthorizeTokenList",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.oauth.v1.OAuthClient": {
      "description": "OAuthClient describes an OAuth client",
      "type": "object",
      "properties": {
        "accessTokenInactivityTimeoutSeconds": {
          "description": "AccessTokenInactivityTimeoutSeconds overrides the default token inactivity timeout for tokens granted to this client. The value represents the maximum amount of time that can occur between consecutive uses of the token. Tokens become invalid if they are not used within this temporal window. The user will need to acquire a new token to regain access once a token times out. This value needs to be set only if the default set in configuration is not appropriate for this client. Valid values are: - 0: Tokens for this client never time out - X: Tokens time out if there is no activity for X seconds The current minimum allowed value for X is 300 (5 minutes)",
          "type": "integer",
          "format": "int32"
        },
        "accessTokenMaxAgeSeconds": {
          "description": "AccessTokenMaxAgeSeconds overrides the default access token max age for tokens granted to this client. 0 means no expiration.",
          "type": "integer",
          "format": "int32"
        },
        "additionalSecrets": {
          "description": "AdditionalSecrets holds other secrets that may be used to identify the client.  This is useful for rotation and for service account token validation",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "oauth.openshift.io/v1"
          ]
        },
        "grantMethod": {
          "description": "GrantMethod is a required field which determines how to handle grants for this client. Valid grant handling methods are:\n - auto:   always approves grant requests, useful for trusted clients\n - prompt: prompts the end user for approval of grant requests, useful for third-party clients",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "OAuthClient"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "redirectURIs": {
          "description": "RedirectURIs is the valid redirection URIs associated with a client",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-patch-strategy": "merge"
        },
        "respondWithChallenges": {
          "description": "RespondWithChallenges indicates whether the client wants authentication needed responses made in the form of challenges instead of redirects",
          "type": "boolean"
        },
        "scopeRestrictions": {
          "description": "ScopeRestrictions describes which scopes this client can request.  Each requested scope is checked against each restriction.  If any restriction matches, then the scope is allowed. If no restriction matches, then the scope is denied.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.oauth.v1.ScopeRestriction"
          }
        },
        "secret": {
          "description": "Secret is the unique secret associated with a client",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "OAuthClient",
          "version": "v1"
        },
        {
          "group": "oauth.openshift.io",
          "kind": "OAuthClient",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.oauth.v1.OAuthClientAuthorization": {
      "description": "OAuthClientAuthorization describes an authorization created by an OAuth client",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "oauth.openshift.io/v1"
          ]
        },
        "clientName": {
          "description": "ClientName references the client that created this authorization",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "OAuthClientAuthorization"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "scopes": {
          "description": "Scopes is an array of the granted scopes.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userName": {
          "description": "UserName is the user name that authorized this client",
          "type": "string"
        },
        "userUID": {
          "description": "UserUID is the unique UID associated with this authorization. UserUID and UserName must both match for this authorization to be valid.",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "OAuthClientAuthorization",
          "version": "v1"
        },
        {
          "group": "oauth.openshift.io",
          "kind": "OAuthClientAuthorization",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.oauth.v1.OAuthClientAuthorizationList": {
      "description": "OAuthClientAuthorizationList is a collection of OAuth client authorizations",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "oauth.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is the list of OAuth client authorizations",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.oauth.v1.OAuthClientAuthorization"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "OAuthClientAuthorizationList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "OAuthClientAuthorizationList",
          "version": "v1"
        },
        {
          "group": "oauth.openshift.io",
          "kind": "OAuthClientAuthorizationList",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.oauth.v1.OAuthClientList": {
      "description": "OAuthClientList is a collection of OAuth clients",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "oauth.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is the list of OAuth clients",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.oauth.v1.OAuthClient"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "OAuthClientList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "OAuthClientList",
          "version": "v1"
        },
        {
          "group": "oauth.openshift.io",
          "kind": "OAuthClientList",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.oauth.v1.ScopeRestriction": {
      "description": "ScopeRestriction describe one restriction on scopes.  Exactly one option must be non-nil.",
      "type": "object",
      "properties": {
        "clusterRole": {
          "description": "ClusterRole describes a set of restrictions for cluster role scoping.",
          "$ref": "#/definitions/com.github.openshift.api.oauth.v1.ClusterRoleScopeRestriction"
        },
        "literals": {
          "description": "ExactValues means the scope has to match a particular set of strings exactly",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "com.github.openshift.api.project.v1.Project": {
      "description": "Projects are the unit of isolation and collaboration in OpenShift. A project has one or more members, a quota on the resources that the project may consume, and the security controls on the resources in the project. Within a project, members may have different roles - project administrators can set membership, editors can create and manage the resources, and viewers can see but not access running containers. In a normal cluster project administrators are not able to alter their quotas - that is restricted to cluster administrators.\n\nListing or watching projects will return only projects the user has the reader role on.\n\nAn OpenShift project is an alternative representation of a Kubernetes namespace. Projects are exposed as editable to end users while namespaces are not. Direct creation of a project is typically restricted to administrators, while end users should use the requestproject resource.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "project.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Project"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the behavior of the Namespace.",
          "$ref": "#/definitions/com.github.openshift.api.project.v1.ProjectSpec"
        },
        "status": {
          "description": "Status describes the current status of a Namespace",
          "$ref": "#/definitions/com.github.openshift.api.project.v1.ProjectStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Project",
          "version": "v1"
        },
        {
          "group": "project.openshift.io",
          "kind": "Project",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.project.v1.ProjectList": {
      "description": "ProjectList is a list of Project objects.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "project.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is the list of projects",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.project.v1.Project"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ProjectList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ProjectList",
          "version": "v1"
        },
        {
          "group": "project.openshift.io",
          "kind": "ProjectList",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.project.v1.ProjectRequest": {
      "description": "ProjecRequest is the set of options necessary to fully qualify a project request",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "project.openshift.io/v1"
          ]
        },
        "description": {
          "description": "Description is the description to apply to a project",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName is the display name to apply to a project",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ProjectRequest"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ProjectRequest",
          "version": "v1"
        },
        {
          "group": "project.openshift.io",
          "kind": "ProjectRequest",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.project.v1.ProjectSpec": {
      "description": "ProjectSpec describes the attributes on a Project",
      "type": "object",
      "properties": {
        "finalizers": {
          "description": "Finalizers is an opaque list of values that must be empty to permanently remove object from storage",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "com.github.openshift.api.project.v1.ProjectStatus": {
      "description": "ProjectStatus is information about the current status of a Project",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Represents the latest available observations of the project current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NamespaceCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "phase": {
          "description": "Phase is the current lifecycle phase of the project",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.quota.v1.AppliedClusterResourceQuota": {
      "description": "AppliedClusterResourceQuota mirrors ClusterResourceQuota at a project scope, for projection into a project.  It allows a project-admin to know which ClusterResourceQuotas are applied to his project and their associated usage.",
      "type": "object",
      "required": [
        "metadata",
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "quota.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "AppliedClusterResourceQuota"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the desired quota",
          "$ref": "#/definitions/com.github.openshift.api.quota.v1.ClusterResourceQuotaSpec"
        },
        "status": {
          "description": "Status defines the actual enforced quota and its current usage",
          "$ref": "#/definitions/com.github.openshift.api.quota.v1.ClusterResourceQuotaStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "AppliedClusterResourceQuota",
          "version": "v1"
        },
        {
          "group": "quota.openshift.io",
          "kind": "AppliedClusterResourceQuota",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.quota.v1.AppliedClusterResourceQuotaList": {
      "description": "AppliedClusterResourceQuotaList is a collection of AppliedClusterResourceQuotas",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "quota.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is a list of AppliedClusterResourceQuota",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.quota.v1.AppliedClusterResourceQuota"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "AppliedClusterResourceQuotaList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "AppliedClusterResourceQuotaList",
          "version": "v1"
        },
        {
          "group": "quota.openshift.io",
          "kind": "AppliedClusterResourceQuotaList",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.quota.v1.ClusterResourceQuotaSelector": {
      "description": "ClusterResourceQuotaSelector is used to select projects.  At least one of LabelSelector or AnnotationSelector must present.  If only one is present, it is the only selection criteria.  If both are specified, the project must match both restrictions.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "AnnotationSelector is used to select projects by annotation.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "LabelSelector is used to select projects by label.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }
      }
    },
    "com.github.openshift.api.quota.v1.ClusterResourceQuotaSpec": {
      "description": "ClusterResourceQuotaSpec defines the desired quota restrictions",
      "type": "object",
      "required": [
        "selector",
        "quota"
      ],
      "properties": {
        "quota": {
          "description": "Quota defines the desired quota",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaSpec"
        },
        "selector": {
          "description": "Selector is the selector used to match projects. It should only select active projects on the scale of dozens (though it can select many more less active projects).  These projects will contend on object creation through this resource.",
          "$ref": "#/definitions/com.github.openshift.api.quota.v1.ClusterResourceQuotaSelector"
        }
      }
    },
    "com.github.openshift.api.quota.v1.ClusterResourceQuotaStatus": {
      "description": "ClusterResourceQuotaStatus defines the actual enforced quota and its current usage",
      "type": "object",
      "required": [
        "total"
      ],
      "properties": {
        "namespaces": {
          "description": "Namespaces slices the usage by project.  This division allows for quick resolution of deletion reconciliation inside of a single project without requiring a recalculation across all projects.  This can be used to pull the deltas for a given project.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.quota.v1.ResourceQuotaStatusByNamespace"
          }
        },
        "total": {
          "description": "Total defines the actual enforced quota and its current usage across all projects",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaStatus"
        }
      }
    },
    "com.github.openshift.api.quota.v1.ResourceQuotaStatusByNamespace": {
      "description": "ResourceQuotaStatusByNamespace gives status for a particular project",
      "type": "object",
      "required": [
        "namespace",
        "status"
      ],
      "properties": {
        "namespace": {
          "description": "Namespace the project this status applies to",
          "type": "string"
        },
        "status": {
          "description": "Status indicates how many resources have been consumed by this project",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaStatus"
        }
      }
    },
    "com.github.openshift.api.route.v1.Route": {
      "description": "A route allows developers to expose services through an HTTP(S) aware load balancing and proxy layer via a public DNS entry. The route may further specify TLS options and a certificate, or specify a public CNAME that the router should also accept for HTTP and HTTPS traffic. An administrator typically configures their router to be visible outside the cluster firewall, and may also add additional security, caching, or traffic controls on the service content. Routers usually talk directly to the service endpoints.\n\nOnce a route is created, the `host` field may not be changed. Generally, routers use the oldest route with a given host when resolving conflicts.\n\nRouters are subject to additional customization and may support additional controls via the annotations field.\n\nBecause administrators may configure multiple routers, the route status field is used to return information to clients about the names and states of the route under each router. If a client chooses a duplicate name, for instance, the route status conditions are used to indicate the route cannot be chosen.\n\nTo enable HTTP/2 ALPN on a route it requires a custom (non-wildcard) certificate. This prevents connection coalescing by clients, notably web browsers. We do not support HTTP/2 ALPN on routes that use the default certificate because of the risk of connection re-use/coalescing. Routes that do not have their own custom certificate will not be HTTP/2 ALPN-enabled on either the frontend or the backend.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "route.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Route"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is the desired state of the route",
          "$ref": "#/definitions/com.github.openshift.api.route.v1.RouteSpec"
        },
        "status": {
          "description": "status is the current state of the route",
          "$ref": "#/definitions/com.github.openshift.api.route.v1.RouteStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Route",
          "version": "v1"
        },
        {
          "group": "route.openshift.io",
          "kind": "Route",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.route.v1.RouteIngress": {
      "description": "RouteIngress holds information about the places where a route is exposed.",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Conditions is the state of the route, may be empty.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.route.v1.RouteIngressCondition"
          }
        },
        "host": {
          "description": "Host is the host string under which the route is exposed; this value is required",
          "type": "string"
        },
        "routerCanonicalHostname": {
          "description": "CanonicalHostname is the external host name for the router that can be used as a CNAME for the host requested for this route. This value is optional and may not be set in all cases.",
          "type": "string"
        },
        "routerName": {
          "description": "Name is a name chosen by the router to identify itself; this value is required",
          "type": "string"
        },
        "wildcardPolicy": {
          "description": "Wildcard policy is the wildcard policy that was allowed where this route is exposed.",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.route.v1.RouteIngressCondition": {
      "description": "RouteIngressCondition contains details for the current condition of this route on a particular router.",
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "RFC 3339 date and time when this condition last transitioned",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "Human readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "(brief) reason for the condition's last transition, and is usually a machine and human readable constant",
          "type": "string"
        },
        "status": {
          "description": "Status is the status of the condition. Can be True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type is the type of the condition. Currently only Ready.",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.route.v1.RouteList": {
      "description": "RouteList is a collection of Routes.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "route.openshift.io/v1"
          ]
        },
        "items": {
          "description": "items is a list of routes",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.route.v1.Route"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "RouteList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "RouteList",
          "version": "v1"
        },
        {
          "group": "route.openshift.io",
          "kind": "RouteList",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.route.v1.RoutePort": {
      "description": "RoutePort defines a port mapping from a router to an endpoint in the service endpoints.",
      "type": "object",
      "required": [
        "targetPort"
      ],
      "properties": {
        "targetPort": {
          "description": "The target port on pods selected by the service this route points to. If this is a string, it will be looked up as a named port in the target endpoints port list. Required",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        }
      }
    },
    "com.github.openshift.api.route.v1.RouteSpec": {
      "description": "RouteSpec describes the hostname or path the route exposes, any security information, and one to four backends (services) the route points to. Requests are distributed among the backends depending on the weights assigned to each backend. When using roundrobin scheduling the portion of requests that go to each backend is the backend weight divided by the sum of all of the backend weights. When the backend has more than one endpoint the requests that end up on the backend are roundrobin distributed among the endpoints. Weights are between 0 and 256 with default 100. Weight 0 causes no requests to the backend. If all weights are zero the route will be considered to have no backends and return a standard 503 response.\n\nThe `tls` field is optional and allows specific certificates or behavior for the route. Routers typically configure a default certificate on a wildcard domain to terminate routes without explicit certificates, but custom hostnames usually must choose passthrough (send traffic directly to the backend via the TLS Server-Name- Indication field) or provide a certificate.",
      "type": "object",
      "required": [
        "to"
      ],
      "properties": {
        "alternateBackends": {
          "description": "alternateBackends allows up to 3 additional backends to be assigned to the route. Only the Service kind is allowed, and it will be defaulted to Service. Use the weight field in RouteTargetReference object to specify relative preference.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.route.v1.RouteTargetReference"
          }
        },
        "host": {
          "description": "host is an alias/DNS that points to the service. Optional. If not specified a route name will typically be automatically chosen. Must follow DNS952 subdomain conventions.",
          "type": "string"
        },
        "path": {
          "description": "path that the router watches for, to route traffic for to the service. Optional",
          "type": "string"
        },
        "port": {
          "description": "If specified, the port to be used by the router. Most routers will use all endpoints exposed by the service by default - set this value to instruct routers which port to use.",
          "$ref": "#/definitions/com.github.openshift.api.route.v1.RoutePort"
        },
        "subdomain": {
          "description": "subdomain is a DNS subdomain that is requested within the ingress controller's domain (as a subdomain). If host is set this field is ignored. An ingress controller may choose to ignore this suggested name, in which case the controller will report the assigned name in the status.ingress array or refuse to admit the route. If this value is set and the server does not support this field host will be populated automatically. Otherwise host is left empty. The field may have multiple parts separated by a dot, but not all ingress controllers may honor the request. This field may not be changed after creation except by a user with the update routes/custom-host permission.\n\nExample: subdomain `frontend` automatically receives the router subdomain `apps.mycluster.com` to have a full hostname `frontend.apps.mycluster.com`.",
          "type": "string"
        },
        "tls": {
          "description": "The tls field provides the ability to configure certificates and termination for the route.",
          "$ref": "#/definitions/com.github.openshift.api.route.v1.TLSConfig"
        },
        "to": {
          "description": "to is an object the route should use as the primary backend. Only the Service kind is allowed, and it will be defaulted to Service. If the weight field (0-256 default 100) is set to zero, no traffic will be sent to this backend.",
          "$ref": "#/definitions/com.github.openshift.api.route.v1.RouteTargetReference"
        },
        "wildcardPolicy": {
          "description": "Wildcard policy if any for the route. Currently only 'Subdomain' or 'None' is allowed.",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.route.v1.RouteStatus": {
      "description": "RouteStatus provides relevant info about the status of a route, including which routers acknowledge it.",
      "type": "object",
      "properties": {
        "ingress": {
          "description": "ingress describes the places where the route may be exposed. The list of ingress points may contain duplicate Host or RouterName values. Routes are considered live once they are `Ready`",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.route.v1.RouteIngress"
          }
        }
      }
    },
    "com.github.openshift.api.route.v1.RouteTargetReference": {
      "description": "RouteTargetReference specifies the target that resolve into endpoints. Only the 'Service' kind is allowed. Use 'weight' field to emphasize one over others.",
      "type": "object",
      "required": [
        "kind",
        "name"
      ],
      "properties": {
        "kind": {
          "description": "The kind of target that the route is referring to. Currently, only 'Service' is allowed",
          "type": "string"
        },
        "name": {
          "description": "name of the service/target that is being referred to. e.g. name of the service",
          "type": "string"
        },
        "weight": {
          "description": "weight as an integer between 0 and 256, default 100, that specifies the target's relative weight against other target reference objects. 0 suppresses requests to this backend.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "com.github.openshift.api.route.v1.TLSConfig": {
      "description": "TLSConfig defines config used to secure a route and provide termination",
      "type": "object",
      "required": [
        "termination"
      ],
      "properties": {
        "caCertificate": {
          "description": "caCertificate provides the cert authority certificate contents",
          "type": "string"
        },
        "certificate": {
          "description": "certificate provides certificate contents",
          "type": "string"
        },
        "destinationCACertificate": {
          "description": "destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.",
          "type": "string"
        },
        "insecureEdgeTerminationPolicy": {
          "description": "insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80.\n\n* Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.",
          "type": "string"
        },
        "key": {
          "description": "key provides key file contents",
          "type": "string"
        },
        "termination": {
          "description": "termination indicates termination type.",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.security.v1.PodSecurityPolicyReview": {
      "description": "PodSecurityPolicyReview checks which service accounts (not users, since that would be cluster-wide) can create the `PodTemplateSpec` in question.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "security.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PodSecurityPolicyReview"
          ]
        },
        "spec": {
          "description": "spec is the PodSecurityPolicy to check.",
          "$ref": "#/definitions/com.github.openshift.api.security.v1.PodSecurityPolicyReviewSpec"
        },
        "status": {
          "description": "status represents the current information/status for the PodSecurityPolicyReview.",
          "$ref": "#/definitions/com.github.openshift.api.security.v1.PodSecurityPolicyReviewStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PodSecurityPolicyReview",
          "version": "v1"
        },
        {
          "group": "security.openshift.io",
          "kind": "PodSecurityPolicyReview",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.security.v1.PodSecurityPolicyReviewSpec": {
      "description": "PodSecurityPolicyReviewSpec defines specification for PodSecurityPolicyReview",
      "type": "object",
      "required": [
        "template"
      ],
      "properties": {
        "serviceAccountNames": {
          "description": "serviceAccountNames is an optional set of ServiceAccounts to run the check with. If serviceAccountNames is empty, the template.spec.serviceAccountName is used, unless it's empty, in which case \"default\" is used instead. If serviceAccountNames is specified, template.spec.serviceAccountName is ignored.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "template": {
          "description": "template is the PodTemplateSpec to check. The template.spec.serviceAccountName field is used if serviceAccountNames is empty, unless the template.spec.serviceAccountName is empty, in which case \"default\" is used. If serviceAccountNames is specified, template.spec.serviceAccountName is ignored.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        }
      }
    },
    "com.github.openshift.api.security.v1.PodSecurityPolicyReviewStatus": {
      "description": "PodSecurityPolicyReviewStatus represents the status of PodSecurityPolicyReview.",
      "type": "object",
      "required": [
        "allowedServiceAccounts"
      ],
      "properties": {
        "allowedServiceAccounts": {
          "description": "allowedServiceAccounts returns the list of service accounts in *this* namespace that have the power to create the PodTemplateSpec.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.security.v1.ServiceAccountPodSecurityPolicyReviewStatus"
          }
        }
      }
    },
    "com.github.openshift.api.security.v1.PodSecurityPolicySelfSubjectReview": {
      "description": "PodSecurityPolicySelfSubjectReview checks whether this user/SA tuple can create the PodTemplateSpec",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "security.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PodSecurityPolicySelfSubjectReview"
          ]
        },
        "spec": {
          "description": "spec defines specification the PodSecurityPolicySelfSubjectReview.",
          "$ref": "#/definitions/com.github.openshift.api.security.v1.PodSecurityPolicySelfSubjectReviewSpec"
        },
        "status": {
          "description": "status represents the current information/status for the PodSecurityPolicySelfSubjectReview.",
          "$ref": "#/definitions/com.github.openshift.api.security.v1.PodSecurityPolicySubjectReviewStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PodSecurityPolicySelfSubjectReview",
          "version": "v1"
        },
        {
          "group": "security.openshift.io",
          "kind": "PodSecurityPolicySelfSubjectReview",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.security.v1.PodSecurityPolicySelfSubjectReviewSpec": {
      "description": "PodSecurityPolicySelfSubjectReviewSpec contains specification for PodSecurityPolicySelfSubjectReview.",
      "type": "object",
      "required": [
        "template"
      ],
      "properties": {
        "template": {
          "description": "template is the PodTemplateSpec to check.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        }
      }
    },
    "com.github.openshift.api.security.v1.PodSecurityPolicySubjectReview": {
      "description": "PodSecurityPolicySubjectReview checks whether a particular user/SA tuple can create the PodTemplateSpec.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "security.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PodSecurityPolicySubjectReview"
          ]
        },
        "spec": {
          "description": "spec defines specification for the PodSecurityPolicySubjectReview.",
          "$ref": "#/definitions/com.github.openshift.api.security.v1.PodSecurityPolicySubjectReviewSpec"
        },
        "status": {
          "description": "status represents the current information/status for the PodSecurityPolicySubjectReview.",
          "$ref": "#/definitions/com.github.openshift.api.security.v1.PodSecurityPolicySubjectReviewStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PodSecurityPolicySubjectReview",
          "version": "v1"
        },
        {
          "group": "security.openshift.io",
          "kind": "PodSecurityPolicySubjectReview",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.security.v1.PodSecurityPolicySubjectReviewSpec": {
      "description": "PodSecurityPolicySubjectReviewSpec defines specification for PodSecurityPolicySubjectReview",
      "type": "object",
      "required": [
        "template"
      ],
      "properties": {
        "groups": {
          "description": "groups is the groups you're testing for.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "template": {
          "description": "template is the PodTemplateSpec to check. If template.spec.serviceAccountName is empty it will not be defaulted. If its non-empty, it will be checked.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        },
        "user": {
          "description": "user is the user you're testing for. If you specify \"user\" but not \"group\", then is it interpreted as \"What if user were not a member of any groups. If user and groups are empty, then the check is performed using *only* the serviceAccountName in the template.",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.security.v1.PodSecurityPolicySubjectReviewStatus": {
      "description": "PodSecurityPolicySubjectReviewStatus contains information/status for PodSecurityPolicySubjectReview.",
      "type": "object",
      "properties": {
        "allowedBy": {
          "description": "allowedBy is a reference to the rule that allows the PodTemplateSpec. A rule can be a SecurityContextConstraint or a PodSecurityPolicy A `nil`, indicates that it was denied.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "reason": {
          "description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available.",
          "type": "string"
        },
        "template": {
          "description": "template is the PodTemplateSpec after the defaulting is applied.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        }
      }
    },
    "com.github.openshift.api.security.v1.RangeAllocation": {
      "description": "RangeAllocation is used so we can easily expose a RangeAllocation typed for security group",
      "type": "object",
      "required": [
        "range",
        "data"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "security.openshift.io/v1"
          ]
        },
        "data": {
          "description": "data is a byte array representing the serialized state of a range allocation.  It is a bitmap with each bit set to one to represent a range is taken.",
          "type": "string",
          "format": "byte"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "RangeAllocation"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "range": {
          "description": "range is a string representing a unique label for a range of uids, \"1000000000-2000000000/10000\".",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "security.openshift.io",
          "kind": "RangeAllocation",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.security.v1.RangeAllocationList": {
      "description": "RangeAllocationList is a list of RangeAllocations objects",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "security.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of RangeAllocations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.security.v1.RangeAllocation"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "RangeAllocationList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "security.openshift.io",
          "kind": "RangeAllocationList",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.security.v1.ServiceAccountPodSecurityPolicyReviewStatus": {
      "description": "ServiceAccountPodSecurityPolicyReviewStatus represents ServiceAccount name and related review status",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "allowedBy": {
          "description": "allowedBy is a reference to the rule that allows the PodTemplateSpec. A rule can be a SecurityContextConstraint or a PodSecurityPolicy A `nil`, indicates that it was denied.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "name": {
          "description": "name contains the allowed and the denied ServiceAccount name",
          "type": "string"
        },
        "reason": {
          "description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available.",
          "type": "string"
        },
        "template": {
          "description": "template is the PodTemplateSpec after the defaulting is applied.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        }
      }
    },
    "com.github.openshift.api.template.v1.BrokerTemplateInstance": {
      "description": "BrokerTemplateInstance holds the service broker-related state associated with a TemplateInstance.  BrokerTemplateInstance is part of an experimental API.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "template.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "BrokerTemplateInstance"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec describes the state of this BrokerTemplateInstance.",
          "$ref": "#/definitions/com.github.openshift.api.template.v1.BrokerTemplateInstanceSpec"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "template.openshift.io",
          "kind": "BrokerTemplateInstance",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.template.v1.BrokerTemplateInstanceList": {
      "description": "BrokerTemplateInstanceList is a list of BrokerTemplateInstance objects.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "template.openshift.io/v1"
          ]
        },
        "items": {
          "description": "items is a list of BrokerTemplateInstances",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.template.v1.BrokerTemplateInstance"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "BrokerTemplateInstanceList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "template.openshift.io",
          "kind": "BrokerTemplateInstanceList",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.template.v1.BrokerTemplateInstanceSpec": {
      "description": "BrokerTemplateInstanceSpec describes the state of a BrokerTemplateInstance.",
      "type": "object",
      "required": [
        "templateInstance",
        "secret"
      ],
      "properties": {
        "bindingIDs": {
          "description": "bindingids is a list of 'binding_id's provided during successive bind calls to the template service broker.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "secret": {
          "description": "secret is a reference to a Secret object residing in a namespace, containing the necessary template parameters.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "templateInstance": {
          "description": "templateinstance is a reference to a TemplateInstance object residing in a namespace.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        }
      }
    },
    "com.github.openshift.api.template.v1.Parameter": {
      "description": "Parameter defines a name/value variable that is to be processed during the Template to Config transformation.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "description": "Description of a parameter. Optional.",
          "type": "string"
        },
        "displayName": {
          "description": "Optional: The name that will show in UI instead of parameter 'Name'",
          "type": "string"
        },
        "from": {
          "description": "From is an input value for the generator. Optional.",
          "type": "string"
        },
        "generate": {
          "description": "generate specifies the generator to be used to generate random string from an input value specified by From field. The result string is stored into Value field. If empty, no generator is being used, leaving the result Value untouched. Optional.\n\nThe only supported generator is \"expression\", which accepts a \"from\" value in the form of a simple regular expression containing the range expression \"[a-zA-Z0-9]\", and the length expression \"a{length}\".\n\nExamples:\n\nfrom             | value ----------------------------- \"test[0-9]{1}x\"  | \"test7x\" \"[0-1]{8}\"       | \"01001100\" \"0x[A-F0-9]{4}\"  | \"0xB3AF\" \"[a-zA-Z0-9]{8}\" | \"hW4yQU5i\"",
          "type": "string"
        },
        "name": {
          "description": "Name must be set and it can be referenced in Template Items using ${PARAMETER_NAME}. Required.",
          "type": "string"
        },
        "required": {
          "description": "Optional: Indicates the parameter must have a value.  Defaults to false.",
          "type": "boolean"
        },
        "value": {
          "description": "Value holds the Parameter data. If specified, the generator will be ignored. The value replaces all occurrences of the Parameter ${Name} expression during the Template to Config transformation. Optional.",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.template.v1.Template": {
      "description": "Template contains the inputs needed to produce a Config.",
      "type": "object",
      "required": [
        "objects"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "template.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ProcessedTemplate",
            "Template",
            "TemplateConfig"
          ]
        },
        "labels": {
          "description": "labels is a optional set of labels that are applied to every object during the Template to Config transformation.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "message": {
          "description": "message is an optional instructional message that will be displayed when this template is instantiated. This field should inform the user how to utilize the newly created resources. Parameter substitution will be performed on the message before being displayed so that generated credentials and other parameters can be included in the output.",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "objects": {
          "description": "objects is an array of resources to include in this template. If a namespace value is hardcoded in the object, it will be removed during template instantiation, however if the namespace value is, or contains, a ${PARAMETER_REFERENCE}, the resolved value after parameter substitution will be respected and the object will be created in that namespace.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
          }
        },
        "parameters": {
          "description": "parameters is an optional array of Parameters used during the Template to Config transformation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.template.v1.Parameter"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ProcessedTemplate",
          "version": "v1"
        },
        {
          "group": "",
          "kind": "Template",
          "version": "v1"
        },
        {
          "group": "",
          "kind": "TemplateConfig",
          "version": "v1"
        },
        {
          "group": "template.openshift.io",
          "kind": "Template",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.template.v1.TemplateInstance": {
      "description": "TemplateInstance requests and records the instantiation of a Template. TemplateInstance is part of an experimental API.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "template.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "TemplateInstance"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec describes the desired state of this TemplateInstance.",
          "$ref": "#/definitions/com.github.openshift.api.template.v1.TemplateInstanceSpec"
        },
        "status": {
          "description": "status describes the current state of this TemplateInstance.",
          "$ref": "#/definitions/com.github.openshift.api.template.v1.TemplateInstanceStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "template.openshift.io",
          "kind": "TemplateInstance",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.template.v1.TemplateInstanceCondition": {
      "description": "TemplateInstanceCondition contains condition information for a TemplateInstance.",
      "type": "object",
      "required": [
        "type",
        "status",
        "lastTransitionTime",
        "reason",
        "message"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "LastTransitionTime is the last time a condition status transitioned from one state to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "Message is a human readable description of the details of the last transition, complementing reason.",
          "type": "string"
        },
        "reason": {
          "description": "Reason is a brief machine readable explanation for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False or Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of the condition, currently Ready or InstantiateFailure.",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.template.v1.TemplateInstanceList": {
      "description": "TemplateInstanceList is a list of TemplateInstance objects.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "template.openshift.io/v1"
          ]
        },
        "items": {
          "description": "items is a list of Templateinstances",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.template.v1.TemplateInstance"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "TemplateInstanceList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "template.openshift.io",
          "kind": "TemplateInstanceList",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.template.v1.TemplateInstanceObject": {
      "description": "TemplateInstanceObject references an object created by a TemplateInstance.",
      "type": "object",
      "properties": {
        "ref": {
          "description": "ref is a reference to the created object.  When used under .spec, only name and namespace are used; these can contain references to parameters which will be substituted following the usual rules.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        }
      }
    },
    "com.github.openshift.api.template.v1.TemplateInstanceRequester": {
      "description": "TemplateInstanceRequester holds the identity of an agent requesting a template instantiation.",
      "type": "object",
      "properties": {
        "extra": {
          "description": "extra holds additional information provided by the authenticator.",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "groups": {
          "description": "groups represent the groups this user is a part of.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "uid": {
          "description": "uid is a unique value that identifies this user across time; if this user is deleted and another user by the same name is added, they will have different UIDs.",
          "type": "string"
        },
        "username": {
          "description": "username uniquely identifies this user among all active users.",
          "type": "string"
        }
      }
    },
    "com.github.openshift.api.template.v1.TemplateInstanceSpec": {
      "description": "TemplateInstanceSpec describes the desired state of a TemplateInstance.",
      "type": "object",
      "required": [
        "template"
      ],
      "properties": {
        "requester": {
          "description": "requester holds the identity of the agent requesting the template instantiation.",
          "$ref": "#/definitions/com.github.openshift.api.template.v1.TemplateInstanceRequester"
        },
        "secret": {
          "description": "secret is a reference to a Secret object containing the necessary template parameters.",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        },
        "template": {
          "description": "template is a full copy of the template for instantiation.",
          "$ref": "#/definitions/com.github.openshift.api.template.v1.Template"
        }
      }
    },
    "com.github.openshift.api.template.v1.TemplateInstanceStatus": {
      "description": "TemplateInstanceStatus describes the current state of a TemplateInstance.",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "conditions represent the latest available observations of a TemplateInstance's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.template.v1.TemplateInstanceCondition"
          }
        },
        "objects": {
          "description": "Objects references the objects created by the TemplateInstance.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.template.v1.TemplateInstanceObject"
          }
        }
      }
    },
    "com.github.openshift.api.template.v1.TemplateList": {
      "description": "TemplateList is a list of Template objects.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "template.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is a list of templates",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.template.v1.Template"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "TemplateList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "TemplateList",
          "version": "v1"
        },
        {
          "group": "template.openshift.io",
          "kind": "TemplateList",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.user.v1.Group": {
      "description": "Group represents a referenceable set of Users",
      "type": "object",
      "required": [
        "users"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "user.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Group"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "users": {
          "description": "Users is the list of users in this group.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Group",
          "version": "v1"
        },
        {
          "group": "user.openshift.io",
          "kind": "Group",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.user.v1.GroupList": {
      "description": "GroupList is a collection of Groups",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "user.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is the list of groups",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.user.v1.Group"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "GroupList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "GroupList",
          "version": "v1"
        },
        {
          "group": "user.openshift.io",
          "kind": "GroupList",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.user.v1.Identity": {
      "description": "Identity records a successful authentication of a user with an identity provider. The information about the source of authentication is stored on the identity, and the identity is then associated with a single user object. Multiple identities can reference a single user. Information retrieved from the authentication provider is stored in the extra field using a schema determined by the provider.",
      "type": "object",
      "required": [
        "providerName",
        "providerUserName",
        "user"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "user.openshift.io/v1"
          ]
        },
        "extra": {
          "description": "Extra holds extra information about this identity",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Identity"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "providerName": {
          "description": "ProviderName is the source of identity information",
          "type": "string"
        },
        "providerUserName": {
          "description": "ProviderUserName uniquely represents this identity in the scope of the provider",
          "type": "string"
        },
        "user": {
          "description": "User is a reference to the user this identity is associated with Both Name and UID must be set",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Identity",
          "version": "v1"
        },
        {
          "group": "user.openshift.io",
          "kind": "Identity",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.user.v1.IdentityList": {
      "description": "IdentityList is a collection of Identities",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "user.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is the list of identities",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.user.v1.Identity"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "IdentityList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "IdentityList",
          "version": "v1"
        },
        {
          "group": "user.openshift.io",
          "kind": "IdentityList",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.user.v1.User": {
      "description": "Upon log in, every user of the system receives a User and Identity resource. Administrators may directly manipulate the attributes of the users for their own tracking, or set groups via the API. The user name is unique and is chosen based on the value provided by the identity provider - if a user already exists with the incoming name, the user name may have a number appended to it depending on the configuration of the system.",
      "type": "object",
      "required": [
        "identities",
        "groups"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "user.openshift.io/v1"
          ]
        },
        "fullName": {
          "description": "FullName is the full name of user",
          "type": "string"
        },
        "groups": {
          "description": "Groups specifies group names this user is a member of. This field is deprecated and will be removed in a future release. Instead, create a Group object containing the name of this User.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "identities": {
          "description": "Identities are the identities associated with this user",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "User"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "User",
          "version": "v1"
        },
        {
          "group": "user.openshift.io",
          "kind": "User",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.user.v1.UserIdentityMapping": {
      "description": "UserIdentityMapping maps a user to an identity",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "user.openshift.io/v1"
          ]
        },
        "identity": {
          "description": "Identity is a reference to an identity",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "UserIdentityMapping"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "user": {
          "description": "User is a reference to a user",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "UserIdentityMapping",
          "version": "v1"
        },
        {
          "group": "user.openshift.io",
          "kind": "UserIdentityMapping",
          "version": "v1"
        }
      ]
    },
    "com.github.openshift.api.user.v1.UserList": {
      "description": "UserList is a collection of Users",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "user.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is the list of users",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.user.v1.User"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "UserList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "UserList",
          "version": "v1"
        },
        {
          "group": "user.openshift.io",
          "kind": "UserList",
          "version": "v1"
        }
      ]
    },
    "com.github.operator-framework.api.pkg.lib.version.OperatorVersion": {
      "description": "OperatorVersion is a wrapper around semver.Version which supports correct marshaling to YAML and JSON.",
      "type": "string",
      "format": "semver"
    },
    "com.github.operator-framework.api.pkg.operators.v1alpha1.APIResourceReference": {
      "description": "APIResourceReference is a Kubernetes resource type used by a custom resource",
      "type": "object",
      "required": [
        "name",
        "kind",
        "version"
      ],
      "properties": {
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "com.github.operator-framework.api.pkg.operators.v1alpha1.APIServiceDefinitions": {
      "description": "APIServiceDefinitions declares all of the extension apis managed or required by an operator being ran by ClusterServiceVersion.",
      "type": "object",
      "properties": {
        "owned": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.operator-framework.api.pkg.operators.v1alpha1.APIServiceDescription"
          }
        },
        "required": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.operator-framework.api.pkg.operators.v1alpha1.APIServiceDescription"
          }
        }
      }
    },
    "com.github.operator-framework.api.pkg.operators.v1alpha1.APIServiceDescription": {
      "description": "APIServiceDescription provides details to OLM about apis provided via aggregation",
      "type": "object",
      "required": [
        "name",
        "group",
        "version",
        "kind"
      ],
      "properties": {
        "actionDescriptors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.operator-framework.api.pkg.operators.v1alpha1.ActionDescriptor"
          }
        },
        "containerPort": {
          "type": "integer",
          "format": "int32"
        },
        "deploymentName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "group": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "resources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.operator-framework.api.pkg.operators.v1alpha1.APIResourceReference"
          }
        },
        "specDescriptors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.operator-framework.api.pkg.operators.v1alpha1.SpecDescriptor"
          }
        },
        "statusDescriptors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.operator-framework.api.pkg.operators.v1alpha1.StatusDescriptor"
          }
        },
        "version": {
          "type": "string"
        }
      }
    },
    "com.github.operator-framework.api.pkg.operators.v1alpha1.ActionDescriptor": {
      "description": "ActionDescriptor describes a declarative action that can be performed on a custom resource instance",
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        },
        "x-descriptors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "com.github.operator-framework.api.pkg.operators.v1alpha1.CRDDescription": {
      "description": "CRDDescription provides details to OLM about the CRDs",
      "type": "object",
      "required": [
        "name",
        "version",
        "kind"
      ],
      "properties": {
        "actionDescriptors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.operator-framework.api.pkg.operators.v1alpha1.ActionDescriptor"
          }
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "resources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.operator-framework.api.pkg.operators.v1alpha1.APIResourceReference"
          }
        },
        "specDescriptors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.operator-framework.api.pkg.operators.v1alpha1.SpecDescriptor"
          }
        },
        "statusDescriptors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.operator-framework.api.pkg.operators.v1alpha1.StatusDescriptor"
          }
        },
        "version": {
          "type": "string"
        }
      }
    },
    "com.github.operator-framework.api.pkg.operators.v1alpha1.CustomResourceDefinitions": {
      "description": "CustomResourceDefinitions declares all of the CRDs managed or required by an operator being ran by ClusterServiceVersion.\n\nIf the CRD is present in the Owned list, it is implicitly required.",
      "type": "object",
      "properties": {
        "owned": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.operator-framework.api.pkg.operators.v1alpha1.CRDDescription"
          }
        },
        "required": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.operator-framework.api.pkg.operators.v1alpha1.CRDDescription"
          }
        }
      }
    },
    "com.github.operator-framework.api.pkg.operators.v1alpha1.InstallMode": {
      "description": "InstallMode associates an InstallModeType with a flag representing if the CSV supports it",
      "type": "object",
      "required": [
        "type",
        "supported"
      ],
      "properties": {
        "supported": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "com.github.operator-framework.api.pkg.operators.v1alpha1.SpecDescriptor": {
      "description": "SpecDescriptor describes a field in a spec block of a CRD so that OLM can consume it",
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        },
        "x-descriptors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "com.github.operator-framework.api.pkg.operators.v1alpha1.StatusDescriptor": {
      "description": "StatusDescriptor describes a field in a status block of a CRD so that OLM can consume it",
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        },
        "x-descriptors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.AppLink": {
      "description": "AppLink defines a link to an application",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.CSVDescription": {
      "description": "CSVDescription defines a description of a CSV",
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-kubernetes-list-type": "map"
        },
        "apiservicedefinitions": {
          "$ref": "#/definitions/com.github.operator-framework.api.pkg.operators.v1alpha1.APIServiceDefinitions"
        },
        "customresourcedefinitions": {
          "$ref": "#/definitions/com.github.operator-framework.api.pkg.operators.v1alpha1.CustomResourceDefinitions"
        },
        "description": {
          "description": "LongDescription is the CSV's description",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName is the CSV's display name",
          "type": "string"
        },
        "icon": {
          "description": "Icon is the CSV's base64 encoded icon",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.Icon"
          },
          "x-kubernetes-list-type": "set"
        },
        "installModes": {
          "description": "InstallModes specify supported installation types",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.operator-framework.api.pkg.operators.v1alpha1.InstallMode"
          },
          "x-kubernetes-list-type": "set"
        },
        "keywords": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-list-type": "set"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.AppLink"
          },
          "x-kubernetes-list-type": "set"
        },
        "maintainers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.Maintainer"
          },
          "x-kubernetes-list-type": "set"
        },
        "maturity": {
          "type": "string"
        },
        "minKubeVersion": {
          "description": "Minimum Kubernetes version for operator installation",
          "type": "string"
        },
        "nativeApis": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionKind"
          }
        },
        "provider": {
          "description": "Provider is the CSV's provider",
          "$ref": "#/definitions/com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.AppLink"
        },
        "relatedImages": {
          "description": "List of related images",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "version": {
          "description": "Version is the CSV's semantic version",
          "$ref": "#/definitions/com.github.operator-framework.api.pkg.lib.version.OperatorVersion"
        }
      }
    },
    "com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.Icon": {
      "description": "Icon defines a base64 encoded icon and media type",
      "type": "object",
      "properties": {
        "base64data": {
          "type": "string"
        },
        "mediatype": {
          "type": "string"
        }
      }
    },
    "com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.Maintainer": {
      "description": "Maintainer defines a project maintainer",
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.PackageChannel": {
      "description": "PackageChannel defines a single channel under a package, pointing to a version of that package.",
      "type": "object",
      "required": [
        "name",
        "currentCSV"
      ],
      "properties": {
        "currentCSV": {
          "description": "CurrentCSV defines a reference to the CSV holding the version of this package currently for the channel.",
          "type": "string"
        },
        "currentCSVDesc": {
          "description": "CurrentCSVSpec holds the spec of the current CSV",
          "$ref": "#/definitions/com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.CSVDescription"
        },
        "name": {
          "description": "Name is the name of the channel, e.g. `alpha` or `stable`",
          "type": "string"
        }
      }
    },
    "com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.PackageManifest": {
      "description": "PackageManifest holds information about a package, which is a reference to one (or more) channels under a single package.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "packages.operators.coreos.com/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PackageManifest"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta_v2"
        },
        "spec": {
          "$ref": "#/definitions/com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.PackageManifestSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.PackageManifestStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "packages.operators.coreos.com",
          "kind": "PackageManifest",
          "version": "v1"
        }
      ]
    },
    "com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.PackageManifestList": {
      "description": "PackageManifestList is a list of PackageManifest objects.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "packages.operators.coreos.com/v1"
          ]
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.PackageManifest"
          },
          "x-kubernetes-list-type": "set"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PackageManifestList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "packages.operators.coreos.com",
          "kind": "PackageManifestList",
          "version": "v1"
        }
      ]
    },
    "com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.PackageManifestSpec": {
      "description": "PackageManifestSpec defines the desired state of PackageManifest",
      "type": "object"
    },
    "com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.PackageManifestStatus": {
      "description": "PackageManifestStatus represents the current status of the PackageManifest",
      "type": "object",
      "required": [
        "catalogSource",
        "catalogSourceDisplayName",
        "catalogSourcePublisher",
        "catalogSourceNamespace",
        "packageName",
        "channels",
        "defaultChannel"
      ],
      "properties": {
        "catalogSource": {
          "description": "CatalogSource is the name of the CatalogSource this package belongs to",
          "type": "string"
        },
        "catalogSourceDisplayName": {
          "type": "string"
        },
        "catalogSourceNamespace": {
          "description": "\n CatalogSourceNamespace is the namespace of the owning CatalogSource",
          "type": "string"
        },
        "catalogSourcePublisher": {
          "type": "string"
        },
        "channels": {
          "description": "Channels are the declared channels for the package, ala `stable` or `alpha`.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.PackageChannel"
          },
          "x-kubernetes-list-type": "set"
        },
        "defaultChannel": {
          "description": "DefaultChannel is, if specified, the name of the default channel for the package. The default channel will be installed if no other channel is explicitly given. If the package has a single channel, then that channel is implicitly the default.",
          "type": "string"
        },
        "packageName": {
          "description": "PackageName is the name of the overall package, ala `etcd`.",
          "type": "string"
        },
        "provider": {
          "description": "Provider is the provider of the PackageManifest's default CSV",
          "$ref": "#/definitions/com.github.operator-framework.operator-lifecycle-manager.pkg.package-server.apis.operators.v1.AppLink"
        }
      }
    },
    "dev.knative.internal.caching.v1alpha1.ImageList": {
      "description": "ImageList is a list of Image",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "caching.internal.knative.dev/v1alpha1"
          ]
        },
        "items": {
          "description": "List of images. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dev.knative.internal.caching.v1alpha1.Image"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ImageList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "caching.internal.knative.dev",
          "kind": "ImageList",
          "version": "v1alpha1"
        }
      ]
    },
    "dev.tekton.operator.v1alpha1.ConfigList": {
      "description": "ConfigList is a list of Config",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.tekton.dev/v1alpha1"
          ]
        },
        "items": {
          "description": "List of config. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dev.tekton.operator.v1alpha1.Config"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ConfigList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.tekton.dev",
          "kind": "ConfigList",
          "version": "v1alpha1"
        }
      ]
    },
    "dev.tekton.triggers.v1alpha1.ClusterTriggerBindingList": {
      "description": "ClusterTriggerBindingList is a list of ClusterTriggerBinding",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "triggers.tekton.dev/v1alpha1"
          ]
        },
        "items": {
          "description": "List of clustertriggerbindings. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dev.tekton.triggers.v1alpha1.ClusterTriggerBinding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterTriggerBindingList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "triggers.tekton.dev",
          "kind": "ClusterTriggerBindingList",
          "version": "v1alpha1"
        }
      ]
    },
    "dev.tekton.triggers.v1alpha1.EventListenerList": {
      "description": "EventListenerList is a list of EventListener",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "triggers.tekton.dev/v1alpha1"
          ]
        },
        "items": {
          "description": "List of eventlisteners. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dev.tekton.triggers.v1alpha1.EventListener"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "EventListenerList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "triggers.tekton.dev",
          "kind": "EventListenerList",
          "version": "v1alpha1"
        }
      ]
    },
    "dev.tekton.triggers.v1alpha1.TriggerBindingList": {
      "description": "TriggerBindingList is a list of TriggerBinding",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "triggers.tekton.dev/v1alpha1"
          ]
        },
        "items": {
          "description": "List of triggerbindings. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dev.tekton.triggers.v1alpha1.TriggerBinding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "TriggerBindingList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "triggers.tekton.dev",
          "kind": "TriggerBindingList",
          "version": "v1alpha1"
        }
      ]
    },
    "dev.tekton.triggers.v1alpha1.TriggerList": {
      "description": "TriggerList is a list of Trigger",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "triggers.tekton.dev/v1alpha1"
          ]
        },
        "items": {
          "description": "List of triggers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dev.tekton.triggers.v1alpha1.Trigger"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "TriggerList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "triggers.tekton.dev",
          "kind": "TriggerList",
          "version": "v1alpha1"
        }
      ]
    },
    "dev.tekton.triggers.v1alpha1.TriggerTemplateList": {
      "description": "TriggerTemplateList is a list of TriggerTemplate",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "triggers.tekton.dev/v1alpha1"
          ]
        },
        "items": {
          "description": "List of triggertemplates. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dev.tekton.triggers.v1alpha1.TriggerTemplate"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "TriggerTemplateList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "triggers.tekton.dev",
          "kind": "TriggerTemplateList",
          "version": "v1alpha1"
        }
      ]
    },
    "dev.tekton.v1alpha1.ClusterTaskList": {
      "description": "ClusterTaskList is a list of ClusterTask",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "tekton.dev/v1alpha1"
          ]
        },
        "items": {
          "description": "List of clustertasks. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dev.tekton.v1alpha1.ClusterTask"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterTaskList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "tekton.dev",
          "kind": "ClusterTaskList",
          "version": "v1alpha1"
        }
      ]
    },
    "dev.tekton.v1alpha1.ConditionList": {
      "description": "ConditionList is a list of Condition",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "tekton.dev/v1alpha1"
          ]
        },
        "items": {
          "description": "List of conditions. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dev.tekton.v1alpha1.Condition"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ConditionList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "tekton.dev",
          "kind": "ConditionList",
          "version": "v1alpha1"
        }
      ]
    },
    "dev.tekton.v1alpha1.PipelineList": {
      "description": "PipelineList is a list of Pipeline",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "tekton.dev/v1alpha1"
          ]
        },
        "items": {
          "description": "List of pipelines. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dev.tekton.v1alpha1.Pipeline"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PipelineList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "tekton.dev",
          "kind": "PipelineList",
          "version": "v1alpha1"
        }
      ]
    },
    "dev.tekton.v1alpha1.PipelineResourceList": {
      "description": "PipelineResourceList is a list of PipelineResource",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "tekton.dev/v1alpha1"
          ]
        },
        "items": {
          "description": "List of pipelineresources. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dev.tekton.v1alpha1.PipelineResource"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PipelineResourceList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "tekton.dev",
          "kind": "PipelineResourceList",
          "version": "v1alpha1"
        }
      ]
    },
    "dev.tekton.v1alpha1.PipelineRunList": {
      "description": "PipelineRunList is a list of PipelineRun",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "tekton.dev/v1alpha1"
          ]
        },
        "items": {
          "description": "List of pipelineruns. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dev.tekton.v1alpha1.PipelineRun"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PipelineRunList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "tekton.dev",
          "kind": "PipelineRunList",
          "version": "v1alpha1"
        }
      ]
    },
    "dev.tekton.v1alpha1.RunList": {
      "description": "RunList is a list of Run",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "tekton.dev/v1alpha1"
          ]
        },
        "items": {
          "description": "List of runs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dev.tekton.v1alpha1.Run"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "RunList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "tekton.dev",
          "kind": "RunList",
          "version": "v1alpha1"
        }
      ]
    },
    "dev.tekton.v1alpha1.TaskList": {
      "description": "TaskList is a list of Task",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "tekton.dev/v1alpha1"
          ]
        },
        "items": {
          "description": "List of tasks. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dev.tekton.v1alpha1.Task"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "TaskList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "tekton.dev",
          "kind": "TaskList",
          "version": "v1alpha1"
        }
      ]
    },
    "dev.tekton.v1alpha1.TaskRunList": {
      "description": "TaskRunList is a list of TaskRun",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "tekton.dev/v1alpha1"
          ]
        },
        "items": {
          "description": "List of taskruns. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dev.tekton.v1alpha1.TaskRun"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "TaskRunList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "tekton.dev",
          "kind": "TaskRunList",
          "version": "v1alpha1"
        }
      ]
    },
    "dev.tekton.v1beta1.ClusterTaskList": {
      "description": "ClusterTaskList is a list of ClusterTask",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "tekton.dev/v1beta1"
          ]
        },
        "items": {
          "description": "List of clustertasks. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dev.tekton.v1beta1.ClusterTask"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterTaskList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "tekton.dev",
          "kind": "ClusterTaskList",
          "version": "v1beta1"
        }
      ]
    },
    "dev.tekton.v1beta1.PipelineList": {
      "description": "PipelineList is a list of Pipeline",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "tekton.dev/v1beta1"
          ]
        },
        "items": {
          "description": "List of pipelines. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dev.tekton.v1beta1.Pipeline"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PipelineList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "tekton.dev",
          "kind": "PipelineList",
          "version": "v1beta1"
        }
      ]
    },
    "dev.tekton.v1beta1.PipelineRunList": {
      "description": "PipelineRunList is a list of PipelineRun",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "tekton.dev/v1beta1"
          ]
        },
        "items": {
          "description": "List of pipelineruns. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dev.tekton.v1beta1.PipelineRun"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PipelineRunList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "tekton.dev",
          "kind": "PipelineRunList",
          "version": "v1beta1"
        }
      ]
    },
    "dev.tekton.v1beta1.TaskList": {
      "description": "TaskList is a list of Task",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "tekton.dev/v1beta1"
          ]
        },
        "items": {
          "description": "List of tasks. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dev.tekton.v1beta1.Task"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "TaskList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "tekton.dev",
          "kind": "TaskList",
          "version": "v1beta1"
        }
      ]
    },
    "dev.tekton.v1beta1.TaskRunList": {
      "description": "TaskRunList is a list of TaskRun",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "tekton.dev/v1beta1"
          ]
        },
        "items": {
          "description": "List of taskruns. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dev.tekton.v1beta1.TaskRun"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "TaskRunList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "tekton.dev",
          "kind": "TaskRunList",
          "version": "v1beta1"
        }
      ]
    },
    "io.argoproj.v1alpha1.AppProject": {
      "description": "AppProject provides a logical grouping of applications, providing controls for: * where the apps may deploy to (cluster whitelist) * what may be deployed (repository whitelist, resource whitelist/blacklist) * who can access these applications (roles, OIDC group claims bindings) * and what they can do (RBAC policies) * automation access to these roles (JWT tokens)",
      "type": "object",
      "required": [
        "metadata",
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "argoproj.io/v1alpha1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "AppProject"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "AppProjectSpec is the specification of an AppProject",
          "type": "object",
          "properties": {
            "clusterResourceBlacklist": {
              "description": "ClusterResourceBlacklist contains list of blacklisted cluster level resources",
              "type": "array",
              "items": {
                "description": "GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types",
                "type": "object",
                "required": [
                  "group",
                  "kind"
                ],
                "properties": {
                  "group": {
                    "type": "string"
                  },
                  "kind": {
                    "type": "string"
                  }
                }
              }
            },
            "clusterResourceWhitelist": {
              "description": "ClusterResourceWhitelist contains list of whitelisted cluster level resources",
              "type": "array",
              "items": {
                "description": "GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types",
                "type": "object",
                "required": [
                  "group",
                  "kind"
                ],
                "properties": {
                  "group": {
                    "type": "string"
                  },
                  "kind": {
                    "type": "string"
                  }
                }
              }
            },
            "description": {
              "description": "Description contains optional project description",
              "type": "string"
            },
            "destinations": {
              "description": "Destinations contains list of destinations available for deployment",
              "type": "array",
              "items": {
                "description": "ApplicationDestination contains deployment destination information",
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the destination cluster which can be used instead of server (url) field",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace overrides the environment namespace value in the ksonnet app.yaml",
                    "type": "string"
                  },
                  "server": {
                    "description": "Server overrides the environment server value in the ksonnet app.yaml",
                    "type": "string"
                  }
                }
              }
            },
            "namespaceResourceBlacklist": {
              "description": "NamespaceResourceBlacklist contains list of blacklisted namespace level resources",
              "type": "array",
              "items": {
                "description": "GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types",
                "type": "object",
                "required": [
                  "group",
                  "kind"
                ],
                "properties": {
                  "group": {
                    "type": "string"
                  },
                  "kind": {
                    "type": "string"
                  }
                }
              }
            },
            "namespaceResourceWhitelist": {
              "description": "NamespaceResourceWhitelist contains list of whitelisted namespace level resources",
              "type": "array",
              "items": {
                "description": "GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types",
                "type": "object",
                "required": [
                  "group",
                  "kind"
                ],
                "properties": {
                  "group": {
                    "type": "string"
                  },
                  "kind": {
                    "type": "string"
                  }
                }
              }
            },
            "orphanedResources": {
              "description": "OrphanedResources specifies if controller should monitor orphaned resources of apps in this project",
              "type": "object",
              "properties": {
                "ignore": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "group": {
                        "type": "string"
                      },
                      "kind": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  }
                },
                "warn": {
                  "description": "Warn indicates if warning condition should be created for apps which have orphaned resources",
                  "type": "boolean"
                }
              }
            },
            "roles": {
              "description": "Roles are user defined RBAC roles associated with this project",
              "type": "array",
              "items": {
                "description": "ProjectRole represents a role that has access to a project",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "description": {
                    "description": "Description is a description of the role",
                    "type": "string"
                  },
                  "groups": {
                    "description": "Groups are a list of OIDC group claims bound to this role",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "jwtTokens": {
                    "description": "JWTTokens are a list of generated JWT tokens bound to this role",
                    "type": "array",
                    "items": {
                      "description": "JWTToken holds the issuedAt and expiresAt values of a token",
                      "type": "object",
                      "required": [
                        "iat"
                      ],
                      "properties": {
                        "exp": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "iat": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "id": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "name": {
                    "description": "Name is a name for this role",
                    "type": "string"
                  },
                  "policies": {
                    "description": "Policies Stores a list of casbin formated strings that define access policies for the role in the project",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "signatureKeys": {
              "description": "List of PGP key IDs that commits to be synced to must be signed with",
              "type": "array",
              "items": {
                "description": "SignatureKey is the specification of a key required to verify commit signatures with",
                "type": "object",
                "required": [
                  "keyID"
                ],
                "properties": {
                  "keyID": {
                    "description": "The ID of the key in hexadecimal notation",
                    "type": "string"
                  }
                }
              }
            },
            "sourceRepos": {
              "description": "SourceRepos contains list of repository URLs which can be used for deployment",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "syncWindows": {
              "description": "SyncWindows controls when syncs can be run for apps in this project",
              "type": "array",
              "items": {
                "description": "SyncWindow contains the kind, time, duration and attributes that are used to assign the syncWindows to apps",
                "type": "object",
                "properties": {
                  "applications": {
                    "description": "Applications contains a list of applications that the window will apply to",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "clusters": {
                    "description": "Clusters contains a list of clusters that the window will apply to",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "duration": {
                    "description": "Duration is the amount of time the sync window will be open",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind defines if the window allows or blocks syncs",
                    "type": "string"
                  },
                  "manualSync": {
                    "description": "ManualSync enables manual syncs when they would otherwise be blocked",
                    "type": "boolean"
                  },
                  "namespaces": {
                    "description": "Namespaces contains a list of namespaces that the window will apply to",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "schedule": {
                    "description": "Schedule is the time the window will begin, specified in cron format",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "argoproj.io",
          "kind": "AppProject",
          "version": "v1alpha1"
        }
      ]
    },
    "io.argoproj.v1alpha1.AppProjectList": {
      "description": "AppProjectList is a list of AppProject",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "argoproj.io/v1alpha1"
          ]
        },
        "items": {
          "description": "List of appprojects. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.argoproj.v1alpha1.AppProject"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "AppProjectList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "argoproj.io",
          "kind": "AppProjectList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.argoproj.v1alpha1.Application": {
      "description": "Application is a definition of Application resource.",
      "type": "object",
      "required": [
        "metadata",
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "argoproj.io/v1alpha1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Application"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "operation": {
          "description": "Operation contains requested operation parameters.",
          "type": "object",
          "properties": {
            "info": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "name",
                  "value"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            "initiatedBy": {
              "description": "OperationInitiator holds information about the operation initiator",
              "type": "object",
              "properties": {
                "automated": {
                  "description": "Automated is set to true if operation was initiated automatically by the application controller.",
                  "type": "boolean"
                },
                "username": {
                  "description": "Name of a user who started operation.",
                  "type": "string"
                }
              }
            },
            "retry": {
              "description": "Retry controls failed sync retry behavior",
              "type": "object",
              "properties": {
                "backoff": {
                  "description": "Backoff is a backoff strategy",
                  "type": "object",
                  "properties": {
                    "duration": {
                      "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. \"2m\", \"1h\")",
                      "type": "string"
                    },
                    "factor": {
                      "description": "Factor is a factor to multiply the base duration after each failed retry",
                      "type": "integer",
                      "format": "int64"
                    },
                    "maxDuration": {
                      "description": "MaxDuration is the maximum amount of time allowed for the backoff strategy",
                      "type": "string"
                    }
                  }
                },
                "limit": {
                  "description": "Limit is the maximum number of attempts when retrying a container",
                  "type": "integer",
                  "format": "int64"
                }
              }
            },
            "sync": {
              "description": "SyncOperation contains sync operation details.",
              "type": "object",
              "properties": {
                "dryRun": {
                  "description": "DryRun will perform a `kubectl apply --dry-run` without actually performing the sync",
                  "type": "boolean"
                },
                "manifests": {
                  "description": "Manifests is an optional field that overrides sync source with a local directory for development",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "prune": {
                  "description": "Prune deletes resources that are no longer tracked in git",
                  "type": "boolean"
                },
                "resources": {
                  "description": "Resources describes which resources to sync",
                  "type": "array",
                  "items": {
                    "description": "SyncOperationResource contains resources to sync.",
                    "type": "object",
                    "required": [
                      "kind",
                      "name"
                    ],
                    "properties": {
                      "group": {
                        "type": "string"
                      },
                      "kind": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "namespace": {
                        "type": "string"
                      }
                    }
                  }
                },
                "revision": {
                  "description": "Revision is the revision in which to sync the application to. If omitted, will use the revision specified in app spec.",
                  "type": "string"
                },
                "source": {
                  "description": "Source overrides the source definition set in the application. This is typically set in a Rollback operation and nil during a Sync operation",
                  "type": "object",
                  "required": [
                    "repoURL"
                  ],
                  "properties": {
                    "chart": {
                      "description": "Chart is a Helm chart name",
                      "type": "string"
                    },
                    "directory": {
                      "description": "Directory holds path/directory specific options",
                      "type": "object",
                      "properties": {
                        "jsonnet": {
                          "description": "ApplicationSourceJsonnet holds jsonnet specific options",
                          "type": "object",
                          "properties": {
                            "extVars": {
                              "description": "ExtVars is a list of Jsonnet External Variables",
                              "type": "array",
                              "items": {
                                "description": "JsonnetVar is a jsonnet variable",
                                "type": "object",
                                "required": [
                                  "name",
                                  "value"
                                ],
                                "properties": {
                                  "code": {
                                    "type": "boolean"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "libs": {
                              "description": "Additional library search dirs",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "tlas": {
                              "description": "TLAS is a list of Jsonnet Top-level Arguments",
                              "type": "array",
                              "items": {
                                "description": "JsonnetVar is a jsonnet variable",
                                "type": "object",
                                "required": [
                                  "name",
                                  "value"
                                ],
                                "properties": {
                                  "code": {
                                    "type": "boolean"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "recurse": {
                          "type": "boolean"
                        }
                      }
                    },
                    "helm": {
                      "description": "Helm holds helm specific options",
                      "type": "object",
                      "properties": {
                        "fileParameters": {
                          "description": "FileParameters are file parameters to the helm template",
                          "type": "array",
                          "items": {
                            "description": "HelmFileParameter is a file parameter to a helm template",
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "Name is the name of the helm parameter",
                                "type": "string"
                              },
                              "path": {
                                "description": "Path is the path value for the helm parameter",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "parameters": {
                          "description": "Parameters are parameters to the helm template",
                          "type": "array",
                          "items": {
                            "description": "HelmParameter is a parameter to a helm template",
                            "type": "object",
                            "properties": {
                              "forceString": {
                                "description": "ForceString determines whether to tell Helm to interpret booleans and numbers as strings",
                                "type": "boolean"
                              },
                              "name": {
                                "description": "Name is the name of the helm parameter",
                                "type": "string"
                              },
                              "value": {
                                "description": "Value is the value for the helm parameter",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "releaseName": {
                          "description": "The Helm release name. If omitted it will use the application name",
                          "type": "string"
                        },
                        "valueFiles": {
                          "description": "ValuesFiles is a list of Helm value files to use when generating a template",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "values": {
                          "description": "Values is Helm values, typically defined as a block",
                          "type": "string"
                        }
                      }
                    },
                    "ksonnet": {
                      "description": "Ksonnet holds ksonnet specific options",
                      "type": "object",
                      "properties": {
                        "environment": {
                          "description": "Environment is a ksonnet application environment name",
                          "type": "string"
                        },
                        "parameters": {
                          "description": "Parameters are a list of ksonnet component parameter override values",
                          "type": "array",
                          "items": {
                            "description": "KsonnetParameter is a ksonnet component parameter",
                            "type": "object",
                            "required": [
                              "name",
                              "value"
                            ],
                            "properties": {
                              "component": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "kustomize": {
                      "description": "Kustomize holds kustomize specific options",
                      "type": "object",
                      "properties": {
                        "commonLabels": {
                          "description": "CommonLabels adds additional kustomize commonLabels",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "images": {
                          "description": "Images are kustomize image overrides",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "namePrefix": {
                          "description": "NamePrefix is a prefix appended to resources for kustomize apps",
                          "type": "string"
                        },
                        "nameSuffix": {
                          "description": "NameSuffix is a suffix appended to resources for kustomize apps",
                          "type": "string"
                        },
                        "version": {
                          "description": "Version contains optional Kustomize version",
                          "type": "string"
                        }
                      }
                    },
                    "path": {
                      "description": "Path is a directory path within the Git repository",
                      "type": "string"
                    },
                    "plugin": {
                      "description": "ConfigManagementPlugin holds config management plugin specific options",
                      "type": "object",
                      "properties": {
                        "env": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "name",
                              "value"
                            ],
                            "properties": {
                              "name": {
                                "description": "the name, usually uppercase",
                                "type": "string"
                              },
                              "value": {
                                "description": "the value",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "name": {
                          "type": "string"
                        }
                      }
                    },
                    "repoURL": {
                      "description": "RepoURL is the repository URL of the application manifests",
                      "type": "string"
                    },
                    "targetRevision": {
                      "description": "TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD",
                      "type": "string"
                    }
                  }
                },
                "syncOptions": {
                  "description": "SyncOptions provide per-sync sync-options, e.g. Validate=false",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "syncStrategy": {
                  "description": "SyncStrategy describes how to perform the sync",
                  "type": "object",
                  "properties": {
                    "apply": {
                      "description": "Apply wil perform a `kubectl apply` to perform the sync.",
                      "type": "object",
                      "properties": {
                        "force": {
                          "description": "Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.",
                          "type": "boolean"
                        }
                      }
                    },
                    "hook": {
                      "description": "Hook will submit any referenced resources to perform the sync. This is the default strategy",
                      "type": "object",
                      "properties": {
                        "force": {
                          "description": "Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.",
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "spec": {
          "description": "ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision.",
          "type": "object",
          "required": [
            "destination",
            "project",
            "source"
          ],
          "properties": {
            "destination": {
              "description": "Destination overrides the kubernetes server and namespace defined in the environment ksonnet app.yaml",
              "type": "object",
              "properties": {
                "name": {
                  "description": "Name of the destination cluster which can be used instead of server (url) field",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace overrides the environment namespace value in the ksonnet app.yaml",
                  "type": "string"
                },
                "server": {
                  "description": "Server overrides the environment server value in the ksonnet app.yaml",
                  "type": "string"
                }
              }
            },
            "ignoreDifferences": {
              "description": "IgnoreDifferences controls resources fields which should be ignored during comparison",
              "type": "array",
              "items": {
                "description": "ResourceIgnoreDifferences contains resource filter and list of json paths which should be ignored during comparison with live state.",
                "type": "object",
                "required": [
                  "jsonPointers",
                  "kind"
                ],
                "properties": {
                  "group": {
                    "type": "string"
                  },
                  "jsonPointers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "kind": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "namespace": {
                    "type": "string"
                  }
                }
              }
            },
            "info": {
              "description": "Infos contains a list of useful information (URLs, email addresses, and plain text) that relates to the application",
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "name",
                  "value"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            "project": {
              "description": "Project is a application project name. Empty name means that application belongs to 'default' project.",
              "type": "string"
            },
            "revisionHistoryLimit": {
              "description": "This limits this number of items kept in the apps revision history. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.",
              "type": "integer",
              "format": "int64"
            },
            "source": {
              "description": "Source is a reference to the location ksonnet application definition",
              "type": "object",
              "required": [
                "repoURL"
              ],
              "properties": {
                "chart": {
                  "description": "Chart is a Helm chart name",
                  "type": "string"
                },
                "directory": {
                  "description": "Directory holds path/directory specific options",
                  "type": "object",
                  "properties": {
                    "jsonnet": {
                      "description": "ApplicationSourceJsonnet holds jsonnet specific options",
                      "type": "object",
                      "properties": {
                        "extVars": {
                          "description": "ExtVars is a list of Jsonnet External Variables",
                          "type": "array",
                          "items": {
                            "description": "JsonnetVar is a jsonnet variable",
                            "type": "object",
                            "required": [
                              "name",
                              "value"
                            ],
                            "properties": {
                              "code": {
                                "type": "boolean"
                              },
                              "name": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "libs": {
                          "description": "Additional library search dirs",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "tlas": {
                          "description": "TLAS is a list of Jsonnet Top-level Arguments",
                          "type": "array",
                          "items": {
                            "description": "JsonnetVar is a jsonnet variable",
                            "type": "object",
                            "required": [
                              "name",
                              "value"
                            ],
                            "properties": {
                              "code": {
                                "type": "boolean"
                              },
                              "name": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "recurse": {
                      "type": "boolean"
                    }
                  }
                },
                "helm": {
                  "description": "Helm holds helm specific options",
                  "type": "object",
                  "properties": {
                    "fileParameters": {
                      "description": "FileParameters are file parameters to the helm template",
                      "type": "array",
                      "items": {
                        "description": "HelmFileParameter is a file parameter to a helm template",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name is the name of the helm parameter",
                            "type": "string"
                          },
                          "path": {
                            "description": "Path is the path value for the helm parameter",
                            "type": "string"
                          }
                        }
                      }
                    },
                    "parameters": {
                      "description": "Parameters are parameters to the helm template",
                      "type": "array",
                      "items": {
                        "description": "HelmParameter is a parameter to a helm template",
                        "type": "object",
                        "properties": {
                          "forceString": {
                            "description": "ForceString determines whether to tell Helm to interpret booleans and numbers as strings",
                            "type": "boolean"
                          },
                          "name": {
                            "description": "Name is the name of the helm parameter",
                            "type": "string"
                          },
                          "value": {
                            "description": "Value is the value for the helm parameter",
                            "type": "string"
                          }
                        }
                      }
                    },
                    "releaseName": {
                      "description": "The Helm release name. If omitted it will use the application name",
                      "type": "string"
                    },
                    "valueFiles": {
                      "description": "ValuesFiles is a list of Helm value files to use when generating a template",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "values": {
                      "description": "Values is Helm values, typically defined as a block",
                      "type": "string"
                    }
                  }
                },
                "ksonnet": {
                  "description": "Ksonnet holds ksonnet specific options",
                  "type": "object",
                  "properties": {
                    "environment": {
                      "description": "Environment is a ksonnet application environment name",
                      "type": "string"
                    },
                    "parameters": {
                      "description": "Parameters are a list of ksonnet component parameter override values",
                      "type": "array",
                      "items": {
                        "description": "KsonnetParameter is a ksonnet component parameter",
                        "type": "object",
                        "required": [
                          "name",
                          "value"
                        ],
                        "properties": {
                          "component": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "kustomize": {
                  "description": "Kustomize holds kustomize specific options",
                  "type": "object",
                  "properties": {
                    "commonLabels": {
                      "description": "CommonLabels adds additional kustomize commonLabels",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "images": {
                      "description": "Images are kustomize image overrides",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "namePrefix": {
                      "description": "NamePrefix is a prefix appended to resources for kustomize apps",
                      "type": "string"
                    },
                    "nameSuffix": {
                      "description": "NameSuffix is a suffix appended to resources for kustomize apps",
                      "type": "string"
                    },
                    "version": {
                      "description": "Version contains optional Kustomize version",
                      "type": "string"
                    }
                  }
                },
                "path": {
                  "description": "Path is a directory path within the Git repository",
                  "type": "string"
                },
                "plugin": {
                  "description": "ConfigManagementPlugin holds config management plugin specific options",
                  "type": "object",
                  "properties": {
                    "env": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "name",
                          "value"
                        ],
                        "properties": {
                          "name": {
                            "description": "the name, usually uppercase",
                            "type": "string"
                          },
                          "value": {
                            "description": "the value",
                            "type": "string"
                          }
                        }
                      }
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                },
                "repoURL": {
                  "description": "RepoURL is the repository URL of the application manifests",
                  "type": "string"
                },
                "targetRevision": {
                  "description": "TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD",
                  "type": "string"
                }
              }
            },
            "syncPolicy": {
              "description": "SyncPolicy controls when a sync will be performed",
              "type": "object",
              "properties": {
                "automated": {
                  "description": "Automated will keep an application synced to the target revision",
                  "type": "object",
                  "properties": {
                    "prune": {
                      "description": "Prune will prune resources automatically as part of automated sync (default: false)",
                      "type": "boolean"
                    },
                    "selfHeal": {
                      "description": "SelfHeal enables auto-syncing if  (default: false)",
                      "type": "boolean"
                    }
                  }
                },
                "retry": {
                  "description": "Retry controls failed sync retry behavior",
                  "type": "object",
                  "properties": {
                    "backoff": {
                      "description": "Backoff is a backoff strategy",
                      "type": "object",
                      "properties": {
                        "duration": {
                          "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. \"2m\", \"1h\")",
                          "type": "string"
                        },
                        "factor": {
                          "description": "Factor is a factor to multiply the base duration after each failed retry",
                          "type": "integer",
                          "format": "int64"
                        },
                        "maxDuration": {
                          "description": "MaxDuration is the maximum amount of time allowed for the backoff strategy",
                          "type": "string"
                        }
                      }
                    },
                    "limit": {
                      "description": "Limit is the maximum number of attempts when retrying a container",
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                },
                "syncOptions": {
                  "description": "Options allow you to specify whole app sync-options",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "status": {
          "description": "ApplicationStatus contains information about application sync, health status",
          "type": "object",
          "properties": {
            "conditions": {
              "type": "array",
              "items": {
                "description": "ApplicationCondition contains details about current application condition",
                "type": "object",
                "required": [
                  "message",
                  "type"
                ],
                "properties": {
                  "lastTransitionTime": {
                    "description": "LastTransitionTime is the time the condition was first observed.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "Message contains human-readable message indicating details about condition",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type is an application condition type",
                    "type": "string"
                  }
                }
              }
            },
            "health": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                },
                "status": {
                  "description": "Represents resource health status",
                  "type": "string"
                }
              }
            },
            "history": {
              "description": "RevisionHistories is a array of history, oldest first and newest last",
              "type": "array",
              "items": {
                "description": "RevisionHistory contains information relevant to an application deployment",
                "type": "object",
                "required": [
                  "deployedAt",
                  "id",
                  "revision"
                ],
                "properties": {
                  "deployStartedAt": {
                    "description": "DeployStartedAt holds the time the deployment started",
                    "type": "string",
                    "format": "date-time"
                  },
                  "deployedAt": {
                    "description": "DeployedAt holds the time the deployment completed",
                    "type": "string",
                    "format": "date-time"
                  },
                  "id": {
                    "description": "ID is an auto incrementing identifier of the RevisionHistory",
                    "type": "integer",
                    "format": "int64"
                  },
                  "revision": {
                    "description": "Revision holds the revision of the sync",
                    "type": "string"
                  },
                  "source": {
                    "description": "ApplicationSource contains information about github repository, path within repository and target application environment.",
                    "type": "object",
                    "required": [
                      "repoURL"
                    ],
                    "properties": {
                      "chart": {
                        "description": "Chart is a Helm chart name",
                        "type": "string"
                      },
                      "directory": {
                        "description": "Directory holds path/directory specific options",
                        "type": "object",
                        "properties": {
                          "jsonnet": {
                            "description": "ApplicationSourceJsonnet holds jsonnet specific options",
                            "type": "object",
                            "properties": {
                              "extVars": {
                                "description": "ExtVars is a list of Jsonnet External Variables",
                                "type": "array",
                                "items": {
                                  "description": "JsonnetVar is a jsonnet variable",
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "value"
                                  ],
                                  "properties": {
                                    "code": {
                                      "type": "boolean"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "libs": {
                                "description": "Additional library search dirs",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "tlas": {
                                "description": "TLAS is a list of Jsonnet Top-level Arguments",
                                "type": "array",
                                "items": {
                                  "description": "JsonnetVar is a jsonnet variable",
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "value"
                                  ],
                                  "properties": {
                                    "code": {
                                      "type": "boolean"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "recurse": {
                            "type": "boolean"
                          }
                        }
                      },
                      "helm": {
                        "description": "Helm holds helm specific options",
                        "type": "object",
                        "properties": {
                          "fileParameters": {
                            "description": "FileParameters are file parameters to the helm template",
                            "type": "array",
                            "items": {
                              "description": "HelmFileParameter is a file parameter to a helm template",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Name is the name of the helm parameter",
                                  "type": "string"
                                },
                                "path": {
                                  "description": "Path is the path value for the helm parameter",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "description": "Parameters are parameters to the helm template",
                            "type": "array",
                            "items": {
                              "description": "HelmParameter is a parameter to a helm template",
                              "type": "object",
                              "properties": {
                                "forceString": {
                                  "description": "ForceString determines whether to tell Helm to interpret booleans and numbers as strings",
                                  "type": "boolean"
                                },
                                "name": {
                                  "description": "Name is the name of the helm parameter",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "Value is the value for the helm parameter",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "releaseName": {
                            "description": "The Helm release name. If omitted it will use the application name",
                            "type": "string"
                          },
                          "valueFiles": {
                            "description": "ValuesFiles is a list of Helm value files to use when generating a template",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "values": {
                            "description": "Values is Helm values, typically defined as a block",
                            "type": "string"
                          }
                        }
                      },
                      "ksonnet": {
                        "description": "Ksonnet holds ksonnet specific options",
                        "type": "object",
                        "properties": {
                          "environment": {
                            "description": "Environment is a ksonnet application environment name",
                            "type": "string"
                          },
                          "parameters": {
                            "description": "Parameters are a list of ksonnet component parameter override values",
                            "type": "array",
                            "items": {
                              "description": "KsonnetParameter is a ksonnet component parameter",
                              "type": "object",
                              "required": [
                                "name",
                                "value"
                              ],
                              "properties": {
                                "component": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "value": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      },
                      "kustomize": {
                        "description": "Kustomize holds kustomize specific options",
                        "type": "object",
                        "properties": {
                          "commonLabels": {
                            "description": "CommonLabels adds additional kustomize commonLabels",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "images": {
                            "description": "Images are kustomize image overrides",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "namePrefix": {
                            "description": "NamePrefix is a prefix appended to resources for kustomize apps",
                            "type": "string"
                          },
                          "nameSuffix": {
                            "description": "NameSuffix is a suffix appended to resources for kustomize apps",
                            "type": "string"
                          },
                          "version": {
                            "description": "Version contains optional Kustomize version",
                            "type": "string"
                          }
                        }
                      },
                      "path": {
                        "description": "Path is a directory path within the Git repository",
                        "type": "string"
                      },
                      "plugin": {
                        "description": "ConfigManagementPlugin holds config management plugin specific options",
                        "type": "object",
                        "properties": {
                          "env": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "name",
                                "value"
                              ],
                              "properties": {
                                "name": {
                                  "description": "the name, usually uppercase",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "the value",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "name": {
                            "type": "string"
                          }
                        }
                      },
                      "repoURL": {
                        "description": "RepoURL is the repository URL of the application manifests",
                        "type": "string"
                      },
                      "targetRevision": {
                        "description": "TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "observedAt": {
              "description": "ObservedAt indicates when the application state was updated without querying latest git state Deprecated: controller no longer updates ObservedAt field",
              "type": "string",
              "format": "date-time"
            },
            "operationState": {
              "description": "OperationState contains information about state of currently performing operation on application.",
              "type": "object",
              "required": [
                "operation",
                "phase",
                "startedAt"
              ],
              "properties": {
                "finishedAt": {
                  "description": "FinishedAt contains time of operation completion",
                  "type": "string",
                  "format": "date-time"
                },
                "message": {
                  "description": "Message hold any pertinent messages when attempting to perform operation (typically errors).",
                  "type": "string"
                },
                "operation": {
                  "description": "Operation is the original requested operation",
                  "type": "object",
                  "properties": {
                    "info": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "name",
                          "value"
                        ],
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "initiatedBy": {
                      "description": "OperationInitiator holds information about the operation initiator",
                      "type": "object",
                      "properties": {
                        "automated": {
                          "description": "Automated is set to true if operation was initiated automatically by the application controller.",
                          "type": "boolean"
                        },
                        "username": {
                          "description": "Name of a user who started operation.",
                          "type": "string"
                        }
                      }
                    },
                    "retry": {
                      "description": "Retry controls failed sync retry behavior",
                      "type": "object",
                      "properties": {
                        "backoff": {
                          "description": "Backoff is a backoff strategy",
                          "type": "object",
                          "properties": {
                            "duration": {
                              "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. \"2m\", \"1h\")",
                              "type": "string"
                            },
                            "factor": {
                              "description": "Factor is a factor to multiply the base duration after each failed retry",
                              "type": "integer",
                              "format": "int64"
                            },
                            "maxDuration": {
                              "description": "MaxDuration is the maximum amount of time allowed for the backoff strategy",
                              "type": "string"
                            }
                          }
                        },
                        "limit": {
                          "description": "Limit is the maximum number of attempts when retrying a container",
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    },
                    "sync": {
                      "description": "SyncOperation contains sync operation details.",
                      "type": "object",
                      "properties": {
                        "dryRun": {
                          "description": "DryRun will perform a `kubectl apply --dry-run` without actually performing the sync",
                          "type": "boolean"
                        },
                        "manifests": {
                          "description": "Manifests is an optional field that overrides sync source with a local directory for development",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "prune": {
                          "description": "Prune deletes resources that are no longer tracked in git",
                          "type": "boolean"
                        },
                        "resources": {
                          "description": "Resources describes which resources to sync",
                          "type": "array",
                          "items": {
                            "description": "SyncOperationResource contains resources to sync.",
                            "type": "object",
                            "required": [
                              "kind",
                              "name"
                            ],
                            "properties": {
                              "group": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "namespace": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "revision": {
                          "description": "Revision is the revision in which to sync the application to. If omitted, will use the revision specified in app spec.",
                          "type": "string"
                        },
                        "source": {
                          "description": "Source overrides the source definition set in the application. This is typically set in a Rollback operation and nil during a Sync operation",
                          "type": "object",
                          "required": [
                            "repoURL"
                          ],
                          "properties": {
                            "chart": {
                              "description": "Chart is a Helm chart name",
                              "type": "string"
                            },
                            "directory": {
                              "description": "Directory holds path/directory specific options",
                              "type": "object",
                              "properties": {
                                "jsonnet": {
                                  "description": "ApplicationSourceJsonnet holds jsonnet specific options",
                                  "type": "object",
                                  "properties": {
                                    "extVars": {
                                      "description": "ExtVars is a list of Jsonnet External Variables",
                                      "type": "array",
                                      "items": {
                                        "description": "JsonnetVar is a jsonnet variable",
                                        "type": "object",
                                        "required": [
                                          "name",
                                          "value"
                                        ],
                                        "properties": {
                                          "code": {
                                            "type": "boolean"
                                          },
                                          "name": {
                                            "type": "string"
                                          },
                                          "value": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    },
                                    "libs": {
                                      "description": "Additional library search dirs",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "tlas": {
                                      "description": "TLAS is a list of Jsonnet Top-level Arguments",
                                      "type": "array",
                                      "items": {
                                        "description": "JsonnetVar is a jsonnet variable",
                                        "type": "object",
                                        "required": [
                                          "name",
                                          "value"
                                        ],
                                        "properties": {
                                          "code": {
                                            "type": "boolean"
                                          },
                                          "name": {
                                            "type": "string"
                                          },
                                          "value": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "recurse": {
                                  "type": "boolean"
                                }
                              }
                            },
                            "helm": {
                              "description": "Helm holds helm specific options",
                              "type": "object",
                              "properties": {
                                "fileParameters": {
                                  "description": "FileParameters are file parameters to the helm template",
                                  "type": "array",
                                  "items": {
                                    "description": "HelmFileParameter is a file parameter to a helm template",
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "description": "Name is the name of the helm parameter",
                                        "type": "string"
                                      },
                                      "path": {
                                        "description": "Path is the path value for the helm parameter",
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "parameters": {
                                  "description": "Parameters are parameters to the helm template",
                                  "type": "array",
                                  "items": {
                                    "description": "HelmParameter is a parameter to a helm template",
                                    "type": "object",
                                    "properties": {
                                      "forceString": {
                                        "description": "ForceString determines whether to tell Helm to interpret booleans and numbers as strings",
                                        "type": "boolean"
                                      },
                                      "name": {
                                        "description": "Name is the name of the helm parameter",
                                        "type": "string"
                                      },
                                      "value": {
                                        "description": "Value is the value for the helm parameter",
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "releaseName": {
                                  "description": "The Helm release name. If omitted it will use the application name",
                                  "type": "string"
                                },
                                "valueFiles": {
                                  "description": "ValuesFiles is a list of Helm value files to use when generating a template",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "values": {
                                  "description": "Values is Helm values, typically defined as a block",
                                  "type": "string"
                                }
                              }
                            },
                            "ksonnet": {
                              "description": "Ksonnet holds ksonnet specific options",
                              "type": "object",
                              "properties": {
                                "environment": {
                                  "description": "Environment is a ksonnet application environment name",
                                  "type": "string"
                                },
                                "parameters": {
                                  "description": "Parameters are a list of ksonnet component parameter override values",
                                  "type": "array",
                                  "items": {
                                    "description": "KsonnetParameter is a ksonnet component parameter",
                                    "type": "object",
                                    "required": [
                                      "name",
                                      "value"
                                    ],
                                    "properties": {
                                      "component": {
                                        "type": "string"
                                      },
                                      "name": {
                                        "type": "string"
                                      },
                                      "value": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "kustomize": {
                              "description": "Kustomize holds kustomize specific options",
                              "type": "object",
                              "properties": {
                                "commonLabels": {
                                  "description": "CommonLabels adds additional kustomize commonLabels",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "images": {
                                  "description": "Images are kustomize image overrides",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "namePrefix": {
                                  "description": "NamePrefix is a prefix appended to resources for kustomize apps",
                                  "type": "string"
                                },
                                "nameSuffix": {
                                  "description": "NameSuffix is a suffix appended to resources for kustomize apps",
                                  "type": "string"
                                },
                                "version": {
                                  "description": "Version contains optional Kustomize version",
                                  "type": "string"
                                }
                              }
                            },
                            "path": {
                              "description": "Path is a directory path within the Git repository",
                              "type": "string"
                            },
                            "plugin": {
                              "description": "ConfigManagementPlugin holds config management plugin specific options",
                              "type": "object",
                              "properties": {
                                "env": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "name",
                                      "value"
                                    ],
                                    "properties": {
                                      "name": {
                                        "description": "the name, usually uppercase",
                                        "type": "string"
                                      },
                                      "value": {
                                        "description": "the value",
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "name": {
                                  "type": "string"
                                }
                              }
                            },
                            "repoURL": {
                              "description": "RepoURL is the repository URL of the application manifests",
                              "type": "string"
                            },
                            "targetRevision": {
                              "description": "TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD",
                              "type": "string"
                            }
                          }
                        },
                        "syncOptions": {
                          "description": "SyncOptions provide per-sync sync-options, e.g. Validate=false",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "syncStrategy": {
                          "description": "SyncStrategy describes how to perform the sync",
                          "type": "object",
                          "properties": {
                            "apply": {
                              "description": "Apply wil perform a `kubectl apply` to perform the sync.",
                              "type": "object",
                              "properties": {
                                "force": {
                                  "description": "Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.",
                                  "type": "boolean"
                                }
                              }
                            },
                            "hook": {
                              "description": "Hook will submit any referenced resources to perform the sync. This is the default strategy",
                              "type": "object",
                              "properties": {
                                "force": {
                                  "description": "Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.",
                                  "type": "boolean"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "phase": {
                  "description": "Phase is the current phase of the operation",
                  "type": "string"
                },
                "retryCount": {
                  "description": "RetryCount contains time of operation retries",
                  "type": "integer",
                  "format": "int64"
                },
                "startedAt": {
                  "description": "StartedAt contains time of operation start",
                  "type": "string",
                  "format": "date-time"
                },
                "syncResult": {
                  "description": "SyncResult is the result of a Sync operation",
                  "type": "object",
                  "required": [
                    "revision"
                  ],
                  "properties": {
                    "resources": {
                      "description": "Resources holds the sync result of each individual resource",
                      "type": "array",
                      "items": {
                        "description": "ResourceResult holds the operation result details of a specific resource",
                        "type": "object",
                        "required": [
                          "group",
                          "kind",
                          "name",
                          "namespace",
                          "version"
                        ],
                        "properties": {
                          "group": {
                            "type": "string"
                          },
                          "hookPhase": {
                            "description": "the state of any operation associated with this resource OR hook note: can contain values for non-hook resources",
                            "type": "string"
                          },
                          "hookType": {
                            "description": "the type of the hook, empty for non-hook resources",
                            "type": "string"
                          },
                          "kind": {
                            "type": "string"
                          },
                          "message": {
                            "description": "message for the last sync OR operation",
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "namespace": {
                            "type": "string"
                          },
                          "status": {
                            "description": "the final result of the sync, this is be empty if the resources is yet to be applied/pruned and is always zero-value for hooks",
                            "type": "string"
                          },
                          "syncPhase": {
                            "description": "indicates the particular phase of the sync that this is for",
                            "type": "string"
                          },
                          "version": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "revision": {
                      "description": "Revision holds the revision of the sync",
                      "type": "string"
                    },
                    "source": {
                      "description": "Source records the application source information of the sync, used for comparing auto-sync",
                      "type": "object",
                      "required": [
                        "repoURL"
                      ],
                      "properties": {
                        "chart": {
                          "description": "Chart is a Helm chart name",
                          "type": "string"
                        },
                        "directory": {
                          "description": "Directory holds path/directory specific options",
                          "type": "object",
                          "properties": {
                            "jsonnet": {
                              "description": "ApplicationSourceJsonnet holds jsonnet specific options",
                              "type": "object",
                              "properties": {
                                "extVars": {
                                  "description": "ExtVars is a list of Jsonnet External Variables",
                                  "type": "array",
                                  "items": {
                                    "description": "JsonnetVar is a jsonnet variable",
                                    "type": "object",
                                    "required": [
                                      "name",
                                      "value"
                                    ],
                                    "properties": {
                                      "code": {
                                        "type": "boolean"
                                      },
                                      "name": {
                                        "type": "string"
                                      },
                                      "value": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "libs": {
                                  "description": "Additional library search dirs",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "tlas": {
                                  "description": "TLAS is a list of Jsonnet Top-level Arguments",
                                  "type": "array",
                                  "items": {
                                    "description": "JsonnetVar is a jsonnet variable",
                                    "type": "object",
                                    "required": [
                                      "name",
                                      "value"
                                    ],
                                    "properties": {
                                      "code": {
                                        "type": "boolean"
                                      },
                                      "name": {
                                        "type": "string"
                                      },
                                      "value": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "recurse": {
                              "type": "boolean"
                            }
                          }
                        },
                        "helm": {
                          "description": "Helm holds helm specific options",
                          "type": "object",
                          "properties": {
                            "fileParameters": {
                              "description": "FileParameters are file parameters to the helm template",
                              "type": "array",
                              "items": {
                                "description": "HelmFileParameter is a file parameter to a helm template",
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "description": "Name is the name of the helm parameter",
                                    "type": "string"
                                  },
                                  "path": {
                                    "description": "Path is the path value for the helm parameter",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "parameters": {
                              "description": "Parameters are parameters to the helm template",
                              "type": "array",
                              "items": {
                                "description": "HelmParameter is a parameter to a helm template",
                                "type": "object",
                                "properties": {
                                  "forceString": {
                                    "description": "ForceString determines whether to tell Helm to interpret booleans and numbers as strings",
                                    "type": "boolean"
                                  },
                                  "name": {
                                    "description": "Name is the name of the helm parameter",
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "Value is the value for the helm parameter",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "releaseName": {
                              "description": "The Helm release name. If omitted it will use the application name",
                              "type": "string"
                            },
                            "valueFiles": {
                              "description": "ValuesFiles is a list of Helm value files to use when generating a template",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "values": {
                              "description": "Values is Helm values, typically defined as a block",
                              "type": "string"
                            }
                          }
                        },
                        "ksonnet": {
                          "description": "Ksonnet holds ksonnet specific options",
                          "type": "object",
                          "properties": {
                            "environment": {
                              "description": "Environment is a ksonnet application environment name",
                              "type": "string"
                            },
                            "parameters": {
                              "description": "Parameters are a list of ksonnet component parameter override values",
                              "type": "array",
                              "items": {
                                "description": "KsonnetParameter is a ksonnet component parameter",
                                "type": "object",
                                "required": [
                                  "name",
                                  "value"
                                ],
                                "properties": {
                                  "component": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "kustomize": {
                          "description": "Kustomize holds kustomize specific options",
                          "type": "object",
                          "properties": {
                            "commonLabels": {
                              "description": "CommonLabels adds additional kustomize commonLabels",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "images": {
                              "description": "Images are kustomize image overrides",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "namePrefix": {
                              "description": "NamePrefix is a prefix appended to resources for kustomize apps",
                              "type": "string"
                            },
                            "nameSuffix": {
                              "description": "NameSuffix is a suffix appended to resources for kustomize apps",
                              "type": "string"
                            },
                            "version": {
                              "description": "Version contains optional Kustomize version",
                              "type": "string"
                            }
                          }
                        },
                        "path": {
                          "description": "Path is a directory path within the Git repository",
                          "type": "string"
                        },
                        "plugin": {
                          "description": "ConfigManagementPlugin holds config management plugin specific options",
                          "type": "object",
                          "properties": {
                            "env": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "required": [
                                  "name",
                                  "value"
                                ],
                                "properties": {
                                  "name": {
                                    "description": "the name, usually uppercase",
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "the value",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "name": {
                              "type": "string"
                            }
                          }
                        },
                        "repoURL": {
                          "description": "RepoURL is the repository URL of the application manifests",
                          "type": "string"
                        },
                        "targetRevision": {
                          "description": "TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "reconciledAt": {
              "description": "ReconciledAt indicates when the application state was reconciled using the latest git version",
              "type": "string",
              "format": "date-time"
            },
            "resources": {
              "type": "array",
              "items": {
                "description": "ResourceStatus holds the current sync and health status of a resource",
                "type": "object",
                "properties": {
                  "group": {
                    "type": "string"
                  },
                  "health": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string"
                      },
                      "status": {
                        "description": "Represents resource health status",
                        "type": "string"
                      }
                    }
                  },
                  "hook": {
                    "type": "boolean"
                  },
                  "kind": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "namespace": {
                    "type": "string"
                  },
                  "requiresPruning": {
                    "type": "boolean"
                  },
                  "status": {
                    "description": "SyncStatusCode is a type which represents possible comparison results",
                    "type": "string"
                  },
                  "version": {
                    "type": "string"
                  }
                }
              }
            },
            "sourceType": {
              "type": "string"
            },
            "summary": {
              "type": "object",
              "properties": {
                "externalURLs": {
                  "description": "ExternalURLs holds all external URLs of application child resources.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "images": {
                  "description": "Images holds all images of application child resources.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "sync": {
              "description": "SyncStatus is a comparison result of application spec and deployed application.",
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "comparedTo": {
                  "description": "ComparedTo contains application source and target which was used for resources comparison",
                  "type": "object",
                  "required": [
                    "destination",
                    "source"
                  ],
                  "properties": {
                    "destination": {
                      "description": "ApplicationDestination contains deployment destination information",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Name of the destination cluster which can be used instead of server (url) field",
                          "type": "string"
                        },
                        "namespace": {
                          "description": "Namespace overrides the environment namespace value in the ksonnet app.yaml",
                          "type": "string"
                        },
                        "server": {
                          "description": "Server overrides the environment server value in the ksonnet app.yaml",
                          "type": "string"
                        }
                      }
                    },
                    "source": {
                      "description": "ApplicationSource contains information about github repository, path within repository and target application environment.",
                      "type": "object",
                      "required": [
                        "repoURL"
                      ],
                      "properties": {
                        "chart": {
                          "description": "Chart is a Helm chart name",
                          "type": "string"
                        },
                        "directory": {
                          "description": "Directory holds path/directory specific options",
                          "type": "object",
                          "properties": {
                            "jsonnet": {
                              "description": "ApplicationSourceJsonnet holds jsonnet specific options",
                              "type": "object",
                              "properties": {
                                "extVars": {
                                  "description": "ExtVars is a list of Jsonnet External Variables",
                                  "type": "array",
                                  "items": {
                                    "description": "JsonnetVar is a jsonnet variable",
                                    "type": "object",
                                    "required": [
                                      "name",
                                      "value"
                                    ],
                                    "properties": {
                                      "code": {
                                        "type": "boolean"
                                      },
                                      "name": {
                                        "type": "string"
                                      },
                                      "value": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "libs": {
                                  "description": "Additional library search dirs",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "tlas": {
                                  "description": "TLAS is a list of Jsonnet Top-level Arguments",
                                  "type": "array",
                                  "items": {
                                    "description": "JsonnetVar is a jsonnet variable",
                                    "type": "object",
                                    "required": [
                                      "name",
                                      "value"
                                    ],
                                    "properties": {
                                      "code": {
                                        "type": "boolean"
                                      },
                                      "name": {
                                        "type": "string"
                                      },
                                      "value": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "recurse": {
                              "type": "boolean"
                            }
                          }
                        },
                        "helm": {
                          "description": "Helm holds helm specific options",
                          "type": "object",
                          "properties": {
                            "fileParameters": {
                              "description": "FileParameters are file parameters to the helm template",
                              "type": "array",
                              "items": {
                                "description": "HelmFileParameter is a file parameter to a helm template",
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "description": "Name is the name of the helm parameter",
                                    "type": "string"
                                  },
                                  "path": {
                                    "description": "Path is the path value for the helm parameter",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "parameters": {
                              "description": "Parameters are parameters to the helm template",
                              "type": "array",
                              "items": {
                                "description": "HelmParameter is a parameter to a helm template",
                                "type": "object",
                                "properties": {
                                  "forceString": {
                                    "description": "ForceString determines whether to tell Helm to interpret booleans and numbers as strings",
                                    "type": "boolean"
                                  },
                                  "name": {
                                    "description": "Name is the name of the helm parameter",
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "Value is the value for the helm parameter",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "releaseName": {
                              "description": "The Helm release name. If omitted it will use the application name",
                              "type": "string"
                            },
                            "valueFiles": {
                              "description": "ValuesFiles is a list of Helm value files to use when generating a template",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "values": {
                              "description": "Values is Helm values, typically defined as a block",
                              "type": "string"
                            }
                          }
                        },
                        "ksonnet": {
                          "description": "Ksonnet holds ksonnet specific options",
                          "type": "object",
                          "properties": {
                            "environment": {
                              "description": "Environment is a ksonnet application environment name",
                              "type": "string"
                            },
                            "parameters": {
                              "description": "Parameters are a list of ksonnet component parameter override values",
                              "type": "array",
                              "items": {
                                "description": "KsonnetParameter is a ksonnet component parameter",
                                "type": "object",
                                "required": [
                                  "name",
                                  "value"
                                ],
                                "properties": {
                                  "component": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "kustomize": {
                          "description": "Kustomize holds kustomize specific options",
                          "type": "object",
                          "properties": {
                            "commonLabels": {
                              "description": "CommonLabels adds additional kustomize commonLabels",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "images": {
                              "description": "Images are kustomize image overrides",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "namePrefix": {
                              "description": "NamePrefix is a prefix appended to resources for kustomize apps",
                              "type": "string"
                            },
                            "nameSuffix": {
                              "description": "NameSuffix is a suffix appended to resources for kustomize apps",
                              "type": "string"
                            },
                            "version": {
                              "description": "Version contains optional Kustomize version",
                              "type": "string"
                            }
                          }
                        },
                        "path": {
                          "description": "Path is a directory path within the Git repository",
                          "type": "string"
                        },
                        "plugin": {
                          "description": "ConfigManagementPlugin holds config management plugin specific options",
                          "type": "object",
                          "properties": {
                            "env": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "required": [
                                  "name",
                                  "value"
                                ],
                                "properties": {
                                  "name": {
                                    "description": "the name, usually uppercase",
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "the value",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "name": {
                              "type": "string"
                            }
                          }
                        },
                        "repoURL": {
                          "description": "RepoURL is the repository URL of the application manifests",
                          "type": "string"
                        },
                        "targetRevision": {
                          "description": "TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD",
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "revision": {
                  "type": "string"
                },
                "status": {
                  "description": "SyncStatusCode is a type which represents possible comparison results",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "argoproj.io",
          "kind": "Application",
          "version": "v1alpha1"
        }
      ]
    },
    "io.argoproj.v1alpha1.ApplicationList": {
      "description": "ApplicationList is a list of Application",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "argoproj.io/v1alpha1"
          ]
        },
        "items": {
          "description": "List of applications. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.argoproj.v1alpha1.Application"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ApplicationList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "argoproj.io",
          "kind": "ApplicationList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.argoproj.v1alpha1.ArgoCD": {
      "description": "ArgoCD is the Schema for the argocds API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "argoproj.io/v1alpha1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ArgoCD"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "ArgoCDSpec defines the desired state of ArgoCD",
          "type": "object",
          "properties": {
            "applicationInstanceLabelKey": {
              "description": "ApplicationInstanceLabelKey is the key name where Argo CD injects the app name as a tracking label.",
              "type": "string"
            },
            "configManagementPlugins": {
              "description": "ConfigManagementPlugins is used to specify additional config management plugins.",
              "type": "string"
            },
            "controller": {
              "description": "Controller defines the Application Controller options for ArgoCD.",
              "type": "object",
              "properties": {
                "appSync": {
                  "description": "AppSync is used to control the sync frequency, by default the ArgoCD controller polls Git every 3m by default. \n Set this to a duration, e.g. 10m or 600s to control the synchronisation frequency.",
                  "type": "string"
                },
                "processors": {
                  "description": "Processors contains the options for the Application Controller processors.",
                  "type": "object",
                  "properties": {
                    "operation": {
                      "description": "Operation is the number of application operation processors.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "status": {
                      "description": "Status is the number of application status processors.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                },
                "resources": {
                  "description": "Resources defines the Compute Resources required by the container for the Application Controller.",
                  "type": "object",
                  "properties": {
                    "limits": {
                      "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                      "type": "object",
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      }
                    },
                    "requests": {
                      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                      "type": "object",
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      }
                    }
                  }
                }
              }
            },
            "dex": {
              "description": "Dex defines the Dex server options for ArgoCD.",
              "type": "object",
              "properties": {
                "config": {
                  "description": "Config is the dex connector configuration.",
                  "type": "string"
                },
                "image": {
                  "description": "Image is the Dex container image.",
                  "type": "string"
                },
                "openShiftOAuth": {
                  "description": "OpenShiftOAuth enables OpenShift OAuth authentication for the Dex server.",
                  "type": "boolean"
                },
                "resources": {
                  "description": "Resources defines the Compute Resources required by the container for Dex.",
                  "type": "object",
                  "properties": {
                    "limits": {
                      "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                      "type": "object",
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      }
                    },
                    "requests": {
                      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                      "type": "object",
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      }
                    }
                  }
                },
                "version": {
                  "description": "Version is the Dex container image tag.",
                  "type": "string"
                }
              }
            },
            "gaAnonymizeUsers": {
              "description": "GAAnonymizeUsers toggles user IDs being hashed before sending to google analytics.",
              "type": "boolean"
            },
            "gaTrackingID": {
              "description": "GATrackingID is the google analytics tracking ID to use.",
              "type": "string"
            },
            "grafana": {
              "description": "Grafana defines the Grafana server options for ArgoCD.",
              "type": "object",
              "required": [
                "enabled"
              ],
              "properties": {
                "enabled": {
                  "description": "Enabled will toggle Grafana support globally for ArgoCD.",
                  "type": "boolean"
                },
                "host": {
                  "description": "Host is the hostname to use for Ingress/Route resources.",
                  "type": "string"
                },
                "image": {
                  "description": "Image is the Grafana container image.",
                  "type": "string"
                },
                "ingress": {
                  "description": "Ingress defines the desired state for an Ingress for the Grafana component.",
                  "type": "object",
                  "required": [
                    "enabled"
                  ],
                  "properties": {
                    "annotations": {
                      "description": "Annotations is the map of annotations to apply to the Ingress.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "enabled": {
                      "description": "Enabled will toggle the creation of the Ingress.",
                      "type": "boolean"
                    },
                    "path": {
                      "description": "Path used for the Ingress resource.",
                      "type": "string"
                    },
                    "tls": {
                      "description": "TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.",
                      "type": "array",
                      "items": {
                        "description": "IngressTLS describes the transport layer security associated with an Ingress.",
                        "type": "object",
                        "properties": {
                          "hosts": {
                            "description": "Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "secretName": {
                            "description": "SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \"Host\" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "resources": {
                  "description": "Resources defines the Compute Resources required by the container for Grafana.",
                  "type": "object",
                  "properties": {
                    "limits": {
                      "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                      "type": "object",
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      }
                    },
                    "requests": {
                      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                      "type": "object",
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      }
                    }
                  }
                },
                "route": {
                  "description": "Route defines the desired state for an OpenShift Route for the Grafana component.",
                  "type": "object",
                  "required": [
                    "enabled"
                  ],
                  "properties": {
                    "annotations": {
                      "description": "Annotations is the map of annotations to use for the Route resource.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "enabled": {
                      "description": "Enabled will toggle the creation of the OpenShift Route.",
                      "type": "boolean"
                    },
                    "path": {
                      "description": "Path the router watches for, to route traffic for to the service.",
                      "type": "string"
                    },
                    "tls": {
                      "description": "TLS provides the ability to configure certificates and termination for the Route.",
                      "type": "object",
                      "required": [
                        "termination"
                      ],
                      "properties": {
                        "caCertificate": {
                          "description": "caCertificate provides the cert authority certificate contents",
                          "type": "string"
                        },
                        "certificate": {
                          "description": "certificate provides certificate contents",
                          "type": "string"
                        },
                        "destinationCACertificate": {
                          "description": "destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.",
                          "type": "string"
                        },
                        "insecureEdgeTerminationPolicy": {
                          "description": "insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80. \n * Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.",
                          "type": "string"
                        },
                        "key": {
                          "description": "key provides key file contents",
                          "type": "string"
                        },
                        "termination": {
                          "description": "termination indicates termination type.",
                          "type": "string"
                        }
                      }
                    },
                    "wildcardPolicy": {
                      "description": "WildcardPolicy if any for the route. Currently only 'Subdomain' or 'None' is allowed.",
                      "type": "string"
                    }
                  }
                },
                "size": {
                  "description": "Size is the replica count for the Grafana Deployment.",
                  "type": "integer",
                  "format": "int32"
                },
                "version": {
                  "description": "Version is the Grafana container image tag.",
                  "type": "string"
                }
              }
            },
            "ha": {
              "description": "HA options for High Availability support for the Redis component.",
              "type": "object",
              "required": [
                "enabled"
              ],
              "properties": {
                "enabled": {
                  "description": "Enabled will toggle HA support globally for Argo CD.",
                  "type": "boolean"
                },
                "redisProxyImage": {
                  "description": "RedisProxyImage is the Redis HAProxy container image.",
                  "type": "string"
                },
                "redisProxyVersion": {
                  "description": "RedisProxyVersion is the Redis HAProxy container image tag.",
                  "type": "string"
                }
              }
            },
            "helpChatText": {
              "description": "HelpChatText is the text for getting chat help, defaults to \"Chat now!\"",
              "type": "string"
            },
            "helpChatURL": {
              "description": "HelpChatURL is the URL for getting chat help, this will typically be your Slack channel for support.",
              "type": "string"
            },
            "image": {
              "description": "Image is the ArgoCD container image for all ArgoCD components.",
              "type": "string"
            },
            "import": {
              "description": "Import is the import/restore options for ArgoCD.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of an ArgoCDExport from which to import data.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace for the ArgoCDExport, defaults to the same namespace as the ArgoCD.",
                  "type": "string"
                }
              }
            },
            "initialRepositories": {
              "description": "InitialRepositories to configure Argo CD with upon creation of the cluster.",
              "type": "string"
            },
            "initialSSHKnownHosts": {
              "description": "InitialSSHKnownHosts defines the SSH known hosts data upon creation of the cluster for connecting Git repositories via SSH.",
              "type": "object",
              "properties": {
                "excludedefaulthosts": {
                  "description": "ExcludeDefaultHosts describes whether you would like to include the default list of SSH Known Hosts provided by ArgoCD.",
                  "type": "boolean"
                },
                "keys": {
                  "description": "Keys describes a custom set of SSH Known Hosts that you would like to have included in your ArgoCD server.",
                  "type": "string"
                }
              }
            },
            "kustomizeBuildOptions": {
              "description": "KustomizeBuildOptions is used to specify build options/parameters to use with `kustomize build`.",
              "type": "string"
            },
            "oidcConfig": {
              "description": "OIDCConfig is the OIDC configuration as an alternative to dex.",
              "type": "string"
            },
            "prometheus": {
              "description": "Prometheus defines the Prometheus server options for ArgoCD.",
              "type": "object",
              "required": [
                "enabled"
              ],
              "properties": {
                "enabled": {
                  "description": "Enabled will toggle Prometheus support globally for ArgoCD.",
                  "type": "boolean"
                },
                "host": {
                  "description": "Host is the hostname to use for Ingress/Route resources.",
                  "type": "string"
                },
                "ingress": {
                  "description": "Ingress defines the desired state for an Ingress for the Prometheus component.",
                  "type": "object",
                  "required": [
                    "enabled"
                  ],
                  "properties": {
                    "annotations": {
                      "description": "Annotations is the map of annotations to apply to the Ingress.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "enabled": {
                      "description": "Enabled will toggle the creation of the Ingress.",
                      "type": "boolean"
                    },
                    "path": {
                      "description": "Path used for the Ingress resource.",
                      "type": "string"
                    },
                    "tls": {
                      "description": "TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.",
                      "type": "array",
                      "items": {
                        "description": "IngressTLS describes the transport layer security associated with an Ingress.",
                        "type": "object",
                        "properties": {
                          "hosts": {
                            "description": "Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "secretName": {
                            "description": "SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \"Host\" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "route": {
                  "description": "Route defines the desired state for an OpenShift Route for the Prometheus component.",
                  "type": "object",
                  "required": [
                    "enabled"
                  ],
                  "properties": {
                    "annotations": {
                      "description": "Annotations is the map of annotations to use for the Route resource.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "enabled": {
                      "description": "Enabled will toggle the creation of the OpenShift Route.",
                      "type": "boolean"
                    },
                    "path": {
                      "description": "Path the router watches for, to route traffic for to the service.",
                      "type": "string"
                    },
                    "tls": {
                      "description": "TLS provides the ability to configure certificates and termination for the Route.",
                      "type": "object",
                      "required": [
                        "termination"
                      ],
                      "properties": {
                        "caCertificate": {
                          "description": "caCertificate provides the cert authority certificate contents",
                          "type": "string"
                        },
                        "certificate": {
                          "description": "certificate provides certificate contents",
                          "type": "string"
                        },
                        "destinationCACertificate": {
                          "description": "destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.",
                          "type": "string"
                        },
                        "insecureEdgeTerminationPolicy": {
                          "description": "insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80. \n * Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.",
                          "type": "string"
                        },
                        "key": {
                          "description": "key provides key file contents",
                          "type": "string"
                        },
                        "termination": {
                          "description": "termination indicates termination type.",
                          "type": "string"
                        }
                      }
                    },
                    "wildcardPolicy": {
                      "description": "WildcardPolicy if any for the route. Currently only 'Subdomain' or 'None' is allowed.",
                      "type": "string"
                    }
                  }
                },
                "size": {
                  "description": "Size is the replica count for the Prometheus StatefulSet.",
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "rbac": {
              "description": "RBAC defines the RBAC configuration for Argo CD.",
              "type": "object",
              "properties": {
                "defaultPolicy": {
                  "description": "DefaultPolicy is the name of the default role which Argo CD will falls back to, when authorizing API requests (optional). If omitted or empty, users may be still be able to login, but will see no apps, projects, etc...",
                  "type": "string"
                },
                "policy": {
                  "description": "Policy is CSV containing user-defined RBAC policies and role definitions. Policy rules are in the form:   p, subject, resource, action, object, effect Role definitions and bindings are in the form:   g, subject, inherited-subject See https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md for additional information.",
                  "type": "string"
                },
                "scopes": {
                  "description": "Scopes controls which OIDC scopes to examine during rbac enforcement (in addition to `sub` scope). If omitted, defaults to: '[groups]'.",
                  "type": "string"
                }
              }
            },
            "redis": {
              "description": "Redis defines the Redis server options for ArgoCD.",
              "type": "object",
              "properties": {
                "image": {
                  "description": "Image is the Redis container image.",
                  "type": "string"
                },
                "resources": {
                  "description": "Resources defines the Compute Resources required by the container for Redis.",
                  "type": "object",
                  "properties": {
                    "limits": {
                      "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                      "type": "object",
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      }
                    },
                    "requests": {
                      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                      "type": "object",
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      }
                    }
                  }
                },
                "version": {
                  "description": "Version is the Redis container image tag.",
                  "type": "string"
                }
              }
            },
            "repo": {
              "description": "Repo defines the repo server options for Argo CD.",
              "type": "object",
              "properties": {
                "mountsatoken": {
                  "description": "MountSAToken describes whether you would like to have the Repo server mount the service account token",
                  "type": "boolean"
                },
                "resources": {
                  "description": "Resources defines the Compute Resources required by the container for Redis.",
                  "type": "object",
                  "properties": {
                    "limits": {
                      "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                      "type": "object",
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      }
                    },
                    "requests": {
                      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                      "type": "object",
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      }
                    }
                  }
                },
                "serviceaccount": {
                  "description": "ServiceAccount defines the ServiceAccount user that you would like the Repo server to use",
                  "type": "string"
                }
              }
            },
            "repositoryCredentials": {
              "description": "RepositoryCredentials are the Git pull credentials to configure Argo CD with upon creation of the cluster.",
              "type": "string"
            },
            "resourceCustomizations": {
              "description": "ResourceCustomizations customizes resource behavior. Keys are in the form: group/Kind.",
              "type": "string"
            },
            "resourceExclusions": {
              "description": "ResourceExclusions is used to completely ignore entire classes of resource group/kinds.",
              "type": "string"
            },
            "resourceInclusions": {
              "description": "ResourceInclusions is used to only include specific group/kinds in the reconciliation process.",
              "type": "string"
            },
            "server": {
              "description": "Server defines the options for the ArgoCD Server component.",
              "type": "object",
              "properties": {
                "autoscale": {
                  "description": "Autoscale defines the autoscale options for the Argo CD Server component.",
                  "type": "object",
                  "required": [
                    "enabled"
                  ],
                  "properties": {
                    "enabled": {
                      "description": "Enabled will toggle autoscaling support for the Argo CD Server component.",
                      "type": "boolean"
                    },
                    "hpa": {
                      "description": "HPA defines the HorizontalPodAutoscaler options for the Argo CD Server component.",
                      "type": "object",
                      "required": [
                        "maxReplicas",
                        "scaleTargetRef"
                      ],
                      "properties": {
                        "maxReplicas": {
                          "description": "upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "minReplicas": {
                          "description": "minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "scaleTargetRef": {
                          "description": "reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.",
                          "type": "object",
                          "required": [
                            "kind",
                            "name"
                          ],
                          "properties": {
                            "apiVersion": {
                              "description": "API version of the referent",
                              "type": "string"
                            },
                            "kind": {
                              "description": "Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\"",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                              "type": "string"
                            }
                          }
                        },
                        "targetCPUUtilizationPercentage": {
                          "description": "target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.",
                          "type": "integer",
                          "format": "int32"
                        }
                      }
                    }
                  }
                },
                "grpc": {
                  "description": "GRPC defines the state for the Argo CD Server GRPC options.",
                  "type": "object",
                  "properties": {
                    "host": {
                      "description": "Host is the hostname to use for Ingress/Route resources.",
                      "type": "string"
                    },
                    "ingress": {
                      "description": "Ingress defines the desired state for the Argo CD Server GRPC Ingress.",
                      "type": "object",
                      "required": [
                        "enabled"
                      ],
                      "properties": {
                        "annotations": {
                          "description": "Annotations is the map of annotations to apply to the Ingress.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "enabled": {
                          "description": "Enabled will toggle the creation of the Ingress.",
                          "type": "boolean"
                        },
                        "path": {
                          "description": "Path used for the Ingress resource.",
                          "type": "string"
                        },
                        "tls": {
                          "description": "TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.",
                          "type": "array",
                          "items": {
                            "description": "IngressTLS describes the transport layer security associated with an Ingress.",
                            "type": "object",
                            "properties": {
                              "hosts": {
                                "description": "Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "secretName": {
                                "description": "SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \"Host\" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.",
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "host": {
                  "description": "Host is the hostname to use for Ingress/Route resources.",
                  "type": "string"
                },
                "ingress": {
                  "description": "Ingress defines the desired state for an Ingress for the Argo CD Server component.",
                  "type": "object",
                  "required": [
                    "enabled"
                  ],
                  "properties": {
                    "annotations": {
                      "description": "Annotations is the map of annotations to apply to the Ingress.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "enabled": {
                      "description": "Enabled will toggle the creation of the Ingress.",
                      "type": "boolean"
                    },
                    "path": {
                      "description": "Path used for the Ingress resource.",
                      "type": "string"
                    },
                    "tls": {
                      "description": "TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.",
                      "type": "array",
                      "items": {
                        "description": "IngressTLS describes the transport layer security associated with an Ingress.",
                        "type": "object",
                        "properties": {
                          "hosts": {
                            "description": "Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "secretName": {
                            "description": "SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \"Host\" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "insecure": {
                  "description": "Insecure toggles the insecure flag.",
                  "type": "boolean"
                },
                "resources": {
                  "description": "Resources defines the Compute Resources required by the container for the Argo CD server component.",
                  "type": "object",
                  "properties": {
                    "limits": {
                      "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                      "type": "object",
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      }
                    },
                    "requests": {
                      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                      "type": "object",
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      }
                    }
                  }
                },
                "route": {
                  "description": "Route defines the desired state for an OpenShift Route for the Argo CD Server component.",
                  "type": "object",
                  "required": [
                    "enabled"
                  ],
                  "properties": {
                    "annotations": {
                      "description": "Annotations is the map of annotations to use for the Route resource.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "enabled": {
                      "description": "Enabled will toggle the creation of the OpenShift Route.",
                      "type": "boolean"
                    },
                    "path": {
                      "description": "Path the router watches for, to route traffic for to the service.",
                      "type": "string"
                    },
                    "tls": {
                      "description": "TLS provides the ability to configure certificates and termination for the Route.",
                      "type": "object",
                      "required": [
                        "termination"
                      ],
                      "properties": {
                        "caCertificate": {
                          "description": "caCertificate provides the cert authority certificate contents",
                          "type": "string"
                        },
                        "certificate": {
                          "description": "certificate provides certificate contents",
                          "type": "string"
                        },
                        "destinationCACertificate": {
                          "description": "destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.",
                          "type": "string"
                        },
                        "insecureEdgeTerminationPolicy": {
                          "description": "insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80. \n * Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.",
                          "type": "string"
                        },
                        "key": {
                          "description": "key provides key file contents",
                          "type": "string"
                        },
                        "termination": {
                          "description": "termination indicates termination type.",
                          "type": "string"
                        }
                      }
                    },
                    "wildcardPolicy": {
                      "description": "WildcardPolicy if any for the route. Currently only 'Subdomain' or 'None' is allowed.",
                      "type": "string"
                    }
                  }
                },
                "service": {
                  "description": "Service defines the options for the Service backing the ArgoCD Server component.",
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "description": "Type is the ServiceType to use for the Service resource.",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "statusBadgeEnabled": {
              "description": "StatusBadgeEnabled toggles application status badge feature.",
              "type": "boolean"
            },
            "tls": {
              "description": "TLS defines the TLS options for ArgoCD.",
              "type": "object",
              "properties": {
                "ca": {
                  "description": "CA defines the CA options.",
                  "type": "object",
                  "properties": {
                    "configMapName": {
                      "description": "ConfigMapName is the name of the ConfigMap containing the CA Certificate.",
                      "type": "string"
                    },
                    "secretName": {
                      "description": "SecretName is the name of the Secret containing the CA Certificate and Key.",
                      "type": "string"
                    }
                  }
                },
                "initialCerts": {
                  "description": "InitialCerts defines custom TLS certificates upon creation of the cluster for connecting Git repositories via HTTPS.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "usersAnonymousEnabled": {
              "description": "UsersAnonymousEnabled toggles anonymous user access. The anonymous users get default role permissions specified argocd-rbac-cm.",
              "type": "boolean"
            },
            "version": {
              "description": "Version is the tag to use with the ArgoCD container image for all ArgoCD components.",
              "type": "string"
            }
          }
        },
        "status": {
          "description": "ArgoCDStatus defines the observed state of ArgoCD",
          "type": "object",
          "properties": {
            "applicationController": {
              "description": "ApplicationController is a simple, high-level summary of where the Argo CD application controller component is in its lifecycle. There are five possible ApplicationController values: Pending: The Argo CD application controller component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD application controller component are in a Ready state. Failed: At least one of the  Argo CD application controller component Pods had a failure. Unknown: For some reason the state of the Argo CD application controller component could not be obtained.",
              "type": "string"
            },
            "dex": {
              "description": "Dex is a simple, high-level summary of where the Argo CD Dex component is in its lifecycle. There are five possible dex values: Pending: The Argo CD Dex component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD Dex component are in a Ready state. Failed: At least one of the  Argo CD Dex component Pods had a failure. Unknown: For some reason the state of the Argo CD Dex component could not be obtained.",
              "type": "string"
            },
            "phase": {
              "description": "Phase is a simple, high-level summary of where the ArgoCD is in its lifecycle. There are five possible phase values: Pending: The ArgoCD has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Available: All of the resources for the ArgoCD are ready. Failed: At least one resource has experienced a failure. Unknown: For some reason the state of the ArgoCD phase could not be obtained.",
              "type": "string"
            },
            "redis": {
              "description": "Redis is a simple, high-level summary of where the Argo CD Redis component is in its lifecycle. There are five possible redis values: Pending: The Argo CD Redis component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD Redis component are in a Ready state. Failed: At least one of the  Argo CD Redis component Pods had a failure. Unknown: For some reason the state of the Argo CD Redis component could not be obtained.",
              "type": "string"
            },
            "repo": {
              "description": "Repo is a simple, high-level summary of where the Argo CD Repo component is in its lifecycle. There are five possible repo values: Pending: The Argo CD Repo component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD Repo component are in a Ready state. Failed: At least one of the  Argo CD Repo component Pods had a failure. Unknown: For some reason the state of the Argo CD Repo component could not be obtained.",
              "type": "string"
            },
            "server": {
              "description": "Server is a simple, high-level summary of where the Argo CD server component is in its lifecycle. There are five possible server values: Pending: The Argo CD server component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD server component are in a Ready state. Failed: At least one of the  Argo CD server component Pods had a failure. Unknown: For some reason the state of the Argo CD server component could not be obtained.",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "argoproj.io",
          "kind": "ArgoCD",
          "version": "v1alpha1"
        }
      ]
    },
    "io.argoproj.v1alpha1.ArgoCDExport": {
      "description": "ArgoCDExport is the Schema for the argocdexports API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "argoproj.io/v1alpha1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ArgoCDExport"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "ArgoCDExportSpec defines the desired state of ArgoCDExport",
          "type": "object",
          "required": [
            "argocd"
          ],
          "properties": {
            "argocd": {
              "description": "Argocd is the name of the ArgoCD instance to export.",
              "type": "string"
            },
            "image": {
              "description": "Image is the container image to use for the export Job.",
              "type": "string"
            },
            "schedule": {
              "description": "Schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.",
              "type": "string"
            },
            "storage": {
              "description": "Storage defines the storage configuration options.",
              "type": "object",
              "properties": {
                "backend": {
                  "description": "Backend defines the storage backend to use, must be \"local\" (the default), \"aws\", \"azure\" or \"gcp\".",
                  "type": "string"
                },
                "pvc": {
                  "description": "PVC is the desired characteristics for a PersistentVolumeClaim.",
                  "type": "object",
                  "properties": {
                    "accessModes": {
                      "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "dataSource": {
                      "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot - Beta) * An existing PVC (PersistentVolumeClaim) * An existing custom resource/object that implements data population (Alpha) In order to use VolumeSnapshot object types, the appropriate feature gate must be enabled (VolumeSnapshotDataSource or AnyVolumeDataSource) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the specified data source is not supported, the volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.",
                      "type": "object",
                      "required": [
                        "kind",
                        "name"
                      ],
                      "properties": {
                        "apiGroup": {
                          "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
                          "type": "string"
                        },
                        "kind": {
                          "description": "Kind is the type of resource being referenced",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name is the name of resource being referenced",
                          "type": "string"
                        }
                      }
                    },
                    "resources": {
                      "description": "Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                      "type": "object",
                      "properties": {
                        "limits": {
                          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                          "type": "object",
                          "additionalProperties": {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "x-kubernetes-int-or-string": true
                          }
                        },
                        "requests": {
                          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                          "type": "object",
                          "additionalProperties": {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      }
                    },
                    "selector": {
                      "description": "A label query over volumes to consider for binding.",
                      "type": "object",
                      "properties": {
                        "matchExpressions": {
                          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                          "type": "array",
                          "items": {
                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                            "type": "object",
                            "required": [
                              "key",
                              "operator"
                            ],
                            "properties": {
                              "key": {
                                "description": "key is the label key that the selector applies to.",
                                "type": "string"
                              },
                              "operator": {
                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                "type": "string"
                              },
                              "values": {
                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "matchLabels": {
                          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "storageClassName": {
                      "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
                      "type": "string"
                    },
                    "volumeMode": {
                      "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
                      "type": "string"
                    },
                    "volumeName": {
                      "description": "VolumeName is the binding reference to the PersistentVolume backing this claim.",
                      "type": "string"
                    }
                  }
                },
                "secretName": {
                  "description": "SecretName is the name of a Secret with encryption key, credentials, etc.",
                  "type": "string"
                }
              }
            },
            "version": {
              "description": "Version is the tag/digest to use for the export Job container image.",
              "type": "string"
            }
          }
        },
        "status": {
          "description": "ArgoCDExportStatus defines the observed state of ArgoCDExport",
          "type": "object",
          "required": [
            "phase"
          ],
          "properties": {
            "phase": {
              "description": "Phase is a simple, high-level summary of where the ArgoCDExport is in its lifecycle. There are five possible phase values: Pending: The ArgoCDExport has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the containers for the ArgoCDExport are still running, or in the process of starting or restarting. Succeeded: All containers for the ArgoCDExport have terminated in success, and will not be restarted. Failed: At least one container has terminated in failure, either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the ArgoCDExport could not be obtained.",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "argoproj.io",
          "kind": "ArgoCDExport",
          "version": "v1alpha1"
        }
      ]
    },
    "io.argoproj.v1alpha1.ArgoCDExportList": {
      "description": "ArgoCDExportList is a list of ArgoCDExport",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "argoproj.io/v1alpha1"
          ]
        },
        "items": {
          "description": "List of argocdexports. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.argoproj.v1alpha1.ArgoCDExport"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ArgoCDExportList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "argoproj.io",
          "kind": "ArgoCDExportList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.argoproj.v1alpha1.ArgoCDList": {
      "description": "ArgoCDList is a list of ArgoCD",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "argoproj.io/v1alpha1"
          ]
        },
        "items": {
          "description": "List of argocds. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.argoproj.v1alpha1.ArgoCD"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ArgoCDList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "argoproj.io",
          "kind": "ArgoCDList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.cncf.cni.k8s.v1.NetworkAttachmentDefinition": {
      "description": "NetworkAttachmentDefinition is a CRD schema specified by the Network Plumbing Working Group to express the intent for attaching pods to one or more logical or physical networks. More information available at: https://github.com/k8snetworkplumbingwg/multi-net-spec",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "k8s.cni.cncf.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "NetworkAttachmentDefinition"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "NetworkAttachmentDefinition spec defines the desired state of a network attachment",
          "type": "object",
          "properties": {
            "config": {
              "description": "NetworkAttachmentDefinition config is a JSON-formatted CNI configuration",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "k8s.cni.cncf.io",
          "kind": "NetworkAttachmentDefinition",
          "version": "v1"
        }
      ]
    },
    "io.cncf.cni.k8s.v1.NetworkAttachmentDefinitionList": {
      "description": "NetworkAttachmentDefinitionList is a list of NetworkAttachmentDefinition",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "k8s.cni.cncf.io/v1"
          ]
        },
        "items": {
          "description": "List of network-attachment-definitions. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.cncf.cni.k8s.v1.NetworkAttachmentDefinition"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "NetworkAttachmentDefinitionList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "k8s.cni.cncf.io",
          "kind": "NetworkAttachmentDefinitionList",
          "version": "v1"
        }
      ]
    },
    "io.cncf.cni.whereabouts.v1alpha1.IPPool": {
      "description": "IPPool is the Schema for Whereabouts for IP address allocation",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "whereabouts.cni.cncf.io/v1alpha1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "IPPool"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "IPPoolSpec defines the desired state of IPPool",
          "type": "object",
          "required": [
            "allocations",
            "range"
          ],
          "properties": {
            "allocations": {
              "description": "Allocations is the set of allocated IPs for the given range. Its indices are a direct mapping to the IP with the same index/offset for the pool's range.",
              "type": "object",
              "additionalProperties": {
                "description": "IPAllocation represents metadata about the pod/container owner of a specific IP",
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "string"
                  }
                }
              }
            },
            "range": {
              "description": "Range is a RFC 4632/4291-style string that represents an IP address and prefix length in CIDR notation",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "whereabouts.cni.cncf.io",
          "kind": "IPPool",
          "version": "v1alpha1"
        }
      ]
    },
    "io.cncf.cni.whereabouts.v1alpha1.IPPoolList": {
      "description": "IPPoolList is a list of IPPool",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "whereabouts.cni.cncf.io/v1alpha1"
          ]
        },
        "items": {
          "description": "List of ippools. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.cncf.cni.whereabouts.v1alpha1.IPPool"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "IPPoolList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "whereabouts.cni.cncf.io",
          "kind": "IPPoolList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.cncf.cni.whereabouts.v1alpha1.OverlappingRangeIPReservationList": {
      "description": "OverlappingRangeIPReservationList is a list of OverlappingRangeIPReservation",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "whereabouts.cni.cncf.io/v1alpha1"
          ]
        },
        "items": {
          "description": "List of overlappingrangeipreservations. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.cncf.cni.whereabouts.v1alpha1.OverlappingRangeIPReservation"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "OverlappingRangeIPReservationList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "whereabouts.cni.cncf.io",
          "kind": "OverlappingRangeIPReservationList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1.MutatingWebhook": {
      "description": "MutatingWebhook describes an admission webhook and the resources and operations it applies to.",
      "type": "object",
      "required": [
        "name",
        "clientConfig",
        "sideEffects",
        "admissionReviewVersions"
      ],
      "properties": {
        "admissionReviewVersions": {
          "description": "AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "clientConfig": {
          "description": "ClientConfig defines how to communicate with the hook. Required",
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.WebhookClientConfig"
        },
        "failurePolicy": {
          "description": "FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.",
          "type": "string"
        },
        "matchPolicy": {
          "description": "matchPolicy defines how the \"rules\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\".\n\n- Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.\n\n- Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.\n\nDefaults to \"Equivalent\"",
          "type": "string"
        },
        "name": {
          "description": "The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \"imagepolicy\" is the name of the webhook, and kubernetes.io is the name of the organization. Required.",
          "type": "string"
        },
        "namespaceSelector": {
          "description": "NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.\n\nFor example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\";  you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"runlevel\",\n      \"operator\": \"NotIn\",\n      \"values\": [\n        \"0\",\n        \"1\"\n      ]\n    }\n  ]\n}\n\nIf instead you want to only run the webhook on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"environment\",\n      \"operator\": \"In\",\n      \"values\": [\n        \"prod\",\n        \"staging\"\n      ]\n    }\n  ]\n}\n\nSee https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors.\n\nDefault to the empty LabelSelector, which matches everything.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "objectSelector": {
          "description": "ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "reinvocationPolicy": {
          "description": "reinvocationPolicy indicates whether this webhook should be called multiple times as part of a single admission evaluation. Allowed values are \"Never\" and \"IfNeeded\".\n\nNever: the webhook will not be called more than once in a single admission evaluation.\n\nIfNeeded: the webhook will be called at least one additional time as part of the admission evaluation if the object being admitted is modified by other admission plugins after the initial webhook call. Webhooks that specify this option *must* be idempotent, able to process objects they previously admitted. Note: * the number of additional invocations is not guaranteed to be exactly one. * if additional invocations result in further modifications to the object, webhooks are not guaranteed to be invoked again. * webhooks that use this option may be reordered to minimize the number of additional invocations. * to validate an object after all mutations are guaranteed complete, use a validating admission webhook instead.\n\nDefaults to \"Never\".",
          "type": "string"
        },
        "rules": {
          "description": "Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.RuleWithOperations"
          }
        },
        "sideEffects": {
          "description": "SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission change and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some.",
          "type": "string"
        },
        "timeoutSeconds": {
          "description": "TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration": {
      "description": "MutatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and may change the object.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "admissionregistration.k8s.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "MutatingWebhookConfiguration"
          ]
        },
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "webhooks": {
          "description": "Webhooks is a list of webhooks and the affected resources and operations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhook"
          },
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1.MutatingWebhookConfigurationList": {
      "description": "MutatingWebhookConfigurationList is a list of MutatingWebhookConfiguration.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "admissionregistration.k8s.io/v1"
          ]
        },
        "items": {
          "description": "List of MutatingWebhookConfiguration.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "MutatingWebhookConfigurationList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfigurationList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1.RuleWithOperations": {
      "description": "RuleWithOperations is a tuple of Operations and Resources. It is recommended to make sure that all the tuple expansions are valid.",
      "type": "object",
      "properties": {
        "apiGroups": {
          "description": "APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "apiVersions": {
          "description": "APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "operations": {
          "description": "Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resources": {
          "description": "Resources is a list of resources this rule applies to.\n\nFor example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.\n\nIf wildcard is present, the validation rule will ensure resources do not overlap with each other.\n\nDepending on the enclosing object, subresources might not be allowed. Required.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "scope": {
          "description": "scope specifies the scope of this rule. Valid values are \"Cluster\", \"Namespaced\", and \"*\" \"Cluster\" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. \"Namespaced\" means that only namespaced resources will match this rule. \"*\" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is \"*\".",
          "type": "string"
        }
      }
    },
    "io.k8s.api.admissionregistration.v1.ServiceReference": {
      "description": "ServiceReference holds a reference to Service.legacy.k8s.io",
      "type": "object",
      "required": [
        "namespace",
        "name"
      ],
      "properties": {
        "name": {
          "description": "`name` is the name of the service. Required",
          "type": "string"
        },
        "namespace": {
          "description": "`namespace` is the namespace of the service. Required",
          "type": "string"
        },
        "path": {
          "description": "`path` is an optional URL path which will be sent in any request to this service.",
          "type": "string"
        },
        "port": {
          "description": "If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.api.admissionregistration.v1.ValidatingWebhook": {
      "description": "ValidatingWebhook describes an admission webhook and the resources and operations it applies to.",
      "type": "object",
      "required": [
        "name",
        "clientConfig",
        "sideEffects",
        "admissionReviewVersions"
      ],
      "properties": {
        "admissionReviewVersions": {
          "description": "AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "clientConfig": {
          "description": "ClientConfig defines how to communicate with the hook. Required",
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.WebhookClientConfig"
        },
        "failurePolicy": {
          "description": "FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.",
          "type": "string"
        },
        "matchPolicy": {
          "description": "matchPolicy defines how the \"rules\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\".\n\n- Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.\n\n- Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.\n\nDefaults to \"Equivalent\"",
          "type": "string"
        },
        "name": {
          "description": "The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \"imagepolicy\" is the name of the webhook, and kubernetes.io is the name of the organization. Required.",
          "type": "string"
        },
        "namespaceSelector": {
          "description": "NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.\n\nFor example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\";  you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"runlevel\",\n      \"operator\": \"NotIn\",\n      \"values\": [\n        \"0\",\n        \"1\"\n      ]\n    }\n  ]\n}\n\nIf instead you want to only run the webhook on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"environment\",\n      \"operator\": \"In\",\n      \"values\": [\n        \"prod\",\n        \"staging\"\n      ]\n    }\n  ]\n}\n\nSee https://kubernetes.io/docs/concepts/overview/working-with-objects/labels for more examples of label selectors.\n\nDefault to the empty LabelSelector, which matches everything.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "objectSelector": {
          "description": "ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "rules": {
          "description": "Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.RuleWithOperations"
          }
        },
        "sideEffects": {
          "description": "SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission change and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some.",
          "type": "string"
        },
        "timeoutSeconds": {
          "description": "TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration": {
      "description": "ValidatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and object without changing it.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "admissionregistration.k8s.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ValidatingWebhookConfiguration"
          ]
        },
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "webhooks": {
          "description": "Webhooks is a list of webhooks and the affected resources and operations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhook"
          },
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1.ValidatingWebhookConfigurationList": {
      "description": "ValidatingWebhookConfigurationList is a list of ValidatingWebhookConfiguration.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "admissionregistration.k8s.io/v1"
          ]
        },
        "items": {
          "description": "List of ValidatingWebhookConfiguration.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ValidatingWebhookConfigurationList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfigurationList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1.WebhookClientConfig": {
      "description": "WebhookClientConfig contains the information to make a TLS connection with the webhook",
      "type": "object",
      "properties": {
        "caBundle": {
          "description": "`caBundle` is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.",
          "type": "string",
          "format": "byte"
        },
        "service": {
          "description": "`service` is a reference to the service for this webhook. Either `service` or `url` must be specified.\n\nIf the webhook is running within the cluster, then you should use `service`.",
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ServiceReference"
        },
        "url": {
          "description": "`url` gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.\n\nThe `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.\n\nPlease note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.\n\nThe scheme must be \"https\"; the URL must begin with \"https://\".\n\nA path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.\n\nAttempting to use a user or basic auth e.g. \"user:password@\" is not allowed. Fragments (\"#...\") and query parameters (\"?...\") are not allowed, either.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.admissionregistration.v1beta1.MutatingWebhook": {
      "description": "MutatingWebhook describes an admission webhook and the resources and operations it applies to.",
      "type": "object",
      "required": [
        "name",
        "clientConfig"
      ],
      "properties": {
        "admissionReviewVersions": {
          "description": "AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy. Default to `['v1beta1']`.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "clientConfig": {
          "description": "ClientConfig defines how to communicate with the hook. Required",
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.WebhookClientConfig"
        },
        "failurePolicy": {
          "description": "FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Ignore.",
          "type": "string"
        },
        "matchPolicy": {
          "description": "matchPolicy defines how the \"rules\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\".\n\n- Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.\n\n- Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.\n\nDefaults to \"Exact\"",
          "type": "string"
        },
        "name": {
          "description": "The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \"imagepolicy\" is the name of the webhook, and kubernetes.io is the name of the organization. Required.",
          "type": "string"
        },
        "namespaceSelector": {
          "description": "NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.\n\nFor example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\";  you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"runlevel\",\n      \"operator\": \"NotIn\",\n      \"values\": [\n        \"0\",\n        \"1\"\n      ]\n    }\n  ]\n}\n\nIf instead you want to only run the webhook on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"environment\",\n      \"operator\": \"In\",\n      \"values\": [\n        \"prod\",\n        \"staging\"\n      ]\n    }\n  ]\n}\n\nSee https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors.\n\nDefault to the empty LabelSelector, which matches everything.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "objectSelector": {
          "description": "ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "reinvocationPolicy": {
          "description": "reinvocationPolicy indicates whether this webhook should be called multiple times as part of a single admission evaluation. Allowed values are \"Never\" and \"IfNeeded\".\n\nNever: the webhook will not be called more than once in a single admission evaluation.\n\nIfNeeded: the webhook will be called at least one additional time as part of the admission evaluation if the object being admitted is modified by other admission plugins after the initial webhook call. Webhooks that specify this option *must* be idempotent, able to process objects they previously admitted. Note: * the number of additional invocations is not guaranteed to be exactly one. * if additional invocations result in further modifications to the object, webhooks are not guaranteed to be invoked again. * webhooks that use this option may be reordered to minimize the number of additional invocations. * to validate an object after all mutations are guaranteed complete, use a validating admission webhook instead.\n\nDefaults to \"Never\".",
          "type": "string"
        },
        "rules": {
          "description": "Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.RuleWithOperations"
          }
        },
        "sideEffects": {
          "description": "SideEffects states whether this webhook has side effects. Acceptable values are: Unknown, None, Some, NoneOnDryRun Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission change and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some. Defaults to Unknown.",
          "type": "string"
        },
        "timeoutSeconds": {
          "description": "TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 30 seconds.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration": {
      "description": "MutatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and may change the object. Deprecated in v1.16, planned for removal in v1.19. Use admissionregistration.k8s.io/v1 MutatingWebhookConfiguration instead.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "admissionregistration.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "MutatingWebhookConfiguration"
          ]
        },
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "webhooks": {
          "description": "Webhooks is a list of webhooks and the affected resources and operations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhook"
          },
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfigurationList": {
      "description": "MutatingWebhookConfigurationList is a list of MutatingWebhookConfiguration.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "admissionregistration.k8s.io/v1beta1"
          ]
        },
        "items": {
          "description": "List of MutatingWebhookConfiguration.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "MutatingWebhookConfigurationList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfigurationList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1beta1.RuleWithOperations": {
      "description": "RuleWithOperations is a tuple of Operations and Resources. It is recommended to make sure that all the tuple expansions are valid.",
      "type": "object",
      "properties": {
        "apiGroups": {
          "description": "APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "apiVersions": {
          "description": "APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "operations": {
          "description": "Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resources": {
          "description": "Resources is a list of resources this rule applies to.\n\nFor example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.\n\nIf wildcard is present, the validation rule will ensure resources do not overlap with each other.\n\nDepending on the enclosing object, subresources might not be allowed. Required.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "scope": {
          "description": "scope specifies the scope of this rule. Valid values are \"Cluster\", \"Namespaced\", and \"*\" \"Cluster\" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. \"Namespaced\" means that only namespaced resources will match this rule. \"*\" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is \"*\".",
          "type": "string"
        }
      }
    },
    "io.k8s.api.admissionregistration.v1beta1.ServiceReference": {
      "description": "ServiceReference holds a reference to Service.legacy.k8s.io",
      "type": "object",
      "required": [
        "namespace",
        "name"
      ],
      "properties": {
        "name": {
          "description": "`name` is the name of the service. Required",
          "type": "string"
        },
        "namespace": {
          "description": "`namespace` is the namespace of the service. Required",
          "type": "string"
        },
        "path": {
          "description": "`path` is an optional URL path which will be sent in any request to this service.",
          "type": "string"
        },
        "port": {
          "description": "If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.api.admissionregistration.v1beta1.ValidatingWebhook": {
      "description": "ValidatingWebhook describes an admission webhook and the resources and operations it applies to.",
      "type": "object",
      "required": [
        "name",
        "clientConfig"
      ],
      "properties": {
        "admissionReviewVersions": {
          "description": "AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy. Default to `['v1beta1']`.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "clientConfig": {
          "description": "ClientConfig defines how to communicate with the hook. Required",
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.WebhookClientConfig"
        },
        "failurePolicy": {
          "description": "FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Ignore.",
          "type": "string"
        },
        "matchPolicy": {
          "description": "matchPolicy defines how the \"rules\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\".\n\n- Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.\n\n- Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.\n\nDefaults to \"Exact\"",
          "type": "string"
        },
        "name": {
          "description": "The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \"imagepolicy\" is the name of the webhook, and kubernetes.io is the name of the organization. Required.",
          "type": "string"
        },
        "namespaceSelector": {
          "description": "NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.\n\nFor example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\";  you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"runlevel\",\n      \"operator\": \"NotIn\",\n      \"values\": [\n        \"0\",\n        \"1\"\n      ]\n    }\n  ]\n}\n\nIf instead you want to only run the webhook on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"environment\",\n      \"operator\": \"In\",\n      \"values\": [\n        \"prod\",\n        \"staging\"\n      ]\n    }\n  ]\n}\n\nSee https://kubernetes.io/docs/concepts/overview/working-with-objects/labels for more examples of label selectors.\n\nDefault to the empty LabelSelector, which matches everything.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "objectSelector": {
          "description": "ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "rules": {
          "description": "Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.RuleWithOperations"
          }
        },
        "sideEffects": {
          "description": "SideEffects states whether this webhook has side effects. Acceptable values are: Unknown, None, Some, NoneOnDryRun Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission change and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some. Defaults to Unknown.",
          "type": "string"
        },
        "timeoutSeconds": {
          "description": "TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 30 seconds.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration": {
      "description": "ValidatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and object without changing it. Deprecated in v1.16, planned for removal in v1.19. Use admissionregistration.k8s.io/v1 ValidatingWebhookConfiguration instead.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "admissionregistration.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ValidatingWebhookConfiguration"
          ]
        },
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "webhooks": {
          "description": "Webhooks is a list of webhooks and the affected resources and operations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhook"
          },
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfigurationList": {
      "description": "ValidatingWebhookConfigurationList is a list of ValidatingWebhookConfiguration.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "admissionregistration.k8s.io/v1beta1"
          ]
        },
        "items": {
          "description": "List of ValidatingWebhookConfiguration.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ValidatingWebhookConfigurationList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfigurationList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1beta1.WebhookClientConfig": {
      "description": "WebhookClientConfig contains the information to make a TLS connection with the webhook",
      "type": "object",
      "properties": {
        "caBundle": {
          "description": "`caBundle` is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.",
          "type": "string",
          "format": "byte"
        },
        "service": {
          "description": "`service` is a reference to the service for this webhook. Either `service` or `url` must be specified.\n\nIf the webhook is running within the cluster, then you should use `service`.",
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ServiceReference"
        },
        "url": {
          "description": "`url` gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.\n\nThe `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.\n\nPlease note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.\n\nThe scheme must be \"https\"; the URL must begin with \"https://\".\n\nA path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.\n\nAttempting to use a user or basic auth e.g. \"user:password@\" is not allowed. Fragments (\"#...\") and query parameters (\"?...\") are not allowed, either.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.apps.v1.ControllerRevision": {
      "description": "ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.",
      "type": "object",
      "required": [
        "revision"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1"
          ]
        },
        "data": {
          "description": "Data is the serialized representation of the state.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ControllerRevision"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "revision": {
          "description": "Revision indicates the revision of the state represented by Data.",
          "type": "integer",
          "format": "int64"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "ControllerRevision",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.ControllerRevisionList": {
      "description": "ControllerRevisionList is a resource containing a list of ControllerRevision objects.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1"
          ]
        },
        "items": {
          "description": "Items is the list of ControllerRevisions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevision"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ControllerRevisionList"
          ]
        },
        "metadata": {
          "description": "More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "ControllerRevisionList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.DaemonSet": {
      "description": "DaemonSet represents the configuration of a daemon set.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "DaemonSet"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "The desired behavior of this daemon set. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetSpec"
        },
        "status": {
          "description": "The current status of this daemon set. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "DaemonSet",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.DaemonSetCondition": {
      "description": "DaemonSetCondition describes the state of a DaemonSet at a certain point.",
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of DaemonSet condition.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.apps.v1.DaemonSetList": {
      "description": "DaemonSetList is a collection of daemon sets.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1"
          ]
        },
        "items": {
          "description": "A list of daemon sets.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "DaemonSetList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "DaemonSetList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.DaemonSetSpec": {
      "description": "DaemonSetSpec is the specification of a daemon set.",
      "type": "object",
      "required": [
        "selector",
        "template"
      ],
      "properties": {
        "minReadySeconds": {
          "description": "The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).",
          "type": "integer",
          "format": "int32"
        },
        "revisionHistoryLimit": {
          "description": "The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.",
          "type": "integer",
          "format": "int32"
        },
        "selector": {
          "description": "A label query over pods that are managed by the daemon set. Must match in order to be controlled. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "template": {
          "description": "An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        },
        "updateStrategy": {
          "description": "An update strategy to replace existing DaemonSet pods with new pods.",
          "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetUpdateStrategy"
        }
      }
    },
    "io.k8s.api.apps.v1.DaemonSetStatus": {
      "description": "DaemonSetStatus represents the current status of a daemon set.",
      "type": "object",
      "required": [
        "currentNumberScheduled",
        "numberMisscheduled",
        "desiredNumberScheduled",
        "numberReady"
      ],
      "properties": {
        "collisionCount": {
          "description": "Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.",
          "type": "integer",
          "format": "int32"
        },
        "conditions": {
          "description": "Represents the latest available observations of a DaemonSet's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "currentNumberScheduled": {
          "description": "The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
          "type": "integer",
          "format": "int32"
        },
        "desiredNumberScheduled": {
          "description": "The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
          "type": "integer",
          "format": "int32"
        },
        "numberAvailable": {
          "description": "The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)",
          "type": "integer",
          "format": "int32"
        },
        "numberMisscheduled": {
          "description": "The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
          "type": "integer",
          "format": "int32"
        },
        "numberReady": {
          "description": "The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.",
          "type": "integer",
          "format": "int32"
        },
        "numberUnavailable": {
          "description": "The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)",
          "type": "integer",
          "format": "int32"
        },
        "observedGeneration": {
          "description": "The most recent generation observed by the daemon set controller.",
          "type": "integer",
          "format": "int64"
        },
        "updatedNumberScheduled": {
          "description": "The total number of nodes that are running updated daemon pod",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.api.apps.v1.DaemonSetUpdateStrategy": {
      "description": "DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.",
      "type": "object",
      "properties": {
        "rollingUpdate": {
          "description": "Rolling update config params. Present only if type = \"RollingUpdate\".",
          "$ref": "#/definitions/io.k8s.api.apps.v1.RollingUpdateDaemonSet"
        },
        "type": {
          "description": "Type of daemon set update. Can be \"RollingUpdate\" or \"OnDelete\". Default is RollingUpdate.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.apps.v1.Deployment": {
      "description": "Deployment enables declarative updates for Pods and ReplicaSets.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Deployment"
          ]
        },
        "metadata": {
          "description": "Standard object metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of the Deployment.",
          "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentSpec"
        },
        "status": {
          "description": "Most recently observed status of the Deployment.",
          "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "Deployment",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.DeploymentCondition": {
      "description": "DeploymentCondition describes the state of a deployment at a certain point.",
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "lastUpdateTime": {
          "description": "The last time this condition was updated.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of deployment condition.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.apps.v1.DeploymentList": {
      "description": "DeploymentList is a list of Deployments.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1"
          ]
        },
        "items": {
          "description": "Items is the list of Deployments.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.Deployment"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "DeploymentList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "DeploymentList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.DeploymentSpec": {
      "description": "DeploymentSpec is the specification of the desired behavior of the Deployment.",
      "type": "object",
      "required": [
        "selector",
        "template"
      ],
      "properties": {
        "minReadySeconds": {
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
          "type": "integer",
          "format": "int32"
        },
        "paused": {
          "description": "Indicates that the deployment is paused.",
          "type": "boolean"
        },
        "progressDeadlineSeconds": {
          "description": "The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.",
          "type": "integer",
          "format": "int32"
        },
        "revisionHistoryLimit": {
          "description": "The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.",
          "type": "integer",
          "format": "int32"
        },
        "selector": {
          "description": "Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment. It must match the pod template's labels.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "strategy": {
          "description": "The deployment strategy to use to replace existing pods with new ones.",
          "x-kubernetes-patch-strategy": "retainKeys",
          "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentStrategy"
        },
        "template": {
          "description": "Template describes the pods that will be created.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        }
      }
    },
    "io.k8s.api.apps.v1.DeploymentStatus": {
      "description": "DeploymentStatus is the most recently observed status of the Deployment.",
      "type": "object",
      "properties": {
        "availableReplicas": {
          "description": "Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.",
          "type": "integer",
          "format": "int32"
        },
        "collisionCount": {
          "description": "Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.",
          "type": "integer",
          "format": "int32"
        },
        "conditions": {
          "description": "Represents the latest available observations of a deployment's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "The generation observed by the deployment controller.",
          "type": "integer",
          "format": "int64"
        },
        "readyReplicas": {
          "description": "Total number of ready pods targeted by this deployment.",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "Total number of non-terminated pods targeted by this deployment (their labels match the selector).",
          "type": "integer",
          "format": "int32"
        },
        "unavailableReplicas": {
          "description": "Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.",
          "type": "integer",
          "format": "int32"
        },
        "updatedReplicas": {
          "description": "Total number of non-terminated pods targeted by this deployment that have the desired template spec.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.api.apps.v1.DeploymentStrategy": {
      "description": "DeploymentStrategy describes how to replace existing pods with new ones.",
      "type": "object",
      "properties": {
        "rollingUpdate": {
          "description": "Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.",
          "$ref": "#/definitions/io.k8s.api.apps.v1.RollingUpdateDeployment"
        },
        "type": {
          "description": "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.apps.v1.ReplicaSet": {
      "description": "ReplicaSet ensures that a specified number of pod replicas are running at any given time.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ReplicaSet"
          ]
        },
        "metadata": {
          "description": "If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the specification of the desired behavior of the ReplicaSet. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSetSpec"
        },
        "status": {
          "description": "Status is the most recently observed status of the ReplicaSet. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSetStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "ReplicaSet",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.ReplicaSetCondition": {
      "description": "ReplicaSetCondition describes the state of a replica set at a certain point.",
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "The last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of replica set condition.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.apps.v1.ReplicaSetList": {
      "description": "ReplicaSetList is a collection of ReplicaSets.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1"
          ]
        },
        "items": {
          "description": "List of ReplicaSets. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ReplicaSetList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "ReplicaSetList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.ReplicaSetSpec": {
      "description": "ReplicaSetSpec is the specification of a ReplicaSet.",
      "type": "object",
      "required": [
        "selector"
      ],
      "properties": {
        "minReadySeconds": {
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller",
          "type": "integer",
          "format": "int32"
        },
        "selector": {
          "description": "Selector is a label query over pods that should match the replica count. Label keys and values that must match in order to be controlled by this replica set. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "template": {
          "description": "Template is the object that describes the pod that will be created if insufficient replicas are detected. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        }
      }
    },
    "io.k8s.api.apps.v1.ReplicaSetStatus": {
      "description": "ReplicaSetStatus represents the current status of a ReplicaSet.",
      "type": "object",
      "required": [
        "replicas"
      ],
      "properties": {
        "availableReplicas": {
          "description": "The number of available replicas (ready for at least minReadySeconds) for this replica set.",
          "type": "integer",
          "format": "int32"
        },
        "conditions": {
          "description": "Represents the latest available observations of a replica set's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSetCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "fullyLabeledReplicas": {
          "description": "The number of pods that have labels matching the labels of the pod template of the replicaset.",
          "type": "integer",
          "format": "int32"
        },
        "observedGeneration": {
          "description": "ObservedGeneration reflects the generation of the most recently observed ReplicaSet.",
          "type": "integer",
          "format": "int64"
        },
        "readyReplicas": {
          "description": "The number of ready replicas for this replica set.",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.api.apps.v1.RollingUpdateDaemonSet": {
      "description": "Spec to control the desired behavior of daemon set rolling update.",
      "type": "object",
      "properties": {
        "maxUnavailable": {
          "description": "The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        }
      }
    },
    "io.k8s.api.apps.v1.RollingUpdateDeployment": {
      "description": "Spec to control the desired behavior of rolling update.",
      "type": "object",
      "properties": {
        "maxSurge": {
          "description": "The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        },
        "maxUnavailable": {
          "description": "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        }
      }
    },
    "io.k8s.api.apps.v1.RollingUpdateStatefulSetStrategy": {
      "description": "RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.",
      "type": "object",
      "properties": {
        "partition": {
          "description": "Partition indicates the ordinal at which the StatefulSet should be partitioned. Default value is 0.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.api.apps.v1.StatefulSet": {
      "description": "StatefulSet represents a set of pods with consistent identities. Identities are defined as:\n - Network: A single stable DNS and hostname.\n - Storage: As many VolumeClaims as requested.\nThe StatefulSet guarantees that a given network identity will always map to the same storage identity.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "StatefulSet"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the desired identities of pods in this set.",
          "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetSpec"
        },
        "status": {
          "description": "Status is the current status of Pods in this StatefulSet. This data may be out of date by some window of time.",
          "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "StatefulSet",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.StatefulSetCondition": {
      "description": "StatefulSetCondition describes the state of a statefulset at a certain point.",
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of statefulset condition.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.apps.v1.StatefulSetList": {
      "description": "StatefulSetList is a collection of StatefulSets.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1"
          ]
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "StatefulSetList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "StatefulSetList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.StatefulSetSpec": {
      "description": "A StatefulSetSpec is the specification of a StatefulSet.",
      "type": "object",
      "required": [
        "selector",
        "template",
        "serviceName"
      ],
      "properties": {
        "podManagementPolicy": {
          "description": "podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.",
          "type": "string"
        },
        "replicas": {
          "description": "replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.",
          "type": "integer",
          "format": "int32"
        },
        "revisionHistoryLimit": {
          "description": "revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.",
          "type": "integer",
          "format": "int32"
        },
        "selector": {
          "description": "selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "serviceName": {
          "description": "serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where \"pod-specific-string\" is managed by the StatefulSet controller.",
          "type": "string"
        },
        "template": {
          "description": "template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        },
        "updateStrategy": {
          "description": "updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.",
          "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetUpdateStrategy"
        },
        "volumeClaimTemplates": {
          "description": "volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
          }
        }
      }
    },
    "io.k8s.api.apps.v1.StatefulSetStatus": {
      "description": "StatefulSetStatus represents the current state of a StatefulSet.",
      "type": "object",
      "required": [
        "replicas"
      ],
      "properties": {
        "collisionCount": {
          "description": "collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.",
          "type": "integer",
          "format": "int32"
        },
        "conditions": {
          "description": "Represents the latest available observations of a statefulset's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "currentReplicas": {
          "description": "currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.",
          "type": "integer",
          "format": "int32"
        },
        "currentRevision": {
          "description": "currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).",
          "type": "string"
        },
        "observedGeneration": {
          "description": "observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.",
          "type": "integer",
          "format": "int64"
        },
        "readyReplicas": {
          "description": "readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "replicas is the number of Pods created by the StatefulSet controller.",
          "type": "integer",
          "format": "int32"
        },
        "updateRevision": {
          "description": "updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)",
          "type": "string"
        },
        "updatedReplicas": {
          "description": "updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.api.apps.v1.StatefulSetUpdateStrategy": {
      "description": "StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.",
      "type": "object",
      "properties": {
        "rollingUpdate": {
          "description": "RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.",
          "$ref": "#/definitions/io.k8s.api.apps.v1.RollingUpdateStatefulSetStrategy"
        },
        "type": {
          "description": "Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.authentication.v1.BoundObjectReference": {
      "description": "BoundObjectReference is a reference to an object that a token is bound to.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the referent. Valid kinds are 'Pod' and 'Secret'.",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent.",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.authentication.v1.TokenRequest": {
      "description": "TokenRequest requests a token for a given service account.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "authentication.k8s.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "TokenRequest"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenRequestSpec"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenRequestStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "authentication.k8s.io",
          "kind": "TokenRequest",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.authentication.v1.TokenRequestSpec": {
      "description": "TokenRequestSpec contains client provided parameters of a token request.",
      "type": "object",
      "required": [
        "audiences"
      ],
      "properties": {
        "audiences": {
          "description": "Audiences are the intendend audiences of the token. A recipient of a token must identitfy themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "boundObjectRef": {
          "description": "BoundObjectRef is a reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. NOTE: The API server's TokenReview endpoint will validate the BoundObjectRef, but other audiences may not. Keep ExpirationSeconds small if you want prompt revocation.",
          "$ref": "#/definitions/io.k8s.api.authentication.v1.BoundObjectReference"
        },
        "expirationSeconds": {
          "description": "ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "io.k8s.api.authentication.v1.TokenRequestStatus": {
      "description": "TokenRequestStatus is the result of a token request.",
      "type": "object",
      "required": [
        "token",
        "expirationTimestamp"
      ],
      "properties": {
        "expirationTimestamp": {
          "description": "ExpirationTimestamp is the time of expiration of the returned token.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "token": {
          "description": "Token is the opaque bearer token.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.authentication.v1.TokenReview": {
      "description": "TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "authentication.k8s.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "TokenReview"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds information about the request being evaluated",
          "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenReviewSpec"
        },
        "status": {
          "description": "Status is filled in by the server and indicates whether the request can be authenticated.",
          "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenReviewStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "authentication.k8s.io",
          "kind": "TokenReview",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.authentication.v1.TokenReviewSpec": {
      "description": "TokenReviewSpec is a description of the token authentication request.",
      "type": "object",
      "properties": {
        "audiences": {
          "description": "Audiences is a list of the identifiers that the resource server presented with the token identifies as. Audience-aware token authenticators will verify that the token was intended for at least one of the audiences in this list. If no audiences are provided, the audience will default to the audience of the Kubernetes apiserver.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "token": {
          "description": "Token is the opaque bearer token.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.authentication.v1.TokenReviewStatus": {
      "description": "TokenReviewStatus is the result of the token authentication request.",
      "type": "object",
      "properties": {
        "audiences": {
          "description": "Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is \"true\", the token is valid against the audience of the Kubernetes API server.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "authenticated": {
          "description": "Authenticated indicates that the token was associated with a known user.",
          "type": "boolean"
        },
        "error": {
          "description": "Error indicates that the token couldn't be checked",
          "type": "string"
        },
        "user": {
          "description": "User is the UserInfo associated with the provided token.",
          "$ref": "#/definitions/io.k8s.api.authentication.v1.UserInfo"
        }
      }
    },
    "io.k8s.api.authentication.v1.UserInfo": {
      "description": "UserInfo holds the information about the user needed to implement the user.Info interface.",
      "type": "object",
      "properties": {
        "extra": {
          "description": "Any additional information provided by the authenticator.",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "groups": {
          "description": "The names of groups this user is a part of.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "uid": {
          "description": "A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.",
          "type": "string"
        },
        "username": {
          "description": "The name that uniquely identifies this user among all active users.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.authentication.v1beta1.TokenReview": {
      "description": "TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "authentication.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "TokenReview"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds information about the request being evaluated",
          "$ref": "#/definitions/io.k8s.api.authentication.v1beta1.TokenReviewSpec"
        },
        "status": {
          "description": "Status is filled in by the server and indicates whether the request can be authenticated.",
          "$ref": "#/definitions/io.k8s.api.authentication.v1beta1.TokenReviewStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "authentication.k8s.io",
          "kind": "TokenReview",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.authentication.v1beta1.TokenReviewSpec": {
      "description": "TokenReviewSpec is a description of the token authentication request.",
      "type": "object",
      "properties": {
        "audiences": {
          "description": "Audiences is a list of the identifiers that the resource server presented with the token identifies as. Audience-aware token authenticators will verify that the token was intended for at least one of the audiences in this list. If no audiences are provided, the audience will default to the audience of the Kubernetes apiserver.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "token": {
          "description": "Token is the opaque bearer token.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.authentication.v1beta1.TokenReviewStatus": {
      "description": "TokenReviewStatus is the result of the token authentication request.",
      "type": "object",
      "properties": {
        "audiences": {
          "description": "Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is \"true\", the token is valid against the audience of the Kubernetes API server.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "authenticated": {
          "description": "Authenticated indicates that the token was associated with a known user.",
          "type": "boolean"
        },
        "error": {
          "description": "Error indicates that the token couldn't be checked",
          "type": "string"
        },
        "user": {
          "description": "User is the UserInfo associated with the provided token.",
          "$ref": "#/definitions/io.k8s.api.authentication.v1beta1.UserInfo"
        }
      }
    },
    "io.k8s.api.authentication.v1beta1.UserInfo": {
      "description": "UserInfo holds the information about the user needed to implement the user.Info interface.",
      "type": "object",
      "properties": {
        "extra": {
          "description": "Any additional information provided by the authenticator.",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "groups": {
          "description": "The names of groups this user is a part of.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "uid": {
          "description": "A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.",
          "type": "string"
        },
        "username": {
          "description": "The name that uniquely identifies this user among all active users.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.authorization.v1.LocalSubjectAccessReview": {
      "description": "LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "authorization.k8s.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "LocalSubjectAccessReview"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds information about the request being evaluated.  spec.namespace must be equal to the namespace you made the request against.  If empty, it is defaulted.",
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewSpec"
        },
        "status": {
          "description": "Status is filled in by the server and indicates whether the request is allowed or not",
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "LocalSubjectAccessReview",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.authorization.v1.NonResourceAttributes": {
      "description": "NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface",
      "type": "object",
      "properties": {
        "path": {
          "description": "Path is the URL path of the request",
          "type": "string"
        },
        "verb": {
          "description": "Verb is the standard HTTP verb",
          "type": "string"
        }
      }
    },
    "io.k8s.api.authorization.v1.NonResourceRule": {
      "description": "NonResourceRule holds information that describes a rule for the non-resource",
      "type": "object",
      "required": [
        "verbs"
      ],
      "properties": {
        "nonResourceURLs": {
          "description": "NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path.  \"*\" means all.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "verbs": {
          "description": "Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options.  \"*\" means all.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "io.k8s.api.authorization.v1.ResourceAttributes": {
      "description": "ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface",
      "type": "object",
      "properties": {
        "group": {
          "description": "Group is the API Group of the Resource.  \"*\" means all.",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview",
          "type": "string"
        },
        "resource": {
          "description": "Resource is one of the existing resource types.  \"*\" means all.",
          "type": "string"
        },
        "subresource": {
          "description": "Subresource is one of the existing resource types.  \"\" means none.",
          "type": "string"
        },
        "verb": {
          "description": "Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.",
          "type": "string"
        },
        "version": {
          "description": "Version is the API Version of the Resource.  \"*\" means all.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.authorization.v1.ResourceRule": {
      "description": "ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.",
      "type": "object",
      "required": [
        "verbs"
      ],
      "properties": {
        "apiGroups": {
          "description": "APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.  \"*\" means all.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resourceNames": {
          "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  \"*\" means all.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resources": {
          "description": "Resources is a list of resources this rule applies to.  \"*\" means all in the specified apiGroups.\n \"*/foo\" represents the subresource 'foo' for all resources in the specified apiGroups.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "verbs": {
          "description": "Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "io.k8s.api.authorization.v1.SelfSubjectAccessReview": {
      "description": "SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means \"in all namespaces\".  Self is a special case, because users should always be able to check whether they can perform an action",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "authorization.k8s.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "SelfSubjectAccessReview"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds information about the request being evaluated.  user and groups must be empty",
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectAccessReviewSpec"
        },
        "status": {
          "description": "Status is filled in by the server and indicates whether the request is allowed or not",
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "SelfSubjectAccessReview",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.authorization.v1.SelfSubjectAccessReviewSpec": {
      "description": "SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set",
      "type": "object",
      "properties": {
        "nonResourceAttributes": {
          "description": "NonResourceAttributes describes information for a non-resource access request",
          "$ref": "#/definitions/io.k8s.api.authorization.v1.NonResourceAttributes"
        },
        "resourceAttributes": {
          "description": "ResourceAuthorizationAttributes describes information for a resource access request",
          "$ref": "#/definitions/io.k8s.api.authorization.v1.ResourceAttributes"
        }
      }
    },
    "io.k8s.api.authorization.v1.SelfSubjectRulesReview": {
      "description": "SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "authorization.k8s.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "SelfSubjectRulesReview"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds information about the request being evaluated.",
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectRulesReviewSpec"
        },
        "status": {
          "description": "Status is filled in by the server and indicates the set of actions a user can perform.",
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectRulesReviewStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "SelfSubjectRulesReview",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.authorization.v1.SelfSubjectRulesReviewSpec": {
      "type": "object",
      "properties": {
        "namespace": {
          "description": "Namespace to evaluate rules for. Required.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.authorization.v1.SubjectAccessReview": {
      "description": "SubjectAccessReview checks whether or not a user or group can perform an action.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "authorization.k8s.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "SubjectAccessReview"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds information about the request being evaluated",
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewSpec"
        },
        "status": {
          "description": "Status is filled in by the server and indicates whether the request is allowed or not",
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "SubjectAccessReview",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.authorization.v1.SubjectAccessReviewSpec": {
      "description": "SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set",
      "type": "object",
      "properties": {
        "extra": {
          "description": "Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "groups": {
          "description": "Groups is the groups you're testing for.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nonResourceAttributes": {
          "description": "NonResourceAttributes describes information for a non-resource access request",
          "$ref": "#/definitions/io.k8s.api.authorization.v1.NonResourceAttributes"
        },
        "resourceAttributes": {
          "description": "ResourceAuthorizationAttributes describes information for a resource access request",
          "$ref": "#/definitions/io.k8s.api.authorization.v1.ResourceAttributes"
        },
        "uid": {
          "description": "UID information about the requesting user.",
          "type": "string"
        },
        "user": {
          "description": "User is the user you're testing for. If you specify \"User\" but not \"Groups\", then is it interpreted as \"What if User were not a member of any groups",
          "type": "string"
        }
      }
    },
    "io.k8s.api.authorization.v1.SubjectAccessReviewStatus": {
      "description": "SubjectAccessReviewStatus",
      "type": "object",
      "required": [
        "allowed"
      ],
      "properties": {
        "allowed": {
          "description": "Allowed is required. True if the action would be allowed, false otherwise.",
          "type": "boolean"
        },
        "denied": {
          "description": "Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.",
          "type": "boolean"
        },
        "evaluationError": {
          "description": "EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.",
          "type": "string"
        },
        "reason": {
          "description": "Reason is optional.  It indicates why a request was allowed or denied.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.authorization.v1.SubjectRulesReviewStatus": {
      "description": "SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.",
      "type": "object",
      "required": [
        "resourceRules",
        "nonResourceRules",
        "incomplete"
      ],
      "properties": {
        "evaluationError": {
          "description": "EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.",
          "type": "string"
        },
        "incomplete": {
          "description": "Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.",
          "type": "boolean"
        },
        "nonResourceRules": {
          "description": "NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.authorization.v1.NonResourceRule"
          }
        },
        "resourceRules": {
          "description": "ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.authorization.v1.ResourceRule"
          }
        }
      }
    },
    "io.k8s.api.authorization.v1beta1.LocalSubjectAccessReview": {
      "description": "LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "authorization.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "LocalSubjectAccessReview"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds information about the request being evaluated.  spec.namespace must be equal to the namespace you made the request against.  If empty, it is defaulted.",
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SubjectAccessReviewSpec"
        },
        "status": {
          "description": "Status is filled in by the server and indicates whether the request is allowed or not",
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SubjectAccessReviewStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "LocalSubjectAccessReview",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.authorization.v1beta1.NonResourceAttributes": {
      "description": "NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface",
      "type": "object",
      "properties": {
        "path": {
          "description": "Path is the URL path of the request",
          "type": "string"
        },
        "verb": {
          "description": "Verb is the standard HTTP verb",
          "type": "string"
        }
      }
    },
    "io.k8s.api.authorization.v1beta1.NonResourceRule": {
      "description": "NonResourceRule holds information that describes a rule for the non-resource",
      "type": "object",
      "required": [
        "verbs"
      ],
      "properties": {
        "nonResourceURLs": {
          "description": "NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path.  \"*\" means all.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "verbs": {
          "description": "Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options.  \"*\" means all.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "io.k8s.api.authorization.v1beta1.ResourceAttributes": {
      "description": "ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface",
      "type": "object",
      "properties": {
        "group": {
          "description": "Group is the API Group of the Resource.  \"*\" means all.",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview",
          "type": "string"
        },
        "resource": {
          "description": "Resource is one of the existing resource types.  \"*\" means all.",
          "type": "string"
        },
        "subresource": {
          "description": "Subresource is one of the existing resource types.  \"\" means none.",
          "type": "string"
        },
        "verb": {
          "description": "Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.",
          "type": "string"
        },
        "version": {
          "description": "Version is the API Version of the Resource.  \"*\" means all.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.authorization.v1beta1.ResourceRule": {
      "description": "ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.",
      "type": "object",
      "required": [
        "verbs"
      ],
      "properties": {
        "apiGroups": {
          "description": "APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.  \"*\" means all.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resourceNames": {
          "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  \"*\" means all.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resources": {
          "description": "Resources is a list of resources this rule applies to.  \"*\" means all in the specified apiGroups.\n \"*/foo\" represents the subresource 'foo' for all resources in the specified apiGroups.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "verbs": {
          "description": "Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "io.k8s.api.authorization.v1beta1.SelfSubjectAccessReview": {
      "description": "SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means \"in all namespaces\".  Self is a special case, because users should always be able to check whether they can perform an action",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "authorization.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "SelfSubjectAccessReview"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds information about the request being evaluated.  user and groups must be empty",
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SelfSubjectAccessReviewSpec"
        },
        "status": {
          "description": "Status is filled in by the server and indicates whether the request is allowed or not",
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SubjectAccessReviewStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "SelfSubjectAccessReview",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.authorization.v1beta1.SelfSubjectAccessReviewSpec": {
      "description": "SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set",
      "type": "object",
      "properties": {
        "nonResourceAttributes": {
          "description": "NonResourceAttributes describes information for a non-resource access request",
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.NonResourceAttributes"
        },
        "resourceAttributes": {
          "description": "ResourceAuthorizationAttributes describes information for a resource access request",
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.ResourceAttributes"
        }
      }
    },
    "io.k8s.api.authorization.v1beta1.SelfSubjectRulesReview": {
      "description": "SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "authorization.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "SelfSubjectRulesReview"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds information about the request being evaluated.",
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SelfSubjectRulesReviewSpec"
        },
        "status": {
          "description": "Status is filled in by the server and indicates the set of actions a user can perform.",
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SubjectRulesReviewStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "SelfSubjectRulesReview",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.authorization.v1beta1.SelfSubjectRulesReviewSpec": {
      "type": "object",
      "properties": {
        "namespace": {
          "description": "Namespace to evaluate rules for. Required.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.authorization.v1beta1.SubjectAccessReview": {
      "description": "SubjectAccessReview checks whether or not a user or group can perform an action.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "authorization.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "SubjectAccessReview"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds information about the request being evaluated",
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SubjectAccessReviewSpec"
        },
        "status": {
          "description": "Status is filled in by the server and indicates whether the request is allowed or not",
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SubjectAccessReviewStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "SubjectAccessReview",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.authorization.v1beta1.SubjectAccessReviewSpec": {
      "description": "SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set",
      "type": "object",
      "properties": {
        "extra": {
          "description": "Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "group": {
          "description": "Groups is the groups you're testing for.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nonResourceAttributes": {
          "description": "NonResourceAttributes describes information for a non-resource access request",
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.NonResourceAttributes"
        },
        "resourceAttributes": {
          "description": "ResourceAuthorizationAttributes describes information for a resource access request",
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.ResourceAttributes"
        },
        "uid": {
          "description": "UID information about the requesting user.",
          "type": "string"
        },
        "user": {
          "description": "User is the user you're testing for. If you specify \"User\" but not \"Group\", then is it interpreted as \"What if User were not a member of any groups",
          "type": "string"
        }
      }
    },
    "io.k8s.api.authorization.v1beta1.SubjectAccessReviewStatus": {
      "description": "SubjectAccessReviewStatus",
      "type": "object",
      "required": [
        "allowed"
      ],
      "properties": {
        "allowed": {
          "description": "Allowed is required. True if the action would be allowed, false otherwise.",
          "type": "boolean"
        },
        "denied": {
          "description": "Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.",
          "type": "boolean"
        },
        "evaluationError": {
          "description": "EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.",
          "type": "string"
        },
        "reason": {
          "description": "Reason is optional.  It indicates why a request was allowed or denied.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.authorization.v1beta1.SubjectRulesReviewStatus": {
      "description": "SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.",
      "type": "object",
      "required": [
        "resourceRules",
        "nonResourceRules",
        "incomplete"
      ],
      "properties": {
        "evaluationError": {
          "description": "EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.",
          "type": "string"
        },
        "incomplete": {
          "description": "Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.",
          "type": "boolean"
        },
        "nonResourceRules": {
          "description": "NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.NonResourceRule"
          }
        },
        "resourceRules": {
          "description": "ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.ResourceRule"
          }
        }
      }
    },
    "io.k8s.api.autoscaling.v1.CrossVersionObjectReference": {
      "description": "CrossVersionObjectReference contains enough information to let you identify the referred resource.",
      "type": "object",
      "required": [
        "kind",
        "name"
      ],
      "properties": {
        "apiVersion": {
          "description": "API version of the referent",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\"",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler": {
      "description": "configuration of a horizontal pod autoscaler.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "autoscaling/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "HorizontalPodAutoscaler"
          ]
        },
        "metadata": {
          "description": "Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "behaviour of autoscaler. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerSpec"
        },
        "status": {
          "description": "current information about the autoscaler.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerList": {
      "description": "list of horizontal pod autoscaler objects.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "autoscaling/v1"
          ]
        },
        "items": {
          "description": "list of horizontal pod autoscaler objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "HorizontalPodAutoscalerList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscalerList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerSpec": {
      "description": "specification of a horizontal pod autoscaler.",
      "type": "object",
      "required": [
        "scaleTargetRef",
        "maxReplicas"
      ],
      "properties": {
        "maxReplicas": {
          "description": "upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.",
          "type": "integer",
          "format": "int32"
        },
        "minReplicas": {
          "description": "minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.",
          "type": "integer",
          "format": "int32"
        },
        "scaleTargetRef": {
          "description": "reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.CrossVersionObjectReference"
        },
        "targetCPUUtilizationPercentage": {
          "description": "target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerStatus": {
      "description": "current status of a horizontal pod autoscaler",
      "type": "object",
      "required": [
        "currentReplicas",
        "desiredReplicas"
      ],
      "properties": {
        "currentCPUUtilizationPercentage": {
          "description": "current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.",
          "type": "integer",
          "format": "int32"
        },
        "currentReplicas": {
          "description": "current number of replicas of pods managed by this autoscaler.",
          "type": "integer",
          "format": "int32"
        },
        "desiredReplicas": {
          "description": "desired number of replicas of pods managed by this autoscaler.",
          "type": "integer",
          "format": "int32"
        },
        "lastScaleTime": {
          "description": "last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "observedGeneration": {
          "description": "most recent generation observed by this autoscaler.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "io.k8s.api.autoscaling.v1.Scale": {
      "description": "Scale represents a scaling request for a resource.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "autoscaling/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Scale"
          ]
        },
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.ScaleSpec"
        },
        "status": {
          "description": "current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.ScaleStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "Scale",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.autoscaling.v1.ScaleSpec": {
      "description": "ScaleSpec describes the attributes of a scale subresource.",
      "type": "object",
      "properties": {
        "replicas": {
          "description": "desired number of instances for the scaled object.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.api.autoscaling.v1.ScaleStatus": {
      "description": "ScaleStatus represents the current status of a scale subresource.",
      "type": "object",
      "required": [
        "replicas"
      ],
      "properties": {
        "replicas": {
          "description": "actual number of observed instances of the scaled object.",
          "type": "integer",
          "format": "int32"
        },
        "selector": {
          "description": "label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors",
          "type": "string"
        }
      }
    },
    "io.k8s.api.autoscaling.v2beta1.CrossVersionObjectReference": {
      "description": "CrossVersionObjectReference contains enough information to let you identify the referred resource.",
      "type": "object",
      "required": [
        "kind",
        "name"
      ],
      "properties": {
        "apiVersion": {
          "description": "API version of the referent",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\"",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "io.k8s.api.autoscaling.v2beta1.ExternalMetricSource": {
      "description": "ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster). Exactly one \"target\" type should be set.",
      "type": "object",
      "required": [
        "metricName"
      ],
      "properties": {
        "metricName": {
          "description": "metricName is the name of the metric in question.",
          "type": "string"
        },
        "metricSelector": {
          "description": "metricSelector is used to identify a specific time series within a given metric.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "targetAverageValue": {
          "description": "targetAverageValue is the target per-pod value of global metric (as a quantity). Mutually exclusive with TargetValue.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        },
        "targetValue": {
          "description": "targetValue is the target value of the metric (as a quantity). Mutually exclusive with TargetAverageValue.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }
      }
    },
    "io.k8s.api.autoscaling.v2beta1.ExternalMetricStatus": {
      "description": "ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object.",
      "type": "object",
      "required": [
        "metricName",
        "currentValue"
      ],
      "properties": {
        "currentAverageValue": {
          "description": "currentAverageValue is the current value of metric averaged over autoscaled pods.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        },
        "currentValue": {
          "description": "currentValue is the current value of the metric (as a quantity)",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        },
        "metricName": {
          "description": "metricName is the name of a metric used for autoscaling in metric system.",
          "type": "string"
        },
        "metricSelector": {
          "description": "metricSelector is used to identify a specific time series within a given metric.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }
      }
    },
    "io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler": {
      "description": "HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "autoscaling/v2beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "HorizontalPodAutoscaler"
          ]
        },
        "metadata": {
          "description": "metadata is the standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is the specification for the behaviour of the autoscaler. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerSpec"
        },
        "status": {
          "description": "status is the current information about the autoscaler.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta1"
        }
      ]
    },
    "io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerCondition": {
      "description": "HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point.",
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "lastTransitionTime is the last time the condition transitioned from one status to another",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "message is a human-readable explanation containing details about the transition",
          "type": "string"
        },
        "reason": {
          "description": "reason is the reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "status is the status of the condition (True, False, Unknown)",
          "type": "string"
        },
        "type": {
          "description": "type describes the current condition",
          "type": "string"
        }
      }
    },
    "io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerList": {
      "description": "HorizontalPodAutoscaler is a list of horizontal pod autoscaler objects.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "autoscaling/v2beta1"
          ]
        },
        "items": {
          "description": "items is the list of horizontal pod autoscaler objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "HorizontalPodAutoscalerList"
          ]
        },
        "metadata": {
          "description": "metadata is the standard list metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscalerList",
          "version": "v2beta1"
        }
      ]
    },
    "io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerSpec": {
      "description": "HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.",
      "type": "object",
      "required": [
        "scaleTargetRef",
        "maxReplicas"
      ],
      "properties": {
        "maxReplicas": {
          "description": "maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.",
          "type": "integer",
          "format": "int32"
        },
        "metrics": {
          "description": "metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).  The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the individual metric source types for more information about how each type of metric must respond.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.MetricSpec"
          }
        },
        "minReplicas": {
          "description": "minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.",
          "type": "integer",
          "format": "int32"
        },
        "scaleTargetRef": {
          "description": "scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics should be collected, as well as to actually change the replica count.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.CrossVersionObjectReference"
        }
      }
    },
    "io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerStatus": {
      "description": "HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.",
      "type": "object",
      "required": [
        "currentReplicas",
        "desiredReplicas",
        "conditions"
      ],
      "properties": {
        "conditions": {
          "description": "conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerCondition"
          }
        },
        "currentMetrics": {
          "description": "currentMetrics is the last read state of the metrics used by this autoscaler.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.MetricStatus"
          }
        },
        "currentReplicas": {
          "description": "currentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by the autoscaler.",
          "type": "integer",
          "format": "int32"
        },
        "desiredReplicas": {
          "description": "desiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last calculated by the autoscaler.",
          "type": "integer",
          "format": "int32"
        },
        "lastScaleTime": {
          "description": "lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods, used by the autoscaler to control how often the number of pods is changed.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "observedGeneration": {
          "description": "observedGeneration is the most recent generation observed by this autoscaler.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "io.k8s.api.autoscaling.v2beta1.MetricSpec": {
      "description": "MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).",
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "external": {
          "description": "external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.ExternalMetricSource"
        },
        "object": {
          "description": "object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.ObjectMetricSource"
        },
        "pods": {
          "description": "pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.PodsMetricSource"
        },
        "resource": {
          "description": "resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.ResourceMetricSource"
        },
        "type": {
          "description": "type is the type of metric source.  It should be one of \"Object\", \"Pods\" or \"Resource\", each mapping to a matching field in the object.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.autoscaling.v2beta1.MetricStatus": {
      "description": "MetricStatus describes the last-read state of a single metric.",
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "external": {
          "description": "external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.ExternalMetricStatus"
        },
        "object": {
          "description": "object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.ObjectMetricStatus"
        },
        "pods": {
          "description": "pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.PodsMetricStatus"
        },
        "resource": {
          "description": "resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.ResourceMetricStatus"
        },
        "type": {
          "description": "type is the type of metric source.  It will be one of \"Object\", \"Pods\" or \"Resource\", each corresponds to a matching field in the object.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.autoscaling.v2beta1.ObjectMetricSource": {
      "description": "ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).",
      "type": "object",
      "required": [
        "target",
        "metricName",
        "targetValue"
      ],
      "properties": {
        "averageValue": {
          "description": "averageValue is the target value of the average of the metric across all relevant pods (as a quantity)",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        },
        "metricName": {
          "description": "metricName is the name of the metric in question.",
          "type": "string"
        },
        "selector": {
          "description": "selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping When unset, just the metricName will be used to gather metrics.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "target": {
          "description": "target is the described Kubernetes object.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.CrossVersionObjectReference"
        },
        "targetValue": {
          "description": "targetValue is the target value of the metric (as a quantity).",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }
      }
    },
    "io.k8s.api.autoscaling.v2beta1.ObjectMetricStatus": {
      "description": "ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).",
      "type": "object",
      "required": [
        "target",
        "metricName",
        "currentValue"
      ],
      "properties": {
        "averageValue": {
          "description": "averageValue is the current value of the average of the metric across all relevant pods (as a quantity)",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        },
        "currentValue": {
          "description": "currentValue is the current value of the metric (as a quantity).",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        },
        "metricName": {
          "description": "metricName is the name of the metric in question.",
          "type": "string"
        },
        "selector": {
          "description": "selector is the string-encoded form of a standard kubernetes label selector for the given metric When set in the ObjectMetricSource, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "target": {
          "description": "target is the described Kubernetes object.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.CrossVersionObjectReference"
        }
      }
    },
    "io.k8s.api.autoscaling.v2beta1.PodsMetricSource": {
      "description": "PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.",
      "type": "object",
      "required": [
        "metricName",
        "targetAverageValue"
      ],
      "properties": {
        "metricName": {
          "description": "metricName is the name of the metric in question",
          "type": "string"
        },
        "selector": {
          "description": "selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping When unset, just the metricName will be used to gather metrics.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "targetAverageValue": {
          "description": "targetAverageValue is the target value of the average of the metric across all relevant pods (as a quantity)",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }
      }
    },
    "io.k8s.api.autoscaling.v2beta1.PodsMetricStatus": {
      "description": "PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).",
      "type": "object",
      "required": [
        "metricName",
        "currentAverageValue"
      ],
      "properties": {
        "currentAverageValue": {
          "description": "currentAverageValue is the current value of the average of the metric across all relevant pods (as a quantity)",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        },
        "metricName": {
          "description": "metricName is the name of the metric in question",
          "type": "string"
        },
        "selector": {
          "description": "selector is the string-encoded form of a standard kubernetes label selector for the given metric When set in the PodsMetricSource, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }
      }
    },
    "io.k8s.api.autoscaling.v2beta1.ResourceMetricSource": {
      "description": "ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.  Only one \"target\" type should be set.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "name is the name of the resource in question.",
          "type": "string"
        },
        "targetAverageUtilization": {
          "description": "targetAverageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.",
          "type": "integer",
          "format": "int32"
        },
        "targetAverageValue": {
          "description": "targetAverageValue is the target value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the \"pods\" metric source type.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }
      }
    },
    "io.k8s.api.autoscaling.v2beta1.ResourceMetricStatus": {
      "description": "ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.",
      "type": "object",
      "required": [
        "name",
        "currentAverageValue"
      ],
      "properties": {
        "currentAverageUtilization": {
          "description": "currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.  It will only be present if `targetAverageValue` was set in the corresponding metric specification.",
          "type": "integer",
          "format": "int32"
        },
        "currentAverageValue": {
          "description": "currentAverageValue is the current value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the \"pods\" metric source type. It will always be set, regardless of the corresponding metric specification.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        },
        "name": {
          "description": "name is the name of the resource in question.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.autoscaling.v2beta2.CrossVersionObjectReference": {
      "description": "CrossVersionObjectReference contains enough information to let you identify the referred resource.",
      "type": "object",
      "required": [
        "kind",
        "name"
      ],
      "properties": {
        "apiVersion": {
          "description": "API version of the referent",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\"",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "io.k8s.api.autoscaling.v2beta2.ExternalMetricSource": {
      "description": "ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).",
      "type": "object",
      "required": [
        "metric",
        "target"
      ],
      "properties": {
        "metric": {
          "description": "metric identifies the target metric by name and selector",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricIdentifier"
        },
        "target": {
          "description": "target specifies the target value for the given metric",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricTarget"
        }
      }
    },
    "io.k8s.api.autoscaling.v2beta2.ExternalMetricStatus": {
      "description": "ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object.",
      "type": "object",
      "required": [
        "metric",
        "current"
      ],
      "properties": {
        "current": {
          "description": "current contains the current value for the given metric",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricValueStatus"
        },
        "metric": {
          "description": "metric identifies the target metric by name and selector",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricIdentifier"
        }
      }
    },
    "io.k8s.api.autoscaling.v2beta2.HPAScalingPolicy": {
      "description": "HPAScalingPolicy is a single policy which must hold true for a specified past interval.",
      "type": "object",
      "required": [
        "type",
        "value",
        "periodSeconds"
      ],
      "properties": {
        "periodSeconds": {
          "description": "PeriodSeconds specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).",
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "description": "Type is used to specify the scaling policy.",
          "type": "string"
        },
        "value": {
          "description": "Value contains the amount of change which is permitted by the policy. It must be greater than zero",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.api.autoscaling.v2beta2.HPAScalingRules": {
      "description": "HPAScalingRules configures the scaling behavior for one direction. These Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen.",
      "type": "object",
      "properties": {
        "policies": {
          "description": "policies is a list of potential scaling polices which can be used during scaling. At least one policy must be specified, otherwise the HPAScalingRules will be discarded as invalid",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HPAScalingPolicy"
          }
        },
        "selectPolicy": {
          "description": "selectPolicy is used to specify which policy should be used. If not set, the default value MaxPolicySelect is used.",
          "type": "string"
        },
        "stabilizationWindowSeconds": {
          "description": "StabilizationWindowSeconds is the number of seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler": {
      "description": "HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "autoscaling/v2beta2"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "HorizontalPodAutoscaler"
          ]
        },
        "metadata": {
          "description": "metadata is the standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is the specification for the behaviour of the autoscaler. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerSpec"
        },
        "status": {
          "description": "status is the current information about the autoscaler.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta2"
        }
      ]
    },
    "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerBehavior": {
      "description": "HorizontalPodAutoscalerBehavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively).",
      "type": "object",
      "properties": {
        "scaleDown": {
          "description": "scaleDown is scaling policy for scaling Down. If not set, the default value is to allow to scale down to minReplicas pods, with a 300 second stabilization window (i.e., the highest recommendation for the last 300sec is used).",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HPAScalingRules"
        },
        "scaleUp": {
          "description": "scaleUp is scaling policy for scaling Up. If not set, the default value is the higher of:\n  * increase no more than 4 pods per 60 seconds\n  * double the number of pods per 60 seconds\nNo stabilization is used.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HPAScalingRules"
        }
      }
    },
    "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerCondition": {
      "description": "HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point.",
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "lastTransitionTime is the last time the condition transitioned from one status to another",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "message is a human-readable explanation containing details about the transition",
          "type": "string"
        },
        "reason": {
          "description": "reason is the reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "status is the status of the condition (True, False, Unknown)",
          "type": "string"
        },
        "type": {
          "description": "type describes the current condition",
          "type": "string"
        }
      }
    },
    "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerList": {
      "description": "HorizontalPodAutoscalerList is a list of horizontal pod autoscaler objects.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "autoscaling/v2beta2"
          ]
        },
        "items": {
          "description": "items is the list of horizontal pod autoscaler objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "HorizontalPodAutoscalerList"
          ]
        },
        "metadata": {
          "description": "metadata is the standard list metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscalerList",
          "version": "v2beta2"
        }
      ]
    },
    "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerSpec": {
      "description": "HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.",
      "type": "object",
      "required": [
        "scaleTargetRef",
        "maxReplicas"
      ],
      "properties": {
        "behavior": {
          "description": "behavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively). If not set, the default HPAScalingRules for scale up and scale down are used.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerBehavior"
        },
        "maxReplicas": {
          "description": "maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.",
          "type": "integer",
          "format": "int32"
        },
        "metrics": {
          "description": "metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).  The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the individual metric source types for more information about how each type of metric must respond. If not set, the default metric will be set to 80% average CPU utilization.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricSpec"
          }
        },
        "minReplicas": {
          "description": "minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.",
          "type": "integer",
          "format": "int32"
        },
        "scaleTargetRef": {
          "description": "scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics should be collected, as well as to actually change the replica count.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.CrossVersionObjectReference"
        }
      }
    },
    "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerStatus": {
      "description": "HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.",
      "type": "object",
      "required": [
        "currentReplicas",
        "desiredReplicas",
        "conditions"
      ],
      "properties": {
        "conditions": {
          "description": "conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerCondition"
          }
        },
        "currentMetrics": {
          "description": "currentMetrics is the last read state of the metrics used by this autoscaler.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricStatus"
          }
        },
        "currentReplicas": {
          "description": "currentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by the autoscaler.",
          "type": "integer",
          "format": "int32"
        },
        "desiredReplicas": {
          "description": "desiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last calculated by the autoscaler.",
          "type": "integer",
          "format": "int32"
        },
        "lastScaleTime": {
          "description": "lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods, used by the autoscaler to control how often the number of pods is changed.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "observedGeneration": {
          "description": "observedGeneration is the most recent generation observed by this autoscaler.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "io.k8s.api.autoscaling.v2beta2.MetricIdentifier": {
      "description": "MetricIdentifier defines the name and optionally selector for a metric",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "name is the name of the given metric",
          "type": "string"
        },
        "selector": {
          "description": "selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }
      }
    },
    "io.k8s.api.autoscaling.v2beta2.MetricSpec": {
      "description": "MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).",
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "external": {
          "description": "external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.ExternalMetricSource"
        },
        "object": {
          "description": "object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.ObjectMetricSource"
        },
        "pods": {
          "description": "pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.PodsMetricSource"
        },
        "resource": {
          "description": "resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.ResourceMetricSource"
        },
        "type": {
          "description": "type is the type of metric source.  It should be one of \"Object\", \"Pods\" or \"Resource\", each mapping to a matching field in the object.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.autoscaling.v2beta2.MetricStatus": {
      "description": "MetricStatus describes the last-read state of a single metric.",
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "external": {
          "description": "external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.ExternalMetricStatus"
        },
        "object": {
          "description": "object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.ObjectMetricStatus"
        },
        "pods": {
          "description": "pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.PodsMetricStatus"
        },
        "resource": {
          "description": "resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.ResourceMetricStatus"
        },
        "type": {
          "description": "type is the type of metric source.  It will be one of \"Object\", \"Pods\" or \"Resource\", each corresponds to a matching field in the object.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.autoscaling.v2beta2.MetricTarget": {
      "description": "MetricTarget defines the target value, average value, or average utilization of a specific metric",
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "averageUtilization": {
          "description": "averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type",
          "type": "integer",
          "format": "int32"
        },
        "averageValue": {
          "description": "averageValue is the target value of the average of the metric across all relevant pods (as a quantity)",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        },
        "type": {
          "description": "type represents whether the metric type is Utilization, Value, or AverageValue",
          "type": "string"
        },
        "value": {
          "description": "value is the target value of the metric (as a quantity).",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }
      }
    },
    "io.k8s.api.autoscaling.v2beta2.MetricValueStatus": {
      "description": "MetricValueStatus holds the current value for a metric",
      "type": "object",
      "properties": {
        "averageUtilization": {
          "description": "currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.",
          "type": "integer",
          "format": "int32"
        },
        "averageValue": {
          "description": "averageValue is the current value of the average of the metric across all relevant pods (as a quantity)",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        },
        "value": {
          "description": "value is the current value of the metric (as a quantity).",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }
      }
    },
    "io.k8s.api.autoscaling.v2beta2.ObjectMetricSource": {
      "description": "ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).",
      "type": "object",
      "required": [
        "describedObject",
        "target",
        "metric"
      ],
      "properties": {
        "describedObject": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.CrossVersionObjectReference"
        },
        "metric": {
          "description": "metric identifies the target metric by name and selector",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricIdentifier"
        },
        "target": {
          "description": "target specifies the target value for the given metric",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricTarget"
        }
      }
    },
    "io.k8s.api.autoscaling.v2beta2.ObjectMetricStatus": {
      "description": "ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).",
      "type": "object",
      "required": [
        "metric",
        "current",
        "describedObject"
      ],
      "properties": {
        "current": {
          "description": "current contains the current value for the given metric",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricValueStatus"
        },
        "describedObject": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.CrossVersionObjectReference"
        },
        "metric": {
          "description": "metric identifies the target metric by name and selector",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricIdentifier"
        }
      }
    },
    "io.k8s.api.autoscaling.v2beta2.PodsMetricSource": {
      "description": "PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.",
      "type": "object",
      "required": [
        "metric",
        "target"
      ],
      "properties": {
        "metric": {
          "description": "metric identifies the target metric by name and selector",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricIdentifier"
        },
        "target": {
          "description": "target specifies the target value for the given metric",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricTarget"
        }
      }
    },
    "io.k8s.api.autoscaling.v2beta2.PodsMetricStatus": {
      "description": "PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).",
      "type": "object",
      "required": [
        "metric",
        "current"
      ],
      "properties": {
        "current": {
          "description": "current contains the current value for the given metric",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricValueStatus"
        },
        "metric": {
          "description": "metric identifies the target metric by name and selector",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricIdentifier"
        }
      }
    },
    "io.k8s.api.autoscaling.v2beta2.ResourceMetricSource": {
      "description": "ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.  Only one \"target\" type should be set.",
      "type": "object",
      "required": [
        "name",
        "target"
      ],
      "properties": {
        "name": {
          "description": "name is the name of the resource in question.",
          "type": "string"
        },
        "target": {
          "description": "target specifies the target value for the given metric",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricTarget"
        }
      }
    },
    "io.k8s.api.autoscaling.v2beta2.ResourceMetricStatus": {
      "description": "ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.",
      "type": "object",
      "required": [
        "name",
        "current"
      ],
      "properties": {
        "current": {
          "description": "current contains the current value for the given metric",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricValueStatus"
        },
        "name": {
          "description": "Name is the name of the resource in question.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.batch.v1.Job": {
      "description": "Job represents the configuration of a single job.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "batch/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Job"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.batch.v1.JobSpec"
        },
        "status": {
          "description": "Current status of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.batch.v1.JobStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.batch.v1.JobCondition": {
      "description": "JobCondition describes current state of a job.",
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastProbeTime": {
          "description": "Last time the condition was checked.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "lastTransitionTime": {
          "description": "Last time the condition transit from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "Human readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "(brief) reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of job condition, Complete or Failed.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.batch.v1.JobList": {
      "description": "JobList is a collection of jobs.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "batch/v1"
          ]
        },
        "items": {
          "description": "items is the list of Jobs.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.batch.v1.Job"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "JobList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "batch",
          "kind": "JobList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.batch.v1.JobSpec": {
      "description": "JobSpec describes how the job execution will look like.",
      "type": "object",
      "required": [
        "template"
      ],
      "properties": {
        "activeDeadlineSeconds": {
          "description": "Specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer",
          "type": "integer",
          "format": "int64"
        },
        "backoffLimit": {
          "description": "Specifies the number of retries before marking this job failed. Defaults to 6",
          "type": "integer",
          "format": "int32"
        },
        "completions": {
          "description": "Specifies the desired number of successfully finished pods the job should be run with.  Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/",
          "type": "integer",
          "format": "int32"
        },
        "manualSelector": {
          "description": "manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector",
          "type": "boolean"
        },
        "parallelism": {
          "description": "Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/",
          "type": "integer",
          "format": "int32"
        },
        "selector": {
          "description": "A label query over pods that should match the pod count. Normally, the system sets this field for you. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "template": {
          "description": "Describes the pod that will be created when executing a job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        },
        "ttlSecondsAfterFinished": {
          "description": "ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes. This field is alpha-level and is only honored by servers that enable the TTLAfterFinished feature.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.api.batch.v1.JobStatus": {
      "description": "JobStatus represents the current state of a Job.",
      "type": "object",
      "properties": {
        "active": {
          "description": "The number of actively running pods.",
          "type": "integer",
          "format": "int32"
        },
        "completionTime": {
          "description": "Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "conditions": {
          "description": "The latest available observations of an object's current state. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.batch.v1.JobCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "failed": {
          "description": "The number of pods which reached phase Failed.",
          "type": "integer",
          "format": "int32"
        },
        "startTime": {
          "description": "Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "succeeded": {
          "description": "The number of pods which reached phase Succeeded.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.api.batch.v1beta1.CronJob": {
      "description": "CronJob represents the configuration of a single cron job.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "batch/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "CronJob"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of a cron job, including the schedule. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJobSpec"
        },
        "status": {
          "description": "Current status of a cron job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJobStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.batch.v1beta1.CronJobList": {
      "description": "CronJobList is a collection of cron jobs.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "batch/v1beta1"
          ]
        },
        "items": {
          "description": "items is the list of CronJobs.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "CronJobList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "batch",
          "kind": "CronJobList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.batch.v1beta1.CronJobSpec": {
      "description": "CronJobSpec describes how the job execution will look like and when it will actually run.",
      "type": "object",
      "required": [
        "schedule",
        "jobTemplate"
      ],
      "properties": {
        "concurrencyPolicy": {
          "description": "Specifies how to treat concurrent executions of a Job. Valid values are: - \"Allow\" (default): allows CronJobs to run concurrently; - \"Forbid\": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - \"Replace\": cancels currently running job and replaces it with a new one",
          "type": "string"
        },
        "failedJobsHistoryLimit": {
          "description": "The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.",
          "type": "integer",
          "format": "int32"
        },
        "jobTemplate": {
          "description": "Specifies the job that will be created when executing a CronJob.",
          "$ref": "#/definitions/io.k8s.api.batch.v1beta1.JobTemplateSpec"
        },
        "schedule": {
          "description": "The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.",
          "type": "string"
        },
        "startingDeadlineSeconds": {
          "description": "Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.",
          "type": "integer",
          "format": "int64"
        },
        "successfulJobsHistoryLimit": {
          "description": "The number of successful finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. Defaults to 3.",
          "type": "integer",
          "format": "int32"
        },
        "suspend": {
          "description": "This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.",
          "type": "boolean"
        }
      }
    },
    "io.k8s.api.batch.v1beta1.CronJobStatus": {
      "description": "CronJobStatus represents the current state of a cron job.",
      "type": "object",
      "properties": {
        "active": {
          "description": "A list of pointers to currently running jobs.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
          }
        },
        "lastScheduleTime": {
          "description": "Information when was the last time the job was successfully scheduled.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      }
    },
    "io.k8s.api.batch.v1beta1.JobTemplateSpec": {
      "description": "JobTemplateSpec describes the data a Job should have when created from a template",
      "type": "object",
      "properties": {
        "metadata": {
          "description": "Standard object's metadata of the jobs created from this template. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of the job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.batch.v1.JobSpec"
        }
      }
    },
    "io.k8s.api.certificates.v1.CertificateSigningRequest": {
      "description": "CertificateSigningRequest objects provide a mechanism to obtain x509 certificates by submitting a certificate signing request, and having it asynchronously approved and issued.\n\nKubelets use this API to obtain:\n 1. client certificates to authenticate to kube-apiserver (with the \"kubernetes.io/kube-apiserver-client-kubelet\" signerName).\n 2. serving certificates for TLS endpoints kube-apiserver can connect to securely (with the \"kubernetes.io/kubelet-serving\" signerName).\n\nThis API can be used to request client certificates to authenticate to kube-apiserver (with the \"kubernetes.io/kube-apiserver-client\" signerName), or to obtain certificates from custom non-Kubernetes signers.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "certificates.k8s.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "CertificateSigningRequest"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec contains the certificate request, and is immutable after creation. Only the request, signerName, and usages fields can be set on creation. Other fields are derived by Kubernetes and cannot be modified by users.",
          "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequestSpec"
        },
        "status": {
          "description": "status contains information about whether the request is approved or denied, and the certificate issued by the signer, or the failure condition indicating signer failure.",
          "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequestStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.certificates.v1.CertificateSigningRequestCondition": {
      "description": "CertificateSigningRequestCondition describes a condition of a CertificateSigningRequest object",
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "lastTransitionTime is the time the condition last transitioned from one status to another. If unset, when a new condition type is added or an existing condition's status is changed, the server defaults this to the current time.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "lastUpdateTime": {
          "description": "lastUpdateTime is the time of the last update to this condition",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "message contains a human readable message with details about the request state",
          "type": "string"
        },
        "reason": {
          "description": "reason indicates a brief reason for the request state",
          "type": "string"
        },
        "status": {
          "description": "status of the condition, one of True, False, Unknown. Approved, Denied, and Failed conditions may not be \"False\" or \"Unknown\".",
          "type": "string"
        },
        "type": {
          "description": "type of the condition. Known conditions are \"Approved\", \"Denied\", and \"Failed\".\n\nAn \"Approved\" condition is added via the /approval subresource, indicating the request was approved and should be issued by the signer.\n\nA \"Denied\" condition is added via the /approval subresource, indicating the request was denied and should not be issued by the signer.\n\nA \"Failed\" condition is added via the /status subresource, indicating the signer failed to issue the certificate.\n\nApproved and Denied conditions are mutually exclusive. Approved, Denied, and Failed conditions cannot be removed once added.\n\nOnly one condition of a given type is allowed.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.certificates.v1.CertificateSigningRequestList": {
      "description": "CertificateSigningRequestList is a collection of CertificateSigningRequest objects",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "certificates.k8s.io/v1"
          ]
        },
        "items": {
          "description": "items is a collection of CertificateSigningRequest objects",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "CertificateSigningRequestList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequestList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.certificates.v1.CertificateSigningRequestSpec": {
      "description": "CertificateSigningRequestSpec contains the certificate request.",
      "type": "object",
      "required": [
        "request",
        "signerName"
      ],
      "properties": {
        "extra": {
          "description": "extra contains extra attributes of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "groups": {
          "description": "groups contains group membership of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-list-type": "atomic"
        },
        "request": {
          "description": "request contains an x509 certificate signing request encoded in a \"CERTIFICATE REQUEST\" PEM block. When serialized as JSON or YAML, the data is additionally base64-encoded.",
          "type": "string",
          "format": "byte",
          "x-kubernetes-list-type": "atomic"
        },
        "signerName": {
          "description": "signerName indicates the requested signer, and is a qualified name.\n\nList/watch requests for CertificateSigningRequests can filter on this field using a \"spec.signerName=NAME\" fieldSelector.\n\nWell-known Kubernetes signers are:\n 1. \"kubernetes.io/kube-apiserver-client\": issues client certificates that can be used to authenticate to kube-apiserver.\n  Requests for this signer are never auto-approved by kube-controller-manager, can be issued by the \"csrsigning\" controller in kube-controller-manager.\n 2. \"kubernetes.io/kube-apiserver-client-kubelet\": issues client certificates that kubelets use to authenticate to kube-apiserver.\n  Requests for this signer can be auto-approved by the \"csrapproving\" controller in kube-controller-manager, and can be issued by the \"csrsigning\" controller in kube-controller-manager.\n 3. \"kubernetes.io/kubelet-serving\" issues serving certificates that kubelets use to serve TLS endpoints, which kube-apiserver can connect to securely.\n  Requests for this signer are never auto-approved by kube-controller-manager, and can be issued by the \"csrsigning\" controller in kube-controller-manager.\n\nMore details are available at https://k8s.io/docs/reference/access-authn-authz/certificate-signing-requests/#kubernetes-signers\n\nCustom signerNames can also be specified. The signer defines:\n 1. Trust distribution: how trust (CA bundles) are distributed.\n 2. Permitted subjects: and behavior when a disallowed subject is requested.\n 3. Required, permitted, or forbidden x509 extensions in the request (including whether subjectAltNames are allowed, which types, restrictions on allowed values) and behavior when a disallowed extension is requested.\n 4. Required, permitted, or forbidden key usages / extended key usages.\n 5. Expiration/certificate lifetime: whether it is fixed by the signer, configurable by the admin.\n 6. Whether or not requests for CA certificates are allowed.",
          "type": "string"
        },
        "uid": {
          "description": "uid contains the uid of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.",
          "type": "string"
        },
        "usages": {
          "description": "usages specifies a set of key usages requested in the issued certificate.\n\nRequests for TLS client certificates typically request: \"digital signature\", \"key encipherment\", \"client auth\".\n\nRequests for TLS serving certificates typically request: \"key encipherment\", \"digital signature\", \"server auth\".\n\nValid values are:\n \"signing\", \"digital signature\", \"content commitment\",\n \"key encipherment\", \"key agreement\", \"data encipherment\",\n \"cert sign\", \"crl sign\", \"encipher only\", \"decipher only\", \"any\",\n \"server auth\", \"client auth\",\n \"code signing\", \"email protection\", \"s/mime\",\n \"ipsec end system\", \"ipsec tunnel\", \"ipsec user\",\n \"timestamping\", \"ocsp signing\", \"microsoft sgc\", \"netscape sgc\"",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-list-type": "atomic"
        },
        "username": {
          "description": "username contains the name of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.certificates.v1.CertificateSigningRequestStatus": {
      "description": "CertificateSigningRequestStatus contains conditions used to indicate approved/denied/failed status of the request, and the issued certificate.",
      "type": "object",
      "properties": {
        "certificate": {
          "description": "certificate is populated with an issued certificate by the signer after an Approved condition is present. This field is set via the /status subresource. Once populated, this field is immutable.\n\nIf the certificate signing request is denied, a condition of type \"Denied\" is added and this field remains empty. If the signer cannot issue the certificate, a condition of type \"Failed\" is added and this field remains empty.\n\nValidation requirements:\n 1. certificate must contain one or more PEM blocks.\n 2. All PEM blocks must have the \"CERTIFICATE\" label, contain no headers, and the encoded data\n  must be a BER-encoded ASN.1 Certificate structure as described in section 4 of RFC5280.\n 3. Non-PEM content may appear before or after the \"CERTIFICATE\" PEM blocks and is unvalidated,\n  to allow for explanatory text as described in section 5.2 of RFC7468.\n\nIf more than one PEM block is present, and the definition of the requested spec.signerName does not indicate otherwise, the first block is the issued certificate, and subsequent blocks should be treated as intermediate certificates and presented in TLS handshakes.\n\nThe certificate is encoded in PEM format.\n\nWhen serialized as JSON or YAML, the data is additionally base64-encoded, so it consists of:\n\n    base64(\n    -----BEGIN CERTIFICATE-----\n    ...\n    -----END CERTIFICATE-----\n    )",
          "type": "string",
          "format": "byte",
          "x-kubernetes-list-type": "atomic"
        },
        "conditions": {
          "description": "conditions applied to the request. Known conditions are \"Approved\", \"Denied\", and \"Failed\".",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequestCondition"
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        }
      }
    },
    "io.k8s.api.certificates.v1beta1.CertificateSigningRequest": {
      "description": "Describes a certificate signing request",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "certificates.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "CertificateSigningRequest"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "The certificate request itself and any additional information.",
          "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequestSpec"
        },
        "status": {
          "description": "Derived information about the request.",
          "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequestStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.certificates.v1beta1.CertificateSigningRequestCondition": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "lastTransitionTime is the time the condition last transitioned from one status to another. If unset, when a new condition type is added or an existing condition's status is changed, the server defaults this to the current time.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "lastUpdateTime": {
          "description": "timestamp for the last update to this condition",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "human readable message with details about the request state",
          "type": "string"
        },
        "reason": {
          "description": "brief reason for the request state",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown. Approved, Denied, and Failed conditions may not be \"False\" or \"Unknown\". Defaults to \"True\". If unset, should be treated as \"True\".",
          "type": "string"
        },
        "type": {
          "description": "type of the condition. Known conditions include \"Approved\", \"Denied\", and \"Failed\".",
          "type": "string"
        }
      }
    },
    "io.k8s.api.certificates.v1beta1.CertificateSigningRequestList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "certificates.k8s.io/v1beta1"
          ]
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "CertificateSigningRequestList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequestList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.certificates.v1beta1.CertificateSigningRequestSpec": {
      "description": "This information is immutable after the request is created. Only the Request and Usages fields can be set on creation, other fields are derived by Kubernetes and cannot be modified by users.",
      "type": "object",
      "required": [
        "request"
      ],
      "properties": {
        "extra": {
          "description": "Extra information about the requesting user. See user.Info interface for details.",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "groups": {
          "description": "Group information about the requesting user. See user.Info interface for details.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-list-type": "atomic"
        },
        "request": {
          "description": "Base64-encoded PKCS#10 CSR data",
          "type": "string",
          "format": "byte",
          "x-kubernetes-list-type": "atomic"
        },
        "signerName": {
          "description": "Requested signer for the request. It is a qualified name in the form: `scope-hostname.io/name`. If empty, it will be defaulted:\n 1. If it's a kubelet client certificate, it is assigned\n    \"kubernetes.io/kube-apiserver-client-kubelet\".\n 2. If it's a kubelet serving certificate, it is assigned\n    \"kubernetes.io/kubelet-serving\".\n 3. Otherwise, it is assigned \"kubernetes.io/legacy-unknown\".\nDistribution of trust for signers happens out of band. You can select on this field using `spec.signerName`.",
          "type": "string"
        },
        "uid": {
          "description": "UID information about the requesting user. See user.Info interface for details.",
          "type": "string"
        },
        "usages": {
          "description": "allowedUsages specifies a set of usage contexts the key will be valid for. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3\n     https://tools.ietf.org/html/rfc5280#section-4.2.1.12\nValid values are:\n \"signing\",\n \"digital signature\",\n \"content commitment\",\n \"key encipherment\",\n \"key agreement\",\n \"data encipherment\",\n \"cert sign\",\n \"crl sign\",\n \"encipher only\",\n \"decipher only\",\n \"any\",\n \"server auth\",\n \"client auth\",\n \"code signing\",\n \"email protection\",\n \"s/mime\",\n \"ipsec end system\",\n \"ipsec tunnel\",\n \"ipsec user\",\n \"timestamping\",\n \"ocsp signing\",\n \"microsoft sgc\",\n \"netscape sgc\"",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-list-type": "atomic"
        },
        "username": {
          "description": "Information about the requesting user. See user.Info interface for details.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.certificates.v1beta1.CertificateSigningRequestStatus": {
      "type": "object",
      "properties": {
        "certificate": {
          "description": "If request was approved, the controller will place the issued certificate here.",
          "type": "string",
          "format": "byte",
          "x-kubernetes-list-type": "atomic"
        },
        "conditions": {
          "description": "Conditions applied to the request, such as approval or denial.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequestCondition"
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        }
      }
    },
    "io.k8s.api.coordination.v1.Lease": {
      "description": "Lease defines a lease concept.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "coordination.k8s.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Lease"
          ]
        },
        "metadata": {
          "description": "More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.coordination.v1.LeaseSpec"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.coordination.v1.LeaseList": {
      "description": "LeaseList is a list of Lease objects.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "coordination.k8s.io/v1"
          ]
        },
        "items": {
          "description": "Items is a list of schema objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.coordination.v1.Lease"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "LeaseList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "coordination.k8s.io",
          "kind": "LeaseList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.coordination.v1.LeaseSpec": {
      "description": "LeaseSpec is a specification of a Lease.",
      "type": "object",
      "properties": {
        "acquireTime": {
          "description": "acquireTime is a time when the current lease was acquired.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        },
        "holderIdentity": {
          "description": "holderIdentity contains the identity of the holder of a current lease.",
          "type": "string"
        },
        "leaseDurationSeconds": {
          "description": "leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measure against time of last observed RenewTime.",
          "type": "integer",
          "format": "int32"
        },
        "leaseTransitions": {
          "description": "leaseTransitions is the number of transitions of a lease between holders.",
          "type": "integer",
          "format": "int32"
        },
        "renewTime": {
          "description": "renewTime is a time when the current holder of a lease has last updated the lease.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        }
      }
    },
    "io.k8s.api.coordination.v1beta1.Lease": {
      "description": "Lease defines a lease concept.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "coordination.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Lease"
          ]
        },
        "metadata": {
          "description": "More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.LeaseSpec"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.coordination.v1beta1.LeaseList": {
      "description": "LeaseList is a list of Lease objects.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "coordination.k8s.io/v1beta1"
          ]
        },
        "items": {
          "description": "Items is a list of schema objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.Lease"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "LeaseList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "coordination.k8s.io",
          "kind": "LeaseList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.coordination.v1beta1.LeaseSpec": {
      "description": "LeaseSpec is a specification of a Lease.",
      "type": "object",
      "properties": {
        "acquireTime": {
          "description": "acquireTime is a time when the current lease was acquired.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        },
        "holderIdentity": {
          "description": "holderIdentity contains the identity of the holder of a current lease.",
          "type": "string"
        },
        "leaseDurationSeconds": {
          "description": "leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measure against time of last observed RenewTime.",
          "type": "integer",
          "format": "int32"
        },
        "leaseTransitions": {
          "description": "leaseTransitions is the number of transitions of a lease between holders.",
          "type": "integer",
          "format": "int32"
        },
        "renewTime": {
          "description": "renewTime is a time when the current holder of a lease has last updated the lease.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        }
      }
    },
    "io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource": {
      "description": "Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.",
      "type": "object",
      "required": [
        "volumeID"
      ],
      "properties": {
        "fsType": {
          "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
          "type": "string"
        },
        "partition": {
          "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).",
          "type": "integer",
          "format": "int32"
        },
        "readOnly": {
          "description": "Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
          "type": "boolean"
        },
        "volumeID": {
          "description": "Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.Affinity": {
      "description": "Affinity is a group of affinity scheduling rules.",
      "type": "object",
      "properties": {
        "nodeAffinity": {
          "description": "Describes node affinity scheduling rules for the pod.",
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeAffinity"
        },
        "podAffinity": {
          "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinity"
        },
        "podAntiAffinity": {
          "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodAntiAffinity"
        }
      }
    },
    "io.k8s.api.core.v1.AttachedVolume": {
      "description": "AttachedVolume describes a volume attached to a node",
      "type": "object",
      "required": [
        "name",
        "devicePath"
      ],
      "properties": {
        "devicePath": {
          "description": "DevicePath represents the device path where the volume should be available",
          "type": "string"
        },
        "name": {
          "description": "Name of the attached volume",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.AzureDiskVolumeSource": {
      "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
      "type": "object",
      "required": [
        "diskName",
        "diskURI"
      ],
      "properties": {
        "cachingMode": {
          "description": "Host Caching mode: None, Read Only, Read Write.",
          "type": "string"
        },
        "diskName": {
          "description": "The Name of the data disk in the blob storage",
          "type": "string"
        },
        "diskURI": {
          "description": "The URI the data disk in the blob storage",
          "type": "string"
        },
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "kind": {
          "description": "Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared",
          "type": "string"
        },
        "readOnly": {
          "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        }
      }
    },
    "io.k8s.api.core.v1.AzureFilePersistentVolumeSource": {
      "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
      "type": "object",
      "required": [
        "secretName",
        "shareName"
      ],
      "properties": {
        "readOnly": {
          "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretName": {
          "description": "the name of secret that contains Azure Storage Account Name and Key",
          "type": "string"
        },
        "secretNamespace": {
          "description": "the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod",
          "type": "string"
        },
        "shareName": {
          "description": "Share Name",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.AzureFileVolumeSource": {
      "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
      "type": "object",
      "required": [
        "secretName",
        "shareName"
      ],
      "properties": {
        "readOnly": {
          "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretName": {
          "description": "the name of secret that contains Azure Storage Account Name and Key",
          "type": "string"
        },
        "shareName": {
          "description": "Share Name",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.Binding": {
      "description": "Binding ties one object to another; for example, a pod is bound to a node by a scheduler. Deprecated in 1.7, please use the bindings subresource of pods instead.",
      "type": "object",
      "required": [
        "target"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Binding"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "target": {
          "description": "The target object that you want to bind to the standard object.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Binding",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.CSIPersistentVolumeSource": {
      "description": "Represents storage that is managed by an external CSI volume driver (Beta feature)",
      "type": "object",
      "required": [
        "driver",
        "volumeHandle"
      ],
      "properties": {
        "controllerExpandSecretRef": {
          "description": "ControllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This is an alpha field and requires enabling ExpandCSIVolumes feature gate. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
        },
        "controllerPublishSecretRef": {
          "description": "ControllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
        },
        "driver": {
          "description": "Driver is the name of the driver to use for this volume. Required.",
          "type": "string"
        },
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\".",
          "type": "string"
        },
        "nodePublishSecretRef": {
          "description": "NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
        },
        "nodeStageSecretRef": {
          "description": "NodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
        },
        "readOnly": {
          "description": "Optional: The value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).",
          "type": "boolean"
        },
        "volumeAttributes": {
          "description": "Attributes of the volume to publish.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "volumeHandle": {
          "description": "VolumeHandle is the unique volume name returned by the CSI volume plugin\u2019s CreateVolume to refer to the volume on all subsequent calls. Required.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.CSIVolumeSource": {
      "description": "Represents a source location of a volume to mount, managed by an external CSI driver",
      "type": "object",
      "required": [
        "driver"
      ],
      "properties": {
        "driver": {
          "description": "Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.",
          "type": "string"
        },
        "fsType": {
          "description": "Filesystem type to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.",
          "type": "string"
        },
        "nodePublishSecretRef": {
          "description": "NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        },
        "readOnly": {
          "description": "Specifies a read-only configuration for the volume. Defaults to false (read/write).",
          "type": "boolean"
        },
        "volumeAttributes": {
          "description": "VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "io.k8s.api.core.v1.Capabilities": {
      "description": "Adds and removes POSIX capabilities from running containers.",
      "type": "object",
      "properties": {
        "add": {
          "description": "Added capabilities",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "drop": {
          "description": "Removed capabilities",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "io.k8s.api.core.v1.CephFSPersistentVolumeSource": {
      "description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.",
      "type": "object",
      "required": [
        "monitors"
      ],
      "properties": {
        "monitors": {
          "description": "Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "path": {
          "description": "Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
          "type": "string"
        },
        "readOnly": {
          "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "boolean"
        },
        "secretFile": {
          "description": "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "string"
        },
        "secretRef": {
          "description": "Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
        },
        "user": {
          "description": "Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.CephFSVolumeSource": {
      "description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.",
      "type": "object",
      "required": [
        "monitors"
      ],
      "properties": {
        "monitors": {
          "description": "Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "path": {
          "description": "Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
          "type": "string"
        },
        "readOnly": {
          "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "boolean"
        },
        "secretFile": {
          "description": "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "string"
        },
        "secretRef": {
          "description": "Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        },
        "user": {
          "description": "Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.CinderPersistentVolumeSource": {
      "description": "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.",
      "type": "object",
      "required": [
        "volumeID"
      ],
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": "string"
        },
        "readOnly": {
          "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": "boolean"
        },
        "secretRef": {
          "description": "Optional: points to a secret object containing parameters used to connect to OpenStack.",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
        },
        "volumeID": {
          "description": "volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.CinderVolumeSource": {
      "description": "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.",
      "type": "object",
      "required": [
        "volumeID"
      ],
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": "string"
        },
        "readOnly": {
          "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": "boolean"
        },
        "secretRef": {
          "description": "Optional: points to a secret object containing parameters used to connect to OpenStack.",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        },
        "volumeID": {
          "description": "volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.ClientIPConfig": {
      "description": "ClientIPConfig represents the configurations of Client IP based session affinity.",
      "type": "object",
      "properties": {
        "timeoutSeconds": {
          "description": "timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == \"ClientIP\". Default value is 10800(for 3 hours).",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.api.core.v1.ComponentCondition": {
      "description": "Information about the condition of a component.",
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "error": {
          "description": "Condition error code for a component. For example, a health check error code.",
          "type": "string"
        },
        "message": {
          "description": "Message about the condition for a component. For example, information about a health check.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition for a component. Valid values for \"Healthy\": \"True\", \"False\", or \"Unknown\".",
          "type": "string"
        },
        "type": {
          "description": "Type of condition for a component. Valid value: \"Healthy\"",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.ComponentStatus": {
      "description": "ComponentStatus (and ComponentStatusList) holds the cluster validation info. Deprecated: This API is deprecated in v1.19+",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "conditions": {
          "description": "List of component conditions observed",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ComponentCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ComponentStatus"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ComponentStatus",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ComponentStatusList": {
      "description": "Status of all the conditions for the component as a list of ComponentStatus objects. Deprecated: This API is deprecated in v1.19+",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "items": {
          "description": "List of ComponentStatus objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ComponentStatus"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ComponentStatusList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ComponentStatusList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ConfigMap": {
      "description": "ConfigMap holds configuration data for pods to consume.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "binaryData": {
          "description": "BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          }
        },
        "data": {
          "description": "Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "immutable": {
          "description": "Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil. This is a beta field enabled by ImmutableEphemeralVolumes feature gate.",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ConfigMap"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ConfigMap",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ConfigMapEnvSource": {
      "description": "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap must be defined",
          "type": "boolean"
        }
      }
    },
    "io.k8s.api.core.v1.ConfigMapKeySelector": {
      "description": "Selects a key from a ConfigMap.",
      "type": "object",
      "required": [
        "key"
      ],
      "properties": {
        "key": {
          "description": "The key to select.",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap or its key must be defined",
          "type": "boolean"
        }
      }
    },
    "io.k8s.api.core.v1.ConfigMapList": {
      "description": "ConfigMapList is a resource containing a list of ConfigMap objects.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "items": {
          "description": "Items is the list of ConfigMaps.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMap"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ConfigMapList"
          ]
        },
        "metadata": {
          "description": "More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ConfigMapList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ConfigMapNodeConfigSource": {
      "description": "ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node.",
      "type": "object",
      "required": [
        "namespace",
        "name",
        "kubeletConfigKey"
      ],
      "properties": {
        "kubeletConfigKey": {
          "description": "KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.",
          "type": "string"
        },
        "name": {
          "description": "Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.",
          "type": "string"
        },
        "resourceVersion": {
          "description": "ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.",
          "type": "string"
        },
        "uid": {
          "description": "UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.ConfigMapProjection": {
      "description": "Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.",
      "type": "object",
      "properties": {
        "items": {
          "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          }
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap or its keys must be defined",
          "type": "boolean"
        }
      }
    },
    "io.k8s.api.core.v1.ConfigMapVolumeSource": {
      "description": "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.",
      "type": "object",
      "properties": {
        "defaultMode": {
          "description": "Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "type": "integer",
          "format": "int32"
        },
        "items": {
          "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          }
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap or its keys must be defined",
          "type": "boolean"
        }
      }
    },
    "io.k8s.api.core.v1.Container": {
      "description": "A single application container that you want to run within a pod.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "args": {
          "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "command": {
          "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "env": {
          "description": "List of environment variables to set in the container. Cannot be updated.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          },
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "envFrom": {
          "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvFromSource"
          }
        },
        "image": {
          "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
          "type": "string"
        },
        "imagePullPolicy": {
          "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
          "type": "string"
        },
        "lifecycle": {
          "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated.",
          "$ref": "#/definitions/io.k8s.api.core.v1.Lifecycle"
        },
        "livenessProbe": {
          "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
        },
        "name": {
          "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
          "type": "string"
        },
        "ports": {
          "description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerPort"
          },
          "x-kubernetes-list-map-keys": [
            "containerPort",
            "protocol"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "containerPort",
          "x-kubernetes-patch-strategy": "merge"
        },
        "readinessProbe": {
          "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
        },
        "resources": {
          "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
        },
        "securityContext": {
          "description": "Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecurityContext"
        },
        "startupProbe": {
          "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
        },
        "stdin": {
          "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
          "type": "boolean"
        },
        "stdinOnce": {
          "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
          "type": "boolean"
        },
        "terminationMessagePath": {
          "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
          "type": "string"
        },
        "terminationMessagePolicy": {
          "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
          "type": "string"
        },
        "tty": {
          "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
          "type": "boolean"
        },
        "volumeDevices": {
          "description": "volumeDevices is the list of block devices to be used by the container.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeDevice"
          },
          "x-kubernetes-patch-merge-key": "devicePath",
          "x-kubernetes-patch-strategy": "merge"
        },
        "volumeMounts": {
          "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
          },
          "x-kubernetes-patch-merge-key": "mountPath",
          "x-kubernetes-patch-strategy": "merge"
        },
        "workingDir": {
          "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.ContainerImage": {
      "description": "Describe a container image",
      "type": "object",
      "required": [
        "names"
      ],
      "properties": {
        "names": {
          "description": "Names by which this image is known. e.g. [\"k8s.gcr.io/hyperkube:v1.0.7\", \"dockerhub.io/google_containers/hyperkube:v1.0.7\"]",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sizeBytes": {
          "description": "The size of the image in bytes.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "io.k8s.api.core.v1.ContainerPort": {
      "description": "ContainerPort represents a network port in a single container.",
      "type": "object",
      "required": [
        "containerPort"
      ],
      "properties": {
        "containerPort": {
          "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
          "type": "integer",
          "format": "int32"
        },
        "hostIP": {
          "description": "What host IP to bind the external port to.",
          "type": "string"
        },
        "hostPort": {
          "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.",
          "type": "string"
        },
        "protocol": {
          "description": "Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.ContainerState": {
      "description": "ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.",
      "type": "object",
      "properties": {
        "running": {
          "description": "Details about a running container",
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStateRunning"
        },
        "terminated": {
          "description": "Details about a terminated container",
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStateTerminated"
        },
        "waiting": {
          "description": "Details about a waiting container",
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStateWaiting"
        }
      }
    },
    "io.k8s.api.core.v1.ContainerStateRunning": {
      "description": "ContainerStateRunning is a running state of a container.",
      "type": "object",
      "properties": {
        "startedAt": {
          "description": "Time at which the container was last (re-)started",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      }
    },
    "io.k8s.api.core.v1.ContainerStateTerminated": {
      "description": "ContainerStateTerminated is a terminated state of a container.",
      "type": "object",
      "required": [
        "exitCode"
      ],
      "properties": {
        "containerID": {
          "description": "Container's ID in the format 'docker://<container_id>'",
          "type": "string"
        },
        "exitCode": {
          "description": "Exit status from the last termination of the container",
          "type": "integer",
          "format": "int32"
        },
        "finishedAt": {
          "description": "Time at which the container last terminated",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "Message regarding the last termination of the container",
          "type": "string"
        },
        "reason": {
          "description": "(brief) reason from the last termination of the container",
          "type": "string"
        },
        "signal": {
          "description": "Signal from the last termination of the container",
          "type": "integer",
          "format": "int32"
        },
        "startedAt": {
          "description": "Time at which previous execution of the container started",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      }
    },
    "io.k8s.api.core.v1.ContainerStateWaiting": {
      "description": "ContainerStateWaiting is a waiting state of a container.",
      "type": "object",
      "properties": {
        "message": {
          "description": "Message regarding why the container is not yet running.",
          "type": "string"
        },
        "reason": {
          "description": "(brief) reason the container is not yet running.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.ContainerStatus": {
      "description": "ContainerStatus contains details for the current status of this container.",
      "type": "object",
      "required": [
        "name",
        "ready",
        "restartCount",
        "image",
        "imageID"
      ],
      "properties": {
        "containerID": {
          "description": "Container's ID in the format 'docker://<container_id>'.",
          "type": "string"
        },
        "image": {
          "description": "The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images",
          "type": "string"
        },
        "imageID": {
          "description": "ImageID of the container's image.",
          "type": "string"
        },
        "lastState": {
          "description": "Details about the container's last termination condition.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerState"
        },
        "name": {
          "description": "This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.",
          "type": "string"
        },
        "ready": {
          "description": "Specifies whether the container has passed its readiness probe.",
          "type": "boolean"
        },
        "restartCount": {
          "description": "The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.",
          "type": "integer",
          "format": "int32"
        },
        "started": {
          "description": "Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.",
          "type": "boolean"
        },
        "state": {
          "description": "Details about the container's current condition.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerState"
        }
      }
    },
    "io.k8s.api.core.v1.DaemonEndpoint": {
      "description": "DaemonEndpoint contains information about a single Daemon endpoint.",
      "type": "object",
      "required": [
        "Port"
      ],
      "properties": {
        "Port": {
          "description": "Port number of the given endpoint.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.api.core.v1.DownwardAPIProjection": {
      "description": "Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.",
      "type": "object",
      "properties": {
        "items": {
          "description": "Items is a list of DownwardAPIVolume file",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeFile"
          }
        }
      }
    },
    "io.k8s.api.core.v1.DownwardAPIVolumeFile": {
      "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "fieldRef": {
          "description": "Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectFieldSelector"
        },
        "mode": {
          "description": "Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "type": "integer",
          "format": "int32"
        },
        "path": {
          "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
          "type": "string"
        },
        "resourceFieldRef": {
          "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceFieldSelector"
        }
      }
    },
    "io.k8s.api.core.v1.DownwardAPIVolumeSource": {
      "description": "DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.",
      "type": "object",
      "properties": {
        "defaultMode": {
          "description": "Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "type": "integer",
          "format": "int32"
        },
        "items": {
          "description": "Items is a list of downward API volume file",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeFile"
          }
        }
      }
    },
    "io.k8s.api.core.v1.EmptyDirVolumeSource": {
      "description": "Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.",
      "type": "object",
      "properties": {
        "medium": {
          "description": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
          "type": "string"
        },
        "sizeLimit": {
          "description": "Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }
      }
    },
    "io.k8s.api.core.v1.EndpointAddress": {
      "description": "EndpointAddress is a tuple that describes single IP address.",
      "type": "object",
      "required": [
        "ip"
      ],
      "properties": {
        "hostname": {
          "description": "The Hostname of this endpoint",
          "type": "string"
        },
        "ip": {
          "description": "The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24). IPv6 is also accepted but not fully supported on all platforms. Also, certain kubernetes components, like kube-proxy, are not IPv6 ready.",
          "type": "string"
        },
        "nodeName": {
          "description": "Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.",
          "type": "string"
        },
        "targetRef": {
          "description": "Reference to object providing the endpoint.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        }
      }
    },
    "io.k8s.api.core.v1.EndpointPort": {
      "description": "EndpointPort is a tuple that describes a single port.",
      "type": "object",
      "required": [
        "port"
      ],
      "properties": {
        "appProtocol": {
          "description": "The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. This is a beta field that is guarded by the ServiceAppProtocol feature gate and enabled by default.",
          "type": "string"
        },
        "name": {
          "description": "The name of this port.  This must match the 'name' field in the corresponding ServicePort. Must be a DNS_LABEL. Optional only if one port is defined.",
          "type": "string"
        },
        "port": {
          "description": "The port number of the endpoint.",
          "type": "integer",
          "format": "int32"
        },
        "protocol": {
          "description": "The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.EndpointSubset": {
      "description": "EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:\n  {\n    Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],\n    Ports:     [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n  }\nThe resulting set of endpoints can be viewed as:\n    a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],\n    b: [ 10.10.1.1:309, 10.10.2.2:309 ]",
      "type": "object",
      "properties": {
        "addresses": {
          "description": "IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EndpointAddress"
          }
        },
        "notReadyAddresses": {
          "description": "IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EndpointAddress"
          }
        },
        "ports": {
          "description": "Port numbers available on the related IP addresses.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EndpointPort"
          }
        }
      }
    },
    "io.k8s.api.core.v1.Endpoints": {
      "description": "Endpoints is a collection of endpoints that implement the actual service. Example:\n  Name: \"mysvc\",\n  Subsets: [\n    {\n      Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],\n      Ports: [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n    },\n    {\n      Addresses: [{\"ip\": \"10.10.3.3\"}],\n      Ports: [{\"name\": \"a\", \"port\": 93}, {\"name\": \"b\", \"port\": 76}]\n    },\n ]",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Endpoints"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "subsets": {
          "description": "The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EndpointSubset"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Endpoints",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.EndpointsList": {
      "description": "EndpointsList is a list of endpoints.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "items": {
          "description": "List of endpoints.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Endpoints"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "EndpointsList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "EndpointsList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.EnvFromSource": {
      "description": "EnvFromSource represents the source of a set of ConfigMaps",
      "type": "object",
      "properties": {
        "configMapRef": {
          "description": "The ConfigMap to select from",
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapEnvSource"
        },
        "prefix": {
          "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
          "type": "string"
        },
        "secretRef": {
          "description": "The Secret to select from",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretEnvSource"
        }
      }
    },
    "io.k8s.api.core.v1.EnvVar": {
      "description": "EnvVar represents an environment variable present in a Container.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
          "type": "string"
        },
        "value": {
          "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
          "type": "string"
        },
        "valueFrom": {
          "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
          "$ref": "#/definitions/io.k8s.api.core.v1.EnvVarSource"
        }
      }
    },
    "io.k8s.api.core.v1.EnvVarSource": {
      "description": "EnvVarSource represents a source for the value of an EnvVar.",
      "type": "object",
      "properties": {
        "configMapKeyRef": {
          "description": "Selects a key of a ConfigMap.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector"
        },
        "fieldRef": {
          "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectFieldSelector"
        },
        "resourceFieldRef": {
          "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceFieldSelector"
        },
        "secretKeyRef": {
          "description": "Selects a key of a secret in the pod's namespace",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
        }
      }
    },
    "io.k8s.api.core.v1.EphemeralContainer": {
      "description": "An EphemeralContainer is a container that may be added temporarily to an existing pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a pod is removed or restarted. If an ephemeral container causes a pod to exceed its resource allocation, the pod may be evicted. Ephemeral containers may not be added by directly updating the pod spec. They must be added via the pod's ephemeralcontainers subresource, and they will appear in the pod spec once added. This is an alpha feature enabled by the EphemeralContainers feature flag.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "args": {
          "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "command": {
          "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "env": {
          "description": "List of environment variables to set in the container. Cannot be updated.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          },
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "envFrom": {
          "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvFromSource"
          }
        },
        "image": {
          "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images",
          "type": "string"
        },
        "imagePullPolicy": {
          "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
          "type": "string"
        },
        "lifecycle": {
          "description": "Lifecycle is not allowed for ephemeral containers.",
          "$ref": "#/definitions/io.k8s.api.core.v1.Lifecycle"
        },
        "livenessProbe": {
          "description": "Probes are not allowed for ephemeral containers.",
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
        },
        "name": {
          "description": "Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.",
          "type": "string"
        },
        "ports": {
          "description": "Ports are not allowed for ephemeral containers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerPort"
          }
        },
        "readinessProbe": {
          "description": "Probes are not allowed for ephemeral containers.",
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
        },
        "resources": {
          "description": "Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
        },
        "securityContext": {
          "description": "SecurityContext is not allowed for ephemeral containers.",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecurityContext"
        },
        "startupProbe": {
          "description": "Probes are not allowed for ephemeral containers.",
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
        },
        "stdin": {
          "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
          "type": "boolean"
        },
        "stdinOnce": {
          "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
          "type": "boolean"
        },
        "targetContainerName": {
          "description": "If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container is run in whatever namespaces are shared for the pod. Note that the container runtime must support this feature.",
          "type": "string"
        },
        "terminationMessagePath": {
          "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
          "type": "string"
        },
        "terminationMessagePolicy": {
          "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
          "type": "string"
        },
        "tty": {
          "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
          "type": "boolean"
        },
        "volumeDevices": {
          "description": "volumeDevices is the list of block devices to be used by the container.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeDevice"
          },
          "x-kubernetes-patch-merge-key": "devicePath",
          "x-kubernetes-patch-strategy": "merge"
        },
        "volumeMounts": {
          "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
          },
          "x-kubernetes-patch-merge-key": "mountPath",
          "x-kubernetes-patch-strategy": "merge"
        },
        "workingDir": {
          "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.EphemeralVolumeSource": {
      "description": "Represents an ephemeral volume that is handled by a normal storage driver.",
      "type": "object",
      "properties": {
        "readOnly": {
          "description": "Specifies a read-only configuration for the volume. Defaults to false (read/write).",
          "type": "boolean"
        },
        "volumeClaimTemplate": {
          "description": "Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).\n\nAn existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.\n\nThis field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.\n\nRequired, must not be nil.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimTemplate"
        }
      }
    },
    "io.k8s.api.core.v1.Event": {
      "description": "Event is a report of an event somewhere in the cluster.",
      "type": "object",
      "required": [
        "metadata",
        "involvedObject"
      ],
      "properties": {
        "action": {
          "description": "What action was taken/failed regarding to the Regarding object.",
          "type": "string"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "count": {
          "description": "The number of times this event has occurred.",
          "type": "integer",
          "format": "int32"
        },
        "eventTime": {
          "description": "Time when this Event was first observed.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        },
        "firstTimestamp": {
          "description": "The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "involvedObject": {
          "description": "The object that this event is about.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Event"
          ]
        },
        "lastTimestamp": {
          "description": "The time at which the most recent occurrence of this event was recorded.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "A human-readable description of the status of this operation.",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "reason": {
          "description": "This should be a short, machine understandable string that gives the reason for the transition into the object's current status.",
          "type": "string"
        },
        "related": {
          "description": "Optional secondary object for more complex actions.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "reportingComponent": {
          "description": "Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.",
          "type": "string"
        },
        "reportingInstance": {
          "description": "ID of the controller instance, e.g. `kubelet-xyzf`.",
          "type": "string"
        },
        "series": {
          "description": "Data about the Event series this event represents or nil if it's a singleton Event.",
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSeries"
        },
        "source": {
          "description": "The component reporting this event. Should be a short machine understandable string.",
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSource"
        },
        "type": {
          "description": "Type of this event (Normal, Warning), new types could be added in the future",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Event",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.EventList": {
      "description": "EventList is a list of events.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "items": {
          "description": "List of events",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Event"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "EventList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "EventList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.EventSeries": {
      "description": "EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.",
      "type": "object",
      "properties": {
        "count": {
          "description": "Number of occurrences in this series up to the last heartbeat time",
          "type": "integer",
          "format": "int32"
        },
        "lastObservedTime": {
          "description": "Time of the last occurrence observed",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        }
      }
    },
    "io.k8s.api.core.v1.EventSource": {
      "description": "EventSource contains information for an event.",
      "type": "object",
      "properties": {
        "component": {
          "description": "Component from which the event is generated.",
          "type": "string"
        },
        "host": {
          "description": "Node name on which the event is generated.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.ExecAction": {
      "description": "ExecAction describes a \"run in container\" action.",
      "type": "object",
      "properties": {
        "command": {
          "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "io.k8s.api.core.v1.FCVolumeSource": {
      "description": "Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.",
      "type": "object",
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "lun": {
          "description": "Optional: FC target lun number",
          "type": "integer",
          "format": "int32"
        },
        "readOnly": {
          "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "targetWWNs": {
          "description": "Optional: FC target worldwide names (WWNs)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "wwids": {
          "description": "Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "io.k8s.api.core.v1.FlexPersistentVolumeSource": {
      "description": "FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.",
      "type": "object",
      "required": [
        "driver"
      ],
      "properties": {
        "driver": {
          "description": "Driver is the name of the driver to use for this volume.",
          "type": "string"
        },
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.",
          "type": "string"
        },
        "options": {
          "description": "Optional: Extra command options if any.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "readOnly": {
          "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "description": "Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
        }
      }
    },
    "io.k8s.api.core.v1.FlexVolumeSource": {
      "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
      "type": "object",
      "required": [
        "driver"
      ],
      "properties": {
        "driver": {
          "description": "Driver is the name of the driver to use for this volume.",
          "type": "string"
        },
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.",
          "type": "string"
        },
        "options": {
          "description": "Optional: Extra command options if any.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "readOnly": {
          "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "description": "Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        }
      }
    },
    "io.k8s.api.core.v1.FlockerVolumeSource": {
      "description": "Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.",
      "type": "object",
      "properties": {
        "datasetName": {
          "description": "Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated",
          "type": "string"
        },
        "datasetUUID": {
          "description": "UUID of the dataset. This is unique identifier of a Flocker dataset",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.GCEPersistentDiskVolumeSource": {
      "description": "Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.",
      "type": "object",
      "required": [
        "pdName"
      ],
      "properties": {
        "fsType": {
          "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "type": "string"
        },
        "partition": {
          "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "type": "integer",
          "format": "int32"
        },
        "pdName": {
          "description": "Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "type": "boolean"
        }
      }
    },
    "io.k8s.api.core.v1.GitRepoVolumeSource": {
      "description": "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.\n\nDEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
      "type": "object",
      "required": [
        "repository"
      ],
      "properties": {
        "directory": {
          "description": "Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.",
          "type": "string"
        },
        "repository": {
          "description": "Repository URL",
          "type": "string"
        },
        "revision": {
          "description": "Commit hash for the specified revision.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.GlusterfsPersistentVolumeSource": {
      "description": "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.",
      "type": "object",
      "required": [
        "endpoints",
        "path"
      ],
      "properties": {
        "endpoints": {
          "description": "EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "string"
        },
        "endpointsNamespace": {
          "description": "EndpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "string"
        },
        "path": {
          "description": "Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "boolean"
        }
      }
    },
    "io.k8s.api.core.v1.GlusterfsVolumeSource": {
      "description": "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.",
      "type": "object",
      "required": [
        "endpoints",
        "path"
      ],
      "properties": {
        "endpoints": {
          "description": "EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "string"
        },
        "path": {
          "description": "Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "boolean"
        }
      }
    },
    "io.k8s.api.core.v1.HTTPGetAction": {
      "description": "HTTPGetAction describes an action based on HTTP Get requests.",
      "type": "object",
      "required": [
        "port"
      ],
      "properties": {
        "host": {
          "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
          "type": "string"
        },
        "httpHeaders": {
          "description": "Custom headers to set in the request. HTTP allows repeated headers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.HTTPHeader"
          }
        },
        "path": {
          "description": "Path to access on the HTTP server.",
          "type": "string"
        },
        "port": {
          "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        },
        "scheme": {
          "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.HTTPHeader": {
      "description": "HTTPHeader describes a custom header to be used in HTTP probes",
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "description": "The header field name",
          "type": "string"
        },
        "value": {
          "description": "The header field value",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.Handler": {
      "description": "Handler defines a specific action that should be taken",
      "type": "object",
      "properties": {
        "exec": {
          "description": "One and only one of the following should be specified. Exec specifies the action to take.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ExecAction"
        },
        "httpGet": {
          "description": "HTTPGet specifies the http request to perform.",
          "$ref": "#/definitions/io.k8s.api.core.v1.HTTPGetAction"
        },
        "tcpSocket": {
          "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported",
          "$ref": "#/definitions/io.k8s.api.core.v1.TCPSocketAction"
        }
      }
    },
    "io.k8s.api.core.v1.HostAlias": {
      "description": "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.",
      "type": "object",
      "properties": {
        "hostnames": {
          "description": "Hostnames for the above IP address.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ip": {
          "description": "IP address of the host file entry.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.HostPathVolumeSource": {
      "description": "Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.",
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "path": {
          "description": "Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
          "type": "string"
        },
        "type": {
          "description": "Type for HostPath Volume Defaults to \"\" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.ISCSIPersistentVolumeSource": {
      "description": "ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.",
      "type": "object",
      "required": [
        "targetPortal",
        "iqn",
        "lun"
      ],
      "properties": {
        "chapAuthDiscovery": {
          "description": "whether support iSCSI Discovery CHAP authentication",
          "type": "boolean"
        },
        "chapAuthSession": {
          "description": "whether support iSCSI Session CHAP authentication",
          "type": "boolean"
        },
        "fsType": {
          "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi",
          "type": "string"
        },
        "initiatorName": {
          "description": "Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.",
          "type": "string"
        },
        "iqn": {
          "description": "Target iSCSI Qualified Name.",
          "type": "string"
        },
        "iscsiInterface": {
          "description": "iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
          "type": "string"
        },
        "lun": {
          "description": "iSCSI Target Lun number.",
          "type": "integer",
          "format": "int32"
        },
        "portals": {
          "description": "iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "readOnly": {
          "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.",
          "type": "boolean"
        },
        "secretRef": {
          "description": "CHAP Secret for iSCSI target and initiator authentication",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
        },
        "targetPortal": {
          "description": "iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.ISCSIVolumeSource": {
      "description": "Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.",
      "type": "object",
      "required": [
        "targetPortal",
        "iqn",
        "lun"
      ],
      "properties": {
        "chapAuthDiscovery": {
          "description": "whether support iSCSI Discovery CHAP authentication",
          "type": "boolean"
        },
        "chapAuthSession": {
          "description": "whether support iSCSI Session CHAP authentication",
          "type": "boolean"
        },
        "fsType": {
          "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi",
          "type": "string"
        },
        "initiatorName": {
          "description": "Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.",
          "type": "string"
        },
        "iqn": {
          "description": "Target iSCSI Qualified Name.",
          "type": "string"
        },
        "iscsiInterface": {
          "description": "iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
          "type": "string"
        },
        "lun": {
          "description": "iSCSI Target Lun number.",
          "type": "integer",
          "format": "int32"
        },
        "portals": {
          "description": "iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "readOnly": {
          "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.",
          "type": "boolean"
        },
        "secretRef": {
          "description": "CHAP Secret for iSCSI target and initiator authentication",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        },
        "targetPortal": {
          "description": "iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.KeyToPath": {
      "description": "Maps a string key to a path within a volume.",
      "type": "object",
      "required": [
        "key",
        "path"
      ],
      "properties": {
        "key": {
          "description": "The key to project.",
          "type": "string"
        },
        "mode": {
          "description": "Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "type": "integer",
          "format": "int32"
        },
        "path": {
          "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.Lifecycle": {
      "description": "Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.",
      "type": "object",
      "properties": {
        "postStart": {
          "description": "PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
          "$ref": "#/definitions/io.k8s.api.core.v1.Handler"
        },
        "preStop": {
          "description": "PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
          "$ref": "#/definitions/io.k8s.api.core.v1.Handler"
        }
      }
    },
    "io.k8s.api.core.v1.LimitRange": {
      "description": "LimitRange sets resource usage limits for each kind of resource in a Namespace.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "LimitRange"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the limits enforced. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.core.v1.LimitRangeSpec"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "LimitRange",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.LimitRangeItem": {
      "description": "LimitRangeItem defines a min/max usage limit for any resource that matches on kind.",
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "default": {
          "description": "Default resource requirement limit value by resource name if resource limit is omitted.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        },
        "defaultRequest": {
          "description": "DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        },
        "max": {
          "description": "Max usage constraints on this kind by resource name.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        },
        "maxLimitRequestRatio": {
          "description": "MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        },
        "min": {
          "description": "Min usage constraints on this kind by resource name.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        },
        "type": {
          "description": "Type of resource that this limit applies to.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.LimitRangeList": {
      "description": "LimitRangeList is a list of LimitRange items.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "items": {
          "description": "Items is a list of LimitRange objects. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LimitRange"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "LimitRangeList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "LimitRangeList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.LimitRangeSpec": {
      "description": "LimitRangeSpec defines a min/max usage limit for resources that match on kind.",
      "type": "object",
      "required": [
        "limits"
      ],
      "properties": {
        "limits": {
          "description": "Limits is the list of LimitRangeItem objects that are enforced.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LimitRangeItem"
          }
        }
      }
    },
    "io.k8s.api.core.v1.LoadBalancerIngress": {
      "description": "LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.",
      "type": "object",
      "properties": {
        "hostname": {
          "description": "Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)",
          "type": "string"
        },
        "ip": {
          "description": "IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.LoadBalancerStatus": {
      "description": "LoadBalancerStatus represents the status of a load-balancer.",
      "type": "object",
      "properties": {
        "ingress": {
          "description": "Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LoadBalancerIngress"
          }
        }
      }
    },
    "io.k8s.api.core.v1.LocalObjectReference": {
      "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.LocalVolumeSource": {
      "description": "Local represents directly-attached storage with node affinity (Beta feature)",
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default value is to auto-select a fileystem if unspecified.",
          "type": "string"
        },
        "path": {
          "description": "The full path to the volume on the node. It can be either a directory or block device (disk, partition, ...).",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.NFSVolumeSource": {
      "description": "Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.",
      "type": "object",
      "required": [
        "server",
        "path"
      ],
      "properties": {
        "path": {
          "description": "Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
          "type": "boolean"
        },
        "server": {
          "description": "Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.Namespace": {
      "description": "Namespace provides a scope for Names. Use of multiple namespaces is optional.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Namespace"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.core.v1.NamespaceSpec"
        },
        "status": {
          "description": "Status describes the current status of a Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.core.v1.NamespaceStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Namespace",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.NamespaceCondition": {
      "description": "NamespaceCondition contains details about state of namespace.",
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of namespace controller condition.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.NamespaceList": {
      "description": "NamespaceList is a list of Namespaces.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "items": {
          "description": "Items is the list of Namespace objects in the list. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Namespace"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "NamespaceList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "NamespaceList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.NamespaceSpec": {
      "description": "NamespaceSpec describes the attributes on a Namespace.",
      "type": "object",
      "properties": {
        "finalizers": {
          "description": "Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "io.k8s.api.core.v1.NamespaceStatus": {
      "description": "NamespaceStatus is information about the current status of a Namespace.",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Represents the latest available observations of a namespace's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NamespaceCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "phase": {
          "description": "Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.Node": {
      "description": "Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Node"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the behavior of a node. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSpec"
        },
        "status": {
          "description": "Most recently observed status of the node. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Node",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.NodeAddress": {
      "description": "NodeAddress contains information for the node's address.",
      "type": "object",
      "required": [
        "type",
        "address"
      ],
      "properties": {
        "address": {
          "description": "The node address.",
          "type": "string"
        },
        "type": {
          "description": "Node address type, one of Hostname, ExternalIP or InternalIP.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.NodeAffinity": {
      "description": "Node affinity is a group of node affinity scheduling rules.",
      "type": "object",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PreferredSchedulingTerm"
          }
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.",
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelector"
        }
      }
    },
    "io.k8s.api.core.v1.NodeCondition": {
      "description": "NodeCondition contains condition information for a node.",
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastHeartbeatTime": {
          "description": "Last time we got an update on a given condition.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "lastTransitionTime": {
          "description": "Last time the condition transit from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "Human readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "(brief) reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of node condition.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.NodeConfigSource": {
      "description": "NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil.",
      "type": "object",
      "properties": {
        "configMap": {
          "description": "ConfigMap is a reference to a Node's ConfigMap",
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapNodeConfigSource"
        }
      }
    },
    "io.k8s.api.core.v1.NodeConfigStatus": {
      "description": "NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.",
      "type": "object",
      "properties": {
        "active": {
          "description": "Active reports the checkpointed config the node is actively using. Active will represent either the current version of the Assigned config, or the current LastKnownGood config, depending on whether attempting to use the Assigned config results in an error.",
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeConfigSource"
        },
        "assigned": {
          "description": "Assigned reports the checkpointed config the node will try to use. When Node.Spec.ConfigSource is updated, the node checkpoints the associated config payload to local disk, along with a record indicating intended config. The node refers to this record to choose its config checkpoint, and reports this record in Assigned. Assigned only updates in the status after the record has been checkpointed to disk. When the Kubelet is restarted, it tries to make the Assigned config the Active config by loading and validating the checkpointed payload identified by Assigned.",
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeConfigSource"
        },
        "error": {
          "description": "Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions.",
          "type": "string"
        },
        "lastKnownGood": {
          "description": "LastKnownGood reports the checkpointed config the node will fall back to when it encounters an error attempting to use the Assigned config. The Assigned config becomes the LastKnownGood config when the node determines that the Assigned config is stable and correct. This is currently implemented as a 10-minute soak period starting when the local record of Assigned config is updated. If the Assigned config is Active at the end of this period, it becomes the LastKnownGood. Note that if Spec.ConfigSource is reset to nil (use local defaults), the LastKnownGood is also immediately reset to nil, because the local default config is always assumed good. You should not make assumptions about the node's method of determining config stability and correctness, as this may change or become configurable in the future.",
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeConfigSource"
        }
      }
    },
    "io.k8s.api.core.v1.NodeDaemonEndpoints": {
      "description": "NodeDaemonEndpoints lists ports opened by daemons running on the Node.",
      "type": "object",
      "properties": {
        "kubeletEndpoint": {
          "description": "Endpoint on which Kubelet is listening.",
          "$ref": "#/definitions/io.k8s.api.core.v1.DaemonEndpoint"
        }
      }
    },
    "io.k8s.api.core.v1.NodeList": {
      "description": "NodeList is the whole list of all Nodes which have been registered with master.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "items": {
          "description": "List of nodes",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Node"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "NodeList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "NodeList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.NodeSelector": {
      "description": "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.",
      "type": "object",
      "required": [
        "nodeSelectorTerms"
      ],
      "properties": {
        "nodeSelectorTerms": {
          "description": "Required. A list of node selector terms. The terms are ORed.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorTerm"
          }
        }
      }
    },
    "io.k8s.api.core.v1.NodeSelectorRequirement": {
      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
      "type": "object",
      "required": [
        "key",
        "operator"
      ],
      "properties": {
        "key": {
          "description": "The label key that the selector applies to.",
          "type": "string"
        },
        "operator": {
          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
          "type": "string"
        },
        "values": {
          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "io.k8s.api.core.v1.NodeSelectorTerm": {
      "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
      "type": "object",
      "properties": {
        "matchExpressions": {
          "description": "A list of node selector requirements by node's labels.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorRequirement"
          }
        },
        "matchFields": {
          "description": "A list of node selector requirements by node's fields.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorRequirement"
          }
        }
      }
    },
    "io.k8s.api.core.v1.NodeSpec": {
      "description": "NodeSpec describes the attributes that a node is created with.",
      "type": "object",
      "properties": {
        "configSource": {
          "description": "If specified, the source to get node configuration from The DynamicKubeletConfig feature gate must be enabled for the Kubelet to use this field",
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeConfigSource"
        },
        "externalID": {
          "description": "Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966",
          "type": "string"
        },
        "podCIDR": {
          "description": "PodCIDR represents the pod IP range assigned to the node.",
          "type": "string"
        },
        "podCIDRs": {
          "description": "podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-patch-strategy": "merge"
        },
        "providerID": {
          "description": "ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>",
          "type": "string"
        },
        "taints": {
          "description": "If specified, the node's taints.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Taint"
          }
        },
        "unschedulable": {
          "description": "Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration",
          "type": "boolean"
        }
      }
    },
    "io.k8s.api.core.v1.NodeStatus": {
      "description": "NodeStatus is information about the current status of a node.",
      "type": "object",
      "properties": {
        "addresses": {
          "description": "List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See http://pr.k8s.io/79391 for an example.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeAddress"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "allocatable": {
          "description": "Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        },
        "capacity": {
          "description": "Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        },
        "conditions": {
          "description": "Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "config": {
          "description": "Status of the config assigned to the node via the dynamic Kubelet config feature.",
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeConfigStatus"
        },
        "daemonEndpoints": {
          "description": "Endpoints of daemons running on the Node.",
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeDaemonEndpoints"
        },
        "images": {
          "description": "List of container images on this node",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerImage"
          }
        },
        "nodeInfo": {
          "description": "Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info",
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSystemInfo"
        },
        "phase": {
          "description": "NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.",
          "type": "string"
        },
        "volumesAttached": {
          "description": "List of volumes that are attached to the node.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.AttachedVolume"
          }
        },
        "volumesInUse": {
          "description": "List of attachable volumes in use (mounted) by the node.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "io.k8s.api.core.v1.NodeSystemInfo": {
      "description": "NodeSystemInfo is a set of ids/uuids to uniquely identify the node.",
      "type": "object",
      "required": [
        "machineID",
        "systemUUID",
        "bootID",
        "kernelVersion",
        "osImage",
        "containerRuntimeVersion",
        "kubeletVersion",
        "kubeProxyVersion",
        "operatingSystem",
        "architecture"
      ],
      "properties": {
        "architecture": {
          "description": "The Architecture reported by the node",
          "type": "string"
        },
        "bootID": {
          "description": "Boot ID reported by the node.",
          "type": "string"
        },
        "containerRuntimeVersion": {
          "description": "ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0).",
          "type": "string"
        },
        "kernelVersion": {
          "description": "Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).",
          "type": "string"
        },
        "kubeProxyVersion": {
          "description": "KubeProxy Version reported by the node.",
          "type": "string"
        },
        "kubeletVersion": {
          "description": "Kubelet Version reported by the node.",
          "type": "string"
        },
        "machineID": {
          "description": "MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html",
          "type": "string"
        },
        "operatingSystem": {
          "description": "The Operating System reported by the node",
          "type": "string"
        },
        "osImage": {
          "description": "OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).",
          "type": "string"
        },
        "systemUUID": {
          "description": "SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.ObjectFieldSelector": {
      "description": "ObjectFieldSelector selects an APIVersioned field of an object.",
      "type": "object",
      "required": [
        "fieldPath"
      ],
      "properties": {
        "apiVersion": {
          "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
          "type": "string"
        },
        "fieldPath": {
          "description": "Path of the field to select in the specified API version.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.ObjectReference": {
      "description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string"
        },
        "fieldPath": {
          "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
          "type": "string"
        },
        "resourceVersion": {
          "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.PersistentVolume": {
      "description": "PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PersistentVolume"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes",
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeSpec"
        },
        "status": {
          "description": "Status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes",
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PersistentVolume",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PersistentVolumeClaim": {
      "description": "PersistentVolumeClaim is a user's request for and claim to a persistent volume",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PersistentVolumeClaim"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimSpec"
        },
        "status": {
          "description": "Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PersistentVolumeClaim",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimCondition": {
      "description": "PersistentVolumeClaimCondition contails details about state of pvc",
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastProbeTime": {
          "description": "Last time we probed the condition.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports \"ResizeStarted\" that means the underlying persistent volume is being resized.",
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimList": {
      "description": "PersistentVolumeClaimList is a list of PersistentVolumeClaim items.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "items": {
          "description": "A list of persistent volume claims. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PersistentVolumeClaimList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PersistentVolumeClaimList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimSpec": {
      "description": "PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes",
      "type": "object",
      "properties": {
        "accessModes": {
          "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dataSource": {
          "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot - Beta) * An existing PVC (PersistentVolumeClaim) * An existing custom resource/object that implements data population (Alpha) In order to use VolumeSnapshot object types, the appropriate feature gate must be enabled (VolumeSnapshotDataSource or AnyVolumeDataSource) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the specified data source is not supported, the volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.",
          "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference"
        },
        "resources": {
          "description": "Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
        },
        "selector": {
          "description": "A label query over volumes to consider for binding.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "storageClassName": {
          "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
          "type": "string"
        },
        "volumeMode": {
          "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
          "type": "string"
        },
        "volumeName": {
          "description": "VolumeName is the binding reference to the PersistentVolume backing this claim.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimStatus": {
      "description": "PersistentVolumeClaimStatus is the current status of a persistent volume claim.",
      "type": "object",
      "properties": {
        "accessModes": {
          "description": "AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "capacity": {
          "description": "Represents the actual resources of the underlying volume.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        },
        "conditions": {
          "description": "Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "phase": {
          "description": "Phase represents the current phase of PersistentVolumeClaim.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimTemplate": {
      "description": "PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "metadata": {
          "description": "May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimSpec"
        }
      }
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource": {
      "description": "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
      "type": "object",
      "required": [
        "claimName"
      ],
      "properties": {
        "claimName": {
          "description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
          "type": "string"
        },
        "readOnly": {
          "description": "Will force the ReadOnly setting in VolumeMounts. Default false.",
          "type": "boolean"
        }
      }
    },
    "io.k8s.api.core.v1.PersistentVolumeList": {
      "description": "PersistentVolumeList is a list of PersistentVolume items.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "items": {
          "description": "List of persistent volumes. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PersistentVolumeList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PersistentVolumeList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PersistentVolumeSpec": {
      "description": "PersistentVolumeSpec is the specification of a persistent volume.",
      "type": "object",
      "properties": {
        "accessModes": {
          "description": "AccessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "awsElasticBlockStore": {
          "description": "AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
          "$ref": "#/definitions/io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource"
        },
        "azureDisk": {
          "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
          "$ref": "#/definitions/io.k8s.api.core.v1.AzureDiskVolumeSource"
        },
        "azureFile": {
          "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
          "$ref": "#/definitions/io.k8s.api.core.v1.AzureFilePersistentVolumeSource"
        },
        "capacity": {
          "description": "A description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        },
        "cephfs": {
          "description": "CephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
          "$ref": "#/definitions/io.k8s.api.core.v1.CephFSPersistentVolumeSource"
        },
        "cinder": {
          "description": "Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "$ref": "#/definitions/io.k8s.api.core.v1.CinderPersistentVolumeSource"
        },
        "claimRef": {
          "description": "ClaimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "csi": {
          "description": "CSI represents storage that is handled by an external CSI driver (Beta feature).",
          "$ref": "#/definitions/io.k8s.api.core.v1.CSIPersistentVolumeSource"
        },
        "fc": {
          "description": "FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
          "$ref": "#/definitions/io.k8s.api.core.v1.FCVolumeSource"
        },
        "flexVolume": {
          "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
          "$ref": "#/definitions/io.k8s.api.core.v1.FlexPersistentVolumeSource"
        },
        "flocker": {
          "description": "Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running",
          "$ref": "#/definitions/io.k8s.api.core.v1.FlockerVolumeSource"
        },
        "gcePersistentDisk": {
          "description": "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "$ref": "#/definitions/io.k8s.api.core.v1.GCEPersistentDiskVolumeSource"
        },
        "glusterfs": {
          "description": "Glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md",
          "$ref": "#/definitions/io.k8s.api.core.v1.GlusterfsPersistentVolumeSource"
        },
        "hostPath": {
          "description": "HostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
          "$ref": "#/definitions/io.k8s.api.core.v1.HostPathVolumeSource"
        },
        "iscsi": {
          "description": "ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ISCSIPersistentVolumeSource"
        },
        "local": {
          "description": "Local represents directly-attached storage with node affinity",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalVolumeSource"
        },
        "mountOptions": {
          "description": "A list of mount options, e.g. [\"ro\", \"soft\"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nfs": {
          "description": "NFS represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
          "$ref": "#/definitions/io.k8s.api.core.v1.NFSVolumeSource"
        },
        "nodeAffinity": {
          "description": "NodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.",
          "$ref": "#/definitions/io.k8s.api.core.v1.VolumeNodeAffinity"
        },
        "persistentVolumeReclaimPolicy": {
          "description": "What happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming",
          "type": "string"
        },
        "photonPersistentDisk": {
          "description": "PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
          "$ref": "#/definitions/io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource"
        },
        "portworxVolume": {
          "description": "PortworxVolume represents a portworx volume attached and mounted on kubelets host machine",
          "$ref": "#/definitions/io.k8s.api.core.v1.PortworxVolumeSource"
        },
        "quobyte": {
          "description": "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
          "$ref": "#/definitions/io.k8s.api.core.v1.QuobyteVolumeSource"
        },
        "rbd": {
          "description": "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md",
          "$ref": "#/definitions/io.k8s.api.core.v1.RBDPersistentVolumeSource"
        },
        "scaleIO": {
          "description": "ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ScaleIOPersistentVolumeSource"
        },
        "storageClassName": {
          "description": "Name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.",
          "type": "string"
        },
        "storageos": {
          "description": "StorageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md",
          "$ref": "#/definitions/io.k8s.api.core.v1.StorageOSPersistentVolumeSource"
        },
        "volumeMode": {
          "description": "volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.",
          "type": "string"
        },
        "vsphereVolume": {
          "description": "VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine",
          "$ref": "#/definitions/io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource"
        }
      }
    },
    "io.k8s.api.core.v1.PersistentVolumeStatus": {
      "description": "PersistentVolumeStatus is the current status of a persistent volume.",
      "type": "object",
      "properties": {
        "message": {
          "description": "A human-readable message indicating details about why the volume is in this state.",
          "type": "string"
        },
        "phase": {
          "description": "Phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase",
          "type": "string"
        },
        "reason": {
          "description": "Reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource": {
      "description": "Represents a Photon Controller persistent disk resource.",
      "type": "object",
      "required": [
        "pdID"
      ],
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "pdID": {
          "description": "ID that identifies Photon Controller persistent disk",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.Pod": {
      "description": "Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Pod"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSpec"
        },
        "status": {
          "description": "Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Pod",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PodAffinity": {
      "description": "Pod affinity is a group of inter pod affinity scheduling rules.",
      "type": "object",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.WeightedPodAffinityTerm"
          }
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinityTerm"
          }
        }
      }
    },
    "io.k8s.api.core.v1.PodAffinityTerm": {
      "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
      "type": "object",
      "required": [
        "topologyKey"
      ],
      "properties": {
        "labelSelector": {
          "description": "A label query over a set of resources, in this case pods.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "namespaces": {
          "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "topologyKey": {
          "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.PodAntiAffinity": {
      "description": "Pod anti affinity is a group of inter pod anti affinity scheduling rules.",
      "type": "object",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.WeightedPodAffinityTerm"
          }
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinityTerm"
          }
        }
      }
    },
    "io.k8s.api.core.v1.PodCondition": {
      "description": "PodCondition contains details for the current condition of this pod.",
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastProbeTime": {
          "description": "Last time we probed the condition.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions",
          "type": "string"
        },
        "type": {
          "description": "Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.PodDNSConfig": {
      "description": "PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.",
      "type": "object",
      "properties": {
        "nameservers": {
          "description": "A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "options": {
          "description": "A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodDNSConfigOption"
          }
        },
        "searches": {
          "description": "A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "io.k8s.api.core.v1.PodDNSConfigOption": {
      "description": "PodDNSConfigOption defines DNS resolver options of a pod.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Required.",
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.PodIP": {
      "description": "IP address information for entries in the (plural) PodIPs field. Each entry includes:\n   IP: An IP address allocated to the pod. Routable at least within the cluster.",
      "type": "object",
      "properties": {
        "ip": {
          "description": "ip is an IP address (IPv4 or IPv6) assigned to the pod",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.PodList": {
      "description": "PodList is a list of Pods.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "items": {
          "description": "List of pods. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Pod"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PodList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PodList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PodReadinessGate": {
      "description": "PodReadinessGate contains the reference to a pod condition",
      "type": "object",
      "required": [
        "conditionType"
      ],
      "properties": {
        "conditionType": {
          "description": "ConditionType refers to a condition in the pod's condition list with matching type.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.PodSecurityContext": {
      "description": "PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.",
      "type": "object",
      "properties": {
        "fsGroup": {
          "description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.",
          "type": "integer",
          "format": "int64"
        },
        "fsGroupChangePolicy": {
          "description": "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified defaults to \"Always\".",
          "type": "string"
        },
        "runAsGroup": {
          "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
          "type": "integer",
          "format": "int64"
        },
        "runAsNonRoot": {
          "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "type": "boolean"
        },
        "runAsUser": {
          "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
          "type": "integer",
          "format": "int64"
        },
        "seLinuxOptions": {
          "description": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
          "$ref": "#/definitions/io.k8s.api.core.v1.SELinuxOptions"
        },
        "seccompProfile": {
          "description": "The seccomp options to use by the containers in this pod.",
          "$ref": "#/definitions/io.k8s.api.core.v1.SeccompProfile"
        },
        "supplementalGroups": {
          "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "sysctls": {
          "description": "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Sysctl"
          }
        },
        "windowsOptions": {
          "description": "The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "$ref": "#/definitions/io.k8s.api.core.v1.WindowsSecurityContextOptions"
        }
      }
    },
    "io.k8s.api.core.v1.PodSpec": {
      "description": "PodSpec is a description of a pod.",
      "type": "object",
      "required": [
        "containers"
      ],
      "properties": {
        "activeDeadlineSeconds": {
          "description": "Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.",
          "type": "integer",
          "format": "int64"
        },
        "affinity": {
          "description": "If specified, the pod's scheduling constraints",
          "$ref": "#/definitions/io.k8s.api.core.v1.Affinity"
        },
        "automountServiceAccountToken": {
          "description": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.",
          "type": "boolean"
        },
        "containers": {
          "description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Container"
          },
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "dnsConfig": {
          "description": "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodDNSConfig"
        },
        "dnsPolicy": {
          "description": "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.",
          "type": "string"
        },
        "enableServiceLinks": {
          "description": "EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.",
          "type": "boolean"
        },
        "ephemeralContainers": {
          "description": "List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource. This field is alpha-level and is only honored by servers that enable the EphemeralContainers feature.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EphemeralContainer"
          },
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "hostAliases": {
          "description": "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.HostAlias"
          },
          "x-kubernetes-patch-merge-key": "ip",
          "x-kubernetes-patch-strategy": "merge"
        },
        "hostIPC": {
          "description": "Use the host's ipc namespace. Optional: Default to false.",
          "type": "boolean"
        },
        "hostNetwork": {
          "description": "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.",
          "type": "boolean"
        },
        "hostPID": {
          "description": "Use the host's pid namespace. Optional: Default to false.",
          "type": "boolean"
        },
        "hostname": {
          "description": "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.",
          "type": "string"
        },
        "imagePullSecrets": {
          "description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
          },
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "initContainers": {
          "description": "List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Container"
          },
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "nodeName": {
          "description": "NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.",
          "type": "string"
        },
        "nodeSelector": {
          "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "overhead": {
          "description": "Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.16, and is only honored by servers that enable the PodOverhead feature.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        },
        "preemptionPolicy": {
          "description": "PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is beta-level, gated by the NonPreemptingPriority feature-gate.",
          "type": "string"
        },
        "priority": {
          "description": "The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.",
          "type": "integer",
          "format": "int32"
        },
        "priorityClassName": {
          "description": "If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.",
          "type": "string"
        },
        "readinessGates": {
          "description": "If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to \"True\" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodReadinessGate"
          }
        },
        "restartPolicy": {
          "description": "Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy",
          "type": "string"
        },
        "runtimeClassName": {
          "description": "RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md This is a beta feature as of Kubernetes v1.14.",
          "type": "string"
        },
        "schedulerName": {
          "description": "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.",
          "type": "string"
        },
        "securityContext": {
          "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext"
        },
        "serviceAccount": {
          "description": "DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.",
          "type": "string"
        },
        "serviceAccountName": {
          "description": "ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
          "type": "string"
        },
        "setHostnameAsFQDN": {
          "description": "If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.",
          "type": "boolean"
        },
        "shareProcessNamespace": {
          "description": "Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.",
          "type": "boolean"
        },
        "subdomain": {
          "description": "If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.",
          "type": "string"
        },
        "terminationGracePeriodSeconds": {
          "description": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.",
          "type": "integer",
          "format": "int64"
        },
        "tolerations": {
          "description": "If specified, the pod's tolerations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
          }
        },
        "topologySpreadConstraints": {
          "description": "TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySpreadConstraint"
          },
          "x-kubernetes-list-map-keys": [
            "topologyKey",
            "whenUnsatisfiable"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "topologyKey",
          "x-kubernetes-patch-strategy": "merge"
        },
        "volumes": {
          "description": "List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
          },
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge,retainKeys"
        }
      }
    },
    "io.k8s.api.core.v1.PodStatus": {
      "description": "PodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "containerStatuses": {
          "description": "The list has one entry per container in the manifest. Each entry is currently the output of `docker inspect`. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStatus"
          }
        },
        "ephemeralContainerStatuses": {
          "description": "Status for any ephemeral containers that have run in this pod. This field is alpha-level and is only populated by servers that enable the EphemeralContainers feature.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStatus"
          }
        },
        "hostIP": {
          "description": "IP address of the host to which the pod is assigned. Empty if not yet scheduled.",
          "type": "string"
        },
        "initContainerStatuses": {
          "description": "The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStatus"
          }
        },
        "message": {
          "description": "A human readable message indicating details about why the pod is in this condition.",
          "type": "string"
        },
        "nominatedNodeName": {
          "description": "nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.",
          "type": "string"
        },
        "phase": {
          "description": "The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:\n\nPending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.\n\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase",
          "type": "string"
        },
        "podIP": {
          "description": "IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.",
          "type": "string"
        },
        "podIPs": {
          "description": "podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodIP"
          },
          "x-kubernetes-patch-merge-key": "ip",
          "x-kubernetes-patch-strategy": "merge"
        },
        "qosClass": {
          "description": "The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md",
          "type": "string"
        },
        "reason": {
          "description": "A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'",
          "type": "string"
        },
        "startTime": {
          "description": "RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      }
    },
    "io.k8s.api.core.v1.PodTemplate": {
      "description": "PodTemplate describes a template for creating copies of a predefined pod.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PodTemplate"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "template": {
          "description": "Template defines the pods that will be created from this pod template. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PodTemplate",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PodTemplateList": {
      "description": "PodTemplateList is a list of PodTemplates.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "items": {
          "description": "List of pod templates",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PodTemplateList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PodTemplateList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PodTemplateSpec": {
      "description": "PodTemplateSpec describes the data a pod should have when created from a template",
      "type": "object",
      "properties": {
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSpec"
        }
      }
    },
    "io.k8s.api.core.v1.PortworxVolumeSource": {
      "description": "PortworxVolumeSource represents a Portworx volume resource.",
      "type": "object",
      "required": [
        "volumeID"
      ],
      "properties": {
        "fsType": {
          "description": "FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "readOnly": {
          "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "volumeID": {
          "description": "VolumeID uniquely identifies a Portworx volume",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.PreferredSchedulingTerm": {
      "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
      "type": "object",
      "required": [
        "weight",
        "preference"
      ],
      "properties": {
        "preference": {
          "description": "A node selector term, associated with the corresponding weight.",
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorTerm"
        },
        "weight": {
          "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.api.core.v1.Probe": {
      "description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
      "type": "object",
      "properties": {
        "exec": {
          "description": "One and only one of the following should be specified. Exec specifies the action to take.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ExecAction"
        },
        "failureThreshold": {
          "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
          "type": "integer",
          "format": "int32"
        },
        "httpGet": {
          "description": "HTTPGet specifies the http request to perform.",
          "$ref": "#/definitions/io.k8s.api.core.v1.HTTPGetAction"
        },
        "initialDelaySeconds": {
          "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
          "type": "integer",
          "format": "int32"
        },
        "periodSeconds": {
          "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
          "type": "integer",
          "format": "int32"
        },
        "successThreshold": {
          "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
          "type": "integer",
          "format": "int32"
        },
        "tcpSocket": {
          "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported",
          "$ref": "#/definitions/io.k8s.api.core.v1.TCPSocketAction"
        },
        "timeoutSeconds": {
          "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.api.core.v1.ProjectedVolumeSource": {
      "description": "Represents a projected volume source",
      "type": "object",
      "required": [
        "sources"
      ],
      "properties": {
        "defaultMode": {
          "description": "Mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "type": "integer",
          "format": "int32"
        },
        "sources": {
          "description": "list of volume projections",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeProjection"
          }
        }
      }
    },
    "io.k8s.api.core.v1.QuobyteVolumeSource": {
      "description": "Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.",
      "type": "object",
      "required": [
        "registry",
        "volume"
      ],
      "properties": {
        "group": {
          "description": "Group to map volume access to Default is no group",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.",
          "type": "boolean"
        },
        "registry": {
          "description": "Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes",
          "type": "string"
        },
        "tenant": {
          "description": "Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin",
          "type": "string"
        },
        "user": {
          "description": "User to map volume access to Defaults to serivceaccount user",
          "type": "string"
        },
        "volume": {
          "description": "Volume is a string that references an already created Quobyte volume by name.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.RBDPersistentVolumeSource": {
      "description": "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.",
      "type": "object",
      "required": [
        "monitors",
        "image"
      ],
      "properties": {
        "fsType": {
          "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd",
          "type": "string"
        },
        "image": {
          "description": "The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "keyring": {
          "description": "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "monitors": {
          "description": "A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "pool": {
          "description": "The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "boolean"
        },
        "secretRef": {
          "description": "SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
        },
        "user": {
          "description": "The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.RBDVolumeSource": {
      "description": "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.",
      "type": "object",
      "required": [
        "monitors",
        "image"
      ],
      "properties": {
        "fsType": {
          "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd",
          "type": "string"
        },
        "image": {
          "description": "The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "keyring": {
          "description": "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "monitors": {
          "description": "A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "pool": {
          "description": "The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "boolean"
        },
        "secretRef": {
          "description": "SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        },
        "user": {
          "description": "The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.ReplicationController": {
      "description": "ReplicationController represents the configuration of a replication controller.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ReplicationController"
          ]
        },
        "metadata": {
          "description": "If the Labels of a ReplicationController are empty, they are defaulted to be the same as the Pod(s) that the replication controller manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the specification of the desired behavior of the replication controller. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationControllerSpec"
        },
        "status": {
          "description": "Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationControllerStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ReplicationController",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ReplicationControllerCondition": {
      "description": "ReplicationControllerCondition describes the state of a replication controller at a certain point.",
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "The last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of replication controller condition.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.ReplicationControllerList": {
      "description": "ReplicationControllerList is a collection of replication controllers.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "items": {
          "description": "List of replication controllers. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ReplicationControllerList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ReplicationControllerList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ReplicationControllerSpec": {
      "description": "ReplicationControllerSpec is the specification of a replication controller.",
      "type": "object",
      "properties": {
        "minReadySeconds": {
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller",
          "type": "integer",
          "format": "int32"
        },
        "selector": {
          "description": "Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "template": {
          "description": "Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        }
      }
    },
    "io.k8s.api.core.v1.ReplicationControllerStatus": {
      "description": "ReplicationControllerStatus represents the current status of a replication controller.",
      "type": "object",
      "required": [
        "replicas"
      ],
      "properties": {
        "availableReplicas": {
          "description": "The number of available replicas (ready for at least minReadySeconds) for this replication controller.",
          "type": "integer",
          "format": "int32"
        },
        "conditions": {
          "description": "Represents the latest available observations of a replication controller's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationControllerCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "fullyLabeledReplicas": {
          "description": "The number of pods that have labels matching the labels of the pod template of the replication controller.",
          "type": "integer",
          "format": "int32"
        },
        "observedGeneration": {
          "description": "ObservedGeneration reflects the generation of the most recently observed replication controller.",
          "type": "integer",
          "format": "int64"
        },
        "readyReplicas": {
          "description": "The number of ready replicas for this replication controller.",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.api.core.v1.ResourceFieldSelector": {
      "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
      "type": "object",
      "required": [
        "resource"
      ],
      "properties": {
        "containerName": {
          "description": "Container name: required for volumes, optional for env vars",
          "type": "string"
        },
        "divisor": {
          "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        },
        "resource": {
          "description": "Required: resource to select",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.ResourceQuota": {
      "description": "ResourceQuota sets aggregate quota restrictions enforced per namespace",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ResourceQuota"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the desired quota. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaSpec"
        },
        "status": {
          "description": "Status defines the actual enforced quota and its current usage. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ResourceQuota",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ResourceQuotaList": {
      "description": "ResourceQuotaList is a list of ResourceQuota items.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "items": {
          "description": "Items is a list of ResourceQuota objects. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ResourceQuotaList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ResourceQuotaList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ResourceQuotaSpec": {
      "description": "ResourceQuotaSpec defines the desired hard limits to enforce for Quota.",
      "type": "object",
      "properties": {
        "hard": {
          "description": "hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        },
        "scopeSelector": {
          "description": "scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ScopeSelector"
        },
        "scopes": {
          "description": "A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "io.k8s.api.core.v1.ResourceQuotaStatus": {
      "description": "ResourceQuotaStatus defines the enforced hard limits and observed use.",
      "type": "object",
      "properties": {
        "hard": {
          "description": "Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        },
        "used": {
          "description": "Used is the current observed total usage of the resource in the namespace.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        }
      }
    },
    "io.k8s.api.core.v1.ResourceRequirements": {
      "description": "ResourceRequirements describes the compute resource requirements.",
      "type": "object",
      "properties": {
        "limits": {
          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        },
        "requests": {
          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        }
      }
    },
    "io.k8s.api.core.v1.SELinuxOptions": {
      "description": "SELinuxOptions are the labels to be applied to the container",
      "type": "object",
      "properties": {
        "level": {
          "description": "Level is SELinux level label that applies to the container.",
          "type": "string"
        },
        "role": {
          "description": "Role is a SELinux role label that applies to the container.",
          "type": "string"
        },
        "type": {
          "description": "Type is a SELinux type label that applies to the container.",
          "type": "string"
        },
        "user": {
          "description": "User is a SELinux user label that applies to the container.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.ScaleIOPersistentVolumeSource": {
      "description": "ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume",
      "type": "object",
      "required": [
        "gateway",
        "system",
        "secretRef"
      ],
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\"",
          "type": "string"
        },
        "gateway": {
          "description": "The host address of the ScaleIO API Gateway.",
          "type": "string"
        },
        "protectionDomain": {
          "description": "The name of the ScaleIO Protection Domain for the configured storage.",
          "type": "string"
        },
        "readOnly": {
          "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "description": "SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
        },
        "sslEnabled": {
          "description": "Flag to enable/disable SSL communication with Gateway, default false",
          "type": "boolean"
        },
        "storageMode": {
          "description": "Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.",
          "type": "string"
        },
        "storagePool": {
          "description": "The ScaleIO Storage Pool associated with the protection domain.",
          "type": "string"
        },
        "system": {
          "description": "The name of the storage system as configured in ScaleIO.",
          "type": "string"
        },
        "volumeName": {
          "description": "The name of a volume already created in the ScaleIO system that is associated with this volume source.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.ScaleIOVolumeSource": {
      "description": "ScaleIOVolumeSource represents a persistent ScaleIO volume",
      "type": "object",
      "required": [
        "gateway",
        "system",
        "secretRef"
      ],
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\".",
          "type": "string"
        },
        "gateway": {
          "description": "The host address of the ScaleIO API Gateway.",
          "type": "string"
        },
        "protectionDomain": {
          "description": "The name of the ScaleIO Protection Domain for the configured storage.",
          "type": "string"
        },
        "readOnly": {
          "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "description": "SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        },
        "sslEnabled": {
          "description": "Flag to enable/disable SSL communication with Gateway, default false",
          "type": "boolean"
        },
        "storageMode": {
          "description": "Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.",
          "type": "string"
        },
        "storagePool": {
          "description": "The ScaleIO Storage Pool associated with the protection domain.",
          "type": "string"
        },
        "system": {
          "description": "The name of the storage system as configured in ScaleIO.",
          "type": "string"
        },
        "volumeName": {
          "description": "The name of a volume already created in the ScaleIO system that is associated with this volume source.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.ScopeSelector": {
      "description": "A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.",
      "type": "object",
      "properties": {
        "matchExpressions": {
          "description": "A list of scope selector requirements by scope of the resources.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ScopedResourceSelectorRequirement"
          }
        }
      }
    },
    "io.k8s.api.core.v1.ScopedResourceSelectorRequirement": {
      "description": "A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.",
      "type": "object",
      "required": [
        "scopeName",
        "operator"
      ],
      "properties": {
        "operator": {
          "description": "Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.",
          "type": "string"
        },
        "scopeName": {
          "description": "The name of the scope that the selector applies to.",
          "type": "string"
        },
        "values": {
          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "io.k8s.api.core.v1.SeccompProfile": {
      "description": "SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.",
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "localhostProfile": {
          "description": "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is \"Localhost\".",
          "type": "string"
        },
        "type": {
          "description": "type indicates which kind of seccomp profile will be applied. Valid options are:\n\nLocalhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.",
          "type": "string"
        }
      },
      "x-kubernetes-unions": [
        {
          "discriminator": "type",
          "fields-to-discriminateBy": {
            "localhostProfile": "LocalhostProfile"
          }
        }
      ]
    },
    "io.k8s.api.core.v1.Secret": {
      "description": "Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "data": {
          "description": "Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          }
        },
        "immutable": {
          "description": "Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil. This is a beta field enabled by ImmutableEphemeralVolumes feature gate.",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Secret"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "stringData": {
          "description": "stringData allows specifying non-binary secret data in string form. It is provided as a write-only convenience method. All keys and values are merged into the data field on write, overwriting any existing values. It is never output when reading from the API.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "description": "Used to facilitate programmatic handling of secret data.",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Secret",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.SecretEnvSource": {
      "description": "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the Secret must be defined",
          "type": "boolean"
        }
      }
    },
    "io.k8s.api.core.v1.SecretKeySelector": {
      "description": "SecretKeySelector selects a key of a Secret.",
      "type": "object",
      "required": [
        "key"
      ],
      "properties": {
        "key": {
          "description": "The key of the secret to select from.  Must be a valid secret key.",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the Secret or its key must be defined",
          "type": "boolean"
        }
      }
    },
    "io.k8s.api.core.v1.SecretList": {
      "description": "SecretList is a list of Secret.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "image.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is a list of secret objects. More info: https://kubernetes.io/docs/concepts/configuration/secret",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Secret"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "SecretList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "SecretList",
          "version": "v1"
        },
        {
          "group": "image.openshift.io",
          "kind": "SecretList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.SecretProjection": {
      "description": "Adapts a secret into a projected volume.\n\nThe contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.",
      "type": "object",
      "properties": {
        "items": {
          "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          }
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the Secret or its key must be defined",
          "type": "boolean"
        }
      }
    },
    "io.k8s.api.core.v1.SecretReference": {
      "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name is unique within a namespace to reference a secret resource.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which the secret name must be unique.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.SecretVolumeSource": {
      "description": "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.",
      "type": "object",
      "properties": {
        "defaultMode": {
          "description": "Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "type": "integer",
          "format": "int32"
        },
        "items": {
          "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          }
        },
        "optional": {
          "description": "Specify whether the Secret or its keys must be defined",
          "type": "boolean"
        },
        "secretName": {
          "description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.SecurityContext": {
      "description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
      "type": "object",
      "properties": {
        "allowPrivilegeEscalation": {
          "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN",
          "type": "boolean"
        },
        "capabilities": {
          "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.",
          "$ref": "#/definitions/io.k8s.api.core.v1.Capabilities"
        },
        "privileged": {
          "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.",
          "type": "boolean"
        },
        "procMount": {
          "description": "procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.",
          "type": "string"
        },
        "readOnlyRootFilesystem": {
          "description": "Whether this container has a read-only root filesystem. Default is false.",
          "type": "boolean"
        },
        "runAsGroup": {
          "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "type": "integer",
          "format": "int64"
        },
        "runAsNonRoot": {
          "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "type": "boolean"
        },
        "runAsUser": {
          "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "type": "integer",
          "format": "int64"
        },
        "seLinuxOptions": {
          "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "$ref": "#/definitions/io.k8s.api.core.v1.SELinuxOptions"
        },
        "seccompProfile": {
          "description": "The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options.",
          "$ref": "#/definitions/io.k8s.api.core.v1.SeccompProfile"
        },
        "windowsOptions": {
          "description": "The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "$ref": "#/definitions/io.k8s.api.core.v1.WindowsSecurityContextOptions"
        }
      }
    },
    "io.k8s.api.core.v1.Service": {
      "description": "Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Service"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.core.v1.ServiceSpec"
        },
        "status": {
          "description": "Most recently observed status of the service. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.core.v1.ServiceStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Service",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ServiceAccount": {
      "description": "ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "automountServiceAccountToken": {
          "description": "AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.",
          "type": "boolean"
        },
        "imagePullSecrets": {
          "description": "ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ServiceAccount"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "secrets": {
          "description": "Secrets is the list of secrets allowed to be used by pods running using this ServiceAccount. More info: https://kubernetes.io/docs/concepts/configuration/secret",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
          },
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ServiceAccount",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ServiceAccountList": {
      "description": "ServiceAccountList is a list of ServiceAccount objects",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "items": {
          "description": "List of ServiceAccounts. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ServiceAccountList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ServiceAccountList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ServiceAccountTokenProjection": {
      "description": "ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).",
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "audience": {
          "description": "Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.",
          "type": "string"
        },
        "expirationSeconds": {
          "description": "ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.",
          "type": "integer",
          "format": "int64"
        },
        "path": {
          "description": "Path is the path relative to the mount point of the file to project the token into.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.ServiceList": {
      "description": "ServiceList holds a list of services.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "items": {
          "description": "List of services",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Service"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ServiceList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ServiceList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ServicePort": {
      "description": "ServicePort contains information on service's port.",
      "type": "object",
      "required": [
        "port"
      ],
      "properties": {
        "appProtocol": {
          "description": "The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. This is a beta field that is guarded by the ServiceAppProtocol feature gate and enabled by default.",
          "type": "string"
        },
        "name": {
          "description": "The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.",
          "type": "string"
        },
        "nodePort": {
          "description": "The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport",
          "type": "integer",
          "format": "int32"
        },
        "port": {
          "description": "The port that will be exposed by this service.",
          "type": "integer",
          "format": "int32"
        },
        "protocol": {
          "description": "The IP protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\". Default is TCP.",
          "type": "string"
        },
        "targetPort": {
          "description": "Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        }
      }
    },
    "io.k8s.api.core.v1.ServiceSpec": {
      "description": "ServiceSpec describes the attributes that a user creates on a service.",
      "type": "object",
      "properties": {
        "clusterIP": {
          "description": "clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are \"None\", empty string (\"\"), or a valid IP address. \"None\" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
          "type": "string"
        },
        "externalIPs": {
          "description": "externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "externalName": {
          "description": "externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.",
          "type": "string"
        },
        "externalTrafficPolicy": {
          "description": "externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. \"Local\" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. \"Cluster\" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.",
          "type": "string"
        },
        "healthCheckNodePort": {
          "description": "healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.",
          "type": "integer",
          "format": "int32"
        },
        "ipFamily": {
          "description": "ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6) when the IPv6DualStack feature gate is enabled. In a dual-stack cluster, you can specify ipFamily when creating a ClusterIP Service to determine whether the controller will allocate an IPv4 or IPv6 IP for it, and you can specify ipFamily when creating a headless Service to determine whether it will have IPv4 or IPv6 Endpoints. In either case, if you do not specify an ipFamily explicitly, it will default to the cluster's primary IP family. This field is part of an alpha feature, and you should not make any assumptions about its semantics other than those described above. In particular, you should not assume that it can (or cannot) be changed after creation time; that it can only have the values \"IPv4\" and \"IPv6\"; or that its current value on a given Service correctly reflects the current state of that Service. (For ClusterIP Services, look at clusterIP to see if the Service is IPv4 or IPv6. For headless Services, look at the endpoints, which may be dual-stack in the future. For ExternalName Services, ipFamily has no meaning, but it may be set to an irrelevant value anyway.)",
          "type": "string"
        },
        "loadBalancerIP": {
          "description": "Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.",
          "type": "string"
        },
        "loadBalancerSourceRanges": {
          "description": "If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.\" More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ports": {
          "description": "The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ServicePort"
          },
          "x-kubernetes-list-map-keys": [
            "port",
            "protocol"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "port",
          "x-kubernetes-patch-strategy": "merge"
        },
        "publishNotReadyAddresses": {
          "description": "publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered \"ready\" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.",
          "type": "boolean"
        },
        "selector": {
          "description": "Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "sessionAffinity": {
          "description": "Supports \"ClientIP\" and \"None\". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
          "type": "string"
        },
        "sessionAffinityConfig": {
          "description": "sessionAffinityConfig contains the configurations of session affinity.",
          "$ref": "#/definitions/io.k8s.api.core.v1.SessionAffinityConfig"
        },
        "topologyKeys": {
          "description": "topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value \"*\" may be used to mean \"any topology\". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "description": "type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. \"ExternalName\" maps to the specified externalName. \"ClusterIP\" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is \"None\", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. \"NodePort\" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. \"LoadBalancer\" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.ServiceStatus": {
      "description": "ServiceStatus represents the current status of a service.",
      "type": "object",
      "properties": {
        "loadBalancer": {
          "description": "LoadBalancer contains the current status of the load-balancer, if one is present.",
          "$ref": "#/definitions/io.k8s.api.core.v1.LoadBalancerStatus"
        }
      }
    },
    "io.k8s.api.core.v1.SessionAffinityConfig": {
      "description": "SessionAffinityConfig represents the configurations of session affinity.",
      "type": "object",
      "properties": {
        "clientIP": {
          "description": "clientIP contains the configurations of Client IP based session affinity.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ClientIPConfig"
        }
      }
    },
    "io.k8s.api.core.v1.StorageOSPersistentVolumeSource": {
      "description": "Represents a StorageOS persistent volume resource.",
      "type": "object",
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "readOnly": {
          "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "description": "SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "volumeName": {
          "description": "VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.",
          "type": "string"
        },
        "volumeNamespace": {
          "description": "VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.StorageOSVolumeSource": {
      "description": "Represents a StorageOS persistent volume resource.",
      "type": "object",
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "readOnly": {
          "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "description": "SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        },
        "volumeName": {
          "description": "VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.",
          "type": "string"
        },
        "volumeNamespace": {
          "description": "VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.Sysctl": {
      "description": "Sysctl defines a kernel parameter to be set",
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "description": "Name of a property to set",
          "type": "string"
        },
        "value": {
          "description": "Value of a property to set",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.TCPSocketAction": {
      "description": "TCPSocketAction describes an action based on opening a socket",
      "type": "object",
      "required": [
        "port"
      ],
      "properties": {
        "host": {
          "description": "Optional: Host name to connect to, defaults to the pod IP.",
          "type": "string"
        },
        "port": {
          "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        }
      }
    },
    "io.k8s.api.core.v1.Taint": {
      "description": "The node this Taint is attached to has the \"effect\" on any pod that does not tolerate the Taint.",
      "type": "object",
      "required": [
        "key",
        "effect"
      ],
      "properties": {
        "effect": {
          "description": "Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.",
          "type": "string"
        },
        "key": {
          "description": "Required. The taint key to be applied to a node.",
          "type": "string"
        },
        "timeAdded": {
          "description": "TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "value": {
          "description": "The taint value corresponding to the taint key.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.Toleration": {
      "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
      "type": "object",
      "properties": {
        "effect": {
          "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
          "type": "string"
        },
        "key": {
          "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
          "type": "string"
        },
        "operator": {
          "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
          "type": "string"
        },
        "tolerationSeconds": {
          "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
          "type": "integer",
          "format": "int64"
        },
        "value": {
          "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.TopologySelectorLabelRequirement": {
      "description": "A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.",
      "type": "object",
      "required": [
        "key",
        "values"
      ],
      "properties": {
        "key": {
          "description": "The label key that the selector applies to.",
          "type": "string"
        },
        "values": {
          "description": "An array of string values. One value must match the label to be selected. Each entry in Values is ORed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "io.k8s.api.core.v1.TopologySelectorTerm": {
      "description": "A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.",
      "type": "object",
      "properties": {
        "matchLabelExpressions": {
          "description": "A list of topology selector requirements by labels.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySelectorLabelRequirement"
          }
        }
      }
    },
    "io.k8s.api.core.v1.TopologySpreadConstraint": {
      "description": "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
      "type": "object",
      "required": [
        "maxSkew",
        "topologyKey",
        "whenUnsatisfiable"
      ],
      "properties": {
        "labelSelector": {
          "description": "LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "maxSkew": {
          "description": "MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.",
          "type": "integer",
          "format": "int32"
        },
        "topologyKey": {
          "description": "TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a \"bucket\", and try to put balanced number of pods into each bucket. It's a required field.",
          "type": "string"
        },
        "whenUnsatisfiable": {
          "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,\n  but giving higher precedence to topologies that would help reduce the\n  skew.\nA constraint is considered \"Unsatisfiable\" for an incoming pod if and only if every possible node assigment for that pod would violate \"MaxSkew\" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.TypedLocalObjectReference": {
      "description": "TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.",
      "type": "object",
      "required": [
        "kind",
        "name"
      ],
      "properties": {
        "apiGroup": {
          "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
          "type": "string"
        },
        "kind": {
          "description": "Kind is the type of resource being referenced",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of resource being referenced",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.Volume": {
      "description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "awsElasticBlockStore": {
          "description": "AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
          "$ref": "#/definitions/io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource"
        },
        "azureDisk": {
          "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
          "$ref": "#/definitions/io.k8s.api.core.v1.AzureDiskVolumeSource"
        },
        "azureFile": {
          "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
          "$ref": "#/definitions/io.k8s.api.core.v1.AzureFileVolumeSource"
        },
        "cephfs": {
          "description": "CephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
          "$ref": "#/definitions/io.k8s.api.core.v1.CephFSVolumeSource"
        },
        "cinder": {
          "description": "Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "$ref": "#/definitions/io.k8s.api.core.v1.CinderVolumeSource"
        },
        "configMap": {
          "description": "ConfigMap represents a configMap that should populate this volume",
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapVolumeSource"
        },
        "csi": {
          "description": "CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).",
          "$ref": "#/definitions/io.k8s.api.core.v1.CSIVolumeSource"
        },
        "downwardAPI": {
          "description": "DownwardAPI represents downward API about the pod that should populate this volume",
          "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeSource"
        },
        "emptyDir": {
          "description": "EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
          "$ref": "#/definitions/io.k8s.api.core.v1.EmptyDirVolumeSource"
        },
        "ephemeral": {
          "description": "Ephemeral represents a volume that is handled by a cluster storage driver (Alpha feature). The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.\n\nUse this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity\n   tracking are needed,\nc) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through\n   a PersistentVolumeClaim (see EphemeralVolumeSource for more\n   information on the connection between this volume type\n   and PersistentVolumeClaim).\n\nUse PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.\n\nUse CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.\n\nA pod can use both types of ephemeral volumes and persistent volumes at the same time.",
          "$ref": "#/definitions/io.k8s.api.core.v1.EphemeralVolumeSource"
        },
        "fc": {
          "description": "FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
          "$ref": "#/definitions/io.k8s.api.core.v1.FCVolumeSource"
        },
        "flexVolume": {
          "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
          "$ref": "#/definitions/io.k8s.api.core.v1.FlexVolumeSource"
        },
        "flocker": {
          "description": "Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running",
          "$ref": "#/definitions/io.k8s.api.core.v1.FlockerVolumeSource"
        },
        "gcePersistentDisk": {
          "description": "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "$ref": "#/definitions/io.k8s.api.core.v1.GCEPersistentDiskVolumeSource"
        },
        "gitRepo": {
          "description": "GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
          "$ref": "#/definitions/io.k8s.api.core.v1.GitRepoVolumeSource"
        },
        "glusterfs": {
          "description": "Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md",
          "$ref": "#/definitions/io.k8s.api.core.v1.GlusterfsVolumeSource"
        },
        "hostPath": {
          "description": "HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
          "$ref": "#/definitions/io.k8s.api.core.v1.HostPathVolumeSource"
        },
        "iscsi": {
          "description": "ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md",
          "$ref": "#/definitions/io.k8s.api.core.v1.ISCSIVolumeSource"
        },
        "name": {
          "description": "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "nfs": {
          "description": "NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
          "$ref": "#/definitions/io.k8s.api.core.v1.NFSVolumeSource"
        },
        "persistentVolumeClaim": {
          "description": "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource"
        },
        "photonPersistentDisk": {
          "description": "PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
          "$ref": "#/definitions/io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource"
        },
        "portworxVolume": {
          "description": "PortworxVolume represents a portworx volume attached and mounted on kubelets host machine",
          "$ref": "#/definitions/io.k8s.api.core.v1.PortworxVolumeSource"
        },
        "projected": {
          "description": "Items for all in one resources secrets, configmaps, and downward API",
          "$ref": "#/definitions/io.k8s.api.core.v1.ProjectedVolumeSource"
        },
        "quobyte": {
          "description": "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
          "$ref": "#/definitions/io.k8s.api.core.v1.QuobyteVolumeSource"
        },
        "rbd": {
          "description": "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md",
          "$ref": "#/definitions/io.k8s.api.core.v1.RBDVolumeSource"
        },
        "scaleIO": {
          "description": "ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ScaleIOVolumeSource"
        },
        "secret": {
          "description": "Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretVolumeSource"
        },
        "storageos": {
          "description": "StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.",
          "$ref": "#/definitions/io.k8s.api.core.v1.StorageOSVolumeSource"
        },
        "vsphereVolume": {
          "description": "VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine",
          "$ref": "#/definitions/io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource"
        }
      }
    },
    "io.k8s.api.core.v1.VolumeDevice": {
      "description": "volumeDevice describes a mapping of a raw block device within a container.",
      "type": "object",
      "required": [
        "name",
        "devicePath"
      ],
      "properties": {
        "devicePath": {
          "description": "devicePath is the path inside of the container that the device will be mapped to.",
          "type": "string"
        },
        "name": {
          "description": "name must match the name of a persistentVolumeClaim in the pod",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.VolumeMount": {
      "description": "VolumeMount describes a mounting of a Volume within a container.",
      "type": "object",
      "required": [
        "name",
        "mountPath"
      ],
      "properties": {
        "mountPath": {
          "description": "Path within the container at which the volume should be mounted.  Must not contain ':'.",
          "type": "string"
        },
        "mountPropagation": {
          "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
          "type": "string"
        },
        "name": {
          "description": "This must match the Name of a Volume.",
          "type": "string"
        },
        "readOnly": {
          "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
          "type": "boolean"
        },
        "subPath": {
          "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
          "type": "string"
        },
        "subPathExpr": {
          "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.VolumeNodeAffinity": {
      "description": "VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.",
      "type": "object",
      "properties": {
        "required": {
          "description": "Required specifies hard node constraints that must be met.",
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelector"
        }
      }
    },
    "io.k8s.api.core.v1.VolumeProjection": {
      "description": "Projection that may be projected along with other supported volume types",
      "type": "object",
      "properties": {
        "configMap": {
          "description": "information about the configMap data to project",
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapProjection"
        },
        "downwardAPI": {
          "description": "information about the downwardAPI data to project",
          "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIProjection"
        },
        "secret": {
          "description": "information about the secret data to project",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretProjection"
        },
        "serviceAccountToken": {
          "description": "information about the serviceAccountToken data to project",
          "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccountTokenProjection"
        }
      }
    },
    "io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource": {
      "description": "Represents a vSphere volume resource.",
      "type": "object",
      "required": [
        "volumePath"
      ],
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "storagePolicyID": {
          "description": "Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.",
          "type": "string"
        },
        "storagePolicyName": {
          "description": "Storage Policy Based Management (SPBM) profile name.",
          "type": "string"
        },
        "volumePath": {
          "description": "Path that identifies vSphere volume vmdk",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.WeightedPodAffinityTerm": {
      "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
      "type": "object",
      "required": [
        "weight",
        "podAffinityTerm"
      ],
      "properties": {
        "podAffinityTerm": {
          "description": "Required. A pod affinity term, associated with the corresponding weight.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinityTerm"
        },
        "weight": {
          "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.api.core.v1.WindowsSecurityContextOptions": {
      "description": "WindowsSecurityContextOptions contain Windows-specific options and credentials.",
      "type": "object",
      "properties": {
        "gmsaCredentialSpec": {
          "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
          "type": "string"
        },
        "gmsaCredentialSpecName": {
          "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
          "type": "string"
        },
        "runAsUserName": {
          "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.discovery.v1beta1.Endpoint": {
      "description": "Endpoint represents a single logical \"backend\" implementing a service.",
      "type": "object",
      "required": [
        "addresses"
      ],
      "properties": {
        "addresses": {
          "description": "addresses of this endpoint. The contents of this field are interpreted according to the corresponding EndpointSlice addressType field. Consumers must handle different types of addresses in the context of their own capabilities. This must contain at least one address but no more than 100.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-list-type": "set"
        },
        "conditions": {
          "description": "conditions contains information about the current status of the endpoint.",
          "$ref": "#/definitions/io.k8s.api.discovery.v1beta1.EndpointConditions"
        },
        "hostname": {
          "description": "hostname of this endpoint. This field may be used by consumers of endpoints to distinguish endpoints from each other (e.g. in DNS names). Multiple endpoints which use the same hostname should be considered fungible (e.g. multiple A values in DNS). Must pass DNS Label (RFC 1123) validation.",
          "type": "string"
        },
        "targetRef": {
          "description": "targetRef is a reference to a Kubernetes object that represents this endpoint.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "topology": {
          "description": "topology contains arbitrary topology information associated with the endpoint. These key/value pairs must conform with the label format. https://kubernetes.io/docs/concepts/overview/working-with-objects/labels Topology may include a maximum of 16 key/value pairs. This includes, but is not limited to the following well known keys: * kubernetes.io/hostname: the value indicates the hostname of the node\n  where the endpoint is located. This should match the corresponding\n  node label.\n* topology.kubernetes.io/zone: the value indicates the zone where the\n  endpoint is located. This should match the corresponding node label.\n* topology.kubernetes.io/region: the value indicates the region where the\n  endpoint is located. This should match the corresponding node label.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "io.k8s.api.discovery.v1beta1.EndpointConditions": {
      "description": "EndpointConditions represents the current condition of an endpoint.",
      "type": "object",
      "properties": {
        "ready": {
          "description": "ready indicates that this endpoint is prepared to receive traffic, according to whatever system is managing the endpoint. A nil value indicates an unknown state. In most cases consumers should interpret this unknown state as ready.",
          "type": "boolean"
        }
      }
    },
    "io.k8s.api.discovery.v1beta1.EndpointPort": {
      "description": "EndpointPort represents a Port used by an EndpointSlice",
      "type": "object",
      "properties": {
        "appProtocol": {
          "description": "The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.",
          "type": "string"
        },
        "name": {
          "description": "The name of this port. All ports in an EndpointSlice must have a unique name. If the EndpointSlice is dervied from a Kubernetes service, this corresponds to the Service.ports[].name. Name must either be an empty string or pass DNS_LABEL validation: * must be no more than 63 characters long. * must consist of lower case alphanumeric characters or '-'. * must start and end with an alphanumeric character. Default is empty string.",
          "type": "string"
        },
        "port": {
          "description": "The port number of the endpoint. If this is not specified, ports are not restricted and must be interpreted in the context of the specific consumer.",
          "type": "integer",
          "format": "int32"
        },
        "protocol": {
          "description": "The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.discovery.v1beta1.EndpointSlice": {
      "description": "EndpointSlice represents a subset of the endpoints that implement a service. For a given service there may be multiple EndpointSlice objects, selected by labels, which must be joined to produce the full set of endpoints.",
      "type": "object",
      "required": [
        "addressType",
        "endpoints"
      ],
      "properties": {
        "addressType": {
          "description": "addressType specifies the type of address carried by this EndpointSlice. All addresses in this slice must be the same type. This field is immutable after creation. The following address types are currently supported: * IPv4: Represents an IPv4 Address. * IPv6: Represents an IPv6 Address. * FQDN: Represents a Fully Qualified Domain Name.",
          "type": "string"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "discovery.k8s.io/v1beta1"
          ]
        },
        "endpoints": {
          "description": "endpoints is a list of unique endpoints in this slice. Each slice may include a maximum of 1000 endpoints.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.discovery.v1beta1.Endpoint"
          },
          "x-kubernetes-list-type": "atomic"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "EndpointSlice"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "ports": {
          "description": "ports specifies the list of network ports exposed by each endpoint in this slice. Each port must have a unique name. When ports is empty, it indicates that there are no defined ports. When a port is defined with a nil port value, it indicates \"all ports\". Each slice may include a maximum of 100 ports.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.discovery.v1beta1.EndpointPort"
          },
          "x-kubernetes-list-type": "atomic"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "discovery.k8s.io",
          "kind": "EndpointSlice",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.discovery.v1beta1.EndpointSliceList": {
      "description": "EndpointSliceList represents a list of endpoint slices",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "discovery.k8s.io/v1beta1"
          ]
        },
        "items": {
          "description": "List of endpoint slices",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.discovery.v1beta1.EndpointSlice"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "EndpointSliceList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "discovery.k8s.io",
          "kind": "EndpointSliceList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.events.v1.Event": {
      "description": "Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system.",
      "type": "object",
      "required": [
        "eventTime"
      ],
      "properties": {
        "action": {
          "description": "action is what action was taken/failed regarding to the regarding object. It is machine-readable. This field can have at most 128 characters.",
          "type": "string"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "events.k8s.io/v1"
          ]
        },
        "deprecatedCount": {
          "description": "deprecatedCount is the deprecated field assuring backward compatibility with core.v1 Event type.",
          "type": "integer",
          "format": "int32"
        },
        "deprecatedFirstTimestamp": {
          "description": "deprecatedFirstTimestamp is the deprecated field assuring backward compatibility with core.v1 Event type.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "deprecatedLastTimestamp": {
          "description": "deprecatedLastTimestamp is the deprecated field assuring backward compatibility with core.v1 Event type.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "deprecatedSource": {
          "description": "deprecatedSource is the deprecated field assuring backward compatibility with core.v1 Event type.",
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSource"
        },
        "eventTime": {
          "description": "eventTime is the time when this Event was first observed. It is required.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Event"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "note": {
          "description": "note is a human-readable description of the status of this operation. Maximal length of the note is 1kB, but libraries should be prepared to handle values up to 64kB.",
          "type": "string"
        },
        "reason": {
          "description": "reason is why the action was taken. It is human-readable. This field can have at most 128 characters.",
          "type": "string"
        },
        "regarding": {
          "description": "regarding contains the object this Event is about. In most cases it's an Object reporting controller implements, e.g. ReplicaSetController implements ReplicaSets and this event is emitted because it acts on some changes in a ReplicaSet object.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "related": {
          "description": "related is the optional secondary object for more complex actions. E.g. when regarding object triggers a creation or deletion of related object.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "reportingController": {
          "description": "reportingController is the name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`. This field cannot be empty for new Events.",
          "type": "string"
        },
        "reportingInstance": {
          "description": "reportingInstance is the ID of the controller instance, e.g. `kubelet-xyzf`. This field cannot be empty for new Events and it can have at most 128 characters.",
          "type": "string"
        },
        "series": {
          "description": "series is data about the Event series this event represents or nil if it's a singleton Event.",
          "$ref": "#/definitions/io.k8s.api.events.v1.EventSeries"
        },
        "type": {
          "description": "type is the type of this event (Normal, Warning), new types could be added in the future. It is machine-readable.",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.events.v1.EventList": {
      "description": "EventList is a list of Event objects.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "events.k8s.io/v1"
          ]
        },
        "items": {
          "description": "items is a list of schema objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.events.v1.Event"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "EventList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "events.k8s.io",
          "kind": "EventList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.events.v1.EventSeries": {
      "description": "EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time. How often to update the EventSeries is up to the event reporters. The default event reporter in \"k8s.io/client-go/tools/events/event_broadcaster.go\" shows how this struct is updated on heartbeats and can guide customized reporter implementations.",
      "type": "object",
      "required": [
        "count",
        "lastObservedTime"
      ],
      "properties": {
        "count": {
          "description": "count is the number of occurrences in this series up to the last heartbeat time.",
          "type": "integer",
          "format": "int32"
        },
        "lastObservedTime": {
          "description": "lastObservedTime is the time when last Event from the series was seen before last heartbeat.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        }
      }
    },
    "io.k8s.api.events.v1beta1.Event": {
      "description": "Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system.",
      "type": "object",
      "required": [
        "eventTime"
      ],
      "properties": {
        "action": {
          "description": "action is what action was taken/failed regarding to the regarding object. It is machine-readable. This field can have at most 128 characters.",
          "type": "string"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "events.k8s.io/v1beta1"
          ]
        },
        "deprecatedCount": {
          "description": "deprecatedCount is the deprecated field assuring backward compatibility with core.v1 Event type.",
          "type": "integer",
          "format": "int32"
        },
        "deprecatedFirstTimestamp": {
          "description": "deprecatedFirstTimestamp is the deprecated field assuring backward compatibility with core.v1 Event type.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "deprecatedLastTimestamp": {
          "description": "deprecatedLastTimestamp is the deprecated field assuring backward compatibility with core.v1 Event type.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "deprecatedSource": {
          "description": "deprecatedSource is the deprecated field assuring backward compatibility with core.v1 Event type.",
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSource"
        },
        "eventTime": {
          "description": "eventTime is the time when this Event was first observed. It is required.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Event"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "note": {
          "description": "note is a human-readable description of the status of this operation. Maximal length of the note is 1kB, but libraries should be prepared to handle values up to 64kB.",
          "type": "string"
        },
        "reason": {
          "description": "reason is why the action was taken. It is human-readable. This field can have at most 128 characters.",
          "type": "string"
        },
        "regarding": {
          "description": "regarding contains the object this Event is about. In most cases it's an Object reporting controller implements, e.g. ReplicaSetController implements ReplicaSets and this event is emitted because it acts on some changes in a ReplicaSet object.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "related": {
          "description": "related is the optional secondary object for more complex actions. E.g. when regarding object triggers a creation or deletion of related object.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "reportingController": {
          "description": "reportingController is the name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`. This field cannot be empty for new Events.",
          "type": "string"
        },
        "reportingInstance": {
          "description": "reportingInstance is the ID of the controller instance, e.g. `kubelet-xyzf`. This field cannot be empty for new Events and it can have at most 128 characters.",
          "type": "string"
        },
        "series": {
          "description": "series is data about the Event series this event represents or nil if it's a singleton Event.",
          "$ref": "#/definitions/io.k8s.api.events.v1beta1.EventSeries"
        },
        "type": {
          "description": "type is the type of this event (Normal, Warning), new types could be added in the future. It is machine-readable.",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.events.v1beta1.EventList": {
      "description": "EventList is a list of Event objects.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "events.k8s.io/v1beta1"
          ]
        },
        "items": {
          "description": "items is a list of schema objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.events.v1beta1.Event"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "EventList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "events.k8s.io",
          "kind": "EventList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.events.v1beta1.EventSeries": {
      "description": "EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.",
      "type": "object",
      "required": [
        "count",
        "lastObservedTime"
      ],
      "properties": {
        "count": {
          "description": "count is the number of occurrences in this series up to the last heartbeat time.",
          "type": "integer",
          "format": "int32"
        },
        "lastObservedTime": {
          "description": "lastObservedTime is the time when last Event from the series was seen before last heartbeat.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        }
      }
    },
    "io.k8s.api.extensions.v1beta1.HTTPIngressPath": {
      "description": "HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.",
      "type": "object",
      "required": [
        "backend"
      ],
      "properties": {
        "backend": {
          "description": "Backend defines the referenced service endpoint to which the traffic will be forwarded to.",
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IngressBackend"
        },
        "path": {
          "description": "Path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/'. When unspecified, all paths from incoming requests are matched.",
          "type": "string"
        },
        "pathType": {
          "description": "PathType determines the interpretation of the Path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is\n  done on a path element by element basis. A path element refers is the\n  list of labels in the path split by the '/' separator. A request is a\n  match for path p if every p is an element-wise prefix of p of the\n  request path. Note that if the last element of the path is a substring\n  of the last element in request path, it is not a match (e.g. /foo/bar\n  matches /foo/bar/baz, but does not match /foo/barbaz).\n* ImplementationSpecific: Interpretation of the Path matching is up to\n  the IngressClass. Implementations can treat this as a separate PathType\n  or treat it identically to Prefix or Exact path types.\nImplementations are required to support all path types. Defaults to ImplementationSpecific.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.extensions.v1beta1.HTTPIngressRuleValue": {
      "description": "HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.",
      "type": "object",
      "required": [
        "paths"
      ],
      "properties": {
        "paths": {
          "description": "A collection of paths that map requests to backends.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.HTTPIngressPath"
          }
        }
      }
    },
    "io.k8s.api.extensions.v1beta1.Ingress": {
      "description": "Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc. DEPRECATED - This group version of Ingress is deprecated by networking.k8s.io/v1beta1 Ingress. See the release notes for more information.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "extensions/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Ingress"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec is the desired state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IngressSpec"
        },
        "status": {
          "description": "Status is the current state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IngressStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "extensions",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.extensions.v1beta1.IngressBackend": {
      "description": "IngressBackend describes all endpoints for a given service and port.",
      "type": "object",
      "properties": {
        "resource": {
          "description": "Resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, serviceName and servicePort must not be specified.",
          "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference"
        },
        "serviceName": {
          "description": "Specifies the name of the referenced service.",
          "type": "string"
        },
        "servicePort": {
          "description": "Specifies the port of the referenced service.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        }
      }
    },
    "io.k8s.api.extensions.v1beta1.IngressList": {
      "description": "IngressList is a collection of Ingress.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "extensions/v1beta1"
          ]
        },
        "items": {
          "description": "Items is the list of Ingress.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Ingress"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "IngressList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "extensions",
          "kind": "IngressList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.extensions.v1beta1.IngressRule": {
      "description": "IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.",
      "type": "object",
      "properties": {
        "host": {
          "description": "Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \"host\" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to\n   the IP in the Spec of the parent Ingress.\n2. The `:` delimiter is not respected because ports are not allowed.\n\t  Currently the port of an Ingress is implicitly :80 for http and\n\t  :443 for https.\nBoth these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.\n\nHost can be \"precise\" which is a domain name without the terminating dot of a network host (e.g. \"foo.bar.com\") or \"wildcard\", which is a domain name prefixed with a single wildcard label (e.g. \"*.foo.com\"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == \"*\"). Requests will be matched against the Host field in the following way: 1. If Host is precise, the request matches this rule if the http host header is equal to Host. 2. If Host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.",
          "type": "string"
        },
        "http": {
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.HTTPIngressRuleValue"
        }
      }
    },
    "io.k8s.api.extensions.v1beta1.IngressSpec": {
      "description": "IngressSpec describes the Ingress the user wishes to exist.",
      "type": "object",
      "properties": {
        "backend": {
          "description": "A default backend capable of servicing requests that don't match any rule. At least one of 'backend' or 'rules' must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default.",
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IngressBackend"
        },
        "ingressClassName": {
          "description": "IngressClassName is the name of the IngressClass cluster resource. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated `kubernetes.io/ingress.class` annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field. The controller may emit a warning if the field and annotation have different values. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as default, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation.",
          "type": "string"
        },
        "rules": {
          "description": "A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IngressRule"
          }
        },
        "tls": {
          "description": "TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IngressTLS"
          }
        }
      }
    },
    "io.k8s.api.extensions.v1beta1.IngressStatus": {
      "description": "IngressStatus describe the current state of the Ingress.",
      "type": "object",
      "properties": {
        "loadBalancer": {
          "description": "LoadBalancer contains the current status of the load-balancer.",
          "$ref": "#/definitions/io.k8s.api.core.v1.LoadBalancerStatus"
        }
      }
    },
    "io.k8s.api.extensions.v1beta1.IngressTLS": {
      "description": "IngressTLS describes the transport layer security associated with an Ingress.",
      "type": "object",
      "properties": {
        "hosts": {
          "description": "Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "secretName": {
          "description": "SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \"Host\" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.extensions.v1beta1.Scale": {
      "description": "represents a scaling request for a resource.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps.openshift.io/v1",
            "extensions/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Scale"
          ]
        },
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.",
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.ScaleSpec"
        },
        "status": {
          "description": "current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.",
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.ScaleStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps.openshift.io",
          "kind": "Scale",
          "version": "v1"
        },
        {
          "group": "extensions",
          "kind": "Scale",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.extensions.v1beta1.ScaleSpec": {
      "description": "describes the attributes of a scale subresource",
      "type": "object",
      "properties": {
        "replicas": {
          "description": "desired number of instances for the scaled object.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.api.extensions.v1beta1.ScaleStatus": {
      "description": "represents the current status of a scale subresource.",
      "type": "object",
      "required": [
        "replicas"
      ],
      "properties": {
        "replicas": {
          "description": "actual number of observed instances of the scaled object.",
          "type": "integer",
          "format": "int32"
        },
        "selector": {
          "description": "label query over pods that should match the replicas count. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "targetSelector": {
          "description": "label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
          "type": "string"
        }
      }
    },
    "io.k8s.api.flowcontrol.v1alpha1.FlowDistinguisherMethod": {
      "description": "FlowDistinguisherMethod specifies the method of a flow distinguisher.",
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "description": "`type` is the type of flow distinguisher method The supported types are \"ByUser\" and \"ByNamespace\". Required.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.flowcontrol.v1alpha1.FlowSchema": {
      "description": "FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with similar attributes and is identified by a pair of strings: the name of the FlowSchema and a \"flow distinguisher\".",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "flowcontrol.apiserver.k8s.io/v1alpha1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "FlowSchema"
          ]
        },
        "metadata": {
          "description": "`metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "`spec` is the specification of the desired behavior of a FlowSchema. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.FlowSchemaSpec"
        },
        "status": {
          "description": "`status` is the current status of a FlowSchema. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.FlowSchemaStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "FlowSchema",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.flowcontrol.v1alpha1.FlowSchemaCondition": {
      "description": "FlowSchemaCondition describes conditions for a FlowSchema.",
      "type": "object",
      "properties": {
        "lastTransitionTime": {
          "description": "`lastTransitionTime` is the last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "`message` is a human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "`reason` is a unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "`status` is the status of the condition. Can be True, False, Unknown. Required.",
          "type": "string"
        },
        "type": {
          "description": "`type` is the type of the condition. Required.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.flowcontrol.v1alpha1.FlowSchemaList": {
      "description": "FlowSchemaList is a list of FlowSchema objects.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "flowcontrol.apiserver.k8s.io/v1alpha1"
          ]
        },
        "items": {
          "description": "`items` is a list of FlowSchemas.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.FlowSchema"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "FlowSchemaList"
          ]
        },
        "metadata": {
          "description": "`metadata` is the standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "FlowSchemaList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.flowcontrol.v1alpha1.FlowSchemaSpec": {
      "description": "FlowSchemaSpec describes how the FlowSchema's specification looks like.",
      "type": "object",
      "required": [
        "priorityLevelConfiguration"
      ],
      "properties": {
        "distinguisherMethod": {
          "description": "`distinguisherMethod` defines how to compute the flow distinguisher for requests that match this schema. `nil` specifies that the distinguisher is disabled and thus will always be the empty string.",
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.FlowDistinguisherMethod"
        },
        "matchingPrecedence": {
          "description": "`matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence is not specified, it will be set to 1000 as default.",
          "type": "integer",
          "format": "int32"
        },
        "priorityLevelConfiguration": {
          "description": "`priorityLevelConfiguration` should reference a PriorityLevelConfiguration in the cluster. If the reference cannot be resolved, the FlowSchema will be ignored and marked as invalid in its status. Required.",
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationReference"
        },
        "rules": {
          "description": "`rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.PolicyRulesWithSubjects"
          },
          "x-kubernetes-list-type": "atomic"
        }
      }
    },
    "io.k8s.api.flowcontrol.v1alpha1.FlowSchemaStatus": {
      "description": "FlowSchemaStatus represents the current state of a FlowSchema.",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "`conditions` is a list of the current states of FlowSchema.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.FlowSchemaCondition"
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        }
      }
    },
    "io.k8s.api.flowcontrol.v1alpha1.GroupSubject": {
      "description": "GroupSubject holds detailed information for group-kind subject.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "name is the user group that matches, or \"*\" to match all user groups. See https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some well-known group names. Required.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.flowcontrol.v1alpha1.LimitResponse": {
      "description": "LimitResponse defines how to handle requests that can not be executed right now.",
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "queuing": {
          "description": "`queuing` holds the configuration parameters for queuing. This field may be non-empty only if `type` is `\"Queue\"`.",
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.QueuingConfiguration"
        },
        "type": {
          "description": "`type` is \"Queue\" or \"Reject\". \"Queue\" means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. \"Reject\" means that requests that can not be executed upon arrival are rejected. Required.",
          "type": "string"
        }
      },
      "x-kubernetes-unions": [
        {
          "discriminator": "type",
          "fields-to-discriminateBy": {
            "queuing": "Queuing"
          }
        }
      ]
    },
    "io.k8s.api.flowcontrol.v1alpha1.LimitedPriorityLevelConfiguration": {
      "description": "LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:\n * How are requests for this priority level limited?\n * What should be done with requests that exceed the limit?",
      "type": "object",
      "properties": {
        "assuredConcurrencyShares": {
          "description": "`assuredConcurrencyShares` (ACS) configures the execution limit, which is a limit on the number of requests of this priority level that may be exeucting at a given time.  ACS must be a positive number. The server's concurrency limit (SCL) is divided among the concurrency-controlled priority levels in proportion to their assured concurrency shares. This produces the assured concurrency value (ACV) --- the number of requests that may be executing at a time --- for each such priority level:\n\n            ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )\n\nbigger numbers of ACS mean more reserved concurrent requests (at the expense of every other PL). This field has a default value of 30.",
          "type": "integer",
          "format": "int32"
        },
        "limitResponse": {
          "description": "`limitResponse` indicates what to do with requests that can not be executed right now",
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.LimitResponse"
        }
      }
    },
    "io.k8s.api.flowcontrol.v1alpha1.NonResourcePolicyRule": {
      "description": "NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a) at least one member of verbs matches the request and (b) at least one member of nonResourceURLs matches the request.",
      "type": "object",
      "required": [
        "verbs",
        "nonResourceURLs"
      ],
      "properties": {
        "nonResourceURLs": {
          "description": "`nonResourceURLs` is a set of url prefixes that a user should have access to and may not be empty. For example:\n  - \"/healthz\" is legal\n  - \"/hea*\" is illegal\n  - \"/hea\" is legal but matches nothing\n  - \"/hea/*\" also matches nothing\n  - \"/healthz/*\" matches all per-component health checks.\n\"*\" matches all non-resource urls. if it is present, it must be the only entry. Required.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-list-type": "set"
        },
        "verbs": {
          "description": "`verbs` is a list of matching verbs and may not be empty. \"*\" matches all verbs. If it is present, it must be the only entry. Required.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-list-type": "set"
        }
      }
    },
    "io.k8s.api.flowcontrol.v1alpha1.PolicyRulesWithSubjects": {
      "description": "PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request.",
      "type": "object",
      "required": [
        "subjects"
      ],
      "properties": {
        "nonResourceRules": {
          "description": "`nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.NonResourcePolicyRule"
          },
          "x-kubernetes-list-type": "atomic"
        },
        "resourceRules": {
          "description": "`resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.ResourcePolicyRule"
          },
          "x-kubernetes-list-type": "atomic"
        },
        "subjects": {
          "description": "subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.Subject"
          },
          "x-kubernetes-list-type": "atomic"
        }
      }
    },
    "io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfiguration": {
      "description": "PriorityLevelConfiguration represents the configuration of a priority level.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "flowcontrol.apiserver.k8s.io/v1alpha1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PriorityLevelConfiguration"
          ]
        },
        "metadata": {
          "description": "`metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "`spec` is the specification of the desired behavior of a \"request-priority\". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationSpec"
        },
        "status": {
          "description": "`status` is the current status of a \"request-priority\". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "PriorityLevelConfiguration",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationCondition": {
      "description": "PriorityLevelConfigurationCondition defines the condition of priority level.",
      "type": "object",
      "properties": {
        "lastTransitionTime": {
          "description": "`lastTransitionTime` is the last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "`message` is a human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "`reason` is a unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "`status` is the status of the condition. Can be True, False, Unknown. Required.",
          "type": "string"
        },
        "type": {
          "description": "`type` is the type of the condition. Required.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationList": {
      "description": "PriorityLevelConfigurationList is a list of PriorityLevelConfiguration objects.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "flowcontrol.apiserver.k8s.io/v1alpha1"
          ]
        },
        "items": {
          "description": "`items` is a list of request-priorities.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfiguration"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PriorityLevelConfigurationList"
          ]
        },
        "metadata": {
          "description": "`metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "PriorityLevelConfigurationList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationReference": {
      "description": "PriorityLevelConfigurationReference contains information that points to the \"request-priority\" being used.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "`name` is the name of the priority level configuration being referenced Required.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationSpec": {
      "description": "PriorityLevelConfigurationSpec specifies the configuration of a priority level.",
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "limited": {
          "description": "`limited` specifies how requests are handled for a Limited priority level. This field must be non-empty if and only if `type` is `\"Limited\"`.",
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.LimitedPriorityLevelConfiguration"
        },
        "type": {
          "description": "`type` indicates whether this priority level is subject to limitation on request execution.  A value of `\"Exempt\"` means that requests of this priority level are not subject to a limit (and thus are never queued) and do not detract from the capacity made available to other priority levels.  A value of `\"Limited\"` means that (a) requests of this priority level _are_ subject to limits and (b) some of the server's limited capacity is made available exclusively to this priority level. Required.",
          "type": "string"
        }
      },
      "x-kubernetes-unions": [
        {
          "discriminator": "type",
          "fields-to-discriminateBy": {
            "limited": "Limited"
          }
        }
      ]
    },
    "io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationStatus": {
      "description": "PriorityLevelConfigurationStatus represents the current state of a \"request-priority\".",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "`conditions` is the current state of \"request-priority\".",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationCondition"
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        }
      }
    },
    "io.k8s.api.flowcontrol.v1alpha1.QueuingConfiguration": {
      "description": "QueuingConfiguration holds the configuration parameters for queuing",
      "type": "object",
      "properties": {
        "handSize": {
          "description": "`handSize` is a small positive number that configures the shuffle sharding of requests into queues.  When enqueuing a request at this priority level the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here.  The request is put into one of the shortest queues in that hand. `handSize` must be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not saturate most of the queues).  See the user-facing documentation for more extensive guidance on setting this field.  This field has a default value of 8.",
          "type": "integer",
          "format": "int32"
        },
        "queueLengthLimit": {
          "description": "`queueLengthLimit` is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected.  This value must be positive.  If not specified, it will be defaulted to 50.",
          "type": "integer",
          "format": "int32"
        },
        "queues": {
          "description": "`queues` is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive.  Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant.  This field has a default value of 64.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.api.flowcontrol.v1alpha1.ResourcePolicyRule": {
      "description": "ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) least one member of namespaces matches the request.",
      "type": "object",
      "required": [
        "verbs",
        "apiGroups",
        "resources"
      ],
      "properties": {
        "apiGroups": {
          "description": "`apiGroups` is a list of matching API groups and may not be empty. \"*\" matches all API groups and, if present, must be the only entry. Required.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-list-type": "set"
        },
        "clusterScope": {
          "description": "`clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list.",
          "type": "boolean"
        },
        "namespaces": {
          "description": "`namespaces` is a list of target namespaces that restricts matches.  A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains \"*\".  Note that \"*\" matches any specified namespace but does not match a request that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-list-type": "set"
        },
        "resources": {
          "description": "`resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource.  For example, [ \"services\", \"nodes/status\" ].  This list may not be empty. \"*\" matches all resources and, if present, must be the only entry. Required.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-list-type": "set"
        },
        "verbs": {
          "description": "`verbs` is a list of matching verbs and may not be empty. \"*\" matches all verbs and, if present, must be the only entry. Required.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-list-type": "set"
        }
      }
    },
    "io.k8s.api.flowcontrol.v1alpha1.ServiceAccountSubject": {
      "description": "ServiceAccountSubject holds detailed information for service-account-kind subject.",
      "type": "object",
      "required": [
        "namespace",
        "name"
      ],
      "properties": {
        "name": {
          "description": "`name` is the name of matching ServiceAccount objects, or \"*\" to match regardless of name. Required.",
          "type": "string"
        },
        "namespace": {
          "description": "`namespace` is the namespace of matching ServiceAccount objects. Required.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.flowcontrol.v1alpha1.Subject": {
      "description": "Subject matches the originator of a request, as identified by the request authentication system. There are three ways of matching an originator; by user, group, or service account.",
      "type": "object",
      "required": [
        "kind"
      ],
      "properties": {
        "group": {
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.GroupSubject"
        },
        "kind": {
          "description": "Required",
          "type": "string"
        },
        "serviceAccount": {
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.ServiceAccountSubject"
        },
        "user": {
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.UserSubject"
        }
      },
      "x-kubernetes-unions": [
        {
          "discriminator": "kind",
          "fields-to-discriminateBy": {
            "group": "Group",
            "serviceAccount": "ServiceAccount",
            "user": "User"
          }
        }
      ]
    },
    "io.k8s.api.flowcontrol.v1alpha1.UserSubject": {
      "description": "UserSubject holds detailed information for user-kind subject.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "`name` is the username that matches, or \"*\" to match all usernames. Required.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.networking.v1.HTTPIngressPath": {
      "description": "HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.",
      "type": "object",
      "required": [
        "backend"
      ],
      "properties": {
        "backend": {
          "description": "Backend defines the referenced service endpoint to which the traffic will be forwarded to.",
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressBackend"
        },
        "path": {
          "description": "Path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/'. When unspecified, all paths from incoming requests are matched.",
          "type": "string"
        },
        "pathType": {
          "description": "PathType determines the interpretation of the Path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is\n  done on a path element by element basis. A path element refers is the\n  list of labels in the path split by the '/' separator. A request is a\n  match for path p if every p is an element-wise prefix of p of the\n  request path. Note that if the last element of the path is a substring\n  of the last element in request path, it is not a match (e.g. /foo/bar\n  matches /foo/bar/baz, but does not match /foo/barbaz).\n* ImplementationSpecific: Interpretation of the Path matching is up to\n  the IngressClass. Implementations can treat this as a separate PathType\n  or treat it identically to Prefix or Exact path types.\nImplementations are required to support all path types.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.networking.v1.HTTPIngressRuleValue": {
      "description": "HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.",
      "type": "object",
      "required": [
        "paths"
      ],
      "properties": {
        "paths": {
          "description": "A collection of paths that map requests to backends.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.HTTPIngressPath"
          },
          "x-kubernetes-list-type": "atomic"
        }
      }
    },
    "io.k8s.api.networking.v1.IPBlock": {
      "description": "IPBlock describes a particular CIDR (Ex. \"192.168.1.1/24\",\"2001:db9::/64\") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.",
      "type": "object",
      "required": [
        "cidr"
      ],
      "properties": {
        "cidr": {
          "description": "CIDR is a string representing the IP Block Valid examples are \"192.168.1.1/24\" or \"2001:db9::/64\"",
          "type": "string"
        },
        "except": {
          "description": "Except is a slice of CIDRs that should not be included within an IP Block Valid examples are \"192.168.1.1/24\" or \"2001:db9::/64\" Except values will be rejected if they are outside the CIDR range",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "io.k8s.api.networking.v1.Ingress": {
      "description": "Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "networking.k8s.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Ingress"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec is the desired state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressSpec"
        },
        "status": {
          "description": "Status is the current state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.networking.v1.IngressBackend": {
      "description": "IngressBackend describes all endpoints for a given service and port.",
      "type": "object",
      "properties": {
        "resource": {
          "description": "Resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, a service.Name and service.Port must not be specified. This is a mutually exclusive setting with \"Service\".",
          "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference"
        },
        "service": {
          "description": "Service references a Service as a Backend. This is a mutually exclusive setting with \"Resource\".",
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressServiceBackend"
        }
      }
    },
    "io.k8s.api.networking.v1.IngressClass": {
      "description": "IngressClass represents the class of the Ingress, referenced by the Ingress Spec. The `ingressclass.kubernetes.io/is-default-class` annotation can be used to indicate that an IngressClass should be considered default. When a single IngressClass resource has this annotation set to true, new Ingress resources without a class specified will be assigned this default class.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "networking.k8s.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "IngressClass"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec is the desired state of the IngressClass. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressClassSpec"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "IngressClass",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.networking.v1.IngressClassList": {
      "description": "IngressClassList is a collection of IngressClasses.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "networking.k8s.io/v1"
          ]
        },
        "items": {
          "description": "Items is the list of IngressClasses.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.IngressClass"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "IngressClassList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "IngressClassList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.networking.v1.IngressClassSpec": {
      "description": "IngressClassSpec provides information about the class of an Ingress.",
      "type": "object",
      "properties": {
        "controller": {
          "description": "Controller refers to the name of the controller that should handle this class. This allows for different \"flavors\" that are controlled by the same controller. For example, you may have different Parameters for the same implementing controller. This should be specified as a domain-prefixed path no more than 250 characters in length, e.g. \"acme.io/ingress-controller\". This field is immutable.",
          "type": "string"
        },
        "parameters": {
          "description": "Parameters is a link to a custom resource containing additional configuration for the controller. This is optional if the controller does not require extra parameters.",
          "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference"
        }
      }
    },
    "io.k8s.api.networking.v1.IngressList": {
      "description": "IngressList is a collection of Ingress.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "networking.k8s.io/v1"
          ]
        },
        "items": {
          "description": "Items is the list of Ingress.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.Ingress"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "IngressList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "IngressList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.networking.v1.IngressRule": {
      "description": "IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.",
      "type": "object",
      "properties": {
        "host": {
          "description": "Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \"host\" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to\n   the IP in the Spec of the parent Ingress.\n2. The `:` delimiter is not respected because ports are not allowed.\n\t  Currently the port of an Ingress is implicitly :80 for http and\n\t  :443 for https.\nBoth these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.\n\nHost can be \"precise\" which is a domain name without the terminating dot of a network host (e.g. \"foo.bar.com\") or \"wildcard\", which is a domain name prefixed with a single wildcard label (e.g. \"*.foo.com\"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == \"*\"). Requests will be matched against the Host field in the following way: 1. If Host is precise, the request matches this rule if the http host header is equal to Host. 2. If Host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.",
          "type": "string"
        },
        "http": {
          "$ref": "#/definitions/io.k8s.api.networking.v1.HTTPIngressRuleValue"
        }
      }
    },
    "io.k8s.api.networking.v1.IngressServiceBackend": {
      "description": "IngressServiceBackend references a Kubernetes Service as a Backend.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name is the referenced service. The service must exist in the same namespace as the Ingress object.",
          "type": "string"
        },
        "port": {
          "description": "Port of the referenced service. A port name or port number is required for a IngressServiceBackend.",
          "$ref": "#/definitions/io.k8s.api.networking.v1.ServiceBackendPort"
        }
      }
    },
    "io.k8s.api.networking.v1.IngressSpec": {
      "description": "IngressSpec describes the Ingress the user wishes to exist.",
      "type": "object",
      "properties": {
        "defaultBackend": {
          "description": "DefaultBackend is the backend that should handle requests that don't match any rule. If Rules are not specified, DefaultBackend must be specified. If DefaultBackend is not set, the handling of requests that do not match any of the rules will be up to the Ingress controller.",
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressBackend"
        },
        "ingressClassName": {
          "description": "IngressClassName is the name of the IngressClass cluster resource. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated `kubernetes.io/ingress.class` annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field. The controller may emit a warning if the field and annotation have different values. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as default, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation.",
          "type": "string"
        },
        "rules": {
          "description": "A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.IngressRule"
          },
          "x-kubernetes-list-type": "atomic"
        },
        "tls": {
          "description": "TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.IngressTLS"
          },
          "x-kubernetes-list-type": "atomic"
        }
      }
    },
    "io.k8s.api.networking.v1.IngressStatus": {
      "description": "IngressStatus describe the current state of the Ingress.",
      "type": "object",
      "properties": {
        "loadBalancer": {
          "description": "LoadBalancer contains the current status of the load-balancer.",
          "$ref": "#/definitions/io.k8s.api.core.v1.LoadBalancerStatus"
        }
      }
    },
    "io.k8s.api.networking.v1.IngressTLS": {
      "description": "IngressTLS describes the transport layer security associated with an Ingress.",
      "type": "object",
      "properties": {
        "hosts": {
          "description": "Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-list-type": "atomic"
        },
        "secretName": {
          "description": "SecretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \"Host\" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.networking.v1.NetworkPolicy": {
      "description": "NetworkPolicy describes what network traffic is allowed for a set of Pods",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "networking.k8s.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "NetworkPolicy"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior for this NetworkPolicy.",
          "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicySpec"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "NetworkPolicy",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.networking.v1.NetworkPolicyEgressRule": {
      "description": "NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8",
      "type": "object",
      "properties": {
        "ports": {
          "description": "List of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPort"
          }
        },
        "to": {
          "description": "List of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPeer"
          }
        }
      }
    },
    "io.k8s.api.networking.v1.NetworkPolicyIngressRule": {
      "description": "NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.",
      "type": "object",
      "properties": {
        "from": {
          "description": "List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPeer"
          }
        },
        "ports": {
          "description": "List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPort"
          }
        }
      }
    },
    "io.k8s.api.networking.v1.NetworkPolicyList": {
      "description": "NetworkPolicyList is a list of NetworkPolicy objects.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "networking.k8s.io/v1"
          ]
        },
        "items": {
          "description": "Items is a list of schema objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicy"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "NetworkPolicyList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "NetworkPolicyList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.networking.v1.NetworkPolicyPeer": {
      "description": "NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of fields are allowed",
      "type": "object",
      "properties": {
        "ipBlock": {
          "description": "IPBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.",
          "$ref": "#/definitions/io.k8s.api.networking.v1.IPBlock"
        },
        "namespaceSelector": {
          "description": "Selects Namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.\n\nIf PodSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects all Pods in the Namespaces selected by NamespaceSelector.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "podSelector": {
          "description": "This is a label selector which selects Pods. This field follows standard label selector semantics; if present but empty, it selects all pods.\n\nIf NamespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the Pods matching PodSelector in the policy's own Namespace.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }
      }
    },
    "io.k8s.api.networking.v1.NetworkPolicyPort": {
      "description": "NetworkPolicyPort describes a port to allow traffic on",
      "type": "object",
      "properties": {
        "port": {
          "description": "The port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        },
        "protocol": {
          "description": "The protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.networking.v1.NetworkPolicySpec": {
      "description": "NetworkPolicySpec provides the specification of a NetworkPolicy",
      "type": "object",
      "required": [
        "podSelector"
      ],
      "properties": {
        "egress": {
          "description": "List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyEgressRule"
          }
        },
        "ingress": {
          "description": "List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyIngressRule"
          }
        },
        "podSelector": {
          "description": "Selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "policyTypes": {
          "description": "List of rule types that the NetworkPolicy relates to. Valid options are \"Ingress\", \"Egress\", or \"Ingress,Egress\". If this field is not specified, it will default based on the existence of Ingress or Egress rules; policies that contain an Egress section are assumed to affect Egress, and all policies (whether or not they contain an Ingress section) are assumed to affect Ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ \"Egress\" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include \"Egress\" (since such a policy would not include an Egress section and would otherwise default to just [ \"Ingress\" ]). This field is beta-level in 1.8",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "io.k8s.api.networking.v1.ServiceBackendPort": {
      "description": "ServiceBackendPort is the service port being referenced.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name is the name of the port on the Service. This is a mutually exclusive setting with \"Number\".",
          "type": "string"
        },
        "number": {
          "description": "Number is the numerical port number (e.g. 80) on the Service. This is a mutually exclusive setting with \"Name\".",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.api.networking.v1beta1.HTTPIngressPath": {
      "description": "HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.",
      "type": "object",
      "required": [
        "backend"
      ],
      "properties": {
        "backend": {
          "description": "Backend defines the referenced service endpoint to which the traffic will be forwarded to.",
          "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressBackend"
        },
        "path": {
          "description": "Path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/'. When unspecified, all paths from incoming requests are matched.",
          "type": "string"
        },
        "pathType": {
          "description": "PathType determines the interpretation of the Path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is\n  done on a path element by element basis. A path element refers is the\n  list of labels in the path split by the '/' separator. A request is a\n  match for path p if every p is an element-wise prefix of p of the\n  request path. Note that if the last element of the path is a substring\n  of the last element in request path, it is not a match (e.g. /foo/bar\n  matches /foo/bar/baz, but does not match /foo/barbaz).\n* ImplementationSpecific: Interpretation of the Path matching is up to\n  the IngressClass. Implementations can treat this as a separate PathType\n  or treat it identically to Prefix or Exact path types.\nImplementations are required to support all path types. Defaults to ImplementationSpecific.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.networking.v1beta1.HTTPIngressRuleValue": {
      "description": "HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.",
      "type": "object",
      "required": [
        "paths"
      ],
      "properties": {
        "paths": {
          "description": "A collection of paths that map requests to backends.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1beta1.HTTPIngressPath"
          }
        }
      }
    },
    "io.k8s.api.networking.v1beta1.Ingress": {
      "description": "Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "networking.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Ingress"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec is the desired state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressSpec"
        },
        "status": {
          "description": "Status is the current state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.networking.v1beta1.IngressBackend": {
      "description": "IngressBackend describes all endpoints for a given service and port.",
      "type": "object",
      "properties": {
        "resource": {
          "description": "Resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, serviceName and servicePort must not be specified.",
          "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference"
        },
        "serviceName": {
          "description": "Specifies the name of the referenced service.",
          "type": "string"
        },
        "servicePort": {
          "description": "Specifies the port of the referenced service.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        }
      }
    },
    "io.k8s.api.networking.v1beta1.IngressClass": {
      "description": "IngressClass represents the class of the Ingress, referenced by the Ingress Spec. The `ingressclass.kubernetes.io/is-default-class` annotation can be used to indicate that an IngressClass should be considered default. When a single IngressClass resource has this annotation set to true, new Ingress resources without a class specified will be assigned this default class.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "networking.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "IngressClass"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec is the desired state of the IngressClass. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressClassSpec"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "IngressClass",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.networking.v1beta1.IngressClassList": {
      "description": "IngressClassList is a collection of IngressClasses.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "networking.k8s.io/v1beta1"
          ]
        },
        "items": {
          "description": "Items is the list of IngressClasses.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressClass"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "IngressClassList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "IngressClassList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.networking.v1beta1.IngressClassSpec": {
      "description": "IngressClassSpec provides information about the class of an Ingress.",
      "type": "object",
      "properties": {
        "controller": {
          "description": "Controller refers to the name of the controller that should handle this class. This allows for different \"flavors\" that are controlled by the same controller. For example, you may have different Parameters for the same implementing controller. This should be specified as a domain-prefixed path no more than 250 characters in length, e.g. \"acme.io/ingress-controller\". This field is immutable.",
          "type": "string"
        },
        "parameters": {
          "description": "Parameters is a link to a custom resource containing additional configuration for the controller. This is optional if the controller does not require extra parameters.",
          "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference"
        }
      }
    },
    "io.k8s.api.networking.v1beta1.IngressList": {
      "description": "IngressList is a collection of Ingress.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "networking.k8s.io/v1beta1"
          ]
        },
        "items": {
          "description": "Items is the list of Ingress.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1beta1.Ingress"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "IngressList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "IngressList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.networking.v1beta1.IngressRule": {
      "description": "IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.",
      "type": "object",
      "properties": {
        "host": {
          "description": "Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \"host\" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to\n   the IP in the Spec of the parent Ingress.\n2. The `:` delimiter is not respected because ports are not allowed.\n\t  Currently the port of an Ingress is implicitly :80 for http and\n\t  :443 for https.\nBoth these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.\n\nHost can be \"precise\" which is a domain name without the terminating dot of a network host (e.g. \"foo.bar.com\") or \"wildcard\", which is a domain name prefixed with a single wildcard label (e.g. \"*.foo.com\"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == \"*\"). Requests will be matched against the Host field in the following way: 1. If Host is precise, the request matches this rule if the http host header is equal to Host. 2. If Host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.",
          "type": "string"
        },
        "http": {
          "$ref": "#/definitions/io.k8s.api.networking.v1beta1.HTTPIngressRuleValue"
        }
      }
    },
    "io.k8s.api.networking.v1beta1.IngressSpec": {
      "description": "IngressSpec describes the Ingress the user wishes to exist.",
      "type": "object",
      "properties": {
        "backend": {
          "description": "A default backend capable of servicing requests that don't match any rule. At least one of 'backend' or 'rules' must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default.",
          "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressBackend"
        },
        "ingressClassName": {
          "description": "IngressClassName is the name of the IngressClass cluster resource. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated `kubernetes.io/ingress.class` annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field. The controller may emit a warning if the field and annotation have different values. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as default, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation.",
          "type": "string"
        },
        "rules": {
          "description": "A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressRule"
          }
        },
        "tls": {
          "description": "TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressTLS"
          }
        }
      }
    },
    "io.k8s.api.networking.v1beta1.IngressStatus": {
      "description": "IngressStatus describe the current state of the Ingress.",
      "type": "object",
      "properties": {
        "loadBalancer": {
          "description": "LoadBalancer contains the current status of the load-balancer.",
          "$ref": "#/definitions/io.k8s.api.core.v1.LoadBalancerStatus"
        }
      }
    },
    "io.k8s.api.networking.v1beta1.IngressTLS": {
      "description": "IngressTLS describes the transport layer security associated with an Ingress.",
      "type": "object",
      "properties": {
        "hosts": {
          "description": "Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "secretName": {
          "description": "SecretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \"Host\" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.node.v1beta1.Overhead": {
      "description": "Overhead structure represents the resource overhead associated with running a pod.",
      "type": "object",
      "properties": {
        "podFixed": {
          "description": "PodFixed represents the fixed resource overhead associated with running a pod.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        }
      }
    },
    "io.k8s.api.node.v1beta1.RuntimeClass": {
      "description": "RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a pod. RuntimeClasses are (currently) manually defined by a user or cluster provisioner, and referenced in the PodSpec. The Kubelet is responsible for resolving the RuntimeClassName reference before running the pod.  For more details, see https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md",
      "type": "object",
      "required": [
        "handler"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "node.k8s.io/v1beta1"
          ]
        },
        "handler": {
          "description": "Handler specifies the underlying runtime and configuration that the CRI implementation will use to handle pods of this class. The possible values are specific to the node & CRI configuration.  It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called \"runc\" might specify that the runc OCI runtime (using native Linux containers) will be used to run the containers in a pod. The Handler must conform to the DNS Label (RFC 1123) requirements, and is immutable.",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "RuntimeClass"
          ]
        },
        "metadata": {
          "description": "More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "overhead": {
          "description": "Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. For more details, see https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.15, and is only honored by servers that enable the PodOverhead feature.",
          "$ref": "#/definitions/io.k8s.api.node.v1beta1.Overhead"
        },
        "scheduling": {
          "description": "Scheduling holds the scheduling constraints to ensure that pods running with this RuntimeClass are scheduled to nodes that support it. If scheduling is nil, this RuntimeClass is assumed to be supported by all nodes.",
          "$ref": "#/definitions/io.k8s.api.node.v1beta1.Scheduling"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "node.k8s.io",
          "kind": "RuntimeClass",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.node.v1beta1.RuntimeClassList": {
      "description": "RuntimeClassList is a list of RuntimeClass objects.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "node.k8s.io/v1beta1"
          ]
        },
        "items": {
          "description": "Items is a list of schema objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.node.v1beta1.RuntimeClass"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "RuntimeClassList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "node.k8s.io",
          "kind": "RuntimeClassList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.node.v1beta1.Scheduling": {
      "description": "Scheduling specifies the scheduling constraints for nodes supporting a RuntimeClass.",
      "type": "object",
      "properties": {
        "nodeSelector": {
          "description": "nodeSelector lists labels that must be present on nodes that support this RuntimeClass. Pods using this RuntimeClass can only be scheduled to a node matched by this selector. The RuntimeClass nodeSelector is merged with a pod's existing nodeSelector. Any conflicts will cause the pod to be rejected in admission.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "tolerations": {
          "description": "tolerations are appended (excluding duplicates) to pods running with this RuntimeClass during admission, effectively unioning the set of nodes tolerated by the pod and the RuntimeClass.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
          },
          "x-kubernetes-list-type": "atomic"
        }
      }
    },
    "io.k8s.api.policy.v1beta1.AllowedCSIDriver": {
      "description": "AllowedCSIDriver represents a single inline CSI Driver that is allowed to be used.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name is the registered name of the CSI driver",
          "type": "string"
        }
      }
    },
    "io.k8s.api.policy.v1beta1.AllowedFlexVolume": {
      "description": "AllowedFlexVolume represents a single Flexvolume that is allowed to be used.",
      "type": "object",
      "required": [
        "driver"
      ],
      "properties": {
        "driver": {
          "description": "driver is the name of the Flexvolume driver.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.policy.v1beta1.AllowedHostPath": {
      "description": "AllowedHostPath defines the host volume conditions that will be enabled by a policy for pods to use. It requires the path prefix to be defined.",
      "type": "object",
      "properties": {
        "pathPrefix": {
          "description": "pathPrefix is the path prefix that the host volume must match. It does not support `*`. Trailing slashes are trimmed when validating the path prefix with a host path.\n\nExamples: `/foo` would allow `/foo`, `/foo/` and `/foo/bar` `/foo` would not allow `/food` or `/etc/foo`",
          "type": "string"
        },
        "readOnly": {
          "description": "when set to true, will allow host volumes matching the pathPrefix only if all volume mounts are readOnly.",
          "type": "boolean"
        }
      }
    },
    "io.k8s.api.policy.v1beta1.Eviction": {
      "description": "Eviction evicts a pod from its node subject to certain policies and safety constraints. This is a subresource of Pod.  A request to cause such an eviction is created by POSTing to .../pods/<pod name>/evictions.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "policy/v1beta1"
          ]
        },
        "deleteOptions": {
          "description": "DeleteOptions may be provided",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Eviction"
          ]
        },
        "metadata": {
          "description": "ObjectMeta describes the pod that is being evicted.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy",
          "kind": "Eviction",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.policy.v1beta1.FSGroupStrategyOptions": {
      "description": "FSGroupStrategyOptions defines the strategy type and options used to create the strategy.",
      "type": "object",
      "properties": {
        "ranges": {
          "description": "ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end. Required for MustRunAs.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.IDRange"
          }
        },
        "rule": {
          "description": "rule is the strategy that will dictate what FSGroup is used in the SecurityContext.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.policy.v1beta1.HostPortRange": {
      "description": "HostPortRange defines a range of host ports that will be enabled by a policy for pods to use.  It requires both the start and end to be defined.",
      "type": "object",
      "required": [
        "min",
        "max"
      ],
      "properties": {
        "max": {
          "description": "max is the end of the range, inclusive.",
          "type": "integer",
          "format": "int32"
        },
        "min": {
          "description": "min is the start of the range, inclusive.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.api.policy.v1beta1.IDRange": {
      "description": "IDRange provides a min/max of an allowed range of IDs.",
      "type": "object",
      "required": [
        "min",
        "max"
      ],
      "properties": {
        "max": {
          "description": "max is the end of the range, inclusive.",
          "type": "integer",
          "format": "int64"
        },
        "min": {
          "description": "min is the start of the range, inclusive.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "io.k8s.api.policy.v1beta1.PodDisruptionBudget": {
      "description": "PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "policy/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PodDisruptionBudget"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of the PodDisruptionBudget.",
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudgetSpec"
        },
        "status": {
          "description": "Most recently observed status of the PodDisruptionBudget.",
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudgetStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy",
          "kind": "PodDisruptionBudget",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.policy.v1beta1.PodDisruptionBudgetList": {
      "description": "PodDisruptionBudgetList is a collection of PodDisruptionBudgets.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "policy/v1beta1"
          ]
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PodDisruptionBudgetList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy",
          "kind": "PodDisruptionBudgetList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.policy.v1beta1.PodDisruptionBudgetSpec": {
      "description": "PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.",
      "type": "object",
      "properties": {
        "maxUnavailable": {
          "description": "An eviction is allowed if at most \"maxUnavailable\" pods selected by \"selector\" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with \"minAvailable\".",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        },
        "minAvailable": {
          "description": "An eviction is allowed if at least \"minAvailable\" pods selected by \"selector\" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying \"100%\".",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        },
        "selector": {
          "description": "Label query over pods whose evictions are managed by the disruption budget.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }
      }
    },
    "io.k8s.api.policy.v1beta1.PodDisruptionBudgetStatus": {
      "description": "PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system.",
      "type": "object",
      "required": [
        "disruptionsAllowed",
        "currentHealthy",
        "desiredHealthy",
        "expectedPods"
      ],
      "properties": {
        "currentHealthy": {
          "description": "current number of healthy pods",
          "type": "integer",
          "format": "int32"
        },
        "desiredHealthy": {
          "description": "minimum desired number of healthy pods",
          "type": "integer",
          "format": "int32"
        },
        "disruptedPods": {
          "description": "DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
          }
        },
        "disruptionsAllowed": {
          "description": "Number of pod disruptions that are currently allowed.",
          "type": "integer",
          "format": "int32"
        },
        "expectedPods": {
          "description": "total number of pods counted by this disruption budget",
          "type": "integer",
          "format": "int32"
        },
        "observedGeneration": {
          "description": "Most recent generation observed when updating this PDB status. DisruptionsAllowed and other status information is valid only if observedGeneration equals to PDB's object generation.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "io.k8s.api.policy.v1beta1.PodSecurityPolicy": {
      "description": "PodSecurityPolicy governs the ability to make requests that affect the Security Context that will be applied to a pod and container.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "policy/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PodSecurityPolicy"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec defines the policy enforced.",
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicySpec"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy",
          "kind": "PodSecurityPolicy",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.policy.v1beta1.PodSecurityPolicyList": {
      "description": "PodSecurityPolicyList is a list of PodSecurityPolicy objects.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "policy/v1beta1"
          ]
        },
        "items": {
          "description": "items is a list of schema objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicy"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PodSecurityPolicyList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy",
          "kind": "PodSecurityPolicyList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.policy.v1beta1.PodSecurityPolicySpec": {
      "description": "PodSecurityPolicySpec defines the policy enforced.",
      "type": "object",
      "required": [
        "seLinux",
        "runAsUser",
        "supplementalGroups",
        "fsGroup"
      ],
      "properties": {
        "allowPrivilegeEscalation": {
          "description": "allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true.",
          "type": "boolean"
        },
        "allowedCSIDrivers": {
          "description": "AllowedCSIDrivers is an allowlist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An empty value indicates that any CSI driver can be used for inline ephemeral volumes. This is a beta field, and is only honored if the API server enables the CSIInlineVolume feature gate.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.AllowedCSIDriver"
          }
        },
        "allowedCapabilities": {
          "description": "allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and requiredDropCapabilities.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allowedFlexVolumes": {
          "description": "allowedFlexVolumes is an allowlist of Flexvolumes.  Empty or nil indicates that all Flexvolumes may be used.  This parameter is effective only when the usage of the Flexvolumes is allowed in the \"volumes\" field.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.AllowedFlexVolume"
          }
        },
        "allowedHostPaths": {
          "description": "allowedHostPaths is an allowlist of host paths. Empty indicates that all host paths may be used.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.AllowedHostPath"
          }
        },
        "allowedProcMountTypes": {
          "description": "AllowedProcMountTypes is an allowlist of allowed ProcMountTypes. Empty or nil indicates that only the DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allowedUnsafeSysctls": {
          "description": "allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in \"*\" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to allowlist all allowed unsafe sysctls explicitly to avoid rejection.\n\nExamples: e.g. \"foo/*\" allows \"foo/bar\", \"foo/baz\", etc. e.g. \"foo.*\" allows \"foo.bar\", \"foo.baz\", etc.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultAddCapabilities": {
          "description": "defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capability in both defaultAddCapabilities and requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the allowedCapabilities list.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultAllowPrivilegeEscalation": {
          "description": "defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process.",
          "type": "boolean"
        },
        "forbiddenSysctls": {
          "description": "forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in \"*\" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden.\n\nExamples: e.g. \"foo/*\" forbids \"foo/bar\", \"foo/baz\", etc. e.g. \"foo.*\" forbids \"foo.bar\", \"foo.baz\", etc.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fsGroup": {
          "description": "fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.",
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.FSGroupStrategyOptions"
        },
        "hostIPC": {
          "description": "hostIPC determines if the policy allows the use of HostIPC in the pod spec.",
          "type": "boolean"
        },
        "hostNetwork": {
          "description": "hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.",
          "type": "boolean"
        },
        "hostPID": {
          "description": "hostPID determines if the policy allows the use of HostPID in the pod spec.",
          "type": "boolean"
        },
        "hostPorts": {
          "description": "hostPorts determines which host port ranges are allowed to be exposed.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.HostPortRange"
          }
        },
        "privileged": {
          "description": "privileged determines if a pod can request to be run as privileged.",
          "type": "boolean"
        },
        "readOnlyRootFilesystem": {
          "description": "readOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.",
          "type": "boolean"
        },
        "requiredDropCapabilities": {
          "description": "requiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "runAsGroup": {
          "description": "RunAsGroup is the strategy that will dictate the allowable RunAsGroup values that may be set. If this field is omitted, the pod's RunAsGroup can take any value. This field requires the RunAsGroup feature gate to be enabled.",
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.RunAsGroupStrategyOptions"
        },
        "runAsUser": {
          "description": "runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.",
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.RunAsUserStrategyOptions"
        },
        "runtimeClass": {
          "description": "runtimeClass is the strategy that will dictate the allowable RuntimeClasses for a pod. If this field is omitted, the pod's runtimeClassName field is unrestricted. Enforcement of this field depends on the RuntimeClass feature gate being enabled.",
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.RuntimeClassStrategyOptions"
        },
        "seLinux": {
          "description": "seLinux is the strategy that will dictate the allowable labels that may be set.",
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.SELinuxStrategyOptions"
        },
        "supplementalGroups": {
          "description": "supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.",
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.SupplementalGroupsStrategyOptions"
        },
        "volumes": {
          "description": "volumes is an allowlist of volume plugins. Empty indicates that no volumes may be used. To allow all volumes you may use '*'.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "io.k8s.api.policy.v1beta1.RunAsGroupStrategyOptions": {
      "description": "RunAsGroupStrategyOptions defines the strategy type and any options used to create the strategy.",
      "type": "object",
      "required": [
        "rule"
      ],
      "properties": {
        "ranges": {
          "description": "ranges are the allowed ranges of gids that may be used. If you would like to force a single gid then supply a single range with the same start and end. Required for MustRunAs.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.IDRange"
          }
        },
        "rule": {
          "description": "rule is the strategy that will dictate the allowable RunAsGroup values that may be set.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.policy.v1beta1.RunAsUserStrategyOptions": {
      "description": "RunAsUserStrategyOptions defines the strategy type and any options used to create the strategy.",
      "type": "object",
      "required": [
        "rule"
      ],
      "properties": {
        "ranges": {
          "description": "ranges are the allowed ranges of uids that may be used. If you would like to force a single uid then supply a single range with the same start and end. Required for MustRunAs.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.IDRange"
          }
        },
        "rule": {
          "description": "rule is the strategy that will dictate the allowable RunAsUser values that may be set.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.policy.v1beta1.RuntimeClassStrategyOptions": {
      "description": "RuntimeClassStrategyOptions define the strategy that will dictate the allowable RuntimeClasses for a pod.",
      "type": "object",
      "required": [
        "allowedRuntimeClassNames"
      ],
      "properties": {
        "allowedRuntimeClassNames": {
          "description": "allowedRuntimeClassNames is an allowlist of RuntimeClass names that may be specified on a pod. A value of \"*\" means that any RuntimeClass name is allowed, and must be the only item in the list. An empty list requires the RuntimeClassName field to be unset.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultRuntimeClassName": {
          "description": "defaultRuntimeClassName is the default RuntimeClassName to set on the pod. The default MUST be allowed by the allowedRuntimeClassNames list. A value of nil does not mutate the Pod.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.policy.v1beta1.SELinuxStrategyOptions": {
      "description": "SELinuxStrategyOptions defines the strategy type and any options used to create the strategy.",
      "type": "object",
      "required": [
        "rule"
      ],
      "properties": {
        "rule": {
          "description": "rule is the strategy that will dictate the allowable labels that may be set.",
          "type": "string"
        },
        "seLinuxOptions": {
          "description": "seLinuxOptions required to run as; required for MustRunAs More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "$ref": "#/definitions/io.k8s.api.core.v1.SELinuxOptions"
        }
      }
    },
    "io.k8s.api.policy.v1beta1.SupplementalGroupsStrategyOptions": {
      "description": "SupplementalGroupsStrategyOptions defines the strategy type and options used to create the strategy.",
      "type": "object",
      "properties": {
        "ranges": {
          "description": "ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end. Required for MustRunAs.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.IDRange"
          }
        },
        "rule": {
          "description": "rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.rbac.v1.AggregationRule": {
      "description": "AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole",
      "type": "object",
      "properties": {
        "clusterRoleSelectors": {
          "description": "ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
          }
        }
      }
    },
    "io.k8s.api.rbac.v1.ClusterRole": {
      "description": "ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.",
      "type": "object",
      "properties": {
        "aggregationRule": {
          "description": "AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller.",
          "$ref": "#/definitions/io.k8s.api.rbac.v1.AggregationRule"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterRole"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "rules": {
          "description": "Rules holds all the PolicyRules for this ClusterRole",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.PolicyRule"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.ClusterRoleBinding": {
      "description": "ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject.",
      "type": "object",
      "required": [
        "roleRef"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterRoleBinding"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "roleRef": {
          "description": "RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.",
          "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleRef"
        },
        "subjects": {
          "description": "Subjects holds references to the objects the role applies to.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.Subject"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.ClusterRoleBindingList": {
      "description": "ClusterRoleBindingList is a collection of ClusterRoleBindings",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ]
        },
        "items": {
          "description": "Items is a list of ClusterRoleBindings",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterRoleBindingList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBindingList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.ClusterRoleList": {
      "description": "ClusterRoleList is a collection of ClusterRoles",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ]
        },
        "items": {
          "description": "Items is a list of ClusterRoles",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRole"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterRoleList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.PolicyRule": {
      "description": "PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.",
      "type": "object",
      "required": [
        "verbs"
      ],
      "properties": {
        "apiGroups": {
          "description": "APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nonResourceURLs": {
          "description": "NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"),  but not both.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resourceNames": {
          "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resources": {
          "description": "Resources is a list of resources this rule applies to.  ResourceAll represents all resources.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "verbs": {
          "description": "Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "io.k8s.api.rbac.v1.Role": {
      "description": "Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Role"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "rules": {
          "description": "Rules holds all the PolicyRules for this Role",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.PolicyRule"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.RoleBinding": {
      "description": "RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace.",
      "type": "object",
      "required": [
        "roleRef"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "RoleBinding"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "roleRef": {
          "description": "RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.",
          "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleRef"
        },
        "subjects": {
          "description": "Subjects holds references to the objects the role applies to.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.Subject"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.RoleBindingList": {
      "description": "RoleBindingList is a collection of RoleBindings",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ]
        },
        "items": {
          "description": "Items is a list of RoleBindings",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "RoleBindingList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBindingList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.RoleList": {
      "description": "RoleList is a collection of Roles",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ]
        },
        "items": {
          "description": "Items is a list of Roles",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.Role"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "RoleList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.RoleRef": {
      "description": "RoleRef contains information that points to the role being used",
      "type": "object",
      "required": [
        "apiGroup",
        "kind",
        "name"
      ],
      "properties": {
        "apiGroup": {
          "description": "APIGroup is the group for the resource being referenced",
          "type": "string"
        },
        "kind": {
          "description": "Kind is the type of resource being referenced",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of resource being referenced",
          "type": "string"
        }
      }
    },
    "io.k8s.api.rbac.v1.Subject": {
      "description": "Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.",
      "type": "object",
      "required": [
        "kind",
        "name"
      ],
      "properties": {
        "apiGroup": {
          "description": "APIGroup holds the API group of the referenced subject. Defaults to \"\" for ServiceAccount subjects. Defaults to \"rbac.authorization.k8s.io\" for User and Group subjects.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.",
          "type": "string"
        },
        "name": {
          "description": "Name of the object being referenced.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the referenced object.  If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty the Authorizer should report an error.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.rbac.v1beta1.AggregationRule": {
      "description": "AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole",
      "type": "object",
      "properties": {
        "clusterRoleSelectors": {
          "description": "ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
          }
        }
      }
    },
    "io.k8s.api.rbac.v1beta1.ClusterRole": {
      "description": "ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRole, and will no longer be served in v1.22.",
      "type": "object",
      "properties": {
        "aggregationRule": {
          "description": "AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller.",
          "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.AggregationRule"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "rbac.authorization.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterRole"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "rules": {
          "description": "Rules holds all the PolicyRules for this ClusterRole",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.PolicyRule"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.rbac.v1beta1.ClusterRoleBinding": {
      "description": "ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBinding, and will no longer be served in v1.22.",
      "type": "object",
      "required": [
        "roleRef"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "rbac.authorization.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterRoleBinding"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "roleRef": {
          "description": "RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.",
          "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleRef"
        },
        "subjects": {
          "description": "Subjects holds references to the objects the role applies to.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.Subject"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.rbac.v1beta1.ClusterRoleBindingList": {
      "description": "ClusterRoleBindingList is a collection of ClusterRoleBindings. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBindingList, and will no longer be served in v1.22.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "rbac.authorization.k8s.io/v1beta1"
          ]
        },
        "items": {
          "description": "Items is a list of ClusterRoleBindings",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRoleBinding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterRoleBindingList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBindingList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.rbac.v1beta1.ClusterRoleList": {
      "description": "ClusterRoleList is a collection of ClusterRoles. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoles, and will no longer be served in v1.22.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "rbac.authorization.k8s.io/v1beta1"
          ]
        },
        "items": {
          "description": "Items is a list of ClusterRoles",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRole"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterRoleList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.rbac.v1beta1.PolicyRule": {
      "description": "PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.",
      "type": "object",
      "required": [
        "verbs"
      ],
      "properties": {
        "apiGroups": {
          "description": "APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nonResourceURLs": {
          "description": "NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"),  but not both.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resourceNames": {
          "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resources": {
          "description": "Resources is a list of resources this rule applies to.  '*' represents all resources in the specified apiGroups. '*/foo' represents the subresource 'foo' for all resources in the specified apiGroups.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "verbs": {
          "description": "Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "io.k8s.api.rbac.v1beta1.Role": {
      "description": "Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 Role, and will no longer be served in v1.22.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "rbac.authorization.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Role"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "rules": {
          "description": "Rules holds all the PolicyRules for this Role",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.PolicyRule"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.rbac.v1beta1.RoleBinding": {
      "description": "RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBinding, and will no longer be served in v1.22.",
      "type": "object",
      "required": [
        "roleRef"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "rbac.authorization.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "RoleBinding"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "roleRef": {
          "description": "RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.",
          "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleRef"
        },
        "subjects": {
          "description": "Subjects holds references to the objects the role applies to.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.Subject"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.rbac.v1beta1.RoleBindingList": {
      "description": "RoleBindingList is a collection of RoleBindings Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBindingList, and will no longer be served in v1.22.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "rbac.authorization.k8s.io/v1beta1"
          ]
        },
        "items": {
          "description": "Items is a list of RoleBindings",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleBinding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "RoleBindingList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBindingList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.rbac.v1beta1.RoleList": {
      "description": "RoleList is a collection of Roles Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleList, and will no longer be served in v1.22.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "rbac.authorization.k8s.io/v1beta1"
          ]
        },
        "items": {
          "description": "Items is a list of Roles",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.Role"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "RoleList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.rbac.v1beta1.RoleRef": {
      "description": "RoleRef contains information that points to the role being used",
      "type": "object",
      "required": [
        "apiGroup",
        "kind",
        "name"
      ],
      "properties": {
        "apiGroup": {
          "description": "APIGroup is the group for the resource being referenced",
          "type": "string"
        },
        "kind": {
          "description": "Kind is the type of resource being referenced",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of resource being referenced",
          "type": "string"
        }
      }
    },
    "io.k8s.api.rbac.v1beta1.Subject": {
      "description": "Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.",
      "type": "object",
      "required": [
        "kind",
        "name"
      ],
      "properties": {
        "apiGroup": {
          "description": "APIGroup holds the API group of the referenced subject. Defaults to \"\" for ServiceAccount subjects. Defaults to \"rbac.authorization.k8s.io\" for User and Group subjects.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.",
          "type": "string"
        },
        "name": {
          "description": "Name of the object being referenced.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the referenced object.  If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty the Authorizer should report an error.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.scheduling.v1.PriorityClass": {
      "description": "PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer.",
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "scheduling.k8s.io/v1"
          ]
        },
        "description": {
          "description": "description is an arbitrary string that usually provides guidelines on when this priority class should be used.",
          "type": "string"
        },
        "globalDefault": {
          "description": "globalDefault specifies whether this PriorityClass should be considered as the default priority for pods that do not have any priority class. Only one PriorityClass can be marked as `globalDefault`. However, if more than one PriorityClasses exists with their `globalDefault` field set to true, the smallest value of such global default PriorityClasses will be used as the default priority.",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PriorityClass"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "preemptionPolicy": {
          "description": "PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is beta-level, gated by the NonPreemptingPriority feature-gate.",
          "type": "string"
        },
        "value": {
          "description": "The value of this priority class. This is the actual priority that pods receive when they have the name of this class in their pod spec.",
          "type": "integer",
          "format": "int32"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.scheduling.v1.PriorityClassList": {
      "description": "PriorityClassList is a collection of priority classes.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "scheduling.k8s.io/v1"
          ]
        },
        "items": {
          "description": "items is the list of PriorityClasses",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.scheduling.v1.PriorityClass"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PriorityClassList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClassList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.scheduling.v1beta1.PriorityClass": {
      "description": "DEPRECATED - This group version of PriorityClass is deprecated by scheduling.k8s.io/v1/PriorityClass. PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer.",
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "scheduling.k8s.io/v1beta1"
          ]
        },
        "description": {
          "description": "description is an arbitrary string that usually provides guidelines on when this priority class should be used.",
          "type": "string"
        },
        "globalDefault": {
          "description": "globalDefault specifies whether this PriorityClass should be considered as the default priority for pods that do not have any priority class. Only one PriorityClass can be marked as `globalDefault`. However, if more than one PriorityClasses exists with their `globalDefault` field set to true, the smallest value of such global default PriorityClasses will be used as the default priority.",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PriorityClass"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "preemptionPolicy": {
          "description": "PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is beta-level, gated by the NonPreemptingPriority feature-gate.",
          "type": "string"
        },
        "value": {
          "description": "The value of this priority class. This is the actual priority that pods receive when they have the name of this class in their pod spec.",
          "type": "integer",
          "format": "int32"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.scheduling.v1beta1.PriorityClassList": {
      "description": "PriorityClassList is a collection of priority classes.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "scheduling.k8s.io/v1beta1"
          ]
        },
        "items": {
          "description": "items is the list of PriorityClasses",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.scheduling.v1beta1.PriorityClass"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PriorityClassList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClassList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.storage.v1.CSIDriver": {
      "description": "CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster. Kubernetes attach detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether pod information needs to be passed on mount. CSIDriver objects are non-namespaced.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "storage.k8s.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "CSIDriver"
          ]
        },
        "metadata": {
          "description": "Standard object metadata. metadata.Name indicates the name of the CSI driver that this object refers to; it MUST be the same name returned by the CSI GetPluginName() call for that driver. The driver name must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), dots (.), and alphanumerics between. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the CSI Driver.",
          "$ref": "#/definitions/io.k8s.api.storage.v1.CSIDriverSpec"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "CSIDriver",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.storage.v1.CSIDriverList": {
      "description": "CSIDriverList is a collection of CSIDriver objects.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "storage.k8s.io/v1"
          ]
        },
        "items": {
          "description": "items is the list of CSIDriver",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1.CSIDriver"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "CSIDriverList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "CSIDriverList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.storage.v1.CSIDriverSpec": {
      "description": "CSIDriverSpec is the specification of a CSIDriver.",
      "type": "object",
      "properties": {
        "attachRequired": {
          "description": "attachRequired indicates this CSI volume driver requires an attach operation (because it implements the CSI ControllerPublishVolume() method), and that the Kubernetes attach detach controller should call the attach volume interface which checks the volumeattachment status and waits until the volume is attached before proceeding to mounting. The CSI external-attacher coordinates with CSI volume driver and updates the volumeattachment status when the attach operation is complete. If the CSIDriverRegistry feature gate is enabled and the value is specified to false, the attach operation will be skipped. Otherwise the attach operation will be called.",
          "type": "boolean"
        },
        "fsGroupPolicy": {
          "description": "Defines if the underlying volume supports changing ownership and permission of the volume before being mounted. Refer to the specific FSGroupPolicy values for additional details. This field is alpha-level, and is only honored by servers that enable the CSIVolumeFSGroupPolicy feature gate.",
          "type": "string"
        },
        "podInfoOnMount": {
          "description": "If set to true, podInfoOnMount indicates this CSI volume driver requires additional pod information (like podName, podUID, etc.) during mount operations. If set to false, pod information will not be passed on mount. Default is false. The CSI driver specifies podInfoOnMount as part of driver deployment. If true, Kubelet will pass pod information as VolumeContext in the CSI NodePublishVolume() calls. The CSI driver is responsible for parsing and validating the information passed in as VolumeContext. The following VolumeConext will be passed if podInfoOnMount is set to true. This list might grow, but the prefix will be used. \"csi.storage.k8s.io/pod.name\": pod.Name \"csi.storage.k8s.io/pod.namespace\": pod.Namespace \"csi.storage.k8s.io/pod.uid\": string(pod.UID) \"csi.storage.k8s.io/ephemeral\": \"true\" iff the volume is an ephemeral inline volume\n                                defined by a CSIVolumeSource, otherwise \"false\"\n\n\"csi.storage.k8s.io/ephemeral\" is a new feature in Kubernetes 1.16. It is only required for drivers which support both the \"Persistent\" and \"Ephemeral\" VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver.",
          "type": "boolean"
        },
        "storageCapacity": {
          "description": "If set to true, storageCapacity indicates that the CSI volume driver wants pod scheduling to consider the storage capacity that the driver deployment will report by creating CSIStorageCapacity objects with capacity information.\n\nThe check can be enabled immediately when deploying a driver. In that case, provisioning new volumes with late binding will pause until the driver deployment has published some suitable CSIStorageCapacity object.\n\nAlternatively, the driver can be deployed with the field unset or false and it can be flipped later when storage capacity information has been published.\n\nThis is an alpha field and only available when the CSIStorageCapacity feature is enabled. The default is false.",
          "type": "boolean"
        },
        "volumeLifecycleModes": {
          "description": "volumeLifecycleModes defines what kind of volumes this CSI volume driver supports. The default if the list is empty is \"Persistent\", which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism. The other mode is \"Ephemeral\". In this mode, volumes are defined inline inside the pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle of that pod. A driver has to be aware of this because it is only going to get a NodePublishVolume call for such a volume. For more information about implementing this mode, see https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can support one or more of these modes and more modes may be added in the future. This field is beta.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-list-type": "set"
        }
      }
    },
    "io.k8s.api.storage.v1.CSINode": {
      "description": "CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the Kubelet version is low enough that it doesn't create this object. CSINode has an OwnerReference that points to the corresponding node object.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "storage.k8s.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "CSINode"
          ]
        },
        "metadata": {
          "description": "metadata.name must be the Kubernetes node name.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is the specification of CSINode",
          "$ref": "#/definitions/io.k8s.api.storage.v1.CSINodeSpec"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "CSINode",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.storage.v1.CSINodeDriver": {
      "description": "CSINodeDriver holds information about the specification of one CSI driver installed on a node",
      "type": "object",
      "required": [
        "name",
        "nodeID"
      ],
      "properties": {
        "allocatable": {
          "description": "allocatable represents the volume resources of a node that are available for scheduling. This field is beta.",
          "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeNodeResources"
        },
        "name": {
          "description": "This is the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver.",
          "type": "string"
        },
        "nodeID": {
          "description": "nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as \"node1\", but the storage system may refer to the same node as \"nodeA\". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. \"nodeA\" instead of \"node1\". This field is required.",
          "type": "string"
        },
        "topologyKeys": {
          "description": "topologyKeys is the list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. \"company.com/zone\", \"company.com/region\"). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver. It is possible for different nodes to use different topology keys. This can be empty if driver does not support topology.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "io.k8s.api.storage.v1.CSINodeList": {
      "description": "CSINodeList is a collection of CSINode objects.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "storage.k8s.io/v1"
          ]
        },
        "items": {
          "description": "items is the list of CSINode",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1.CSINode"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "CSINodeList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "CSINodeList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.storage.v1.CSINodeSpec": {
      "description": "CSINodeSpec holds information about the specification of all CSI drivers installed on a node",
      "type": "object",
      "required": [
        "drivers"
      ],
      "properties": {
        "drivers": {
          "description": "drivers is a list of information of all CSI Drivers existing on a node. If all drivers in the list are uninstalled, this can become empty.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1.CSINodeDriver"
          },
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      }
    },
    "io.k8s.api.storage.v1.StorageClass": {
      "description": "StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.\n\nStorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.",
      "type": "object",
      "required": [
        "provisioner"
      ],
      "properties": {
        "allowVolumeExpansion": {
          "description": "AllowVolumeExpansion shows whether the storage class allow volume expand",
          "type": "boolean"
        },
        "allowedTopologies": {
          "description": "Restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySelectorTerm"
          }
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "storage.k8s.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "StorageClass"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "mountOptions": {
          "description": "Dynamically provisioned PersistentVolumes of this storage class are created with these mountOptions, e.g. [\"ro\", \"soft\"]. Not validated - mount of the PVs will simply fail if one is invalid.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "parameters": {
          "description": "Parameters holds the parameters for the provisioner that should create volumes of this storage class.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "provisioner": {
          "description": "Provisioner indicates the type of the provisioner.",
          "type": "string"
        },
        "reclaimPolicy": {
          "description": "Dynamically provisioned PersistentVolumes of this storage class are created with this reclaimPolicy. Defaults to Delete.",
          "type": "string"
        },
        "volumeBindingMode": {
          "description": "VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "StorageClass",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.storage.v1.StorageClassList": {
      "description": "StorageClassList is a collection of storage classes.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "storage.k8s.io/v1"
          ]
        },
        "items": {
          "description": "Items is the list of StorageClasses",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "StorageClassList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "StorageClassList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.storage.v1.VolumeAttachment": {
      "description": "VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.\n\nVolumeAttachment objects are non-namespaced.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "storage.k8s.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "VolumeAttachment"
          ]
        },
        "metadata": {
          "description": "Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.",
          "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachmentSpec"
        },
        "status": {
          "description": "Status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.",
          "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachmentStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.storage.v1.VolumeAttachmentList": {
      "description": "VolumeAttachmentList is a collection of VolumeAttachment objects.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "storage.k8s.io/v1"
          ]
        },
        "items": {
          "description": "Items is the list of VolumeAttachments",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "VolumeAttachmentList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachmentList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.storage.v1.VolumeAttachmentSource": {
      "description": "VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.",
      "type": "object",
      "properties": {
        "inlineVolumeSpec": {
          "description": "inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is alpha-level and is only honored by servers that enabled the CSIMigration feature.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeSpec"
        },
        "persistentVolumeName": {
          "description": "Name of the persistent volume to attach.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.storage.v1.VolumeAttachmentSpec": {
      "description": "VolumeAttachmentSpec is the specification of a VolumeAttachment request.",
      "type": "object",
      "required": [
        "attacher",
        "source",
        "nodeName"
      ],
      "properties": {
        "attacher": {
          "description": "Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().",
          "type": "string"
        },
        "nodeName": {
          "description": "The node that the volume should be attached to.",
          "type": "string"
        },
        "source": {
          "description": "Source represents the volume that should be attached.",
          "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachmentSource"
        }
      }
    },
    "io.k8s.api.storage.v1.VolumeAttachmentStatus": {
      "description": "VolumeAttachmentStatus is the status of a VolumeAttachment request.",
      "type": "object",
      "required": [
        "attached"
      ],
      "properties": {
        "attachError": {
          "description": "The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.",
          "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeError"
        },
        "attached": {
          "description": "Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.",
          "type": "boolean"
        },
        "attachmentMetadata": {
          "description": "Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "detachError": {
          "description": "The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.",
          "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeError"
        }
      }
    },
    "io.k8s.api.storage.v1.VolumeError": {
      "description": "VolumeError captures an error encountered during a volume operation.",
      "type": "object",
      "properties": {
        "message": {
          "description": "String detailing the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information.",
          "type": "string"
        },
        "time": {
          "description": "Time the error was encountered.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      }
    },
    "io.k8s.api.storage.v1.VolumeNodeResources": {
      "description": "VolumeNodeResources is a set of resource limits for scheduling of volumes.",
      "type": "object",
      "properties": {
        "count": {
          "description": "Maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume that is both attached and mounted on a node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple pods on the same node. If this field is not specified, then the supported number of volumes on this node is unbounded.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.api.storage.v1beta1.CSIDriver": {
      "description": "CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster. CSI drivers do not need to create the CSIDriver object directly. Instead they may use the cluster-driver-registrar sidecar container. When deployed with a CSI driver it automatically creates a CSIDriver object representing the driver. Kubernetes attach detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether pod information needs to be passed on mount. CSIDriver objects are non-namespaced.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "storage.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "CSIDriver"
          ]
        },
        "metadata": {
          "description": "Standard object metadata. metadata.Name indicates the name of the CSI driver that this object refers to; it MUST be the same name returned by the CSI GetPluginName() call for that driver. The driver name must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), dots (.), and alphanumerics between. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the CSI Driver.",
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriverSpec"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "CSIDriver",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.storage.v1beta1.CSIDriverList": {
      "description": "CSIDriverList is a collection of CSIDriver objects.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "storage.k8s.io/v1beta1"
          ]
        },
        "items": {
          "description": "items is the list of CSIDriver",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriver"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "CSIDriverList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "CSIDriverList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.storage.v1beta1.CSIDriverSpec": {
      "description": "CSIDriverSpec is the specification of a CSIDriver.",
      "type": "object",
      "properties": {
        "attachRequired": {
          "description": "attachRequired indicates this CSI volume driver requires an attach operation (because it implements the CSI ControllerPublishVolume() method), and that the Kubernetes attach detach controller should call the attach volume interface which checks the volumeattachment status and waits until the volume is attached before proceeding to mounting. The CSI external-attacher coordinates with CSI volume driver and updates the volumeattachment status when the attach operation is complete. If the CSIDriverRegistry feature gate is enabled and the value is specified to false, the attach operation will be skipped. Otherwise the attach operation will be called.",
          "type": "boolean"
        },
        "fsGroupPolicy": {
          "description": "Defines if the underlying volume supports changing ownership and permission of the volume before being mounted. Refer to the specific FSGroupPolicy values for additional details. This field is alpha-level, and is only honored by servers that enable the CSIVolumeFSGroupPolicy feature gate.",
          "type": "string"
        },
        "podInfoOnMount": {
          "description": "If set to true, podInfoOnMount indicates this CSI volume driver requires additional pod information (like podName, podUID, etc.) during mount operations. If set to false, pod information will not be passed on mount. Default is false. The CSI driver specifies podInfoOnMount as part of driver deployment. If true, Kubelet will pass pod information as VolumeContext in the CSI NodePublishVolume() calls. The CSI driver is responsible for parsing and validating the information passed in as VolumeContext. The following VolumeConext will be passed if podInfoOnMount is set to true. This list might grow, but the prefix will be used. \"csi.storage.k8s.io/pod.name\": pod.Name \"csi.storage.k8s.io/pod.namespace\": pod.Namespace \"csi.storage.k8s.io/pod.uid\": string(pod.UID) \"csi.storage.k8s.io/ephemeral\": \"true\" iff the volume is an ephemeral inline volume\n                                defined by a CSIVolumeSource, otherwise \"false\"\n\n\"csi.storage.k8s.io/ephemeral\" is a new feature in Kubernetes 1.16. It is only required for drivers which support both the \"Persistent\" and \"Ephemeral\" VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver.",
          "type": "boolean"
        },
        "storageCapacity": {
          "description": "If set to true, storageCapacity indicates that the CSI volume driver wants pod scheduling to consider the storage capacity that the driver deployment will report by creating CSIStorageCapacity objects with capacity information.\n\nThe check can be enabled immediately when deploying a driver. In that case, provisioning new volumes with late binding will pause until the driver deployment has published some suitable CSIStorageCapacity object.\n\nAlternatively, the driver can be deployed with the field unset or false and it can be flipped later when storage capacity information has been published.\n\nThis is an alpha field and only available when the CSIStorageCapacity feature is enabled. The default is false.",
          "type": "boolean"
        },
        "volumeLifecycleModes": {
          "description": "VolumeLifecycleModes defines what kind of volumes this CSI volume driver supports. The default if the list is empty is \"Persistent\", which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism. The other mode is \"Ephemeral\". In this mode, volumes are defined inline inside the pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle of that pod. A driver has to be aware of this because it is only going to get a NodePublishVolume call for such a volume. For more information about implementing this mode, see https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can support one or more of these modes and more modes may be added in the future.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "io.k8s.api.storage.v1beta1.CSINode": {
      "description": "DEPRECATED - This group version of CSINode is deprecated by storage/v1/CSINode. See the release notes for more information. CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the Kubelet version is low enough that it doesn't create this object. CSINode has an OwnerReference that points to the corresponding node object.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "storage.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "CSINode"
          ]
        },
        "metadata": {
          "description": "metadata.name must be the Kubernetes node name.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is the specification of CSINode",
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINodeSpec"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "CSINode",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.storage.v1beta1.CSINodeDriver": {
      "description": "CSINodeDriver holds information about the specification of one CSI driver installed on a node",
      "type": "object",
      "required": [
        "name",
        "nodeID"
      ],
      "properties": {
        "allocatable": {
          "description": "allocatable represents the volume resources of a node that are available for scheduling.",
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeNodeResources"
        },
        "name": {
          "description": "This is the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver.",
          "type": "string"
        },
        "nodeID": {
          "description": "nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as \"node1\", but the storage system may refer to the same node as \"nodeA\". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. \"nodeA\" instead of \"node1\". This field is required.",
          "type": "string"
        },
        "topologyKeys": {
          "description": "topologyKeys is the list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. \"company.com/zone\", \"company.com/region\"). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver. It is possible for different nodes to use different topology keys. This can be empty if driver does not support topology.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "io.k8s.api.storage.v1beta1.CSINodeList": {
      "description": "CSINodeList is a collection of CSINode objects.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "storage.k8s.io/v1beta1"
          ]
        },
        "items": {
          "description": "items is the list of CSINode",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINode"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "CSINodeList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "CSINodeList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.storage.v1beta1.CSINodeSpec": {
      "description": "CSINodeSpec holds information about the specification of all CSI drivers installed on a node",
      "type": "object",
      "required": [
        "drivers"
      ],
      "properties": {
        "drivers": {
          "description": "drivers is a list of information of all CSI Drivers existing on a node. If all drivers in the list are uninstalled, this can become empty.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINodeDriver"
          },
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      }
    },
    "io.k8s.api.storage.v1beta1.StorageClass": {
      "description": "StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.\n\nStorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.",
      "type": "object",
      "required": [
        "provisioner"
      ],
      "properties": {
        "allowVolumeExpansion": {
          "description": "AllowVolumeExpansion shows whether the storage class allow volume expand",
          "type": "boolean"
        },
        "allowedTopologies": {
          "description": "Restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySelectorTerm"
          }
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "storage.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "StorageClass"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "mountOptions": {
          "description": "Dynamically provisioned PersistentVolumes of this storage class are created with these mountOptions, e.g. [\"ro\", \"soft\"]. Not validated - mount of the PVs will simply fail if one is invalid.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "parameters": {
          "description": "Parameters holds the parameters for the provisioner that should create volumes of this storage class.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "provisioner": {
          "description": "Provisioner indicates the type of the provisioner.",
          "type": "string"
        },
        "reclaimPolicy": {
          "description": "Dynamically provisioned PersistentVolumes of this storage class are created with this reclaimPolicy. Defaults to Delete.",
          "type": "string"
        },
        "volumeBindingMode": {
          "description": "VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "StorageClass",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.storage.v1beta1.StorageClassList": {
      "description": "StorageClassList is a collection of storage classes.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "storage.k8s.io/v1beta1"
          ]
        },
        "items": {
          "description": "Items is the list of StorageClasses",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1beta1.StorageClass"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "StorageClassList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "StorageClassList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.storage.v1beta1.VolumeAttachment": {
      "description": "VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.\n\nVolumeAttachment objects are non-namespaced.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "storage.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "VolumeAttachment"
          ]
        },
        "metadata": {
          "description": "Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.",
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachmentSpec"
        },
        "status": {
          "description": "Status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.",
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachmentStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.storage.v1beta1.VolumeAttachmentList": {
      "description": "VolumeAttachmentList is a collection of VolumeAttachment objects.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "storage.k8s.io/v1beta1"
          ]
        },
        "items": {
          "description": "Items is the list of VolumeAttachments",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachment"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "VolumeAttachmentList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachmentList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.storage.v1beta1.VolumeAttachmentSource": {
      "description": "VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.",
      "type": "object",
      "properties": {
        "inlineVolumeSpec": {
          "description": "inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is alpha-level and is only honored by servers that enabled the CSIMigration feature.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeSpec"
        },
        "persistentVolumeName": {
          "description": "Name of the persistent volume to attach.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.storage.v1beta1.VolumeAttachmentSpec": {
      "description": "VolumeAttachmentSpec is the specification of a VolumeAttachment request.",
      "type": "object",
      "required": [
        "attacher",
        "source",
        "nodeName"
      ],
      "properties": {
        "attacher": {
          "description": "Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().",
          "type": "string"
        },
        "nodeName": {
          "description": "The node that the volume should be attached to.",
          "type": "string"
        },
        "source": {
          "description": "Source represents the volume that should be attached.",
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachmentSource"
        }
      }
    },
    "io.k8s.api.storage.v1beta1.VolumeAttachmentStatus": {
      "description": "VolumeAttachmentStatus is the status of a VolumeAttachment request.",
      "type": "object",
      "required": [
        "attached"
      ],
      "properties": {
        "attachError": {
          "description": "The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.",
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeError"
        },
        "attached": {
          "description": "Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.",
          "type": "boolean"
        },
        "attachmentMetadata": {
          "description": "Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "detachError": {
          "description": "The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.",
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeError"
        }
      }
    },
    "io.k8s.api.storage.v1beta1.VolumeError": {
      "description": "VolumeError captures an error encountered during a volume operation.",
      "type": "object",
      "properties": {
        "message": {
          "description": "String detailing the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information.",
          "type": "string"
        },
        "time": {
          "description": "Time the error was encountered.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      }
    },
    "io.k8s.api.storage.v1beta1.VolumeNodeResources": {
      "description": "VolumeNodeResources is a set of resource limits for scheduling of volumes.",
      "type": "object",
      "properties": {
        "count": {
          "description": "Maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume that is both attached and mounted on a node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple pods on the same node. If this field is nil, then the supported number of volumes on this node is unbounded.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceColumnDefinition": {
      "description": "CustomResourceColumnDefinition specifies a column for server side printing.",
      "type": "object",
      "required": [
        "name",
        "type",
        "jsonPath"
      ],
      "properties": {
        "description": {
          "description": "description is a human readable description of this column.",
          "type": "string"
        },
        "format": {
          "description": "format is an optional OpenAPI type definition for this column. The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.",
          "type": "string"
        },
        "jsonPath": {
          "description": "jsonPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column.",
          "type": "string"
        },
        "name": {
          "description": "name is a human readable name for the column.",
          "type": "string"
        },
        "priority": {
          "description": "priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.",
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "description": "type is an OpenAPI type definition for this column. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.",
          "type": "string"
        }
      }
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceConversion": {
      "description": "CustomResourceConversion describes how to convert different versions of a CR.",
      "type": "object",
      "required": [
        "strategy"
      ],
      "properties": {
        "strategy": {
          "description": "strategy specifies how custom resources are converted between versions. Allowed values are: - `None`: The converter only change the apiVersion and would not touch any other field in the custom resource. - `Webhook`: API Server will call to an external webhook to do the conversion. Additional information\n  is needed for this option. This requires spec.preserveUnknownFields to be false, and spec.conversion.webhook to be set.",
          "type": "string"
        },
        "webhook": {
          "description": "webhook describes how to call the conversion webhook. Required when `strategy` is set to `Webhook`.",
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookConversion"
        }
      }
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition": {
      "description": "CustomResourceDefinition represents a resource that should be exposed on the API server.  Its name MUST be in the format <.spec.name>.<.spec.group>.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apiextensions.k8s.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "CustomResourceDefinition"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec describes how the user wants the resources to appear",
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionSpec"
        },
        "status": {
          "description": "status indicates the actual state of the CustomResourceDefinition",
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionCondition": {
      "description": "CustomResourceDefinitionCondition contains details for the current condition of this pod.",
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "lastTransitionTime last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "message is a human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "reason is a unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "status is the status of the condition. Can be True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "type is the type of the condition. Types include Established, NamesAccepted and Terminating.",
          "type": "string"
        }
      }
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionList": {
      "description": "CustomResourceDefinitionList is a list of CustomResourceDefinition objects.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apiextensions.k8s.io/v1"
          ]
        },
        "items": {
          "description": "items list individual CustomResourceDefinition objects",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "CustomResourceDefinitionList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinitionList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionNames": {
      "description": "CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition",
      "type": "object",
      "required": [
        "plural",
        "kind"
      ],
      "properties": {
        "categories": {
          "description": "categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "kind": {
          "description": "kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls.",
          "type": "string"
        },
        "listKind": {
          "description": "listKind is the serialized kind of the list for this resource. Defaults to \"`kind`List\".",
          "type": "string"
        },
        "plural": {
          "description": "plural is the plural name of the resource to serve. The custom resources are served under `/apis/<group>/<version>/.../<plural>`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`). Must be all lowercase.",
          "type": "string"
        },
        "shortNames": {
          "description": "shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`. It must be all lowercase.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "singular": {
          "description": "singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.",
          "type": "string"
        }
      }
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionSpec": {
      "description": "CustomResourceDefinitionSpec describes how a user wants their resource to appear",
      "type": "object",
      "required": [
        "group",
        "names",
        "scope",
        "versions"
      ],
      "properties": {
        "conversion": {
          "description": "conversion defines conversion settings for the CRD.",
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceConversion"
        },
        "group": {
          "description": "group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).",
          "type": "string"
        },
        "names": {
          "description": "names specify the resource and kind names for the custom resource.",
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionNames"
        },
        "preserveUnknownFields": {
          "description": "preserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. apiVersion, kind, metadata and known fields inside metadata are always preserved. This field is deprecated in favor of setting `x-preserve-unknown-fields` to true in `spec.versions[*].schema.openAPIV3Schema`. See https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#pruning-versus-preserving-unknown-fields for details.",
          "type": "boolean"
        },
        "scope": {
          "description": "scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are `Cluster` and `Namespaced`.",
          "type": "string"
        },
        "versions": {
          "description": "versions is the list of all API versions of the defined custom resource. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is \"kube-like\", it will sort above non \"kube-like\" version strings, which are ordered lexicographically. \"Kube-like\" versions start with a \"v\", then are followed by a number (the major version), then optionally the string \"alpha\" or \"beta\" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionVersion"
          }
        }
      }
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionStatus": {
      "description": "CustomResourceDefinitionStatus indicates the state of the CustomResourceDefinition",
      "type": "object",
      "properties": {
        "acceptedNames": {
          "description": "acceptedNames are the names that are actually being used to serve discovery. They may be different than the names in spec.",
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionNames"
        },
        "conditions": {
          "description": "conditions indicate state for particular aspects of a CustomResourceDefinition",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionCondition"
          }
        },
        "storedVersions": {
          "description": "storedVersions lists all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in storage), and then remove the rest of the versions from this list. Versions may not be removed from `spec.versions` while they exist in this list.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionVersion": {
      "description": "CustomResourceDefinitionVersion describes a version for CRD.",
      "type": "object",
      "required": [
        "name",
        "served",
        "storage"
      ],
      "properties": {
        "additionalPrinterColumns": {
          "description": "additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. If no columns are specified, a single column displaying the age of the custom resource is used.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceColumnDefinition"
          }
        },
        "deprecated": {
          "description": "deprecated indicates this version of the custom resource API is deprecated. When set to true, API requests to this version receive a warning header in the server response. Defaults to false.",
          "type": "boolean"
        },
        "deprecationWarning": {
          "description": "deprecationWarning overrides the default warning returned to API clients. May only be set when `deprecated` is true. The default warning indicates this version is deprecated and recommends use of the newest served version of equal or greater stability, if one exists.",
          "type": "string"
        },
        "name": {
          "description": "name is the version name, e.g. \u201cv1\u201d, \u201cv2beta1\u201d, etc. The custom resources are served under this version at `/apis/<group>/<version>/...` if `served` is true.",
          "type": "string"
        },
        "schema": {
          "description": "schema describes the schema used for validation, pruning, and defaulting of this version of the custom resource.",
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceValidation"
        },
        "served": {
          "description": "served is a flag enabling/disabling this version from being served via REST APIs",
          "type": "boolean"
        },
        "storage": {
          "description": "storage indicates this version should be used when persisting custom resources to storage. There must be exactly one version with storage=true.",
          "type": "boolean"
        },
        "subresources": {
          "description": "subresources specify what subresources this version of the defined custom resource have.",
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresources"
        }
      }
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceScale": {
      "description": "CustomResourceSubresourceScale defines how to serve the scale subresource for CustomResources.",
      "type": "object",
      "required": [
        "specReplicasPath",
        "statusReplicasPath"
      ],
      "properties": {
        "labelSelectorPath": {
          "description": "labelSelectorPath defines the JSON path inside of a custom resource that corresponds to Scale `status.selector`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status` or `.spec`. Must be set to work with HorizontalPodAutoscaler. The field pointed by this JSON path must be a string field (not a complex selector struct) which contains a serialized label selector in string form. More info: https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions#scale-subresource If there is no value under the given path in the custom resource, the `status.selector` value in the `/scale` subresource will default to the empty string.",
          "type": "string"
        },
        "specReplicasPath": {
          "description": "specReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `spec.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.spec`. If there is no value under the given path in the custom resource, the `/scale` subresource will return an error on GET.",
          "type": "string"
        },
        "statusReplicasPath": {
          "description": "statusReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `status.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status`. If there is no value under the given path in the custom resource, the `status.replicas` value in the `/scale` subresource will default to 0.",
          "type": "string"
        }
      }
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceStatus": {
      "description": "CustomResourceSubresourceStatus defines how to serve the status subresource for CustomResources. Status is represented by the `.status` JSON path inside of a CustomResource. When set, * exposes a /status subresource for the custom resource * PUT requests to the /status subresource take a custom resource object, and ignore changes to anything except the status stanza * PUT/POST/PATCH requests to the custom resource ignore changes to the status stanza",
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresources": {
      "description": "CustomResourceSubresources defines the status and scale subresources for CustomResources.",
      "type": "object",
      "properties": {
        "scale": {
          "description": "scale indicates the custom resource should serve a `/scale` subresource that returns an `autoscaling/v1` Scale object.",
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceScale"
        },
        "status": {
          "description": "status indicates the custom resource should serve a `/status` subresource. When enabled: 1. requests to the custom resource primary endpoint ignore changes to the `status` stanza of the object. 2. requests to the custom resource `/status` subresource ignore changes to anything other than the `status` stanza of the object.",
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceStatus"
        }
      }
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceValidation": {
      "description": "CustomResourceValidation is a list of validation methods for CustomResources.",
      "type": "object",
      "properties": {
        "openAPIV3Schema": {
          "description": "openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.",
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
        }
      }
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ExternalDocumentation": {
      "description": "ExternalDocumentation allows referencing an external resource for extended documentation.",
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON": {
      "description": "JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil."
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps": {
      "description": "JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/).",
      "type": "object",
      "properties": {
        "$ref": {
          "type": "string"
        },
        "$schema": {
          "type": "string"
        },
        "additionalItems": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrBool"
        },
        "additionalProperties": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrBool"
        },
        "allOf": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          }
        },
        "anyOf": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          }
        },
        "default": {
          "description": "default is a default value for undefined object fields. Defaulting is a beta feature under the CustomResourceDefaulting feature gate. Defaulting requires spec.preserveUnknownFields to be false.",
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON"
        },
        "definitions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          }
        },
        "dependencies": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrStringArray"
          }
        },
        "description": {
          "type": "string"
        },
        "enum": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON"
          }
        },
        "example": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON"
        },
        "exclusiveMaximum": {
          "type": "boolean"
        },
        "exclusiveMinimum": {
          "type": "boolean"
        },
        "externalDocs": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ExternalDocumentation"
        },
        "format": {
          "description": "format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats are validated:\n\n- bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed by Golang net/mail.ParseAddress - hostname: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034]. - ipv4: an IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid3: an UUID3 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid4: an UUID4 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - uuid5: an UUID5 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - isbn: an ISBN10 or ISBN13 number string like \"0321751043\" or \"978-0321751041\" - isbn10: an ISBN10 number string like \"0321751043\" - isbn13: an ISBN13 number string like \"978-0321751041\" - creditcard: a credit card number defined by the regex ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$ with any non digit characters mixed in - ssn: a U.S. social security number following the regex ^\\d{3}[- ]?\\d{2}[- ]?\\d{4}$ - hexcolor: an hexadecimal color code like \"#FFFFFF: following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$ - rgbcolor: an RGB color code like rgb like \"rgb(255,255,2559\" - byte: base64 encoded binary data - password: any kind of string - date: a date string like \"2006-01-02\" as defined by full-date in RFC3339 - duration: a duration string like \"22 ns\" as parsed by Golang time.ParseDuration or compatible with Scala duration format - datetime: a date time string like \"2014-12-15T19:30:20.000Z\" as defined by date-time in RFC3339.",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "items": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrArray"
        },
        "maxItems": {
          "type": "integer",
          "format": "int64"
        },
        "maxLength": {
          "type": "integer",
          "format": "int64"
        },
        "maxProperties": {
          "type": "integer",
          "format": "int64"
        },
        "maximum": {
          "type": "number",
          "format": "double"
        },
        "minItems": {
          "type": "integer",
          "format": "int64"
        },
        "minLength": {
          "type": "integer",
          "format": "int64"
        },
        "minProperties": {
          "type": "integer",
          "format": "int64"
        },
        "minimum": {
          "type": "number",
          "format": "double"
        },
        "multipleOf": {
          "type": "number",
          "format": "double"
        },
        "not": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
        },
        "nullable": {
          "type": "boolean"
        },
        "oneOf": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          }
        },
        "pattern": {
          "type": "string"
        },
        "patternProperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          }
        },
        "required": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "uniqueItems": {
          "type": "boolean"
        },
        "x-kubernetes-embedded-resource": {
          "description": "x-kubernetes-embedded-resource defines that the value is an embedded Kubernetes runtime.Object, with TypeMeta and ObjectMeta. The type must be object. It is allowed to further restrict the embedded object. kind, apiVersion and metadata are validated automatically. x-kubernetes-preserve-unknown-fields is allowed to be true, but does not have to be if the object is fully specified (up to kind, apiVersion, metadata).",
          "type": "boolean"
        },
        "x-kubernetes-int-or-string": {
          "description": "x-kubernetes-int-or-string specifies that this value is either an integer or a string. If this is true, an empty type is allowed and type as child of anyOf is permitted if following one of the following patterns:\n\n1) anyOf:\n   - type: integer\n   - type: string\n2) allOf:\n   - anyOf:\n     - type: integer\n     - type: string\n   - ... zero or more",
          "type": "boolean"
        },
        "x-kubernetes-list-map-keys": {
          "description": "x-kubernetes-list-map-keys annotates an array with the x-kubernetes-list-type `map` by specifying the keys used as the index of the map.\n\nThis tag MUST only be used on lists that have the \"x-kubernetes-list-type\" extension set to \"map\". Also, the values specified for this attribute must be a scalar typed field of the child structure (no nesting is supported).\n\nThe properties specified must either be required or have a default value, to ensure those properties are present for all list items.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "x-kubernetes-list-type": {
          "description": "x-kubernetes-list-type annotates an array to further describe its topology. This extension must only be used on lists and may have 3 possible values:\n\n1) `atomic`: the list is treated as a single entity, like a scalar.\n     Atomic lists will be entirely replaced when updated. This extension\n     may be used on any type of list (struct, scalar, ...).\n2) `set`:\n     Sets are lists that must not have multiple items with the same value. Each\n     value must be a scalar, an object with x-kubernetes-map-type `atomic` or an\n     array with x-kubernetes-list-type `atomic`.\n3) `map`:\n     These lists are like maps in that their elements have a non-index key\n     used to identify them. Order is preserved upon merge. The map tag\n     must only be used on a list with elements of type object.\nDefaults to atomic for arrays.",
          "type": "string"
        },
        "x-kubernetes-map-type": {
          "description": "x-kubernetes-map-type annotates an object to further describe its topology. This extension must only be used when type is object and may have 2 possible values:\n\n1) `granular`:\n     These maps are actual maps (key-value pairs) and each fields are independent\n     from each other (they can each be manipulated by separate actors). This is\n     the default behaviour for all maps.\n2) `atomic`: the list is treated as a single entity, like a scalar.\n     Atomic maps will be entirely replaced when updated.",
          "type": "string"
        },
        "x-kubernetes-preserve-unknown-fields": {
          "description": "x-kubernetes-preserve-unknown-fields stops the API server decoding step from pruning fields which are not specified in the validation schema. This affects fields recursively, but switches back to normal pruning behaviour if nested properties or additionalProperties are specified in the schema. This can either be true or undefined. False is forbidden.",
          "type": "boolean"
        }
      }
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrArray": {
      "description": "JSONSchemaPropsOrArray represents a value that can either be a JSONSchemaProps or an array of JSONSchemaProps. Mainly here for serialization purposes."
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrBool": {
      "description": "JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to true for the boolean property."
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrStringArray": {
      "description": "JSONSchemaPropsOrStringArray represents a JSONSchemaProps or a string array."
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ServiceReference": {
      "description": "ServiceReference holds a reference to Service.legacy.k8s.io",
      "type": "object",
      "required": [
        "namespace",
        "name"
      ],
      "properties": {
        "name": {
          "description": "name is the name of the service. Required",
          "type": "string"
        },
        "namespace": {
          "description": "namespace is the namespace of the service. Required",
          "type": "string"
        },
        "path": {
          "description": "path is an optional URL path at which the webhook will be contacted.",
          "type": "string"
        },
        "port": {
          "description": "port is an optional service port at which the webhook will be contacted. `port` should be a valid port number (1-65535, inclusive). Defaults to 443 for backward compatibility.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookClientConfig": {
      "description": "WebhookClientConfig contains the information to make a TLS connection with the webhook.",
      "type": "object",
      "properties": {
        "caBundle": {
          "description": "caBundle is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.",
          "type": "string",
          "format": "byte"
        },
        "service": {
          "description": "service is a reference to the service for this webhook. Either service or url must be specified.\n\nIf the webhook is running within the cluster, then you should use `service`.",
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ServiceReference"
        },
        "url": {
          "description": "url gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.\n\nThe `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.\n\nPlease note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.\n\nThe scheme must be \"https\"; the URL must begin with \"https://\".\n\nA path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.\n\nAttempting to use a user or basic auth e.g. \"user:password@\" is not allowed. Fragments (\"#...\") and query parameters (\"?...\") are not allowed, either.",
          "type": "string"
        }
      }
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookConversion": {
      "description": "WebhookConversion describes how to call a conversion webhook",
      "type": "object",
      "required": [
        "conversionReviewVersions"
      ],
      "properties": {
        "clientConfig": {
          "description": "clientConfig is the instructions for how to call the webhook if strategy is `Webhook`.",
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookClientConfig"
        },
        "conversionReviewVersions": {
          "description": "conversionReviewVersions is an ordered list of preferred `ConversionReview` versions the Webhook expects. The API server will use the first version in the list which it supports. If none of the versions specified in this list are supported by API server, conversion will fail for the custom resource. If a persisted Webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceColumnDefinition": {
      "description": "CustomResourceColumnDefinition specifies a column for server side printing.",
      "type": "object",
      "required": [
        "name",
        "type",
        "JSONPath"
      ],
      "properties": {
        "JSONPath": {
          "description": "JSONPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column.",
          "type": "string"
        },
        "description": {
          "description": "description is a human readable description of this column.",
          "type": "string"
        },
        "format": {
          "description": "format is an optional OpenAPI type definition for this column. The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.",
          "type": "string"
        },
        "name": {
          "description": "name is a human readable name for the column.",
          "type": "string"
        },
        "priority": {
          "description": "priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.",
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "description": "type is an OpenAPI type definition for this column. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.",
          "type": "string"
        }
      }
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceConversion": {
      "description": "CustomResourceConversion describes how to convert different versions of a CR.",
      "type": "object",
      "required": [
        "strategy"
      ],
      "properties": {
        "conversionReviewVersions": {
          "description": "conversionReviewVersions is an ordered list of preferred `ConversionReview` versions the Webhook expects. The API server will use the first version in the list which it supports. If none of the versions specified in this list are supported by API server, conversion will fail for the custom resource. If a persisted Webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail. Defaults to `[\"v1beta1\"]`.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "strategy": {
          "description": "strategy specifies how custom resources are converted between versions. Allowed values are: - `None`: The converter only change the apiVersion and would not touch any other field in the custom resource. - `Webhook`: API Server will call to an external webhook to do the conversion. Additional information\n  is needed for this option. This requires spec.preserveUnknownFields to be false, and spec.conversion.webhookClientConfig to be set.",
          "type": "string"
        },
        "webhookClientConfig": {
          "description": "webhookClientConfig is the instructions for how to call the webhook if strategy is `Webhook`. Required when `strategy` is set to `Webhook`.",
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.WebhookClientConfig"
        }
      }
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition": {
      "description": "CustomResourceDefinition represents a resource that should be exposed on the API server.  Its name MUST be in the format <.spec.name>.<.spec.group>. Deprecated in v1.16, planned for removal in v1.22. Use apiextensions.k8s.io/v1 CustomResourceDefinition instead.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apiextensions.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "CustomResourceDefinition"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec describes how the user wants the resources to appear",
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionSpec"
        },
        "status": {
          "description": "status indicates the actual state of the CustomResourceDefinition",
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionCondition": {
      "description": "CustomResourceDefinitionCondition contains details for the current condition of this pod.",
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "lastTransitionTime last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "message is a human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "reason is a unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "status is the status of the condition. Can be True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "type is the type of the condition. Types include Established, NamesAccepted and Terminating.",
          "type": "string"
        }
      }
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionList": {
      "description": "CustomResourceDefinitionList is a list of CustomResourceDefinition objects.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apiextensions.k8s.io/v1beta1"
          ]
        },
        "items": {
          "description": "items list individual CustomResourceDefinition objects",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "CustomResourceDefinitionList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinitionList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionNames": {
      "description": "CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition",
      "type": "object",
      "required": [
        "plural",
        "kind"
      ],
      "properties": {
        "categories": {
          "description": "categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "kind": {
          "description": "kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls.",
          "type": "string"
        },
        "listKind": {
          "description": "listKind is the serialized kind of the list for this resource. Defaults to \"`kind`List\".",
          "type": "string"
        },
        "plural": {
          "description": "plural is the plural name of the resource to serve. The custom resources are served under `/apis/<group>/<version>/.../<plural>`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`). Must be all lowercase.",
          "type": "string"
        },
        "shortNames": {
          "description": "shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`. It must be all lowercase.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "singular": {
          "description": "singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.",
          "type": "string"
        }
      }
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionSpec": {
      "description": "CustomResourceDefinitionSpec describes how a user wants their resource to appear",
      "type": "object",
      "required": [
        "group",
        "names",
        "scope"
      ],
      "properties": {
        "additionalPrinterColumns": {
          "description": "additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. If present, this field configures columns for all versions. Top-level and per-version columns are mutually exclusive. If no top-level or per-version columns are specified, a single column displaying the age of the custom resource is used.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceColumnDefinition"
          }
        },
        "conversion": {
          "description": "conversion defines conversion settings for the CRD.",
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceConversion"
        },
        "group": {
          "description": "group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).",
          "type": "string"
        },
        "names": {
          "description": "names specify the resource and kind names for the custom resource.",
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionNames"
        },
        "preserveUnknownFields": {
          "description": "preserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. apiVersion, kind, metadata and known fields inside metadata are always preserved. If false, schemas must be defined for all versions. Defaults to true in v1beta for backwards compatibility. Deprecated: will be required to be false in v1. Preservation of unknown fields can be specified in the validation schema using the `x-kubernetes-preserve-unknown-fields: true` extension. See https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#pruning-versus-preserving-unknown-fields for details.",
          "type": "boolean"
        },
        "scope": {
          "description": "scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are `Cluster` and `Namespaced`. Default is `Namespaced`.",
          "type": "string"
        },
        "subresources": {
          "description": "subresources specify what subresources the defined custom resource has. If present, this field configures subresources for all versions. Top-level and per-version subresources are mutually exclusive.",
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresources"
        },
        "validation": {
          "description": "validation describes the schema used for validation and pruning of the custom resource. If present, this validation schema is used to validate all versions. Top-level and per-version schemas are mutually exclusive.",
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceValidation"
        },
        "version": {
          "description": "version is the API version of the defined custom resource. The custom resources are served under `/apis/<group>/<version>/...`. Must match the name of the first item in the `versions` list if `version` and `versions` are both specified. Optional if `versions` is specified. Deprecated: use `versions` instead.",
          "type": "string"
        },
        "versions": {
          "description": "versions is the list of all API versions of the defined custom resource. Optional if `version` is specified. The name of the first item in the `versions` list must match the `version` field if `version` and `versions` are both specified. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is \"kube-like\", it will sort above non \"kube-like\" version strings, which are ordered lexicographically. \"Kube-like\" versions start with a \"v\", then are followed by a number (the major version), then optionally the string \"alpha\" or \"beta\" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionVersion"
          }
        }
      }
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionStatus": {
      "description": "CustomResourceDefinitionStatus indicates the state of the CustomResourceDefinition",
      "type": "object",
      "properties": {
        "acceptedNames": {
          "description": "acceptedNames are the names that are actually being used to serve discovery. They may be different than the names in spec.",
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionNames"
        },
        "conditions": {
          "description": "conditions indicate state for particular aspects of a CustomResourceDefinition",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionCondition"
          }
        },
        "storedVersions": {
          "description": "storedVersions lists all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in storage), and then remove the rest of the versions from this list. Versions may not be removed from `spec.versions` while they exist in this list.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionVersion": {
      "description": "CustomResourceDefinitionVersion describes a version for CRD.",
      "type": "object",
      "required": [
        "name",
        "served",
        "storage"
      ],
      "properties": {
        "additionalPrinterColumns": {
          "description": "additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. Top-level and per-version columns are mutually exclusive. Per-version columns must not all be set to identical values (top-level columns should be used instead). If no top-level or per-version columns are specified, a single column displaying the age of the custom resource is used.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceColumnDefinition"
          }
        },
        "deprecated": {
          "description": "deprecated indicates this version of the custom resource API is deprecated. When set to true, API requests to this version receive a warning header in the server response. Defaults to false.",
          "type": "boolean"
        },
        "deprecationWarning": {
          "description": "deprecationWarning overrides the default warning returned to API clients. May only be set when `deprecated` is true. The default warning indicates this version is deprecated and recommends use of the newest served version of equal or greater stability, if one exists.",
          "type": "string"
        },
        "name": {
          "description": "name is the version name, e.g. \u201cv1\u201d, \u201cv2beta1\u201d, etc. The custom resources are served under this version at `/apis/<group>/<version>/...` if `served` is true.",
          "type": "string"
        },
        "schema": {
          "description": "schema describes the schema used for validation and pruning of this version of the custom resource. Top-level and per-version schemas are mutually exclusive. Per-version schemas must not all be set to identical values (top-level validation schema should be used instead).",
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceValidation"
        },
        "served": {
          "description": "served is a flag enabling/disabling this version from being served via REST APIs",
          "type": "boolean"
        },
        "storage": {
          "description": "storage indicates this version should be used when persisting custom resources to storage. There must be exactly one version with storage=true.",
          "type": "boolean"
        },
        "subresources": {
          "description": "subresources specify what subresources this version of the defined custom resource have. Top-level and per-version subresources are mutually exclusive. Per-version subresources must not all be set to identical values (top-level subresources should be used instead).",
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresources"
        }
      }
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresourceScale": {
      "description": "CustomResourceSubresourceScale defines how to serve the scale subresource for CustomResources.",
      "type": "object",
      "required": [
        "specReplicasPath",
        "statusReplicasPath"
      ],
      "properties": {
        "labelSelectorPath": {
          "description": "labelSelectorPath defines the JSON path inside of a custom resource that corresponds to Scale `status.selector`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status` or `.spec`. Must be set to work with HorizontalPodAutoscaler. The field pointed by this JSON path must be a string field (not a complex selector struct) which contains a serialized label selector in string form. More info: https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions#scale-subresource If there is no value under the given path in the custom resource, the `status.selector` value in the `/scale` subresource will default to the empty string.",
          "type": "string"
        },
        "specReplicasPath": {
          "description": "specReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `spec.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.spec`. If there is no value under the given path in the custom resource, the `/scale` subresource will return an error on GET.",
          "type": "string"
        },
        "statusReplicasPath": {
          "description": "statusReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `status.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status`. If there is no value under the given path in the custom resource, the `status.replicas` value in the `/scale` subresource will default to 0.",
          "type": "string"
        }
      }
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresourceStatus": {
      "description": "CustomResourceSubresourceStatus defines how to serve the status subresource for CustomResources. Status is represented by the `.status` JSON path inside of a CustomResource. When set, * exposes a /status subresource for the custom resource * PUT requests to the /status subresource take a custom resource object, and ignore changes to anything except the status stanza * PUT/POST/PATCH requests to the custom resource ignore changes to the status stanza",
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresources": {
      "description": "CustomResourceSubresources defines the status and scale subresources for CustomResources.",
      "type": "object",
      "properties": {
        "scale": {
          "description": "scale indicates the custom resource should serve a `/scale` subresource that returns an `autoscaling/v1` Scale object.",
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresourceScale"
        },
        "status": {
          "description": "status indicates the custom resource should serve a `/status` subresource. When enabled: 1. requests to the custom resource primary endpoint ignore changes to the `status` stanza of the object. 2. requests to the custom resource `/status` subresource ignore changes to anything other than the `status` stanza of the object.",
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresourceStatus"
        }
      }
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceValidation": {
      "description": "CustomResourceValidation is a list of validation methods for CustomResources.",
      "type": "object",
      "properties": {
        "openAPIV3Schema": {
          "description": "openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.",
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps"
        }
      }
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.ExternalDocumentation": {
      "description": "ExternalDocumentation allows referencing an external resource for extended documentation.",
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSON": {
      "description": "JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil."
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps": {
      "description": "JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/).",
      "type": "object",
      "properties": {
        "$ref": {
          "type": "string"
        },
        "$schema": {
          "type": "string"
        },
        "additionalItems": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaPropsOrBool"
        },
        "additionalProperties": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaPropsOrBool"
        },
        "allOf": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps"
          }
        },
        "anyOf": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps"
          }
        },
        "default": {
          "description": "default is a default value for undefined object fields. Defaulting is a beta feature under the CustomResourceDefaulting feature gate. CustomResourceDefinitions with defaults must be created using the v1 (or newer) CustomResourceDefinition API.",
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSON"
        },
        "definitions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps"
          }
        },
        "dependencies": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaPropsOrStringArray"
          }
        },
        "description": {
          "type": "string"
        },
        "enum": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSON"
          }
        },
        "example": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSON"
        },
        "exclusiveMaximum": {
          "type": "boolean"
        },
        "exclusiveMinimum": {
          "type": "boolean"
        },
        "externalDocs": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.ExternalDocumentation"
        },
        "format": {
          "description": "format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats are validated:\n\n- bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed by Golang net/mail.ParseAddress - hostname: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034]. - ipv4: an IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid3: an UUID3 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid4: an UUID4 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - uuid5: an UUID5 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - isbn: an ISBN10 or ISBN13 number string like \"0321751043\" or \"978-0321751041\" - isbn10: an ISBN10 number string like \"0321751043\" - isbn13: an ISBN13 number string like \"978-0321751041\" - creditcard: a credit card number defined by the regex ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$ with any non digit characters mixed in - ssn: a U.S. social security number following the regex ^\\d{3}[- ]?\\d{2}[- ]?\\d{4}$ - hexcolor: an hexadecimal color code like \"#FFFFFF: following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$ - rgbcolor: an RGB color code like rgb like \"rgb(255,255,2559\" - byte: base64 encoded binary data - password: any kind of string - date: a date string like \"2006-01-02\" as defined by full-date in RFC3339 - duration: a duration string like \"22 ns\" as parsed by Golang time.ParseDuration or compatible with Scala duration format - datetime: a date time string like \"2014-12-15T19:30:20.000Z\" as defined by date-time in RFC3339.",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "items": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaPropsOrArray"
        },
        "maxItems": {
          "type": "integer",
          "format": "int64"
        },
        "maxLength": {
          "type": "integer",
          "format": "int64"
        },
        "maxProperties": {
          "type": "integer",
          "format": "int64"
        },
        "maximum": {
          "type": "number",
          "format": "double"
        },
        "minItems": {
          "type": "integer",
          "format": "int64"
        },
        "minLength": {
          "type": "integer",
          "format": "int64"
        },
        "minProperties": {
          "type": "integer",
          "format": "int64"
        },
        "minimum": {
          "type": "number",
          "format": "double"
        },
        "multipleOf": {
          "type": "number",
          "format": "double"
        },
        "not": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps"
        },
        "nullable": {
          "type": "boolean"
        },
        "oneOf": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps"
          }
        },
        "pattern": {
          "type": "string"
        },
        "patternProperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps"
          }
        },
        "required": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "uniqueItems": {
          "type": "boolean"
        },
        "x-kubernetes-embedded-resource": {
          "description": "x-kubernetes-embedded-resource defines that the value is an embedded Kubernetes runtime.Object, with TypeMeta and ObjectMeta. The type must be object. It is allowed to further restrict the embedded object. kind, apiVersion and metadata are validated automatically. x-kubernetes-preserve-unknown-fields is allowed to be true, but does not have to be if the object is fully specified (up to kind, apiVersion, metadata).",
          "type": "boolean"
        },
        "x-kubernetes-int-or-string": {
          "description": "x-kubernetes-int-or-string specifies that this value is either an integer or a string. If this is true, an empty type is allowed and type as child of anyOf is permitted if following one of the following patterns:\n\n1) anyOf:\n   - type: integer\n   - type: string\n2) allOf:\n   - anyOf:\n     - type: integer\n     - type: string\n   - ... zero or more",
          "type": "boolean"
        },
        "x-kubernetes-list-map-keys": {
          "description": "x-kubernetes-list-map-keys annotates an array with the x-kubernetes-list-type `map` by specifying the keys used as the index of the map.\n\nThis tag MUST only be used on lists that have the \"x-kubernetes-list-type\" extension set to \"map\". Also, the values specified for this attribute must be a scalar typed field of the child structure (no nesting is supported).\n\nThe properties specified must either be required or have a default value, to ensure those properties are present for all list items.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "x-kubernetes-list-type": {
          "description": "x-kubernetes-list-type annotates an array to further describe its topology. This extension must only be used on lists and may have 3 possible values:\n\n1) `atomic`: the list is treated as a single entity, like a scalar.\n     Atomic lists will be entirely replaced when updated. This extension\n     may be used on any type of list (struct, scalar, ...).\n2) `set`:\n     Sets are lists that must not have multiple items with the same value. Each\n     value must be a scalar, an object with x-kubernetes-map-type `atomic` or an\n     array with x-kubernetes-list-type `atomic`.\n3) `map`:\n     These lists are like maps in that their elements have a non-index key\n     used to identify them. Order is preserved upon merge. The map tag\n     must only be used on a list with elements of type object.\nDefaults to atomic for arrays.",
          "type": "string"
        },
        "x-kubernetes-map-type": {
          "description": "x-kubernetes-map-type annotates an object to further describe its topology. This extension must only be used when type is object and may have 2 possible values:\n\n1) `granular`:\n     These maps are actual maps (key-value pairs) and each fields are independent\n     from each other (they can each be manipulated by separate actors). This is\n     the default behaviour for all maps.\n2) `atomic`: the list is treated as a single entity, like a scalar.\n     Atomic maps will be entirely replaced when updated.",
          "type": "string"
        },
        "x-kubernetes-preserve-unknown-fields": {
          "description": "x-kubernetes-preserve-unknown-fields stops the API server decoding step from pruning fields which are not specified in the validation schema. This affects fields recursively, but switches back to normal pruning behaviour if nested properties or additionalProperties are specified in the schema. This can either be true or undefined. False is forbidden.",
          "type": "boolean"
        }
      }
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaPropsOrArray": {
      "description": "JSONSchemaPropsOrArray represents a value that can either be a JSONSchemaProps or an array of JSONSchemaProps. Mainly here for serialization purposes."
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaPropsOrBool": {
      "description": "JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to true for the boolean property."
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaPropsOrStringArray": {
      "description": "JSONSchemaPropsOrStringArray represents a JSONSchemaProps or a string array."
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.ServiceReference": {
      "description": "ServiceReference holds a reference to Service.legacy.k8s.io",
      "type": "object",
      "required": [
        "namespace",
        "name"
      ],
      "properties": {
        "name": {
          "description": "name is the name of the service. Required",
          "type": "string"
        },
        "namespace": {
          "description": "namespace is the namespace of the service. Required",
          "type": "string"
        },
        "path": {
          "description": "path is an optional URL path at which the webhook will be contacted.",
          "type": "string"
        },
        "port": {
          "description": "port is an optional service port at which the webhook will be contacted. `port` should be a valid port number (1-65535, inclusive). Defaults to 443 for backward compatibility.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.WebhookClientConfig": {
      "description": "WebhookClientConfig contains the information to make a TLS connection with the webhook.",
      "type": "object",
      "properties": {
        "caBundle": {
          "description": "caBundle is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.",
          "type": "string",
          "format": "byte"
        },
        "service": {
          "description": "service is a reference to the service for this webhook. Either service or url must be specified.\n\nIf the webhook is running within the cluster, then you should use `service`.",
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.ServiceReference"
        },
        "url": {
          "description": "url gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.\n\nThe `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.\n\nPlease note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.\n\nThe scheme must be \"https\"; the URL must begin with \"https://\".\n\nA path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.\n\nAttempting to use a user or basic auth e.g. \"user:password@\" is not allowed. Fragments (\"#...\") and query parameters (\"?...\") are not allowed, either.",
          "type": "string"
        }
      }
    },
    "io.k8s.apimachinery.pkg.api.resource.Quantity": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "number"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup": {
      "description": "APIGroup contains the name, the supported versions, and the preferred version of a group.",
      "type": "object",
      "required": [
        "name",
        "versions"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "APIGroup"
          ]
        },
        "name": {
          "description": "name is the name of the group.",
          "type": "string"
        },
        "preferredVersion": {
          "description": "preferredVersion is the version preferred by the API server, which probably is the storage version.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery"
        },
        "serverAddressByClientCIDRs": {
          "description": "a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR"
          }
        },
        "versions": {
          "description": "versions are the versions supported in this group.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "APIGroup",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIGroupList": {
      "description": "APIGroupList is a list of APIGroup, to allow clients to discover the API at /apis.",
      "type": "object",
      "required": [
        "groups"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "groups": {
          "description": "groups is a list of APIGroup.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "APIGroupList"
          ]
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "APIGroupList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIResource": {
      "description": "APIResource specifies the name of a resource and whether it is namespaced.",
      "type": "object",
      "required": [
        "name",
        "singularName",
        "namespaced",
        "kind",
        "verbs"
      ],
      "properties": {
        "categories": {
          "description": "categories is a list of the grouped resources this resource belongs to (e.g. 'all')",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "group": {
          "description": "group is the preferred group of the resource.  Empty implies the group of the containing resource list. For subresources, this may have a different value, for example: Scale\".",
          "type": "string"
        },
        "kind": {
          "description": "kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')",
          "type": "string"
        },
        "name": {
          "description": "name is the plural name of the resource.",
          "type": "string"
        },
        "namespaced": {
          "description": "namespaced indicates if a resource is namespaced or not.",
          "type": "boolean"
        },
        "shortNames": {
          "description": "shortNames is a list of suggested short names of the resource.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "singularName": {
          "description": "singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface.",
          "type": "string"
        },
        "storageVersionHash": {
          "description": "The hash value of the storage version, the version this resource is converted to when written to the data store. Value must be treated as opaque by clients. Only equality comparison on the value is valid. This is an alpha feature and may change or be removed in the future. The field is populated by the apiserver only if the StorageVersionHash feature gate is enabled. This field will remain optional even if it graduates.",
          "type": "string"
        },
        "verbs": {
          "description": "verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "version": {
          "description": "version is the preferred version of the resource.  Empty implies the version of the containing resource list For subresources, this may have a different value, for example: v1 (while inside a v1beta1 version of the core resource's group)\".",
          "type": "string"
        }
      }
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList": {
      "description": "APIResourceList is a list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced.",
      "type": "object",
      "required": [
        "groupVersion",
        "resources"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "groupVersion": {
          "description": "groupVersion is the group and version this APIResourceList is for.",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "APIResourceList"
          ]
        },
        "resources": {
          "description": "resources contains the name of the resources and if they are namespaced.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResource"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "APIResourceList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIVersions": {
      "description": "APIVersions lists the versions that are available, to allow clients to discover the API at /api, which is the root path of the legacy v1 API.",
      "type": "object",
      "required": [
        "versions",
        "serverAddressByClientCIDRs"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "APIVersions"
          ]
        },
        "serverAddressByClientCIDRs": {
          "description": "a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR"
          }
        },
        "versions": {
          "description": "versions are the api versions that are available.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "APIVersions",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions": {
      "description": "DeleteOptions may be provided when deleting an API object.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "admission.k8s.io/v1",
            "admission.k8s.io/v1beta1",
            "admissionregistration.k8s.io/v1",
            "admissionregistration.k8s.io/v1beta1",
            "apiextensions.k8s.io/v1",
            "apiextensions.k8s.io/v1beta1",
            "apiregistration.k8s.io/v1",
            "apiregistration.k8s.io/v1beta1",
            "apps.openshift.io/v1",
            "apps/v1",
            "apps/v1beta1",
            "apps/v1beta2",
            "authentication.k8s.io/v1",
            "authentication.k8s.io/v1beta1",
            "authorization.k8s.io/v1",
            "authorization.k8s.io/v1beta1",
            "authorization.openshift.io/v1",
            "autoscaling/v1",
            "autoscaling/v2beta1",
            "autoscaling/v2beta2",
            "batch/v1",
            "batch/v1beta1",
            "batch/v2alpha1",
            "build.openshift.io/v1",
            "certificates.k8s.io/v1",
            "certificates.k8s.io/v1beta1",
            "coordination.k8s.io/v1",
            "coordination.k8s.io/v1beta1",
            "discovery.k8s.io/v1alpha1",
            "discovery.k8s.io/v1beta1",
            "events.k8s.io/v1",
            "events.k8s.io/v1beta1",
            "extensions/v1beta1",
            "flowcontrol.apiserver.k8s.io/v1alpha1",
            "image.openshift.io/v1",
            "imagepolicy.k8s.io/v1alpha1",
            "networking.k8s.io/v1",
            "networking.k8s.io/v1beta1",
            "node.k8s.io/v1alpha1",
            "node.k8s.io/v1beta1",
            "oauth.openshift.io/v1",
            "policy/v1beta1",
            "project.openshift.io/v1",
            "quota.openshift.io/v1",
            "rbac.authorization.k8s.io/v1",
            "rbac.authorization.k8s.io/v1alpha1",
            "rbac.authorization.k8s.io/v1beta1",
            "route.openshift.io/v1",
            "scheduling.k8s.io/v1",
            "scheduling.k8s.io/v1alpha1",
            "scheduling.k8s.io/v1beta1",
            "security.openshift.io/v1",
            "settings.k8s.io/v1alpha1",
            "storage.k8s.io/v1",
            "storage.k8s.io/v1alpha1",
            "storage.k8s.io/v1beta1",
            "template.openshift.io/v1",
            "user.openshift.io/v1"
          ]
        },
        "dryRun": {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "gracePeriodSeconds": {
          "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
          "type": "integer",
          "format": "int64"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "DeleteOptions"
          ]
        },
        "orphanDependents": {
          "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
          "type": "boolean"
        },
        "preconditions": {
          "description": "Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions"
        },
        "propagationPolicy": {
          "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "admission.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "admission.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "admissionregistration.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "admissionregistration.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "apiextensions.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "apiextensions.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "apiregistration.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "apiregistration.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "apps.openshift.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "apps",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "apps",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "apps",
          "kind": "DeleteOptions",
          "version": "v1beta2"
        },
        {
          "group": "authentication.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "authentication.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "authorization.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "authorization.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "authorization.openshift.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "autoscaling",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "autoscaling",
          "kind": "DeleteOptions",
          "version": "v2beta1"
        },
        {
          "group": "autoscaling",
          "kind": "DeleteOptions",
          "version": "v2beta2"
        },
        {
          "group": "batch",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "batch",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "batch",
          "kind": "DeleteOptions",
          "version": "v2alpha1"
        },
        {
          "group": "build.openshift.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "certificates.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "certificates.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "coordination.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "coordination.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "discovery.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "discovery.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "events.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "events.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "extensions",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "image.openshift.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "imagepolicy.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "networking.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "networking.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "node.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "node.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "oauth.openshift.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "policy",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "project.openshift.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "quota.openshift.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "route.openshift.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "scheduling.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "scheduling.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "scheduling.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "security.openshift.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "settings.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "storage.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "storage.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "storage.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "template.openshift.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "user.openshift.io",
          "kind": "DeleteOptions",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1": {
      "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery": {
      "description": "GroupVersion contains the \"group/version\" and \"version\" string of a version. It is made a struct to keep extensibility.",
      "type": "object",
      "required": [
        "groupVersion",
        "version"
      ],
      "properties": {
        "groupVersion": {
          "description": "groupVersion specifies the API group and version in the form \"group/version\"",
          "type": "string"
        },
        "version": {
          "description": "version specifies the version in the form of \"version\". This is to save the clients the trouble of splitting the GroupVersion.",
          "type": "string"
        }
      }
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionKind": {
      "description": "GroupVersionKind unambiguously identifies a kind.  It doesn't anonymously include GroupVersion to avoid automatic coersion.  It doesn't use a GroupVersion to avoid custom marshalling",
      "type": "object",
      "required": [
        "group",
        "version",
        "kind"
      ],
      "properties": {
        "group": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector": {
      "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
      "type": "object",
      "properties": {
        "matchExpressions": {
          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement"
          }
        },
        "matchLabels": {
          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement": {
      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
      "type": "object",
      "required": [
        "key",
        "operator"
      ],
      "properties": {
        "key": {
          "description": "key is the label key that the selector applies to.",
          "type": "string",
          "x-kubernetes-patch-merge-key": "key",
          "x-kubernetes-patch-strategy": "merge"
        },
        "operator": {
          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
          "type": "string"
        },
        "values": {
          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta": {
      "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
      "type": "object",
      "properties": {
        "continue": {
          "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
          "type": "string"
        },
        "remainingItemCount": {
          "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.",
          "type": "integer",
          "format": "int64"
        },
        "resourceVersion": {
          "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "selfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
          "type": "string"
        }
      }
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry": {
      "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
          "type": "string"
        },
        "fieldsType": {
          "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
          "type": "string"
        },
        "fieldsV1": {
          "description": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1"
        },
        "manager": {
          "description": "Manager is an identifier of the workflow managing these fields.",
          "type": "string"
        },
        "operation": {
          "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
          "type": "string"
        },
        "time": {
          "description": "Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      }
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime": {
      "description": "MicroTime is version of Time with microsecond level precision.",
      "type": "string",
      "format": "date-time"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "clusterName": {
          "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.",
          "type": "string"
        },
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
          "type": "integer",
          "format": "int64"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-patch-strategy": "merge"
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
          "type": "string"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
          "type": "integer",
          "format": "int64"
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": "string"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference"
          },
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
          "type": "string"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      }
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta_v2": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "clusterName": {
          "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.",
          "type": "string"
        },
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
          "type": "integer",
          "format": "int64"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-patch-strategy": "merge"
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
          "type": "string"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
          "type": "integer",
          "format": "int64"
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": "string"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference"
          },
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
          "type": "string"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      }
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference": {
      "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
      "type": "object",
      "required": [
        "apiVersion",
        "kind",
        "name",
        "uid"
      ],
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string"
        },
        "blockOwnerDeletion": {
          "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
          "type": "boolean"
        },
        "controller": {
          "description": "If true, this reference points to the managing controller.",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      }
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Patch": {
      "description": "Patch is provided to give a concrete name and type to the Kubernetes PATCH request body.",
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions": {
      "description": "Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.",
      "type": "object",
      "properties": {
        "resourceVersion": {
          "description": "Specifies the target ResourceVersion",
          "type": "string"
        },
        "uid": {
          "description": "Specifies the target UID.",
          "type": "string"
        }
      }
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR": {
      "description": "ServerAddressByClientCIDR helps the client to determine the server address that they should use, depending on the clientCIDR that they match.",
      "type": "object",
      "required": [
        "clientCIDR",
        "serverAddress"
      ],
      "properties": {
        "clientCIDR": {
          "description": "The CIDR with which clients can match their IP to figure out the server address that they should use.",
          "type": "string"
        },
        "serverAddress": {
          "description": "Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port.",
          "type": "string"
        }
      }
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Status": {
      "description": "Status is a return value for calls that don't return other objects.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "code": {
          "description": "Suggested HTTP return code for this status, 0 if not set.",
          "type": "integer",
          "format": "int32"
        },
        "details": {
          "description": "Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Status"
          ]
        },
        "message": {
          "description": "A human-readable description of the status of this operation.",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        },
        "reason": {
          "description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.",
          "type": "string"
        },
        "status": {
          "description": "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Status",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause": {
      "description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
      "type": "object",
      "properties": {
        "field": {
          "description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\"",
          "type": "string"
        },
        "message": {
          "description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader.",
          "type": "string"
        },
        "reason": {
          "description": "A machine-readable description of the cause of the error. If this value is empty there is no information available.",
          "type": "string"
        }
      }
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails": {
      "description": "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
      "type": "object",
      "properties": {
        "causes": {
          "description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause"
          }
        },
        "group": {
          "description": "The group attribute of the resource associated with the status StatusReason.",
          "type": "string"
        },
        "kind": {
          "description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).",
          "type": "string"
        },
        "retryAfterSeconds": {
          "description": "If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.",
          "type": "integer",
          "format": "int32"
        },
        "uid": {
          "description": "UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      }
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Time": {
      "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
      "type": "string",
      "format": "date-time"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent": {
      "description": "Event represents a single event to a watched resource.",
      "type": "object",
      "required": [
        "type",
        "object"
      ],
      "properties": {
        "object": {
          "description": "Object is:\n * If Type is Added or Modified: the new state of the object.\n * If Type is Deleted: the state of the object immediately before deletion.\n * If Type is Error: *Status is recommended; other types may make sense\n   depending on context.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        },
        "type": {
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "admission.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "admission.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "admissionregistration.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "admissionregistration.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "apiextensions.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "apiextensions.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "apiregistration.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "apiregistration.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "apps.openshift.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "apps",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "apps",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "apps",
          "kind": "WatchEvent",
          "version": "v1beta2"
        },
        {
          "group": "authentication.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "authentication.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "authorization.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "authorization.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "authorization.openshift.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "autoscaling",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "autoscaling",
          "kind": "WatchEvent",
          "version": "v2beta1"
        },
        {
          "group": "autoscaling",
          "kind": "WatchEvent",
          "version": "v2beta2"
        },
        {
          "group": "batch",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "batch",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "batch",
          "kind": "WatchEvent",
          "version": "v2alpha1"
        },
        {
          "group": "build.openshift.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "certificates.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "certificates.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "coordination.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "coordination.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "discovery.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "discovery.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "events.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "events.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "extensions",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "image.openshift.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "imagepolicy.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "networking.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "networking.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "node.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "node.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "oauth.openshift.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "policy",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "project.openshift.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "quota.openshift.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "route.openshift.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "scheduling.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "scheduling.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "scheduling.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "security.openshift.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "settings.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "storage.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "storage.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "storage.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "template.openshift.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "user.openshift.io",
          "kind": "WatchEvent",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.runtime.RawExtension": {
      "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)",
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.util.intstr.IntOrString": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "integer"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.version.Info": {
      "description": "Info contains versioning information. how we'll want to distribute that information.",
      "type": "object",
      "required": [
        "major",
        "minor",
        "gitVersion",
        "gitCommit",
        "gitTreeState",
        "buildDate",
        "goVersion",
        "compiler",
        "platform"
      ],
      "properties": {
        "buildDate": {
          "type": "string"
        },
        "compiler": {
          "type": "string"
        },
        "gitCommit": {
          "type": "string"
        },
        "gitTreeState": {
          "type": "string"
        },
        "gitVersion": {
          "type": "string"
        },
        "goVersion": {
          "type": "string"
        },
        "major": {
          "type": "string"
        },
        "minor": {
          "type": "string"
        },
        "platform": {
          "type": "string"
        }
      }
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService": {
      "description": "APIService represents a server for a particular GroupVersion. Name must be \"version.group\".",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apiregistration.k8s.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "APIService"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec contains information for locating and communicating with a server",
          "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceSpec"
        },
        "status": {
          "description": "Status contains derived information about an API server",
          "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1"
        }
      ]
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceCondition": {
      "description": "APIServiceCondition describes the state of an APIService at a particular point",
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status is the status of the condition. Can be True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type is the type of the condition.",
          "type": "string"
        }
      }
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceList": {
      "description": "APIServiceList is a list of APIService objects.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apiregistration.k8s.io/v1"
          ]
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "APIServiceList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiregistration.k8s.io",
          "kind": "APIServiceList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceSpec": {
      "description": "APIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification.",
      "type": "object",
      "required": [
        "groupPriorityMinimum",
        "versionPriority"
      ],
      "properties": {
        "caBundle": {
          "description": "CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate. If unspecified, system trust roots on the apiserver are used.",
          "type": "string",
          "format": "byte",
          "x-kubernetes-list-type": "atomic"
        },
        "group": {
          "description": "Group is the API group name this server hosts",
          "type": "string"
        },
        "groupPriorityMinimum": {
          "description": "GroupPriorityMininum is the priority this group should have at least. Higher priority means that the group is preferred by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMininum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) We'd recommend something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s",
          "type": "integer",
          "format": "int32"
        },
        "insecureSkipTLSVerify": {
          "description": "InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged.  You should use the CABundle instead.",
          "type": "boolean"
        },
        "service": {
          "description": "Service is a reference to the service for this API server.  It must communicate on port 443. If the Service is nil, that means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled.",
          "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.ServiceReference"
        },
        "version": {
          "description": "Version is the API version this server hosts.  For example, \"v1\"",
          "type": "string"
        },
        "versionPriority": {
          "description": "VersionPriority controls the ordering of this API version inside of its group.  Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). Since it's inside of a group, the number can be small, probably in the 10s. In case of equal version priorities, the version string will be used to compute the order inside a group. If the version string is \"kube-like\", it will sort above non \"kube-like\" version strings, which are ordered lexicographically. \"Kube-like\" versions start with a \"v\", then are followed by a number (the major version), then optionally the string \"alpha\" or \"beta\" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceStatus": {
      "description": "APIServiceStatus contains derived information about an API server",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Current service state of apiService.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceCondition"
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        }
      }
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.ServiceReference": {
      "description": "ServiceReference holds a reference to Service.legacy.k8s.io",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name is the name of the service",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the namespace of the service",
          "type": "string"
        },
        "port": {
          "description": "If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService": {
      "description": "APIService represents a server for a particular GroupVersion. Name must be \"version.group\".",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apiregistration.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "APIService"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec contains information for locating and communicating with a server",
          "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceSpec"
        },
        "status": {
          "description": "Status contains derived information about an API server",
          "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceCondition": {
      "description": "APIServiceCondition describes the state of an APIService at a particular point",
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status is the status of the condition. Can be True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type is the type of the condition.",
          "type": "string"
        }
      }
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceList": {
      "description": "APIServiceList is a list of APIService objects.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apiregistration.k8s.io/v1beta1"
          ]
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "APIServiceList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiregistration.k8s.io",
          "kind": "APIServiceList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceSpec": {
      "description": "APIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification.",
      "type": "object",
      "required": [
        "groupPriorityMinimum",
        "versionPriority"
      ],
      "properties": {
        "caBundle": {
          "description": "CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate. If unspecified, system trust roots on the apiserver are used.",
          "type": "string",
          "format": "byte",
          "x-kubernetes-list-type": "atomic"
        },
        "group": {
          "description": "Group is the API group name this server hosts",
          "type": "string"
        },
        "groupPriorityMinimum": {
          "description": "GroupPriorityMininum is the priority this group should have at least. Higher priority means that the group is preferred by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMininum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) We'd recommend something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s",
          "type": "integer",
          "format": "int32"
        },
        "insecureSkipTLSVerify": {
          "description": "InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged.  You should use the CABundle instead.",
          "type": "boolean"
        },
        "service": {
          "description": "Service is a reference to the service for this API server.  It must communicate on port 443. If the Service is nil, that means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled.",
          "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.ServiceReference"
        },
        "version": {
          "description": "Version is the API version this server hosts.  For example, \"v1\"",
          "type": "string"
        },
        "versionPriority": {
          "description": "VersionPriority controls the ordering of this API version inside of its group.  Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). Since it's inside of a group, the number can be small, probably in the 10s. In case of equal version priorities, the version string will be used to compute the order inside a group. If the version string is \"kube-like\", it will sort above non \"kube-like\" version strings, which are ordered lexicographically. \"Kube-like\" versions start with a \"v\", then are followed by a number (the major version), then optionally the string \"alpha\" or \"beta\" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceStatus": {
      "description": "APIServiceStatus contains derived information about an API server",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Current service state of apiService.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceCondition"
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        }
      }
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.ServiceReference": {
      "description": "ServiceReference holds a reference to Service.legacy.k8s.io",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name is the name of the service",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the namespace of the service",
          "type": "string"
        },
        "port": {
          "description": "If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.migration.v1alpha1.StorageState": {
      "description": "The state of the storage of a specific resource.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "migration.k8s.io/v1alpha1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "StorageState"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the storage state.",
          "type": "object",
          "properties": {
            "resource": {
              "description": "The resource this storageState is about.",
              "type": "object",
              "properties": {
                "group": {
                  "description": "The name of the group.",
                  "type": "string"
                },
                "resource": {
                  "description": "The name of the resource.",
                  "type": "string"
                }
              }
            }
          }
        },
        "status": {
          "description": "Status of the storage state.",
          "type": "object",
          "properties": {
            "currentStorageVersionHash": {
              "description": "The hash value of the current storage version, as shown in the discovery document served by the API server. Storage Version is the version to which objects are converted to before persisted.",
              "type": "string"
            },
            "lastHeartbeatTime": {
              "description": "LastHeartbeatTime is the last time the storage migration triggering controller checks the storage version hash of this resource in the discovery document and updates this field.",
              "type": "string",
              "format": "date-time"
            },
            "persistedStorageVersionHashes": {
              "description": "The hash values of storage versions that persisted instances of spec.resource might still be encoded in. \"Unknown\" is a valid value in the list, and is the default value. It is not safe to upgrade or downgrade to an apiserver binary that does not support all versions listed in this field, or if \"Unknown\" is listed. Once the storage version migration for this resource has completed, the value of this field is refined to only contain the currentStorageVersionHash. Once the apiserver has changed the storage version, the new storage version is appended to the list.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "migration.k8s.io",
          "kind": "StorageState",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.migration.v1alpha1.StorageStateList": {
      "description": "StorageStateList is a list of StorageState",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "migration.k8s.io/v1alpha1"
          ]
        },
        "items": {
          "description": "List of storagestates. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.migration.v1alpha1.StorageState"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "StorageStateList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "migration.k8s.io",
          "kind": "StorageStateList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.migration.v1alpha1.StorageVersionMigration": {
      "description": "StorageVersionMigration represents a migration of stored data to the latest storage version.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "migration.k8s.io/v1alpha1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "StorageVersionMigration"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the migration.",
          "type": "object",
          "required": [
            "resource"
          ],
          "properties": {
            "continueToken": {
              "description": "The token used in the list options to get the next chunk of objects to migrate. When the .status.conditions indicates the migration is \"Running\", users can use this token to check the progress of the migration.",
              "type": "string"
            },
            "resource": {
              "description": "The resource that is being migrated. The migrator sends requests to the endpoint serving the resource. Immutable.",
              "type": "object",
              "properties": {
                "group": {
                  "description": "The name of the group.",
                  "type": "string"
                },
                "resource": {
                  "description": "The name of the resource.",
                  "type": "string"
                },
                "version": {
                  "description": "The name of the version.",
                  "type": "string"
                }
              }
            }
          }
        },
        "status": {
          "description": "Status of the migration.",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "The latest available observations of the migration's current state.",
              "type": "array",
              "items": {
                "description": "Describes the state of a migration at a certain point.",
                "type": "object",
                "required": [
                  "status",
                  "type"
                ],
                "properties": {
                  "lastUpdateTime": {
                    "description": "The last time this condition was updated.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "A human readable message indicating details about the transition.",
                    "type": "string"
                  },
                  "reason": {
                    "description": "The reason for the condition's last transition.",
                    "type": "string"
                  },
                  "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of the condition.",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "migration.k8s.io",
          "kind": "StorageVersionMigration",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.migration.v1alpha1.StorageVersionMigrationList": {
      "description": "StorageVersionMigrationList is a list of StorageVersionMigration",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "migration.k8s.io/v1alpha1"
          ]
        },
        "items": {
          "description": "List of storageversionmigrations. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.migration.v1alpha1.StorageVersionMigration"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "StorageVersionMigrationList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "migration.k8s.io",
          "kind": "StorageVersionMigrationList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.storage.snapshot.v1beta1.VolumeSnapshot": {
      "description": "VolumeSnapshot is a user's request for either creating a point-in-time snapshot of a persistent volume, or binding to a pre-existing snapshot.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "snapshot.storage.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "VolumeSnapshot"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec defines the desired characteristics of a snapshot requested by a user. More info: https://kubernetes.io/docs/concepts/storage/volume-snapshots#volumesnapshots Required.",
          "type": "object",
          "required": [
            "source"
          ],
          "properties": {
            "source": {
              "description": "source specifies where a snapshot will be created from. This field is immutable after creation. Required.",
              "type": "object",
              "properties": {
                "persistentVolumeClaimName": {
                  "description": "persistentVolumeClaimName specifies the name of the PersistentVolumeClaim object in the same namespace as the VolumeSnapshot object where the snapshot should be dynamically taken from. This field is immutable.",
                  "type": "string"
                },
                "volumeSnapshotContentName": {
                  "description": "volumeSnapshotContentName specifies the name of a pre-existing VolumeSnapshotContent object. This field is immutable.",
                  "type": "string"
                }
              }
            },
            "volumeSnapshotClassName": {
              "description": "volumeSnapshotClassName is the name of the VolumeSnapshotClass requested by the VolumeSnapshot. If not specified, the default snapshot class will be used if one exists. If not specified, and there is no default snapshot class, dynamic snapshot creation will fail. Empty string is not allowed for this field. TODO(xiangqian): a webhook validation on empty string. More info: https://kubernetes.io/docs/concepts/storage/volume-snapshot-classes",
              "type": "string"
            }
          }
        },
        "status": {
          "description": "status represents the current information of a snapshot. NOTE: status can be modified by sources other than system controllers, and must not be depended upon for accuracy. Controllers should only use information from the VolumeSnapshotContent object after verifying that the binding is accurate and complete.",
          "type": "object",
          "properties": {
            "boundVolumeSnapshotContentName": {
              "description": "boundVolumeSnapshotContentName represents the name of the VolumeSnapshotContent object to which the VolumeSnapshot object is bound. If not specified, it indicates that the VolumeSnapshot object has not been successfully bound to a VolumeSnapshotContent object yet. NOTE: Specified boundVolumeSnapshotContentName alone does not mean binding       is valid. Controllers MUST always verify bidirectional binding between       VolumeSnapshot and VolumeSnapshotContent to avoid possible security issues.",
              "type": "string"
            },
            "creationTime": {
              "description": "creationTime is the timestamp when the point-in-time snapshot is taken by the underlying storage system. In dynamic snapshot creation case, this field will be filled in with the \"creation_time\" value returned from CSI \"CreateSnapshotRequest\" gRPC call. For a pre-existing snapshot, this field will be filled with the \"creation_time\" value returned from the CSI \"ListSnapshots\" gRPC call if the driver supports it. If not specified, it indicates that the creation time of the snapshot is unknown.",
              "type": "string",
              "format": "date-time"
            },
            "error": {
              "description": "error is the last observed error during snapshot creation, if any. This field could be helpful to upper level controllers(i.e., application controller) to decide whether they should continue on waiting for the snapshot to be created based on the type of error reported.",
              "type": "object",
              "properties": {
                "message": {
                  "description": "message is a string detailing the encountered error during snapshot creation if specified. NOTE: message may be logged, and it should not contain sensitive information.",
                  "type": "string"
                },
                "time": {
                  "description": "time is the timestamp when the error was encountered.",
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "readyToUse": {
              "description": "readyToUse indicates if a snapshot is ready to be used to restore a volume. In dynamic snapshot creation case, this field will be filled in with the \"ready_to_use\" value returned from CSI \"CreateSnapshotRequest\" gRPC call. For a pre-existing snapshot, this field will be filled with the \"ready_to_use\" value returned from the CSI \"ListSnapshots\" gRPC call if the driver supports it, otherwise, this field will be set to \"True\". If not specified, it means the readiness of a snapshot is unknown.",
              "type": "boolean"
            },
            "restoreSize": {
              "description": "restoreSize represents the complete size of the snapshot in bytes. In dynamic snapshot creation case, this field will be filled in with the \"size_bytes\" value returned from CSI \"CreateSnapshotRequest\" gRPC call. For a pre-existing snapshot, this field will be filled with the \"size_bytes\" value returned from the CSI \"ListSnapshots\" gRPC call if the driver supports it. When restoring a volume from this snapshot, the size of the volume MUST NOT be smaller than the restoreSize if it is specified, otherwise the restoration will fail. If not specified, it indicates that the size is unknown.",
              "type": "string",
              "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
              "x-kubernetes-int-or-string": true
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "snapshot.storage.k8s.io",
          "kind": "VolumeSnapshot",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.storage.snapshot.v1beta1.VolumeSnapshotClass": {
      "description": "VolumeSnapshotClass specifies parameters that a underlying storage system uses when creating a volume snapshot. A specific VolumeSnapshotClass is used by specifying its name in a VolumeSnapshot object. VolumeSnapshotClasses are non-namespaced",
      "type": "object",
      "required": [
        "deletionPolicy",
        "driver"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "snapshot.storage.k8s.io/v1beta1"
          ]
        },
        "deletionPolicy": {
          "description": "deletionPolicy determines whether a VolumeSnapshotContent created through the VolumeSnapshotClass should be deleted when its bound VolumeSnapshot is deleted. Supported values are \"Retain\" and \"Delete\". \"Retain\" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are kept. \"Delete\" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are deleted. Required.",
          "type": "string",
          "enum": [
            "Delete",
            "Retain"
          ]
        },
        "driver": {
          "description": "driver is the name of the storage driver that handles this VolumeSnapshotClass. Required.",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "VolumeSnapshotClass"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "parameters": {
          "description": "parameters is a key-value map with storage driver specific parameters for creating snapshots. These values are opaque to Kubernetes.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "snapshot.storage.k8s.io",
          "kind": "VolumeSnapshotClass",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.storage.snapshot.v1beta1.VolumeSnapshotClassList": {
      "description": "VolumeSnapshotClassList is a list of VolumeSnapshotClass",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "snapshot.storage.k8s.io/v1beta1"
          ]
        },
        "items": {
          "description": "List of volumesnapshotclasses. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.storage.snapshot.v1beta1.VolumeSnapshotClass"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "VolumeSnapshotClassList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "snapshot.storage.k8s.io",
          "kind": "VolumeSnapshotClassList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.storage.snapshot.v1beta1.VolumeSnapshotContent": {
      "description": "VolumeSnapshotContent represents the actual \"on-disk\" snapshot object in the underlying storage system",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "snapshot.storage.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "VolumeSnapshotContent"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec defines properties of a VolumeSnapshotContent created by the underlying storage system. Required.",
          "type": "object",
          "required": [
            "deletionPolicy",
            "driver",
            "source",
            "volumeSnapshotRef"
          ],
          "properties": {
            "deletionPolicy": {
              "description": "deletionPolicy determines whether this VolumeSnapshotContent and its physical snapshot on the underlying storage system should be deleted when its bound VolumeSnapshot is deleted. Supported values are \"Retain\" and \"Delete\". \"Retain\" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are kept. \"Delete\" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are deleted. In dynamic snapshot creation case, this field will be filled in with the \"DeletionPolicy\" field defined in the VolumeSnapshotClass the VolumeSnapshot refers to. For pre-existing snapshots, users MUST specify this field when creating the VolumeSnapshotContent object. Required.",
              "type": "string",
              "enum": [
                "Delete",
                "Retain"
              ]
            },
            "driver": {
              "description": "driver is the name of the CSI driver used to create the physical snapshot on the underlying storage system. This MUST be the same as the name returned by the CSI GetPluginName() call for that driver. Required.",
              "type": "string"
            },
            "source": {
              "description": "source specifies from where a snapshot will be created. This field is immutable after creation. Required.",
              "type": "object",
              "properties": {
                "snapshotHandle": {
                  "description": "snapshotHandle specifies the CSI \"snapshot_id\" of a pre-existing snapshot on the underlying storage system. This field is immutable.",
                  "type": "string"
                },
                "volumeHandle": {
                  "description": "volumeHandle specifies the CSI \"volume_id\" of the volume from which a snapshot should be dynamically taken from. This field is immutable.",
                  "type": "string"
                }
              }
            },
            "volumeSnapshotClassName": {
              "description": "name of the VolumeSnapshotClass to which this snapshot belongs.",
              "type": "string"
            },
            "volumeSnapshotRef": {
              "description": "volumeSnapshotRef specifies the VolumeSnapshot object to which this VolumeSnapshotContent object is bound. VolumeSnapshot.Spec.VolumeSnapshotContentName field must reference to this VolumeSnapshotContent's name for the bidirectional binding to be valid. For a pre-existing VolumeSnapshotContent object, name and namespace of the VolumeSnapshot object MUST be provided for binding to happen. This field is immutable after creation. Required.",
              "type": "object",
              "properties": {
                "apiVersion": {
                  "description": "API version of the referent.",
                  "type": "string"
                },
                "fieldPath": {
                  "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                  "type": "string"
                },
                "resourceVersion": {
                  "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                  "type": "string"
                },
                "uid": {
                  "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                  "type": "string"
                }
              }
            }
          }
        },
        "status": {
          "description": "status represents the current information of a snapshot.",
          "type": "object",
          "properties": {
            "creationTime": {
              "description": "creationTime is the timestamp when the point-in-time snapshot is taken by the underlying storage system. In dynamic snapshot creation case, this field will be filled in with the \"creation_time\" value returned from CSI \"CreateSnapshotRequest\" gRPC call. For a pre-existing snapshot, this field will be filled with the \"creation_time\" value returned from the CSI \"ListSnapshots\" gRPC call if the driver supports it. If not specified, it indicates the creation time is unknown. The format of this field is a Unix nanoseconds time encoded as an int64. On Unix, the command `date +%s%N` returns the current time in nanoseconds since 1970-01-01 00:00:00 UTC.",
              "type": "integer",
              "format": "int64"
            },
            "error": {
              "description": "error is the latest observed error during snapshot creation, if any.",
              "type": "object",
              "properties": {
                "message": {
                  "description": "message is a string detailing the encountered error during snapshot creation if specified. NOTE: message may be logged, and it should not contain sensitive information.",
                  "type": "string"
                },
                "time": {
                  "description": "time is the timestamp when the error was encountered.",
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "readyToUse": {
              "description": "readyToUse indicates if a snapshot is ready to be used to restore a volume. In dynamic snapshot creation case, this field will be filled in with the \"ready_to_use\" value returned from CSI \"CreateSnapshotRequest\" gRPC call. For a pre-existing snapshot, this field will be filled with the \"ready_to_use\" value returned from the CSI \"ListSnapshots\" gRPC call if the driver supports it, otherwise, this field will be set to \"True\". If not specified, it means the readiness of a snapshot is unknown.",
              "type": "boolean"
            },
            "restoreSize": {
              "description": "restoreSize represents the complete size of the snapshot in bytes. In dynamic snapshot creation case, this field will be filled in with the \"size_bytes\" value returned from CSI \"CreateSnapshotRequest\" gRPC call. For a pre-existing snapshot, this field will be filled with the \"size_bytes\" value returned from the CSI \"ListSnapshots\" gRPC call if the driver supports it. When restoring a volume from this snapshot, the size of the volume MUST NOT be smaller than the restoreSize if it is specified, otherwise the restoration will fail. If not specified, it indicates that the size is unknown.",
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "snapshotHandle": {
              "description": "snapshotHandle is the CSI \"snapshot_id\" of a snapshot on the underlying storage system. If not specified, it indicates that dynamic snapshot creation has either failed or it is still in progress.",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "snapshot.storage.k8s.io",
          "kind": "VolumeSnapshotContent",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.storage.snapshot.v1beta1.VolumeSnapshotContentList": {
      "description": "VolumeSnapshotContentList is a list of VolumeSnapshotContent",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "snapshot.storage.k8s.io/v1beta1"
          ]
        },
        "items": {
          "description": "List of volumesnapshotcontents. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.storage.snapshot.v1beta1.VolumeSnapshotContent"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "VolumeSnapshotContentList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "snapshot.storage.k8s.io",
          "kind": "VolumeSnapshotContentList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.storage.snapshot.v1beta1.VolumeSnapshotList": {
      "description": "VolumeSnapshotList is a list of VolumeSnapshot",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "snapshot.storage.k8s.io/v1beta1"
          ]
        },
        "items": {
          "description": "List of volumesnapshots. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.storage.snapshot.v1beta1.VolumeSnapshot"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "VolumeSnapshotList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "snapshot.storage.k8s.io",
          "kind": "VolumeSnapshotList",
          "version": "v1beta1"
        }
      ]
    },
    "io.metal3.v1alpha1.BareMetalHost": {
      "description": "BareMetalHost is the Schema for the baremetalhosts API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "metal3.io/v1alpha1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "BareMetalHost"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "BareMetalHostSpec defines the desired state of BareMetalHost",
          "type": "object",
          "required": [
            "online"
          ],
          "properties": {
            "bmc": {
              "description": "How do we connect to the BMC?",
              "type": "object",
              "required": [
                "address",
                "credentialsName"
              ],
              "properties": {
                "address": {
                  "description": "Address holds the URL for accessing the controller on the network.",
                  "type": "string"
                },
                "credentialsName": {
                  "description": "The name of the secret containing the BMC credentials (requires keys \"username\" and \"password\").",
                  "type": "string"
                },
                "disableCertificateVerification": {
                  "description": "DisableCertificateVerification disables verification of server certificates when using HTTPS to connect to the BMC. This is required when the server certificate is self-signed, but is insecure because it allows a man-in-the-middle to intercept the connection.",
                  "type": "boolean"
                }
              }
            },
            "bootMACAddress": {
              "description": "Which MAC address will PXE boot? This is optional for some types, but required for libvirt VMs driven by vbmc.",
              "type": "string",
              "pattern": "[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}"
            },
            "bootMode": {
              "description": "Select the method of initializing the hardware during boot. Defaults to UEFI.",
              "type": "string",
              "enum": [
                "UEFI",
                "legacy"
              ]
            },
            "consumerRef": {
              "description": "ConsumerRef can be used to store information about something that is using a host. When it is not empty, the host is considered \"in use\".",
              "type": "object",
              "properties": {
                "apiVersion": {
                  "description": "API version of the referent.",
                  "type": "string"
                },
                "fieldPath": {
                  "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                  "type": "string"
                },
                "resourceVersion": {
                  "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                  "type": "string"
                },
                "uid": {
                  "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                  "type": "string"
                }
              }
            },
            "description": {
              "description": "Description is a human-entered text used to help identify the host",
              "type": "string"
            },
            "externallyProvisioned": {
              "description": "ExternallyProvisioned means something else is managing the image running on the host and the operator should only manage the power status and hardware inventory inspection. If the Image field is filled in, this field is ignored.",
              "type": "boolean"
            },
            "hardwareProfile": {
              "description": "What is the name of the hardware profile for this host? It should only be necessary to set this when inspection cannot automatically determine the profile.",
              "type": "string"
            },
            "image": {
              "description": "Image holds the details of the image to be provisioned.",
              "type": "object",
              "required": [
                "checksum",
                "url"
              ],
              "properties": {
                "checksum": {
                  "description": "Checksum is the checksum for the image.",
                  "type": "string"
                },
                "checksumType": {
                  "description": "ChecksumType is the checksum algorithm for the image. e.g md5, sha256, sha512",
                  "type": "string",
                  "enum": [
                    "md5",
                    "sha256",
                    "sha512"
                  ]
                },
                "format": {
                  "description": "DiskFormat contains the format of the image (raw, qcow2, ...) Needs to be set to raw for raw images streaming",
                  "type": "string",
                  "enum": [
                    "raw",
                    "qcow2",
                    "vdi",
                    "vmdk"
                  ]
                },
                "url": {
                  "description": "URL is a location of an image to deploy.",
                  "type": "string"
                }
              }
            },
            "metaData": {
              "description": "MetaData holds the reference to the Secret containing host metadata (e.g. meta_data.json which is passed to Config Drive).",
              "type": "object",
              "properties": {
                "name": {
                  "description": "Name is unique within a namespace to reference a secret resource.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace defines the space within which the secret name must be unique.",
                  "type": "string"
                }
              }
            },
            "networkData": {
              "description": "NetworkData holds the reference to the Secret containing network configuration (e.g content of network_data.json which is passed to Config Drive).",
              "type": "object",
              "properties": {
                "name": {
                  "description": "Name is unique within a namespace to reference a secret resource.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace defines the space within which the secret name must be unique.",
                  "type": "string"
                }
              }
            },
            "online": {
              "description": "Should the server be online?",
              "type": "boolean"
            },
            "rootDeviceHints": {
              "description": "Provide guidance about how to choose the device for the image being provisioned.",
              "type": "object",
              "properties": {
                "deviceName": {
                  "description": "A Linux device name like \"/dev/vda\". The hint must match the actual value exactly.",
                  "type": "string"
                },
                "hctl": {
                  "description": "A SCSI bus address like 0:0:0:0. The hint must match the actual value exactly.",
                  "type": "string"
                },
                "minSizeGigabytes": {
                  "description": "The minimum size of the device in Gigabytes.",
                  "type": "integer",
                  "minimum": 0
                },
                "model": {
                  "description": "A vendor-specific device identifier. The hint can be a substring of the actual value.",
                  "type": "string"
                },
                "rotational": {
                  "description": "True if the device should use spinning media, false otherwise.",
                  "type": "boolean"
                },
                "serialNumber": {
                  "description": "Device serial number. The hint must match the actual value exactly.",
                  "type": "string"
                },
                "vendor": {
                  "description": "The name of the vendor or manufacturer of the device. The hint can be a substring of the actual value.",
                  "type": "string"
                },
                "wwn": {
                  "description": "Unique storage identifier. The hint must match the actual value exactly.",
                  "type": "string"
                },
                "wwnVendorExtension": {
                  "description": "Unique vendor storage identifier. The hint must match the actual value exactly.",
                  "type": "string"
                },
                "wwnWithExtension": {
                  "description": "Unique storage identifier with the vendor extension appended. The hint must match the actual value exactly.",
                  "type": "string"
                }
              }
            },
            "taints": {
              "description": "Taints is the full, authoritative list of taints to apply to the corresponding Machine. This list will overwrite any modifications made to the Machine on an ongoing basis.",
              "type": "array",
              "items": {
                "description": "The node this Taint is attached to has the \"effect\" on any pod that does not tolerate the Taint.",
                "type": "object",
                "required": [
                  "effect",
                  "key"
                ],
                "properties": {
                  "effect": {
                    "description": "Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.",
                    "type": "string"
                  },
                  "key": {
                    "description": "Required. The taint key to be applied to a node.",
                    "type": "string"
                  },
                  "timeAdded": {
                    "description": "TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "value": {
                    "description": "Required. The taint value corresponding to the taint key.",
                    "type": "string"
                  }
                }
              }
            },
            "userData": {
              "description": "UserData holds the reference to the Secret containing the user data to be passed to the host before it boots.",
              "type": "object",
              "properties": {
                "name": {
                  "description": "Name is unique within a namespace to reference a secret resource.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace defines the space within which the secret name must be unique.",
                  "type": "string"
                }
              }
            }
          }
        },
        "status": {
          "description": "BareMetalHostStatus defines the observed state of BareMetalHost",
          "type": "object",
          "required": [
            "errorMessage",
            "hardwareProfile",
            "operationHistory",
            "operationalStatus",
            "poweredOn",
            "provisioning"
          ],
          "properties": {
            "errorMessage": {
              "description": "the last error message reported by the provisioning subsystem",
              "type": "string"
            },
            "errorType": {
              "description": "ErrorType indicates the type of failure encountered when the OperationalStatus is OperationalStatusError",
              "type": "string",
              "enum": [
                "registration error",
                "inspection error",
                "provisioning error",
                "power management error"
              ]
            },
            "goodCredentials": {
              "description": "the last credentials we were able to validate as working",
              "type": "object",
              "properties": {
                "credentials": {
                  "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace",
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "Name is unique within a namespace to reference a secret resource.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace defines the space within which the secret name must be unique.",
                      "type": "string"
                    }
                  }
                },
                "credentialsVersion": {
                  "type": "string"
                }
              }
            },
            "hardware": {
              "description": "The hardware discovered to exist on the host.",
              "type": "object",
              "required": [
                "cpu",
                "firmware",
                "hostname",
                "nics",
                "ramMebibytes",
                "storage",
                "systemVendor"
              ],
              "properties": {
                "cpu": {
                  "description": "CPU describes one processor on the host.",
                  "type": "object",
                  "required": [
                    "arch",
                    "clockMegahertz",
                    "count",
                    "flags",
                    "model"
                  ],
                  "properties": {
                    "arch": {
                      "type": "string"
                    },
                    "clockMegahertz": {
                      "description": "ClockSpeed is a clock speed in MHz",
                      "type": "number"
                    },
                    "count": {
                      "type": "integer"
                    },
                    "flags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "model": {
                      "type": "string"
                    }
                  }
                },
                "firmware": {
                  "description": "Firmware describes the firmware on the host.",
                  "type": "object",
                  "required": [
                    "bios"
                  ],
                  "properties": {
                    "bios": {
                      "description": "The BIOS for this firmware",
                      "type": "object",
                      "required": [
                        "date",
                        "vendor",
                        "version"
                      ],
                      "properties": {
                        "date": {
                          "description": "The release/build date for this BIOS",
                          "type": "string"
                        },
                        "vendor": {
                          "description": "The vendor name for this BIOS",
                          "type": "string"
                        },
                        "version": {
                          "description": "The version of the BIOS",
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "hostname": {
                  "type": "string"
                },
                "nics": {
                  "type": "array",
                  "items": {
                    "description": "NIC describes one network interface on the host.",
                    "type": "object",
                    "required": [
                      "ip",
                      "mac",
                      "model",
                      "name",
                      "pxe",
                      "speedGbps",
                      "vlanId"
                    ],
                    "properties": {
                      "ip": {
                        "description": "The IP address of the device",
                        "type": "string"
                      },
                      "mac": {
                        "description": "The device MAC addr",
                        "type": "string",
                        "pattern": "[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}"
                      },
                      "model": {
                        "description": "The name of the model, e.g. \"virt-io\"",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the NIC, e.g. \"nic-1\"",
                        "type": "string"
                      },
                      "pxe": {
                        "description": "Whether the NIC is PXE Bootable",
                        "type": "boolean"
                      },
                      "speedGbps": {
                        "description": "The speed of the device",
                        "type": "integer"
                      },
                      "vlanId": {
                        "description": "The untagged VLAN ID",
                        "type": "integer",
                        "format": "int32",
                        "maximum": 4094,
                        "minimum": 0
                      },
                      "vlans": {
                        "description": "The VLANs available",
                        "type": "array",
                        "items": {
                          "description": "VLAN represents the name and ID of a VLAN",
                          "type": "object",
                          "required": [
                            "id"
                          ],
                          "properties": {
                            "id": {
                              "description": "VLANID is a 12-bit 802.1Q VLAN identifier",
                              "type": "integer",
                              "format": "int32",
                              "maximum": 4094,
                              "minimum": 0
                            },
                            "name": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "ramMebibytes": {
                  "type": "integer"
                },
                "storage": {
                  "type": "array",
                  "items": {
                    "description": "Storage describes one storage device (disk, SSD, etc.) on the host.",
                    "type": "object",
                    "required": [
                      "name",
                      "rotational",
                      "serialNumber",
                      "sizeBytes"
                    ],
                    "properties": {
                      "hctl": {
                        "description": "The SCSI location of the device",
                        "type": "string"
                      },
                      "model": {
                        "description": "Hardware model",
                        "type": "string"
                      },
                      "name": {
                        "description": "A name for the disk, e.g. \"disk 1 (boot)\"",
                        "type": "string"
                      },
                      "rotational": {
                        "description": "Whether this disk represents rotational storage",
                        "type": "boolean"
                      },
                      "serialNumber": {
                        "description": "The serial number of the device",
                        "type": "string"
                      },
                      "sizeBytes": {
                        "description": "The size of the disk in Bytes",
                        "type": "integer",
                        "format": "int64"
                      },
                      "vendor": {
                        "description": "The name of the vendor of the device",
                        "type": "string"
                      },
                      "wwn": {
                        "description": "The WWN of the device",
                        "type": "string"
                      },
                      "wwnVendorExtension": {
                        "description": "The WWN Vendor extension of the device",
                        "type": "string"
                      },
                      "wwnWithExtension": {
                        "description": "The WWN with the extension",
                        "type": "string"
                      }
                    }
                  }
                },
                "systemVendor": {
                  "description": "HardwareSystemVendor stores details about the whole hardware system.",
                  "type": "object",
                  "required": [
                    "manufacturer",
                    "productName",
                    "serialNumber"
                  ],
                  "properties": {
                    "manufacturer": {
                      "type": "string"
                    },
                    "productName": {
                      "type": "string"
                    },
                    "serialNumber": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "hardwareProfile": {
              "description": "The name of the profile matching the hardware details.",
              "type": "string"
            },
            "lastUpdated": {
              "description": "LastUpdated identifies when this status was last observed.",
              "type": "string",
              "format": "date-time"
            },
            "operationHistory": {
              "description": "OperationHistory holds information about operations performed on this host.",
              "type": "object",
              "properties": {
                "deprovision": {
                  "description": "OperationMetric contains metadata about an operation (inspection, provisioning, etc.) used for tracking metrics.",
                  "type": "object",
                  "properties": {
                    "end": {
                      "format": "date-time"
                    },
                    "start": {
                      "format": "date-time"
                    }
                  }
                },
                "inspect": {
                  "description": "OperationMetric contains metadata about an operation (inspection, provisioning, etc.) used for tracking metrics.",
                  "type": "object",
                  "properties": {
                    "end": {
                      "format": "date-time"
                    },
                    "start": {
                      "format": "date-time"
                    }
                  }
                },
                "provision": {
                  "description": "OperationMetric contains metadata about an operation (inspection, provisioning, etc.) used for tracking metrics.",
                  "type": "object",
                  "properties": {
                    "end": {
                      "format": "date-time"
                    },
                    "start": {
                      "format": "date-time"
                    }
                  }
                },
                "register": {
                  "description": "OperationMetric contains metadata about an operation (inspection, provisioning, etc.) used for tracking metrics.",
                  "type": "object",
                  "properties": {
                    "end": {
                      "format": "date-time"
                    },
                    "start": {
                      "format": "date-time"
                    }
                  }
                }
              }
            },
            "operationalStatus": {
              "description": "OperationalStatus holds the status of the host",
              "type": "string",
              "enum": [
                "",
                "OK",
                "discovered",
                "error"
              ]
            },
            "poweredOn": {
              "description": "indicator for whether or not the host is powered on",
              "type": "boolean"
            },
            "provisioning": {
              "description": "Information tracked by the provisioner.",
              "type": "object",
              "required": [
                "ID",
                "state"
              ],
              "properties": {
                "ID": {
                  "description": "The machine's UUID from the underlying provisioning tool",
                  "type": "string"
                },
                "bootMode": {
                  "description": "BootMode indicates the boot mode used to provision the node",
                  "type": "string",
                  "enum": [
                    "UEFI",
                    "legacy"
                  ]
                },
                "image": {
                  "description": "Image holds the details of the last image successfully provisioned to the host.",
                  "type": "object",
                  "required": [
                    "checksum",
                    "url"
                  ],
                  "properties": {
                    "checksum": {
                      "description": "Checksum is the checksum for the image.",
                      "type": "string"
                    },
                    "checksumType": {
                      "description": "ChecksumType is the checksum algorithm for the image. e.g md5, sha256, sha512",
                      "type": "string",
                      "enum": [
                        "md5",
                        "sha256",
                        "sha512"
                      ]
                    },
                    "format": {
                      "description": "DiskFormat contains the format of the image (raw, qcow2, ...) Needs to be set to raw for raw images streaming",
                      "type": "string",
                      "enum": [
                        "raw",
                        "qcow2",
                        "vdi",
                        "vmdk"
                      ]
                    },
                    "url": {
                      "description": "URL is a location of an image to deploy.",
                      "type": "string"
                    }
                  }
                },
                "rootDeviceHints": {
                  "description": "The RootDevicehints set by the user",
                  "type": "object",
                  "properties": {
                    "deviceName": {
                      "description": "A Linux device name like \"/dev/vda\". The hint must match the actual value exactly.",
                      "type": "string"
                    },
                    "hctl": {
                      "description": "A SCSI bus address like 0:0:0:0. The hint must match the actual value exactly.",
                      "type": "string"
                    },
                    "minSizeGigabytes": {
                      "description": "The minimum size of the device in Gigabytes.",
                      "type": "integer",
                      "minimum": 0
                    },
                    "model": {
                      "description": "A vendor-specific device identifier. The hint can be a substring of the actual value.",
                      "type": "string"
                    },
                    "rotational": {
                      "description": "True if the device should use spinning media, false otherwise.",
                      "type": "boolean"
                    },
                    "serialNumber": {
                      "description": "Device serial number. The hint must match the actual value exactly.",
                      "type": "string"
                    },
                    "vendor": {
                      "description": "The name of the vendor or manufacturer of the device. The hint can be a substring of the actual value.",
                      "type": "string"
                    },
                    "wwn": {
                      "description": "Unique storage identifier. The hint must match the actual value exactly.",
                      "type": "string"
                    },
                    "wwnVendorExtension": {
                      "description": "Unique vendor storage identifier. The hint must match the actual value exactly.",
                      "type": "string"
                    },
                    "wwnWithExtension": {
                      "description": "Unique storage identifier with the vendor extension appended. The hint must match the actual value exactly.",
                      "type": "string"
                    }
                  }
                },
                "state": {
                  "description": "An indiciator for what the provisioner is doing with the host.",
                  "type": "string"
                }
              }
            },
            "triedCredentials": {
              "description": "the last credentials we sent to the provisioning backend",
              "type": "object",
              "properties": {
                "credentials": {
                  "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace",
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "Name is unique within a namespace to reference a secret resource.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace defines the space within which the secret name must be unique.",
                      "type": "string"
                    }
                  }
                },
                "credentialsVersion": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "metal3.io",
          "kind": "BareMetalHost",
          "version": "v1alpha1"
        }
      ]
    },
    "io.metal3.v1alpha1.BareMetalHostList": {
      "description": "BareMetalHostList is a list of BareMetalHost",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "metal3.io/v1alpha1"
          ]
        },
        "items": {
          "description": "List of baremetalhosts. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.metal3.v1alpha1.BareMetalHost"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "BareMetalHostList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "metal3.io",
          "kind": "BareMetalHostList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.metal3.v1alpha1.ProvisioningList": {
      "description": "ProvisioningList is a list of Provisioning",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "metal3.io/v1alpha1"
          ]
        },
        "items": {
          "description": "List of provisionings. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.metal3.v1alpha1.Provisioning"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ProvisioningList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "metal3.io",
          "kind": "ProvisioningList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.openshift.authorization.v1.RoleBindingRestriction": {
      "description": "RoleBindingRestriction is an object that can be matched against a subject (user, group, or service account) to determine whether rolebindings on that subject are allowed in the namespace to which the RoleBindingRestriction belongs.  If any one of those RoleBindingRestriction objects matches a subject, rolebindings on that subject in the namespace are allowed.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "authorization.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "RoleBindingRestriction"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the matcher.",
          "type": "object",
          "properties": {
            "grouprestriction": {
              "description": "GroupRestriction matches against group subjects."
            },
            "serviceaccountrestriction": {
              "description": "ServiceAccountRestriction matches against service-account subjects."
            },
            "userrestriction": {
              "description": "UserRestriction matches against user subjects."
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.openshift.io",
          "kind": "RoleBindingRestriction",
          "version": "v1"
        }
      ]
    },
    "io.openshift.authorization.v1.RoleBindingRestrictionList": {
      "description": "RoleBindingRestrictionList is a list of RoleBindingRestriction",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "authorization.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of rolebindingrestrictions. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.authorization.v1.RoleBindingRestriction"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "RoleBindingRestrictionList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.openshift.io",
          "kind": "RoleBindingRestrictionList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.autoscaling.v1.ClusterAutoscaler": {
      "description": "ClusterAutoscaler is the Schema for the clusterautoscalers API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "autoscaling.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterAutoscaler"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Desired state of ClusterAutoscaler resource",
          "type": "object",
          "properties": {
            "balanceSimilarNodeGroups": {
              "description": "BalanceSimilarNodeGroups enables/disables the `--balance-similar-node-groups` cluster-autocaler feature. This feature will automatically identify node groups with the same instance type and the same set of labels and try to keep the respective sizes of those node groups balanced.",
              "type": "boolean"
            },
            "ignoreDaemonsetsUtilization": {
              "description": "Enables/Disables `--ignore-daemonsets-utilization` CA feature flag. Should CA ignore DaemonSet pods when calculating resource utilization for scaling down. false by default",
              "type": "boolean"
            },
            "maxNodeProvisionTime": {
              "description": "Maximum time CA waits for node to be provisioned. Expects an unsigned duration string of decimal numbers each with optional fraction and a unit suffix, eg \"300ms\", \"1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"\u00b5s\"), \"ms\", \"s\", \"m\", \"h\".",
              "type": "string",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ns|us|\u00b5s|ms|s|m|h))+$"
            },
            "maxPodGracePeriod": {
              "description": "Gives pods graceful termination time before scaling down",
              "type": "integer",
              "format": "int32"
            },
            "podPriorityThreshold": {
              "description": "To allow users to schedule \"best-effort\" pods, which shouldn't trigger Cluster Autoscaler actions, but only run when there are spare resources available, More info: https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#how-does-cluster-autoscaler-work-with-pod-priority-and-preemption",
              "type": "integer",
              "format": "int32"
            },
            "resourceLimits": {
              "description": "Constraints of autoscaling resources",
              "type": "object",
              "properties": {
                "cores": {
                  "description": "Minimum and maximum number of cores in cluster, in the format <min>:<max>. Cluster autoscaler will not scale the cluster beyond these numbers.",
                  "type": "object",
                  "required": [
                    "max",
                    "min"
                  ],
                  "properties": {
                    "max": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "min": {
                      "type": "integer",
                      "format": "int32",
                      "minimum": 0
                    }
                  }
                },
                "gpus": {
                  "description": "Minimum and maximum number of different GPUs in cluster, in the format <gpu_type>:<min>:<max>. Cluster autoscaler will not scale the cluster beyond these numbers. Can be passed multiple times.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "max",
                      "min",
                      "type"
                    ],
                    "properties": {
                      "max": {
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1
                      },
                      "min": {
                        "type": "integer",
                        "format": "int32",
                        "minimum": 0
                      },
                      "type": {
                        "type": "string",
                        "minLength": 1
                      }
                    }
                  }
                },
                "maxNodesTotal": {
                  "description": "Maximum number of nodes in all node groups. Cluster autoscaler will not grow the cluster beyond this number.",
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0
                },
                "memory": {
                  "description": "Minimum and maximum number of gigabytes of memory in cluster, in the format <min>:<max>. Cluster autoscaler will not scale the cluster beyond these numbers.",
                  "type": "object",
                  "required": [
                    "max",
                    "min"
                  ],
                  "properties": {
                    "max": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "min": {
                      "type": "integer",
                      "format": "int32",
                      "minimum": 0
                    }
                  }
                }
              }
            },
            "scaleDown": {
              "description": "Configuration of scale down operation",
              "type": "object",
              "required": [
                "enabled"
              ],
              "properties": {
                "delayAfterAdd": {
                  "description": "How long after scale up that scale down evaluation resumes",
                  "type": "string",
                  "pattern": "([0-9]*(\\.[0-9]*)?[a-z]+)+"
                },
                "delayAfterDelete": {
                  "description": "How long after node deletion that scale down evaluation resumes, defaults to scan-interval",
                  "type": "string",
                  "pattern": "([0-9]*(\\.[0-9]*)?[a-z]+)+"
                },
                "delayAfterFailure": {
                  "description": "How long after scale down failure that scale down evaluation resumes",
                  "type": "string",
                  "pattern": "([0-9]*(\\.[0-9]*)?[a-z]+)+"
                },
                "enabled": {
                  "description": "Should CA scale down the cluster",
                  "type": "boolean"
                },
                "unneededTime": {
                  "description": "How long a node should be unneeded before it is eligible for scale down",
                  "type": "string",
                  "pattern": "([0-9]*(\\.[0-9]*)?[a-z]+)+"
                }
              }
            },
            "skipNodesWithLocalStorage": {
              "description": "Enables/Disables `--skip-nodes-with-local-storage` CA feature flag. If true cluster autoscaler will never delete nodes with pods with local storage, e.g. EmptyDir or HostPath. true by default at autoscaler",
              "type": "boolean"
            }
          }
        },
        "status": {
          "description": "Most recently observed status of ClusterAutoscaler resource",
          "type": "object"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling.openshift.io",
          "kind": "ClusterAutoscaler",
          "version": "v1"
        }
      ]
    },
    "io.openshift.autoscaling.v1.ClusterAutoscalerList": {
      "description": "ClusterAutoscalerList is a list of ClusterAutoscaler",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "autoscaling.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of clusterautoscalers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.autoscaling.v1.ClusterAutoscaler"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterAutoscalerList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling.openshift.io",
          "kind": "ClusterAutoscalerList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.autoscaling.v1beta1.MachineAutoscaler": {
      "description": "MachineAutoscaler is the Schema for the machineautoscalers API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "autoscaling.openshift.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "MachineAutoscaler"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of constraints of a scalable resource",
          "type": "object",
          "required": [
            "maxReplicas",
            "minReplicas",
            "scaleTargetRef"
          ],
          "properties": {
            "maxReplicas": {
              "description": "MaxReplicas constrains the maximal number of replicas of a scalable resource",
              "type": "integer",
              "format": "int32",
              "minimum": 1
            },
            "minReplicas": {
              "description": "MinReplicas constrains the minimal number of replicas of a scalable resource",
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            "scaleTargetRef": {
              "description": "ScaleTargetRef holds reference to a scalable resource",
              "type": "object",
              "required": [
                "kind",
                "name"
              ],
              "properties": {
                "apiVersion": {
                  "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
                  "type": "string",
                  "minLength": 1
                },
                "name": {
                  "description": "Name specifies a name of an object, e.g. worker-us-east-1a. Scalable resources are expected to exist under a single namespace.",
                  "type": "string",
                  "minLength": 1
                }
              }
            }
          }
        },
        "status": {
          "description": "Most recently observed status of a scalable resource",
          "type": "object",
          "properties": {
            "lastTargetRef": {
              "description": "LastTargetRef holds reference to the recently observed scalable resource",
              "type": "object",
              "required": [
                "kind",
                "name"
              ],
              "properties": {
                "apiVersion": {
                  "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
                  "type": "string",
                  "minLength": 1
                },
                "name": {
                  "description": "Name specifies a name of an object, e.g. worker-us-east-1a. Scalable resources are expected to exist under a single namespace.",
                  "type": "string",
                  "minLength": 1
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling.openshift.io",
          "kind": "MachineAutoscaler",
          "version": "v1beta1"
        }
      ]
    },
    "io.openshift.autoscaling.v1beta1.MachineAutoscalerList": {
      "description": "MachineAutoscalerList is a list of MachineAutoscaler",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "autoscaling.openshift.io/v1beta1"
          ]
        },
        "items": {
          "description": "List of machineautoscalers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.autoscaling.v1beta1.MachineAutoscaler"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "MachineAutoscalerList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling.openshift.io",
          "kind": "MachineAutoscalerList",
          "version": "v1beta1"
        }
      ]
    },
    "io.openshift.cloudcredential.v1.CredentialsRequestList": {
      "description": "CredentialsRequestList is a list of CredentialsRequest",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "cloudcredential.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of credentialsrequests. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.cloudcredential.v1.CredentialsRequest"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "CredentialsRequestList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "cloudcredential.openshift.io",
          "kind": "CredentialsRequestList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.config.v1.APIServer": {
      "description": "APIServer holds configuration (like serving certificates, client CA and CORS domains) shared by all API servers in the system, among them especially kube-apiserver and openshift-apiserver. The canonical name of an instance is 'cluster'.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "config.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "APIServer"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec holds user settable values for configuration",
          "type": "object",
          "properties": {
            "additionalCORSAllowedOrigins": {
              "description": "additionalCORSAllowedOrigins lists additional, user-defined regular expressions describing hosts for which the API server allows access using the CORS headers. This may be needed to access the API and the integrated OAuth server from JavaScript applications. The values are regular expressions that correspond to the Golang regular expression language.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "audit": {
              "description": "audit specifies the settings for audit configuration to be applied to all OpenShift-provided API servers in the cluster.",
              "type": "object",
              "properties": {
                "profile": {
                  "description": "profile specifies the name of the desired audit policy configuration to be deployed to all OpenShift-provided API servers in the cluster. \n The following profiles are provided: - Default: the existing default policy. - WriteRequestBodies: like 'Default', but logs request and response HTTP payloads for write requests (create, update, patch). - AllRequestBodies: like 'WriteRequestBodies', but also logs request and response HTTP payloads for read requests (get, list). \n If unset, the 'Default' profile is used as the default.",
                  "type": "string",
                  "enum": [
                    "Default",
                    "WriteRequestBodies",
                    "AllRequestBodies"
                  ]
                }
              }
            },
            "clientCA": {
              "description": "clientCA references a ConfigMap containing a certificate bundle for the signers that will be recognized for incoming client certificates in addition to the operator managed signers. If this is empty, then only operator managed signers are valid. You usually only have to set this if you have your own PKI you wish to honor client certificates from. The ConfigMap must exist in the openshift-config namespace and contain the following required fields: - ConfigMap.Data[\"ca-bundle.crt\"] - CA bundle.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "name is the metadata.name of the referenced config map",
                  "type": "string"
                }
              }
            },
            "encryption": {
              "description": "encryption allows the configuration of encryption of resources at the datastore layer.",
              "type": "object",
              "properties": {
                "type": {
                  "description": "type defines what encryption type should be used to encrypt resources at the datastore layer. When this field is unset (i.e. when it is set to the empty string), identity is implied. The behavior of unset can and will change over time.  Even if encryption is enabled by default, the meaning of unset may change to a different encryption type based on changes in best practices. \n When encryption is enabled, all sensitive resources shipped with the platform are encrypted. This list of sensitive resources can and will change over time.  The current authoritative list is: \n   1. secrets   2. configmaps   3. routes.route.openshift.io   4. oauthaccesstokens.oauth.openshift.io   5. oauthauthorizetokens.oauth.openshift.io",
                  "type": "string",
                  "enum": [
                    "",
                    "identity",
                    "aescbc"
                  ]
                }
              }
            },
            "servingCerts": {
              "description": "servingCert is the TLS cert info for serving secure traffic. If not specified, operator managed certificates will be used for serving secure traffic.",
              "type": "object",
              "properties": {
                "namedCertificates": {
                  "description": "namedCertificates references secrets containing the TLS cert info for serving secure traffic to specific hostnames. If no named certificates are provided, or no named certificates match the server name as understood by a client, the defaultServingCertificate will be used.",
                  "type": "array",
                  "items": {
                    "description": "APIServerNamedServingCert maps a server DNS name, as understood by a client, to a certificate.",
                    "type": "object",
                    "properties": {
                      "names": {
                        "description": "names is a optional list of explicit DNS names (leading wildcards allowed) that should use this certificate to serve secure traffic. If no names are provided, the implicit names will be extracted from the certificates. Exact names trump over wildcard names. Explicit names defined here trump over extracted implicit names.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "servingCertificate": {
                        "description": "servingCertificate references a kubernetes.io/tls type secret containing the TLS cert info for serving secure traffic. The secret must exist in the openshift-config namespace and contain the following required fields: - Secret.Data[\"tls.key\"] - TLS private key. - Secret.Data[\"tls.crt\"] - TLS certificate.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "name is the metadata.name of the referenced secret",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "tlsSecurityProfile": {
              "description": "tlsSecurityProfile specifies settings for TLS connections for externally exposed servers. \n If unset, a default (which may change between releases) is chosen. Note that only Old and Intermediate profiles are currently supported, and the maximum available MinTLSVersions is VersionTLS12.",
              "type": "object",
              "properties": {
                "custom": {
                  "description": "custom is a user-defined TLS security profile. Be extremely careful using a custom profile as invalid configurations can be catastrophic. An example custom profile looks like this: \n   ciphers:     - ECDHE-ECDSA-CHACHA20-POLY1305     - ECDHE-RSA-CHACHA20-POLY1305     - ECDHE-RSA-AES128-GCM-SHA256     - ECDHE-ECDSA-AES128-GCM-SHA256   minTLSVersion: TLSv1.1"
                },
                "intermediate": {
                  "description": "intermediate is a TLS security profile based on: \n https://wiki.mozilla.org/Security/Server_Side_TLS#Intermediate_compatibility_.28recommended.29 \n and looks like this (yaml): \n   ciphers:     - TLS_AES_128_GCM_SHA256     - TLS_AES_256_GCM_SHA384     - TLS_CHACHA20_POLY1305_SHA256     - ECDHE-ECDSA-AES128-GCM-SHA256     - ECDHE-RSA-AES128-GCM-SHA256     - ECDHE-ECDSA-AES256-GCM-SHA384     - ECDHE-RSA-AES256-GCM-SHA384     - ECDHE-ECDSA-CHACHA20-POLY1305     - ECDHE-RSA-CHACHA20-POLY1305     - DHE-RSA-AES128-GCM-SHA256     - DHE-RSA-AES256-GCM-SHA384   minTLSVersion: TLSv1.2"
                },
                "modern": {
                  "description": "modern is a TLS security profile based on: \n https://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility \n and looks like this (yaml): \n   ciphers:     - TLS_AES_128_GCM_SHA256     - TLS_AES_256_GCM_SHA384     - TLS_CHACHA20_POLY1305_SHA256   minTLSVersion: TLSv1.3 \n NOTE: Currently unsupported."
                },
                "old": {
                  "description": "old is a TLS security profile based on: \n https://wiki.mozilla.org/Security/Server_Side_TLS#Old_backward_compatibility \n and looks like this (yaml): \n   ciphers:     - TLS_AES_128_GCM_SHA256     - TLS_AES_256_GCM_SHA384     - TLS_CHACHA20_POLY1305_SHA256     - ECDHE-ECDSA-AES128-GCM-SHA256     - ECDHE-RSA-AES128-GCM-SHA256     - ECDHE-ECDSA-AES256-GCM-SHA384     - ECDHE-RSA-AES256-GCM-SHA384     - ECDHE-ECDSA-CHACHA20-POLY1305     - ECDHE-RSA-CHACHA20-POLY1305     - DHE-RSA-AES128-GCM-SHA256     - DHE-RSA-AES256-GCM-SHA384     - DHE-RSA-CHACHA20-POLY1305     - ECDHE-ECDSA-AES128-SHA256     - ECDHE-RSA-AES128-SHA256     - ECDHE-ECDSA-AES128-SHA     - ECDHE-RSA-AES128-SHA     - ECDHE-ECDSA-AES256-SHA384     - ECDHE-RSA-AES256-SHA384     - ECDHE-ECDSA-AES256-SHA     - ECDHE-RSA-AES256-SHA     - DHE-RSA-AES128-SHA256     - DHE-RSA-AES256-SHA256     - AES128-GCM-SHA256     - AES256-GCM-SHA384     - AES128-SHA256     - AES256-SHA256     - AES128-SHA     - AES256-SHA     - DES-CBC3-SHA   minTLSVersion: TLSv1.0"
                },
                "type": {
                  "description": "type is one of Old, Intermediate, Modern or Custom. Custom provides the ability to specify individual TLS security profile parameters. Old, Intermediate and Modern are TLS security profiles based on: \n https://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_configurations \n The profiles are intent based, so they may change over time as new ciphers are developed and existing ciphers are found to be insecure.  Depending on precisely which ciphers are available to a process, the list may be reduced. \n Note that the Modern profile is currently not supported because it is not yet well adopted by common software libraries.",
                  "type": "string",
                  "enum": [
                    "Old",
                    "Intermediate",
                    "Modern",
                    "Custom"
                  ]
                }
              }
            }
          }
        },
        "status": {
          "description": "status holds observed values from the cluster. They may not be overridden.",
          "type": "object"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.openshift.io",
          "kind": "APIServer",
          "version": "v1"
        }
      ]
    },
    "io.openshift.config.v1.APIServerList": {
      "description": "APIServerList is a list of APIServer",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "config.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of apiservers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.config.v1.APIServer"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "APIServerList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.openshift.io",
          "kind": "APIServerList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.config.v1.Authentication": {
      "description": "Authentication specifies cluster-wide settings for authentication (like OAuth and webhook token authenticators). The canonical name of an instance is `cluster`.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "config.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Authentication"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec holds user settable values for configuration",
          "type": "object",
          "properties": {
            "oauthMetadata": {
              "description": "oauthMetadata contains the discovery endpoint data for OAuth 2.0 Authorization Server Metadata for an external OAuth server. This discovery document can be viewed from its served location: oc get --raw '/.well-known/oauth-authorization-server' For further details, see the IETF Draft: https://tools.ietf.org/html/draft-ietf-oauth-discovery-04#section-2 If oauthMetadata.name is non-empty, this value has precedence over any metadata reference stored in status. The key \"oauthMetadata\" is used to locate the data. If specified and the config map or expected key is not found, no metadata is served. If the specified metadata is not valid, no metadata is served. The namespace for this config map is openshift-config.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "name is the metadata.name of the referenced config map",
                  "type": "string"
                }
              }
            },
            "serviceAccountIssuer": {
              "description": "serviceAccountIssuer is the identifier of the bound service account token issuer. The default is https://kubernetes.default.svc",
              "type": "string"
            },
            "type": {
              "description": "type identifies the cluster managed, user facing authentication mode in use. Specifically, it manages the component that responds to login attempts. The default is IntegratedOAuth.",
              "type": "string"
            },
            "webhookTokenAuthenticator": {
              "description": "webhookTokenAuthenticator configures a remote token reviewer. These remote authentication webhooks can be used to verify bearer tokens via the tokenreviews.authentication.k8s.io REST API. This is required to honor bearer tokens that are provisioned by an external authentication service.",
              "type": "object",
              "required": [
                "kubeConfig"
              ],
              "properties": {
                "kubeConfig": {
                  "description": "kubeConfig references a secret that contains kube config file data which describes how to access the remote webhook service. The namespace for the referenced secret is openshift-config. \n For further details, see: \n https://kubernetes.io/docs/reference/access-authn-authz/authentication/#webhook-token-authentication \n The key \"kubeConfig\" is used to locate the data. If the secret or expected key is not found, the webhook is not honored. If the specified kube config data is not valid, the webhook is not honored.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "name is the metadata.name of the referenced secret",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "webhookTokenAuthenticators": {
              "description": "webhookTokenAuthenticators is DEPRECATED, setting it has no effect.",
              "type": "array",
              "items": {
                "description": "deprecatedWebhookTokenAuthenticator holds the necessary configuration options for a remote token authenticator. It's the same as WebhookTokenAuthenticator but it's missing the 'required' validation on KubeConfig field.",
                "type": "object",
                "properties": {
                  "kubeConfig": {
                    "description": "kubeConfig contains kube config file data which describes how to access the remote webhook service. For further details, see: https://kubernetes.io/docs/reference/access-authn-authz/authentication/#webhook-token-authentication The key \"kubeConfig\" is used to locate the data. If the secret or expected key is not found, the webhook is not honored. If the specified kube config data is not valid, the webhook is not honored. The namespace for this secret is determined by the point of use.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "name is the metadata.name of the referenced secret",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "status": {
          "description": "status holds observed values from the cluster. They may not be overridden.",
          "type": "object",
          "properties": {
            "integratedOAuthMetadata": {
              "description": "integratedOAuthMetadata contains the discovery endpoint data for OAuth 2.0 Authorization Server Metadata for the in-cluster integrated OAuth server. This discovery document can be viewed from its served location: oc get --raw '/.well-known/oauth-authorization-server' For further details, see the IETF Draft: https://tools.ietf.org/html/draft-ietf-oauth-discovery-04#section-2 This contains the observed value based on cluster state. An explicitly set value in spec.oauthMetadata has precedence over this field. This field has no meaning if authentication spec.type is not set to IntegratedOAuth. The key \"oauthMetadata\" is used to locate the data. If the config map or expected key is not found, no metadata is served. If the specified metadata is not valid, no metadata is served. The namespace for this config map is openshift-config-managed.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "name is the metadata.name of the referenced config map",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.openshift.io",
          "kind": "Authentication",
          "version": "v1"
        }
      ]
    },
    "io.openshift.config.v1.AuthenticationList": {
      "description": "AuthenticationList is a list of Authentication",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "config.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of authentications. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.config.v1.Authentication"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "AuthenticationList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.openshift.io",
          "kind": "AuthenticationList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.config.v1.Build": {
      "description": "Build configures the behavior of OpenShift builds for the entire cluster. This includes default settings that can be overridden in BuildConfig objects, and overrides which are applied to all builds. \n The canonical name is \"cluster\"",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "config.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Build"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds user-settable values for the build controller configuration",
          "type": "object",
          "properties": {
            "additionalTrustedCA": {
              "description": "AdditionalTrustedCA is a reference to a ConfigMap containing additional CAs that should be trusted for image pushes and pulls during builds. The namespace for this config map is openshift-config. \n DEPRECATED: Additional CAs for image pull and push should be set on image.config.openshift.io/cluster instead.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "name is the metadata.name of the referenced config map",
                  "type": "string"
                }
              }
            },
            "buildDefaults": {
              "description": "BuildDefaults controls the default information for Builds",
              "type": "object",
              "properties": {
                "defaultProxy": {
                  "description": "DefaultProxy contains the default proxy settings for all build operations, including image pull/push and source download. \n Values can be overrode by setting the `HTTP_PROXY`, `HTTPS_PROXY`, and `NO_PROXY` environment variables in the build config's strategy.",
                  "type": "object",
                  "properties": {
                    "httpProxy": {
                      "description": "httpProxy is the URL of the proxy for HTTP requests.  Empty means unset and will not result in an env var.",
                      "type": "string"
                    },
                    "httpsProxy": {
                      "description": "httpsProxy is the URL of the proxy for HTTPS requests.  Empty means unset and will not result in an env var.",
                      "type": "string"
                    },
                    "noProxy": {
                      "description": "noProxy is a comma-separated list of hostnames and/or CIDRs for which the proxy should not be used. Empty means unset and will not result in an env var.",
                      "type": "string"
                    },
                    "readinessEndpoints": {
                      "description": "readinessEndpoints is a list of endpoints used to verify readiness of the proxy.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "trustedCA": {
                      "description": "trustedCA is a reference to a ConfigMap containing a CA certificate bundle. The trustedCA field should only be consumed by a proxy validator. The validator is responsible for reading the certificate bundle from the required key \"ca-bundle.crt\", merging it with the system default trust bundle, and writing the merged trust bundle to a ConfigMap named \"trusted-ca-bundle\" in the \"openshift-config-managed\" namespace. Clients that expect to make proxy connections must use the trusted-ca-bundle for all HTTPS requests to the proxy, and may use the trusted-ca-bundle for non-proxy HTTPS requests as well. \n The namespace for the ConfigMap referenced by trustedCA is \"openshift-config\". Here is an example ConfigMap (in yaml): \n apiVersion: v1 kind: ConfigMap metadata:  name: user-ca-bundle  namespace: openshift-config  data:    ca-bundle.crt: |      -----BEGIN CERTIFICATE-----      Custom CA certificate bundle.      -----END CERTIFICATE-----",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "description": "name is the metadata.name of the referenced config map",
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "env": {
                  "description": "Env is a set of default environment variables that will be applied to the build if the specified variables do not exist on the build",
                  "type": "array",
                  "items": {
                    "description": "EnvVar represents an environment variable present in a Container.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
                        "type": "string"
                      },
                      "valueFrom": {
                        "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                        "type": "object",
                        "properties": {
                          "configMapKeyRef": {
                            "description": "Selects a key of a ConfigMap.",
                            "type": "object",
                            "required": [
                              "key"
                            ],
                            "properties": {
                              "key": {
                                "description": "The key to select.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                "type": "string"
                              },
                              "optional": {
                                "description": "Specify whether the ConfigMap or its key must be defined",
                                "type": "boolean"
                              }
                            }
                          },
                          "fieldRef": {
                            "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                            "type": "object",
                            "required": [
                              "fieldPath"
                            ],
                            "properties": {
                              "apiVersion": {
                                "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                "type": "string"
                              },
                              "fieldPath": {
                                "description": "Path of the field to select in the specified API version.",
                                "type": "string"
                              }
                            }
                          },
                          "resourceFieldRef": {
                            "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                            "type": "object",
                            "required": [
                              "resource"
                            ],
                            "properties": {
                              "containerName": {
                                "description": "Container name: required for volumes, optional for env vars",
                                "type": "string"
                              },
                              "divisor": {
                                "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              },
                              "resource": {
                                "description": "Required: resource to select",
                                "type": "string"
                              }
                            }
                          },
                          "secretKeyRef": {
                            "description": "Selects a key of a secret in the pod's namespace",
                            "type": "object",
                            "required": [
                              "key"
                            ],
                            "properties": {
                              "key": {
                                "description": "The key of the secret to select from.  Must be a valid secret key.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                "type": "string"
                              },
                              "optional": {
                                "description": "Specify whether the Secret or its key must be defined",
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "gitProxy": {
                  "description": "GitProxy contains the proxy settings for git operations only. If set, this will override any Proxy settings for all git commands, such as git clone. \n Values that are not set here will be inherited from DefaultProxy.",
                  "type": "object",
                  "properties": {
                    "httpProxy": {
                      "description": "httpProxy is the URL of the proxy for HTTP requests.  Empty means unset and will not result in an env var.",
                      "type": "string"
                    },
                    "httpsProxy": {
                      "description": "httpsProxy is the URL of the proxy for HTTPS requests.  Empty means unset and will not result in an env var.",
                      "type": "string"
                    },
                    "noProxy": {
                      "description": "noProxy is a comma-separated list of hostnames and/or CIDRs for which the proxy should not be used. Empty means unset and will not result in an env var.",
                      "type": "string"
                    },
                    "readinessEndpoints": {
                      "description": "readinessEndpoints is a list of endpoints used to verify readiness of the proxy.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "trustedCA": {
                      "description": "trustedCA is a reference to a ConfigMap containing a CA certificate bundle. The trustedCA field should only be consumed by a proxy validator. The validator is responsible for reading the certificate bundle from the required key \"ca-bundle.crt\", merging it with the system default trust bundle, and writing the merged trust bundle to a ConfigMap named \"trusted-ca-bundle\" in the \"openshift-config-managed\" namespace. Clients that expect to make proxy connections must use the trusted-ca-bundle for all HTTPS requests to the proxy, and may use the trusted-ca-bundle for non-proxy HTTPS requests as well. \n The namespace for the ConfigMap referenced by trustedCA is \"openshift-config\". Here is an example ConfigMap (in yaml): \n apiVersion: v1 kind: ConfigMap metadata:  name: user-ca-bundle  namespace: openshift-config  data:    ca-bundle.crt: |      -----BEGIN CERTIFICATE-----      Custom CA certificate bundle.      -----END CERTIFICATE-----",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "description": "name is the metadata.name of the referenced config map",
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "imageLabels": {
                  "description": "ImageLabels is a list of docker labels that are applied to the resulting image. User can override a default label by providing a label with the same name in their Build/BuildConfig.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name defines the name of the label. It must have non-zero length.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Value defines the literal value of the label.",
                        "type": "string"
                      }
                    }
                  }
                },
                "resources": {
                  "description": "Resources defines resource requirements to execute the build.",
                  "type": "object",
                  "properties": {
                    "limits": {
                      "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                      "type": "object",
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      }
                    },
                    "requests": {
                      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                      "type": "object",
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      }
                    }
                  }
                }
              }
            },
            "buildOverrides": {
              "description": "BuildOverrides controls override settings for builds",
              "type": "object",
              "properties": {
                "forcePull": {
                  "description": "ForcePull overrides, if set, the equivalent value in the builds, i.e. false disables force pull for all builds, true enables force pull for all builds, independently of what each build specifies itself",
                  "type": "boolean"
                },
                "imageLabels": {
                  "description": "ImageLabels is a list of docker labels that are applied to the resulting image. If user provided a label in their Build/BuildConfig with the same name as one in this list, the user's label will be overwritten.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name defines the name of the label. It must have non-zero length.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Value defines the literal value of the label.",
                        "type": "string"
                      }
                    }
                  }
                },
                "nodeSelector": {
                  "description": "NodeSelector is a selector which must be true for the build pod to fit on a node",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "tolerations": {
                  "description": "Tolerations is a list of Tolerations that will override any existing tolerations set on a build pod.",
                  "type": "array",
                  "items": {
                    "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
                    "type": "object",
                    "properties": {
                      "effect": {
                        "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                        "type": "string"
                      },
                      "key": {
                        "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                        "type": "string"
                      },
                      "tolerationSeconds": {
                        "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "value": {
                        "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.openshift.io",
          "kind": "Build",
          "version": "v1"
        }
      ]
    },
    "io.openshift.config.v1.BuildList": {
      "description": "BuildList is a list of Build",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "config.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of builds. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.config.v1.Build"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "BuildList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.openshift.io",
          "kind": "BuildList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.config.v1.ClusterOperator": {
      "description": "ClusterOperator is the Custom Resource object which holds the current state of an operator. This object is used by operators to convey their state to the rest of the cluster.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "config.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterOperator"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec holds configuration that could apply to any operator.",
          "type": "object"
        },
        "status": {
          "description": "status holds the information about the state of an operator.  It is consistent with status information across the Kubernetes ecosystem.",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "conditions describes the state of the operator's managed and monitored components.",
              "type": "array",
              "items": {
                "description": "ClusterOperatorStatusCondition represents the state of the operator's managed and monitored components.",
                "type": "object",
                "required": [
                  "lastTransitionTime",
                  "status",
                  "type"
                ],
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the time of the last update to the current status property.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "message provides additional information about the current condition. This is only to be consumed by humans.",
                    "type": "string"
                  },
                  "reason": {
                    "description": "reason is the CamelCase reason for the condition's current status.",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "type": "string"
                  },
                  "type": {
                    "description": "type specifies the aspect reported by this condition.",
                    "type": "string"
                  }
                }
              }
            },
            "extension": {
              "description": "extension contains any additional status information specific to the operator which owns this status object.",
              "x-kubernetes-preserve-unknown-fields": true
            },
            "relatedObjects": {
              "description": "relatedObjects is a list of objects that are \"interesting\" or related to this operator.  Common uses are: 1. the detailed resource driving the operator 2. operator namespaces 3. operand namespaces",
              "type": "array",
              "items": {
                "description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
                "type": "object",
                "required": [
                  "group",
                  "name",
                  "resource"
                ],
                "properties": {
                  "group": {
                    "description": "group of the referent.",
                    "type": "string"
                  },
                  "name": {
                    "description": "name of the referent.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "namespace of the referent.",
                    "type": "string"
                  },
                  "resource": {
                    "description": "resource of the referent.",
                    "type": "string"
                  }
                }
              }
            },
            "versions": {
              "description": "versions is a slice of operator and operand version tuples.  Operators which manage multiple operands will have multiple operand entries in the array.  Available operators must report the version of the operator itself with the name \"operator\". An operator reports a new \"operator\" version when it has rolled out the new version to all of its operands.",
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "name",
                  "version"
                ],
                "properties": {
                  "name": {
                    "description": "name is the name of the particular operand this version is for.  It usually matches container images, not operators.",
                    "type": "string"
                  },
                  "version": {
                    "description": "version indicates which version of a particular operand is currently being managed.  It must always match the Available operand.  If 1.0.0 is Available, then this must indicate 1.0.0 even if the operator is trying to rollout 1.1.0",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.openshift.io",
          "kind": "ClusterOperator",
          "version": "v1"
        }
      ]
    },
    "io.openshift.config.v1.ClusterOperatorList": {
      "description": "ClusterOperatorList is a list of ClusterOperator",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "config.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of clusteroperators. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.config.v1.ClusterOperator"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterOperatorList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.openshift.io",
          "kind": "ClusterOperatorList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.config.v1.ClusterVersion": {
      "description": "ClusterVersion is the configuration for the ClusterVersionOperator. This is where parameters related to automatic updates can be set.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "config.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterVersion"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is the desired state of the cluster version - the operator will work to ensure that the desired version is applied to the cluster.",
          "type": "object",
          "required": [
            "clusterID"
          ],
          "properties": {
            "channel": {
              "description": "channel is an identifier for explicitly requesting that a non-default set of updates be applied to this cluster. The default channel will be contain stable updates that are appropriate for production clusters.",
              "type": "string"
            },
            "clusterID": {
              "description": "clusterID uniquely identifies this cluster. This is expected to be an RFC4122 UUID value (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx in hexadecimal values). This is a required field.",
              "type": "string"
            },
            "desiredUpdate": {
              "description": "desiredUpdate is an optional field that indicates the desired value of the cluster version. Setting this value will trigger an upgrade (if the current version does not match the desired version). The set of recommended update values is listed as part of available updates in status, and setting values outside that range may cause the upgrade to fail. You may specify the version field without setting image if an update exists with that version in the availableUpdates or history. \n If an upgrade fails the operator will halt and report status about the failing component. Setting the desired update value back to the previous version will cause a rollback to be attempted. Not all rollbacks will succeed.",
              "type": "object",
              "properties": {
                "force": {
                  "description": "force allows an administrator to update to an image that has failed verification, does not appear in the availableUpdates list, or otherwise would be blocked by normal protections on update. This option should only be used when the authenticity of the provided image has been verified out of band because the provided image will run with full administrative access to the cluster. Do not use this flag with images that comes from unknown or potentially malicious sources. \n This flag does not override other forms of consistency checking that are required before a new update is deployed.",
                  "type": "boolean"
                },
                "image": {
                  "description": "image is a container image location that contains the update. When this field is part of spec, image is optional if version is specified and the availableUpdates field contains a matching version.",
                  "type": "string"
                },
                "version": {
                  "description": "version is a semantic versioning identifying the update version. When this field is part of spec, version is optional if image is specified.",
                  "type": "string"
                }
              }
            },
            "overrides": {
              "description": "overrides is list of overides for components that are managed by cluster version operator. Marking a component unmanaged will prevent the operator from creating or updating the object.",
              "type": "array",
              "items": {
                "description": "ComponentOverride allows overriding cluster version operator's behavior for a component.",
                "type": "object",
                "required": [
                  "group",
                  "kind",
                  "name",
                  "namespace",
                  "unmanaged"
                ],
                "properties": {
                  "group": {
                    "description": "group identifies the API group that the kind is in.",
                    "type": "string"
                  },
                  "kind": {
                    "description": "kind indentifies which object to override.",
                    "type": "string"
                  },
                  "name": {
                    "description": "name is the component's name.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "namespace is the component's namespace. If the resource is cluster scoped, the namespace should be empty.",
                    "type": "string"
                  },
                  "unmanaged": {
                    "description": "unmanaged controls if cluster version operator should stop managing the resources in this cluster. Default: false",
                    "type": "boolean"
                  }
                }
              }
            },
            "upstream": {
              "description": "upstream may be used to specify the preferred update server. By default it will use the appropriate update server for the cluster and region.",
              "type": "string"
            }
          }
        },
        "status": {
          "description": "status contains information about the available updates and any in-progress updates.",
          "type": "object",
          "required": [
            "desired",
            "observedGeneration",
            "versionHash"
          ],
          "properties": {
            "availableUpdates": {
              "description": "availableUpdates contains the list of updates that are appropriate for this cluster. This list may be empty if no updates are recommended, if the update service is unavailable, or if an invalid channel has been specified."
            },
            "conditions": {
              "description": "conditions provides information about the cluster version. The condition \"Available\" is set to true if the desiredUpdate has been reached. The condition \"Progressing\" is set to true if an update is being applied. The condition \"Degraded\" is set to true if an update is currently blocked by a temporary or permanent error. Conditions are only valid for the current desiredUpdate when metadata.generation is equal to status.generation.",
              "type": "array",
              "items": {
                "description": "ClusterOperatorStatusCondition represents the state of the operator's managed and monitored components.",
                "type": "object",
                "required": [
                  "lastTransitionTime",
                  "status",
                  "type"
                ],
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the time of the last update to the current status property.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "message provides additional information about the current condition. This is only to be consumed by humans.",
                    "type": "string"
                  },
                  "reason": {
                    "description": "reason is the CamelCase reason for the condition's current status.",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "type": "string"
                  },
                  "type": {
                    "description": "type specifies the aspect reported by this condition.",
                    "type": "string"
                  }
                }
              }
            },
            "desired": {
              "description": "desired is the version that the cluster is reconciling towards. If the cluster is not yet fully initialized desired will be set with the information available, which may be an image or a tag.",
              "type": "object",
              "properties": {
                "channels": {
                  "description": "channels is the set of Cincinnati channels to which the release currently belongs.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "image": {
                  "description": "image is a container image location that contains the update. When this field is part of spec, image is optional if version is specified and the availableUpdates field contains a matching version.",
                  "type": "string"
                },
                "url": {
                  "description": "url contains information about this release. This URL is set by the 'url' metadata property on a release or the metadata returned by the update API and should be displayed as a link in user interfaces. The URL field may not be set for test or nightly releases.",
                  "type": "string"
                },
                "version": {
                  "description": "version is a semantic versioning identifying the update version. When this field is part of spec, version is optional if image is specified.",
                  "type": "string"
                }
              }
            },
            "history": {
              "description": "history contains a list of the most recent versions applied to the cluster. This value may be empty during cluster startup, and then will be updated when a new update is being applied. The newest update is first in the list and it is ordered by recency. Updates in the history have state Completed if the rollout completed - if an update was failing or halfway applied the state will be Partial. Only a limited amount of update history is preserved.",
              "type": "array",
              "items": {
                "description": "UpdateHistory is a single attempted update to the cluster.",
                "type": "object",
                "required": [
                  "image",
                  "startedTime",
                  "state",
                  "verified"
                ],
                "properties": {
                  "completionTime": {
                    "description": "completionTime, if set, is when the update was fully applied. The update that is currently being applied will have a null completion time. Completion time will always be set for entries that are not the current update (usually to the started time of the next update).",
                    "format": "date-time"
                  },
                  "image": {
                    "description": "image is a container image location that contains the update. This value is always populated.",
                    "type": "string"
                  },
                  "startedTime": {
                    "description": "startedTime is the time at which the update was started.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "state": {
                    "description": "state reflects whether the update was fully applied. The Partial state indicates the update is not fully applied, while the Completed state indicates the update was successfully rolled out at least once (all parts of the update successfully applied).",
                    "type": "string"
                  },
                  "verified": {
                    "description": "verified indicates whether the provided update was properly verified before it was installed. If this is false the cluster may not be trusted.",
                    "type": "boolean"
                  },
                  "version": {
                    "description": "version is a semantic versioning identifying the update version. If the requested image does not define a version, or if a failure occurs retrieving the image, this value may be empty.",
                    "type": "string"
                  }
                }
              }
            },
            "observedGeneration": {
              "description": "observedGeneration reports which version of the spec is being synced. If this value is not equal to metadata.generation, then the desired and conditions fields may represent a previous version.",
              "type": "integer",
              "format": "int64"
            },
            "versionHash": {
              "description": "versionHash is a fingerprint of the content that the cluster will be updated with. It is used by the operator to avoid unnecessary work and is for internal use only.",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.openshift.io",
          "kind": "ClusterVersion",
          "version": "v1"
        }
      ]
    },
    "io.openshift.config.v1.ClusterVersionList": {
      "description": "ClusterVersionList is a list of ClusterVersion",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "config.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of clusterversions. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.config.v1.ClusterVersion"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterVersionList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.openshift.io",
          "kind": "ClusterVersionList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.config.v1.Console": {
      "description": "Console holds cluster-wide configuration for the web console, including the logout URL, and reports the public URL of the console. The canonical name is `cluster`.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "config.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Console"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec holds user settable values for configuration",
          "type": "object",
          "properties": {
            "authentication": {
              "description": "ConsoleAuthentication defines a list of optional configuration for console authentication.",
              "type": "object",
              "properties": {
                "logoutRedirect": {
                  "description": "An optional, absolute URL to redirect web browsers to after logging out of the console. If not specified, it will redirect to the default login page. This is required when using an identity provider that supports single sign-on (SSO) such as: - OpenID (Keycloak, Azure) - RequestHeader (GSSAPI, SSPI, SAML) - OAuth (GitHub, GitLab, Google) Logging out of the console will destroy the user's token. The logoutRedirect provides the user the option to perform single logout (SLO) through the identity provider to destroy their single sign-on session.",
                  "type": "string",
                  "pattern": "^$|^((https):\\/\\/?)[^\\s()<>]+(?:\\([\\w\\d]+\\)|([^[:punct:]\\s]|\\/?))$"
                }
              }
            }
          }
        },
        "status": {
          "description": "status holds observed values from the cluster. They may not be overridden.",
          "type": "object",
          "properties": {
            "consoleURL": {
              "description": "The URL for the console. This will be derived from the host for the route that is created for the console.",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.openshift.io",
          "kind": "Console",
          "version": "v1"
        }
      ]
    },
    "io.openshift.config.v1.ConsoleList": {
      "description": "ConsoleList is a list of Console",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "config.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of consoles. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.config.v1.Console"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ConsoleList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.openshift.io",
          "kind": "ConsoleList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.config.v1.DNS": {
      "description": "DNS holds cluster-wide information about DNS. The canonical name is `cluster`",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "config.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "DNS"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec holds user settable values for configuration",
          "type": "object",
          "properties": {
            "baseDomain": {
              "description": "baseDomain is the base domain of the cluster. All managed DNS records will be sub-domains of this base. \n For example, given the base domain `openshift.example.com`, an API server DNS record may be created for `cluster-api.openshift.example.com`. \n Once set, this field cannot be changed.",
              "type": "string"
            },
            "privateZone": {
              "description": "privateZone is the location where all the DNS records that are only available internally to the cluster exist. \n If this field is nil, no private records should be created. \n Once set, this field cannot be changed.",
              "type": "object",
              "properties": {
                "id": {
                  "description": "id is the identifier that can be used to find the DNS hosted zone. \n on AWS zone can be fetched using `ID` as id in [1] on Azure zone can be fetched using `ID` as a pre-determined name in [2], on GCP zone can be fetched using `ID` as a pre-determined name in [3]. \n [1]: https://docs.aws.amazon.com/cli/latest/reference/route53/get-hosted-zone.html#options [2]: https://docs.microsoft.com/en-us/cli/azure/network/dns/zone?view=azure-cli-latest#az-network-dns-zone-show [3]: https://cloud.google.com/dns/docs/reference/v1/managedZones/get",
                  "type": "string"
                },
                "tags": {
                  "description": "tags can be used to query the DNS hosted zone. \n on AWS, resourcegroupstaggingapi [1] can be used to fetch a zone using `Tags` as tag-filters, \n [1]: https://docs.aws.amazon.com/cli/latest/reference/resourcegroupstaggingapi/get-resources.html#options",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "publicZone": {
              "description": "publicZone is the location where all the DNS records that are publicly accessible to the internet exist. \n If this field is nil, no public records should be created. \n Once set, this field cannot be changed.",
              "type": "object",
              "properties": {
                "id": {
                  "description": "id is the identifier that can be used to find the DNS hosted zone. \n on AWS zone can be fetched using `ID` as id in [1] on Azure zone can be fetched using `ID` as a pre-determined name in [2], on GCP zone can be fetched using `ID` as a pre-determined name in [3]. \n [1]: https://docs.aws.amazon.com/cli/latest/reference/route53/get-hosted-zone.html#options [2]: https://docs.microsoft.com/en-us/cli/azure/network/dns/zone?view=azure-cli-latest#az-network-dns-zone-show [3]: https://cloud.google.com/dns/docs/reference/v1/managedZones/get",
                  "type": "string"
                },
                "tags": {
                  "description": "tags can be used to query the DNS hosted zone. \n on AWS, resourcegroupstaggingapi [1] can be used to fetch a zone using `Tags` as tag-filters, \n [1]: https://docs.aws.amazon.com/cli/latest/reference/resourcegroupstaggingapi/get-resources.html#options",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "status": {
          "description": "status holds observed values from the cluster. They may not be overridden.",
          "type": "object"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.openshift.io",
          "kind": "DNS",
          "version": "v1"
        }
      ]
    },
    "io.openshift.config.v1.DNSList": {
      "description": "DNSList is a list of DNS",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "config.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of dnses. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.config.v1.DNS"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "DNSList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.openshift.io",
          "kind": "DNSList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.config.v1.FeatureGate": {
      "description": "Feature holds cluster-wide information about feature gates.  The canonical name is `cluster`",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "config.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "FeatureGate"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec holds user settable values for configuration",
          "type": "object",
          "properties": {
            "customNoUpgrade": {
              "description": "customNoUpgrade allows the enabling or disabling of any feature. Turning this feature set on IS NOT SUPPORTED, CANNOT BE UNDONE, and PREVENTS UPGRADES. Because of its nature, this setting cannot be validated.  If you have any typos or accidentally apply invalid combinations your cluster may fail in an unrecoverable way.  featureSet must equal \"CustomNoUpgrade\" must be set to use this field."
            },
            "featureSet": {
              "description": "featureSet changes the list of features in the cluster.  The default is empty.  Be very careful adjusting this setting. Turning on or off features may cause irreversible changes in your cluster which cannot be undone.",
              "type": "string"
            }
          }
        },
        "status": {
          "description": "status holds observed values from the cluster. They may not be overridden.",
          "type": "object"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.openshift.io",
          "kind": "FeatureGate",
          "version": "v1"
        }
      ]
    },
    "io.openshift.config.v1.FeatureGateList": {
      "description": "FeatureGateList is a list of FeatureGate",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "config.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of featuregates. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.config.v1.FeatureGate"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "FeatureGateList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.openshift.io",
          "kind": "FeatureGateList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.config.v1.Image": {
      "description": "Image governs policies related to imagestream imports and runtime configuration for external registries. It allows cluster admins to configure which registries OpenShift is allowed to import images from, extra CA trust bundles for external registries, and policies to block or allow registry hostnames. When exposing OpenShift's image registry to the public, this also lets cluster admins specify the external hostname.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "config.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Image"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec holds user settable values for configuration",
          "type": "object",
          "properties": {
            "additionalTrustedCA": {
              "description": "additionalTrustedCA is a reference to a ConfigMap containing additional CAs that should be trusted during imagestream import, pod image pull, build image pull, and imageregistry pullthrough. The namespace for this config map is openshift-config.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "name is the metadata.name of the referenced config map",
                  "type": "string"
                }
              }
            },
            "allowedRegistriesForImport": {
              "description": "allowedRegistriesForImport limits the container image registries that normal users may import images from. Set this list to the registries that you trust to contain valid Docker images and that you want applications to be able to import from. Users with permission to create Images or ImageStreamMappings via the API are not affected by this policy - typically only administrators or system integrations will have those permissions.",
              "type": "array",
              "items": {
                "description": "RegistryLocation contains a location of the registry specified by the registry domain name. The domain name might include wildcards, like '*' or '??'.",
                "type": "object",
                "properties": {
                  "domainName": {
                    "description": "domainName specifies a domain name for the registry In case the registry use non-standard (80 or 443) port, the port should be included in the domain name as well.",
                    "type": "string"
                  },
                  "insecure": {
                    "description": "insecure indicates whether the registry is secure (https) or insecure (http) By default (if not specified) the registry is assumed as secure.",
                    "type": "boolean"
                  }
                }
              }
            },
            "externalRegistryHostnames": {
              "description": "externalRegistryHostnames provides the hostnames for the default external image registry. The external hostname should be set only when the image registry is exposed externally. The first value is used in 'publicDockerImageRepository' field in ImageStreams. The value must be in \"hostname[:port]\" format.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "registrySources": {
              "description": "registrySources contains configuration that determines how the container runtime should treat individual registries when accessing images for builds+pods. (e.g. whether or not to allow insecure access).  It does not contain configuration for the internal cluster registry.",
              "type": "object",
              "properties": {
                "allowedRegistries": {
                  "description": "allowedRegistries are the only registries permitted for image pull and push actions. All other registries are denied. \n Only one of BlockedRegistries or AllowedRegistries may be set.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "blockedRegistries": {
                  "description": "blockedRegistries cannot be used for image pull and push actions. All other registries are permitted. \n Only one of BlockedRegistries or AllowedRegistries may be set.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "insecureRegistries": {
                  "description": "insecureRegistries are registries which do not have a valid TLS certificates or only support HTTP connections.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "status": {
          "description": "status holds observed values from the cluster. They may not be overridden.",
          "type": "object",
          "properties": {
            "externalRegistryHostnames": {
              "description": "externalRegistryHostnames provides the hostnames for the default external image registry. The external hostname should be set only when the image registry is exposed externally. The first value is used in 'publicDockerImageRepository' field in ImageStreams. The value must be in \"hostname[:port]\" format.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "internalRegistryHostname": {
              "description": "internalRegistryHostname sets the hostname for the default internal image registry. The value must be in \"hostname[:port]\" format. This value is set by the image registry operator which controls the internal registry hostname. For backward compatibility, users can still use OPENSHIFT_DEFAULT_REGISTRY environment variable but this setting overrides the environment variable.",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.openshift.io",
          "kind": "Image",
          "version": "v1"
        }
      ]
    },
    "io.openshift.config.v1.ImageList": {
      "description": "ImageList is a list of Image",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "config.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of images. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.config.v1.Image"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ImageList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.openshift.io",
          "kind": "ImageList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.config.v1.Infrastructure": {
      "description": "Infrastructure holds cluster-wide information about Infrastructure.  The canonical name is `cluster`",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "config.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Infrastructure"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec holds user settable values for configuration",
          "type": "object",
          "properties": {
            "cloudConfig": {
              "description": "cloudConfig is a reference to a ConfigMap containing the cloud provider configuration file. This configuration file is used to configure the Kubernetes cloud provider integration when using the built-in cloud provider integration or the external cloud controller manager. The namespace for this config map is openshift-config. \n cloudConfig should only be consumed by the kube_cloud_config controller. The controller is responsible for using the user configuration in the spec for various platforms and combining that with the user provided ConfigMap in this field to create a stitched kube cloud config. The controller generates a ConfigMap `kube-cloud-config` in `openshift-config-managed` namespace with the kube cloud config is stored in `cloud.conf` key. All the clients are expected to use the generated ConfigMap only.",
              "type": "object",
              "properties": {
                "key": {
                  "description": "Key allows pointing to a specific key/value inside of the configmap.  This is useful for logical file references.",
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            },
            "platformSpec": {
              "description": "platformSpec holds desired information specific to the underlying infrastructure provider.",
              "type": "object",
              "properties": {
                "aws": {
                  "description": "AWS contains settings specific to the Amazon Web Services infrastructure provider.",
                  "type": "object",
                  "properties": {
                    "serviceEndpoints": {
                      "description": "serviceEndpoints list contains custom endpoints which will override default service endpoint of AWS Services. There must be only one ServiceEndpoint for a service.",
                      "type": "array",
                      "items": {
                        "description": "AWSServiceEndpoint store the configuration of a custom url to override existing defaults of AWS Services.",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "name is the name of the AWS service. The list of all the service names can be found at https://docs.aws.amazon.com/general/latest/gr/aws-service-information.html This must be provided and cannot be empty.",
                            "type": "string",
                            "pattern": "^[a-z0-9-]+$"
                          },
                          "url": {
                            "description": "url is fully qualified URI with scheme https, that overrides the default generated endpoint for a client. This must be provided and cannot be empty.",
                            "type": "string",
                            "pattern": "^https://"
                          }
                        }
                      }
                    }
                  }
                },
                "azure": {
                  "description": "Azure contains settings specific to the Azure infrastructure provider.",
                  "type": "object"
                },
                "baremetal": {
                  "description": "BareMetal contains settings specific to the BareMetal platform.",
                  "type": "object"
                },
                "gcp": {
                  "description": "GCP contains settings specific to the Google Cloud Platform infrastructure provider.",
                  "type": "object"
                },
                "ibmcloud": {
                  "description": "IBMCloud contains settings specific to the IBMCloud infrastructure provider.",
                  "type": "object"
                },
                "openstack": {
                  "description": "OpenStack contains settings specific to the OpenStack infrastructure provider.",
                  "type": "object"
                },
                "ovirt": {
                  "description": "Ovirt contains settings specific to the oVirt infrastructure provider.",
                  "type": "object"
                },
                "type": {
                  "description": "type is the underlying infrastructure provider for the cluster. This value controls whether infrastructure automation such as service load balancers, dynamic volume provisioning, machine creation and deletion, and other integrations are enabled. If None, no infrastructure automation is enabled. Allowed values are \"AWS\", \"Azure\", \"BareMetal\", \"GCP\", \"Libvirt\", \"OpenStack\", \"VSphere\", \"oVirt\", and \"None\". Individual components may not support all platforms, and must handle unrecognized platforms as None if they do not support that platform.",
                  "type": "string",
                  "enum": [
                    "",
                    "AWS",
                    "Azure",
                    "BareMetal",
                    "GCP",
                    "Libvirt",
                    "OpenStack",
                    "None",
                    "VSphere",
                    "oVirt",
                    "IBMCloud"
                  ]
                },
                "vsphere": {
                  "description": "VSphere contains settings specific to the VSphere infrastructure provider.",
                  "type": "object"
                }
              }
            }
          }
        },
        "status": {
          "description": "status holds observed values from the cluster. They may not be overridden.",
          "type": "object",
          "properties": {
            "apiServerInternalURI": {
              "description": "apiServerInternalURL is a valid URI with scheme 'https', address and optionally a port (defaulting to 443).  apiServerInternalURL can be used by components like kubelets, to contact the Kubernetes API server using the infrastructure provider rather than Kubernetes networking.",
              "type": "string"
            },
            "apiServerURL": {
              "description": "apiServerURL is a valid URI with scheme 'https', address and optionally a port (defaulting to 443).  apiServerURL can be used by components like the web console to tell users where to find the Kubernetes API.",
              "type": "string"
            },
            "etcdDiscoveryDomain": {
              "description": "etcdDiscoveryDomain is the domain used to fetch the SRV records for discovering etcd servers and clients. For more info: https://github.com/etcd-io/etcd/blob/329be66e8b3f9e2e6af83c123ff89297e49ebd15/Documentation/op-guide/clustering.md#dns-discovery",
              "type": "string"
            },
            "infrastructureName": {
              "description": "infrastructureName uniquely identifies a cluster with a human friendly name. Once set it should not be changed. Must be of max length 27 and must have only alphanumeric or hyphen characters.",
              "type": "string"
            },
            "platform": {
              "description": "platform is the underlying infrastructure provider for the cluster. \n Deprecated: Use platformStatus.type instead.",
              "type": "string",
              "enum": [
                "",
                "AWS",
                "Azure",
                "BareMetal",
                "GCP",
                "Libvirt",
                "OpenStack",
                "None",
                "VSphere",
                "oVirt",
                "IBMCloud"
              ]
            },
            "platformStatus": {
              "description": "platformStatus holds status information specific to the underlying infrastructure provider.",
              "type": "object",
              "properties": {
                "aws": {
                  "description": "AWS contains settings specific to the Amazon Web Services infrastructure provider.",
                  "type": "object",
                  "properties": {
                    "region": {
                      "description": "region holds the default AWS region for new AWS resources created by the cluster.",
                      "type": "string"
                    },
                    "serviceEndpoints": {
                      "description": "ServiceEndpoints list contains custom endpoints which will override default service endpoint of AWS Services. There must be only one ServiceEndpoint for a service.",
                      "type": "array",
                      "items": {
                        "description": "AWSServiceEndpoint store the configuration of a custom url to override existing defaults of AWS Services.",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "name is the name of the AWS service. The list of all the service names can be found at https://docs.aws.amazon.com/general/latest/gr/aws-service-information.html This must be provided and cannot be empty.",
                            "type": "string",
                            "pattern": "^[a-z0-9-]+$"
                          },
                          "url": {
                            "description": "url is fully qualified URI with scheme https, that overrides the default generated endpoint for a client. This must be provided and cannot be empty.",
                            "type": "string",
                            "pattern": "^https://"
                          }
                        }
                      }
                    }
                  }
                },
                "azure": {
                  "description": "Azure contains settings specific to the Azure infrastructure provider.",
                  "type": "object",
                  "properties": {
                    "cloudName": {
                      "description": "cloudName is the name of the Azure cloud environment which can be used to configure the Azure SDK with the appropriate Azure API endpoints. If empty, the value is equal to `AzurePublicCloud`.",
                      "type": "string",
                      "enum": [
                        "",
                        "AzurePublicCloud",
                        "AzureUSGovernmentCloud",
                        "AzureChinaCloud",
                        "AzureGermanCloud"
                      ]
                    },
                    "networkResourceGroupName": {
                      "description": "networkResourceGroupName is the Resource Group for network resources like the Virtual Network and Subnets used by the cluster. If empty, the value is same as ResourceGroupName.",
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "description": "resourceGroupName is the Resource Group for new Azure resources created for the cluster.",
                      "type": "string"
                    }
                  }
                },
                "baremetal": {
                  "description": "BareMetal contains settings specific to the BareMetal platform.",
                  "type": "object",
                  "properties": {
                    "apiServerInternalIP": {
                      "description": "apiServerInternalIP is an IP address to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. It is the IP that the Infrastructure.status.apiServerInternalURI points to. It is the IP for a self-hosted load balancer in front of the API servers.",
                      "type": "string"
                    },
                    "ingressIP": {
                      "description": "ingressIP is an external IP which routes to the default ingress controller. The IP is a suitable target of a wildcard DNS record used to resolve default route host names.",
                      "type": "string"
                    },
                    "nodeDNSIP": {
                      "description": "nodeDNSIP is the IP address for the internal DNS used by the nodes. Unlike the one managed by the DNS operator, `NodeDNSIP` provides name resolution for the nodes themselves. There is no DNS-as-a-service for BareMetal deployments. In order to minimize necessary changes to the datacenter DNS, a DNS service is hosted as a static pod to serve those hostnames to the nodes in the cluster.",
                      "type": "string"
                    }
                  }
                },
                "gcp": {
                  "description": "GCP contains settings specific to the Google Cloud Platform infrastructure provider.",
                  "type": "object",
                  "properties": {
                    "projectID": {
                      "description": "resourceGroupName is the Project ID for new GCP resources created for the cluster.",
                      "type": "string"
                    },
                    "region": {
                      "description": "region holds the region for new GCP resources created for the cluster.",
                      "type": "string"
                    }
                  }
                },
                "ibmcloud": {
                  "description": "IBMCloud contains settings specific to the IBMCloud infrastructure provider.",
                  "type": "object",
                  "properties": {
                    "location": {
                      "description": "Location is where the cluster has been deployed",
                      "type": "string"
                    },
                    "providerType": {
                      "description": "ProviderType indicates the type of cluster that was created",
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "description": "ResourceGroupName is the Resource Group for new IBMCloud resources created for the cluster.",
                      "type": "string"
                    }
                  }
                },
                "openstack": {
                  "description": "OpenStack contains settings specific to the OpenStack infrastructure provider.",
                  "type": "object",
                  "properties": {
                    "apiServerInternalIP": {
                      "description": "apiServerInternalIP is an IP address to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. It is the IP that the Infrastructure.status.apiServerInternalURI points to. It is the IP for a self-hosted load balancer in front of the API servers.",
                      "type": "string"
                    },
                    "cloudName": {
                      "description": "cloudName is the name of the desired OpenStack cloud in the client configuration file (`clouds.yaml`).",
                      "type": "string"
                    },
                    "ingressIP": {
                      "description": "ingressIP is an external IP which routes to the default ingress controller. The IP is a suitable target of a wildcard DNS record used to resolve default route host names.",
                      "type": "string"
                    },
                    "nodeDNSIP": {
                      "description": "nodeDNSIP is the IP address for the internal DNS used by the nodes. Unlike the one managed by the DNS operator, `NodeDNSIP` provides name resolution for the nodes themselves. There is no DNS-as-a-service for OpenStack deployments. In order to minimize necessary changes to the datacenter DNS, a DNS service is hosted as a static pod to serve those hostnames to the nodes in the cluster.",
                      "type": "string"
                    }
                  }
                },
                "ovirt": {
                  "description": "Ovirt contains settings specific to the oVirt infrastructure provider.",
                  "type": "object",
                  "properties": {
                    "apiServerInternalIP": {
                      "description": "apiServerInternalIP is an IP address to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. It is the IP that the Infrastructure.status.apiServerInternalURI points to. It is the IP for a self-hosted load balancer in front of the API servers.",
                      "type": "string"
                    },
                    "ingressIP": {
                      "description": "ingressIP is an external IP which routes to the default ingress controller. The IP is a suitable target of a wildcard DNS record used to resolve default route host names.",
                      "type": "string"
                    },
                    "nodeDNSIP": {
                      "description": "deprecated: as of 4.6, this field is no longer set or honored.  It will be removed in a future release.",
                      "type": "string"
                    }
                  }
                },
                "type": {
                  "description": "type is the underlying infrastructure provider for the cluster. This value controls whether infrastructure automation such as service load balancers, dynamic volume provisioning, machine creation and deletion, and other integrations are enabled. If None, no infrastructure automation is enabled. Allowed values are \"AWS\", \"Azure\", \"BareMetal\", \"GCP\", \"Libvirt\", \"OpenStack\", \"VSphere\", \"oVirt\", and \"None\". Individual components may not support all platforms, and must handle unrecognized platforms as None if they do not support that platform. \n This value will be synced with to the `status.platform` and `status.platformStatus.type`. Currently this value cannot be changed once set.",
                  "type": "string",
                  "enum": [
                    "",
                    "AWS",
                    "Azure",
                    "BareMetal",
                    "GCP",
                    "Libvirt",
                    "OpenStack",
                    "None",
                    "VSphere",
                    "oVirt",
                    "IBMCloud"
                  ]
                },
                "vsphere": {
                  "description": "VSphere contains settings specific to the VSphere infrastructure provider.",
                  "type": "object",
                  "properties": {
                    "apiServerInternalIP": {
                      "description": "apiServerInternalIP is an IP address to contact the Kubernetes API server that can be used by components inside the cluster, like kubelets using the infrastructure rather than Kubernetes networking. It is the IP that the Infrastructure.status.apiServerInternalURI points to. It is the IP for a self-hosted load balancer in front of the API servers.",
                      "type": "string"
                    },
                    "ingressIP": {
                      "description": "ingressIP is an external IP which routes to the default ingress controller. The IP is a suitable target of a wildcard DNS record used to resolve default route host names.",
                      "type": "string"
                    },
                    "nodeDNSIP": {
                      "description": "nodeDNSIP is the IP address for the internal DNS used by the nodes. Unlike the one managed by the DNS operator, `NodeDNSIP` provides name resolution for the nodes themselves. There is no DNS-as-a-service for vSphere deployments. In order to minimize necessary changes to the datacenter DNS, a DNS service is hosted as a static pod to serve those hostnames to the nodes in the cluster.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.openshift.io",
          "kind": "Infrastructure",
          "version": "v1"
        }
      ]
    },
    "io.openshift.config.v1.InfrastructureList": {
      "description": "InfrastructureList is a list of Infrastructure",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "config.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of infrastructures. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.config.v1.Infrastructure"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "InfrastructureList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.openshift.io",
          "kind": "InfrastructureList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.config.v1.Ingress": {
      "description": "Ingress holds cluster-wide information about ingress, including the default ingress domain used for routes. The canonical name is `cluster`.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "config.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Ingress"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec holds user settable values for configuration",
          "type": "object",
          "properties": {
            "domain": {
              "description": "domain is used to generate a default host name for a route when the route's host name is empty. The generated host name will follow this pattern: \"<route-name>.<route-namespace>.<domain>\". \n It is also used as the default wildcard domain suffix for ingress. The default ingresscontroller domain will follow this pattern: \"*.<domain>\". \n Once set, changing domain is not currently supported.",
              "type": "string"
            }
          }
        },
        "status": {
          "description": "status holds observed values from the cluster. They may not be overridden.",
          "type": "object"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.openshift.io",
          "kind": "Ingress",
          "version": "v1"
        }
      ]
    },
    "io.openshift.config.v1.IngressList": {
      "description": "IngressList is a list of Ingress",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "config.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of ingresses. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.config.v1.Ingress"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "IngressList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.openshift.io",
          "kind": "IngressList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.config.v1.Network": {
      "description": "Network holds cluster-wide information about Network. The canonical name is `cluster`. It is used to configure the desired network configuration, such as: IP address pools for services/pod IPs, network plugin, etc. Please view network.spec for an explanation on what applies when configuring this resource.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "config.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Network"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec holds user settable values for configuration. As a general rule, this SHOULD NOT be read directly. Instead, you should consume the NetworkStatus, as it indicates the currently deployed configuration. Currently, most spec fields are immutable after installation. Please view the individual ones for further details on each.",
          "type": "object",
          "properties": {
            "clusterNetwork": {
              "description": "IP address pool to use for pod IPs. This field is immutable after installation.",
              "type": "array",
              "items": {
                "description": "ClusterNetworkEntry is a contiguous block of IP addresses from which pod IPs are allocated.",
                "type": "object",
                "properties": {
                  "cidr": {
                    "description": "The complete block for pod IPs.",
                    "type": "string"
                  },
                  "hostPrefix": {
                    "description": "The size (prefix) of block to allocate to each node. If this field is not used by the plugin, it can be left unset.",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0
                  }
                }
              }
            },
            "externalIP": {
              "description": "externalIP defines configuration for controllers that affect Service.ExternalIP. If nil, then ExternalIP is not allowed to be set.",
              "type": "object",
              "properties": {
                "autoAssignCIDRs": {
                  "description": "autoAssignCIDRs is a list of CIDRs from which to automatically assign Service.ExternalIP. These are assigned when the service is of type LoadBalancer. In general, this is only useful for bare-metal clusters. In Openshift 3.x, this was misleadingly called \"IngressIPs\". Automatically assigned External IPs are not affected by any ExternalIPPolicy rules. Currently, only one entry may be provided.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "policy is a set of restrictions applied to the ExternalIP field. If nil or empty, then ExternalIP is not allowed to be set.",
                  "type": "object",
                  "properties": {
                    "allowedCIDRs": {
                      "description": "allowedCIDRs is the list of allowed CIDRs.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "rejectedCIDRs": {
                      "description": "rejectedCIDRs is the list of disallowed CIDRs. These take precedence over allowedCIDRs.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "networkType": {
              "description": "NetworkType is the plugin that is to be deployed (e.g. OpenShiftSDN). This should match a value that the cluster-network-operator understands, or else no networking will be installed. Currently supported values are: - OpenShiftSDN This field is immutable after installation.",
              "type": "string"
            },
            "serviceNetwork": {
              "description": "IP address pool for services. Currently, we only support a single entry here. This field is immutable after installation.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "serviceNodePortRange": {
              "description": "The port range allowed for Services of type NodePort. If not specified, the default of 30000-32767 will be used. Such Services without a NodePort specified will have one automatically allocated from this range. This parameter can be updated after the cluster is installed.",
              "type": "string",
              "pattern": "^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])-([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$"
            }
          }
        },
        "status": {
          "description": "status holds observed values from the cluster. They may not be overridden.",
          "type": "object",
          "properties": {
            "clusterNetwork": {
              "description": "IP address pool to use for pod IPs.",
              "type": "array",
              "items": {
                "description": "ClusterNetworkEntry is a contiguous block of IP addresses from which pod IPs are allocated.",
                "type": "object",
                "properties": {
                  "cidr": {
                    "description": "The complete block for pod IPs.",
                    "type": "string"
                  },
                  "hostPrefix": {
                    "description": "The size (prefix) of block to allocate to each node. If this field is not used by the plugin, it can be left unset.",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0
                  }
                }
              }
            },
            "clusterNetworkMTU": {
              "description": "ClusterNetworkMTU is the MTU for inter-pod networking.",
              "type": "integer"
            },
            "networkType": {
              "description": "NetworkType is the plugin that is deployed (e.g. OpenShiftSDN).",
              "type": "string"
            },
            "serviceNetwork": {
              "description": "IP address pool for services. Currently, we only support a single entry here.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.openshift.io",
          "kind": "Network",
          "version": "v1"
        }
      ]
    },
    "io.openshift.config.v1.NetworkList": {
      "description": "NetworkList is a list of Network",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "config.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of networks. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.config.v1.Network"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "NetworkList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.openshift.io",
          "kind": "NetworkList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.config.v1.OAuth": {
      "description": "OAuth holds cluster-wide information about OAuth.  The canonical name is `cluster`. It is used to configure the integrated OAuth server. This configuration is only honored when the top level Authentication config has type set to IntegratedOAuth.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "config.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "OAuth"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec holds user settable values for configuration",
          "type": "object",
          "properties": {
            "identityProviders": {
              "description": "identityProviders is an ordered list of ways for a user to identify themselves. When this list is empty, no identities are provisioned for users.",
              "type": "array",
              "items": {
                "description": "IdentityProvider provides identities for users authenticating using credentials",
                "type": "object",
                "properties": {
                  "basicAuth": {
                    "description": "basicAuth contains configuration options for the BasicAuth IdP",
                    "type": "object",
                    "properties": {
                      "ca": {
                        "description": "ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key \"ca.crt\" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "name is the metadata.name of the referenced config map",
                            "type": "string"
                          }
                        }
                      },
                      "tlsClientCert": {
                        "description": "tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key \"tls.crt\" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "name is the metadata.name of the referenced secret",
                            "type": "string"
                          }
                        }
                      },
                      "tlsClientKey": {
                        "description": "tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key \"tls.key\" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "name is the metadata.name of the referenced secret",
                            "type": "string"
                          }
                        }
                      },
                      "url": {
                        "description": "url is the remote URL to connect to",
                        "type": "string"
                      }
                    }
                  },
                  "github": {
                    "description": "github enables user authentication using GitHub credentials",
                    "type": "object",
                    "properties": {
                      "ca": {
                        "description": "ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key \"ca.crt\" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. This can only be configured when hostname is set to a non-empty value. The namespace for this config map is openshift-config.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "name is the metadata.name of the referenced config map",
                            "type": "string"
                          }
                        }
                      },
                      "clientID": {
                        "description": "clientID is the oauth client ID",
                        "type": "string"
                      },
                      "clientSecret": {
                        "description": "clientSecret is a required reference to the secret by name containing the oauth client secret. The key \"clientSecret\" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "name is the metadata.name of the referenced secret",
                            "type": "string"
                          }
                        }
                      },
                      "hostname": {
                        "description": "hostname is the optional domain (e.g. \"mycompany.com\") for use with a hosted instance of GitHub Enterprise. It must match the GitHub Enterprise settings value configured at /setup/settings#hostname.",
                        "type": "string"
                      },
                      "organizations": {
                        "description": "organizations optionally restricts which organizations are allowed to log in",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "teams": {
                        "description": "teams optionally restricts which teams are allowed to log in. Format is <org>/<team>.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "gitlab": {
                    "description": "gitlab enables user authentication using GitLab credentials",
                    "type": "object",
                    "properties": {
                      "ca": {
                        "description": "ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key \"ca.crt\" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "name is the metadata.name of the referenced config map",
                            "type": "string"
                          }
                        }
                      },
                      "clientID": {
                        "description": "clientID is the oauth client ID",
                        "type": "string"
                      },
                      "clientSecret": {
                        "description": "clientSecret is a required reference to the secret by name containing the oauth client secret. The key \"clientSecret\" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "name is the metadata.name of the referenced secret",
                            "type": "string"
                          }
                        }
                      },
                      "url": {
                        "description": "url is the oauth server base URL",
                        "type": "string"
                      }
                    }
                  },
                  "google": {
                    "description": "google enables user authentication using Google credentials",
                    "type": "object",
                    "properties": {
                      "clientID": {
                        "description": "clientID is the oauth client ID",
                        "type": "string"
                      },
                      "clientSecret": {
                        "description": "clientSecret is a required reference to the secret by name containing the oauth client secret. The key \"clientSecret\" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "name is the metadata.name of the referenced secret",
                            "type": "string"
                          }
                        }
                      },
                      "hostedDomain": {
                        "description": "hostedDomain is the optional Google App domain (e.g. \"mycompany.com\") to restrict logins to",
                        "type": "string"
                      }
                    }
                  },
                  "htpasswd": {
                    "description": "htpasswd enables user authentication using an HTPasswd file to validate credentials",
                    "type": "object",
                    "properties": {
                      "fileData": {
                        "description": "fileData is a required reference to a secret by name containing the data to use as the htpasswd file. The key \"htpasswd\" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. If the specified htpasswd data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "name is the metadata.name of the referenced secret",
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "keystone": {
                    "description": "keystone enables user authentication using keystone password credentials",
                    "type": "object",
                    "properties": {
                      "ca": {
                        "description": "ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key \"ca.crt\" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "name is the metadata.name of the referenced config map",
                            "type": "string"
                          }
                        }
                      },
                      "domainName": {
                        "description": "domainName is required for keystone v3",
                        "type": "string"
                      },
                      "tlsClientCert": {
                        "description": "tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key \"tls.crt\" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "name is the metadata.name of the referenced secret",
                            "type": "string"
                          }
                        }
                      },
                      "tlsClientKey": {
                        "description": "tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key \"tls.key\" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "name is the metadata.name of the referenced secret",
                            "type": "string"
                          }
                        }
                      },
                      "url": {
                        "description": "url is the remote URL to connect to",
                        "type": "string"
                      }
                    }
                  },
                  "ldap": {
                    "description": "ldap enables user authentication using LDAP credentials",
                    "type": "object",
                    "properties": {
                      "attributes": {
                        "description": "attributes maps LDAP attributes to identities",
                        "type": "object",
                        "properties": {
                          "email": {
                            "description": "email is the list of attributes whose values should be used as the email address. Optional. If unspecified, no email is set for the identity",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "id": {
                            "description": "id is the list of attributes whose values should be used as the user ID. Required. First non-empty attribute is used. At least one attribute is required. If none of the listed attribute have a value, authentication fails. LDAP standard identity attribute is \"dn\"",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "name": {
                            "description": "name is the list of attributes whose values should be used as the display name. Optional. If unspecified, no display name is set for the identity LDAP standard display name attribute is \"cn\"",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "preferredUsername": {
                            "description": "preferredUsername is the list of attributes whose values should be used as the preferred username. LDAP standard login attribute is \"uid\"",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "bindDN": {
                        "description": "bindDN is an optional DN to bind with during the search phase.",
                        "type": "string"
                      },
                      "bindPassword": {
                        "description": "bindPassword is an optional reference to a secret by name containing a password to bind with during the search phase. The key \"bindPassword\" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "name is the metadata.name of the referenced secret",
                            "type": "string"
                          }
                        }
                      },
                      "ca": {
                        "description": "ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key \"ca.crt\" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "name is the metadata.name of the referenced config map",
                            "type": "string"
                          }
                        }
                      },
                      "insecure": {
                        "description": "insecure, if true, indicates the connection should not use TLS WARNING: Should not be set to `true` with the URL scheme \"ldaps://\" as \"ldaps://\" URLs always          attempt to connect using TLS, even when `insecure` is set to `true` When `true`, \"ldap://\" URLS connect insecurely. When `false`, \"ldap://\" URLs are upgraded to a TLS connection using StartTLS as specified in https://tools.ietf.org/html/rfc2830.",
                        "type": "boolean"
                      },
                      "url": {
                        "description": "url is an RFC 2255 URL which specifies the LDAP search parameters to use. The syntax of the URL is: ldap://host:port/basedn?attribute?scope?filter",
                        "type": "string"
                      }
                    }
                  },
                  "mappingMethod": {
                    "description": "mappingMethod determines how identities from this provider are mapped to users Defaults to \"claim\"",
                    "type": "string"
                  },
                  "name": {
                    "description": "name is used to qualify the identities returned by this provider. - It MUST be unique and not shared by any other identity provider used - It MUST be a valid path segment: name cannot equal \".\" or \"..\" or contain \"/\" or \"%\" or \":\"   Ref: https://godoc.org/github.com/openshift/origin/pkg/user/apis/user/validation#ValidateIdentityProviderName",
                    "type": "string"
                  },
                  "openID": {
                    "description": "openID enables user authentication using OpenID credentials",
                    "type": "object",
                    "properties": {
                      "ca": {
                        "description": "ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key \"ca.crt\" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "name is the metadata.name of the referenced config map",
                            "type": "string"
                          }
                        }
                      },
                      "claims": {
                        "description": "claims mappings",
                        "type": "object",
                        "properties": {
                          "email": {
                            "description": "email is the list of claims whose values should be used as the email address. Optional. If unspecified, no email is set for the identity",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "name": {
                            "description": "name is the list of claims whose values should be used as the display name. Optional. If unspecified, no display name is set for the identity",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "preferredUsername": {
                            "description": "preferredUsername is the list of claims whose values should be used as the preferred username. If unspecified, the preferred username is determined from the value of the sub claim",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "clientID": {
                        "description": "clientID is the oauth client ID",
                        "type": "string"
                      },
                      "clientSecret": {
                        "description": "clientSecret is a required reference to the secret by name containing the oauth client secret. The key \"clientSecret\" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "name is the metadata.name of the referenced secret",
                            "type": "string"
                          }
                        }
                      },
                      "extraAuthorizeParameters": {
                        "description": "extraAuthorizeParameters are any custom parameters to add to the authorize request.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "extraScopes": {
                        "description": "extraScopes are any scopes to request in addition to the standard \"openid\" scope.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "issuer": {
                        "description": "issuer is the URL that the OpenID Provider asserts as its Issuer Identifier. It must use the https scheme with no query or fragment component.",
                        "type": "string"
                      }
                    }
                  },
                  "requestHeader": {
                    "description": "requestHeader enables user authentication using request header credentials",
                    "type": "object",
                    "properties": {
                      "ca": {
                        "description": "ca is a required reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. Specifically, it allows verification of incoming requests to prevent header spoofing. The key \"ca.crt\" is used to locate the data. If the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. The namespace for this config map is openshift-config.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "name is the metadata.name of the referenced config map",
                            "type": "string"
                          }
                        }
                      },
                      "challengeURL": {
                        "description": "challengeURL is a URL to redirect unauthenticated /authorize requests to Unauthenticated requests from OAuth clients which expect WWW-Authenticate challenges will be redirected here. ${url} is replaced with the current URL, escaped to be safe in a query parameter   https://www.example.com/sso-login?then=${url} ${query} is replaced with the current query string   https://www.example.com/auth-proxy/oauth/authorize?${query} Required when challenge is set to true.",
                        "type": "string"
                      },
                      "clientCommonNames": {
                        "description": "clientCommonNames is an optional list of common names to require a match from. If empty, any client certificate validated against the clientCA bundle is considered authoritative.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "emailHeaders": {
                        "description": "emailHeaders is the set of headers to check for the email address",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "headers": {
                        "description": "headers is the set of headers to check for identity information",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "loginURL": {
                        "description": "loginURL is a URL to redirect unauthenticated /authorize requests to Unauthenticated requests from OAuth clients which expect interactive logins will be redirected here ${url} is replaced with the current URL, escaped to be safe in a query parameter   https://www.example.com/sso-login?then=${url} ${query} is replaced with the current query string   https://www.example.com/auth-proxy/oauth/authorize?${query} Required when login is set to true.",
                        "type": "string"
                      },
                      "nameHeaders": {
                        "description": "nameHeaders is the set of headers to check for the display name",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "preferredUsernameHeaders": {
                        "description": "preferredUsernameHeaders is the set of headers to check for the preferred username",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "type": {
                    "description": "type identifies the identity provider type for this entry.",
                    "type": "string"
                  }
                }
              }
            },
            "templates": {
              "description": "templates allow you to customize pages like the login page.",
              "type": "object",
              "properties": {
                "error": {
                  "description": "error is the name of a secret that specifies a go template to use to render error pages during the authentication or grant flow. The key \"errors.html\" is used to locate the template data. If specified and the secret or expected key is not found, the default error page is used. If the specified template is not valid, the default error page is used. If unspecified, the default error page is used. The namespace for this secret is openshift-config.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "name is the metadata.name of the referenced secret",
                      "type": "string"
                    }
                  }
                },
                "login": {
                  "description": "login is the name of a secret that specifies a go template to use to render the login page. The key \"login.html\" is used to locate the template data. If specified and the secret or expected key is not found, the default login page is used. If the specified template is not valid, the default login page is used. If unspecified, the default login page is used. The namespace for this secret is openshift-config.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "name is the metadata.name of the referenced secret",
                      "type": "string"
                    }
                  }
                },
                "providerSelection": {
                  "description": "providerSelection is the name of a secret that specifies a go template to use to render the provider selection page. The key \"providers.html\" is used to locate the template data. If specified and the secret or expected key is not found, the default provider selection page is used. If the specified template is not valid, the default provider selection page is used. If unspecified, the default provider selection page is used. The namespace for this secret is openshift-config.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "name is the metadata.name of the referenced secret",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "tokenConfig": {
              "description": "tokenConfig contains options for authorization and access tokens",
              "type": "object",
              "properties": {
                "accessTokenInactivityTimeout": {
                  "description": "accessTokenInactivityTimeout defines the token inactivity timeout for tokens granted by any client. The value represents the maximum amount of time that can occur between consecutive uses of the token. Tokens become invalid if they are not used within this temporal window. The user will need to acquire a new token to regain access once a token times out. Takes valid time duration string such as \"5m\", \"1.5h\" or \"2h45m\". The minimum allowed value for duration is 300s (5 minutes). If the timeout is configured per client, then that value takes precedence. If the timeout value is not specified and the client does not override the value, then tokens are valid until their lifetime.",
                  "type": "string"
                },
                "accessTokenInactivityTimeoutSeconds": {
                  "description": "accessTokenInactivityTimeoutSeconds - DEPRECATED: setting this field has no effect.",
                  "type": "integer",
                  "format": "int32"
                },
                "accessTokenMaxAgeSeconds": {
                  "description": "accessTokenMaxAgeSeconds defines the maximum age of access tokens",
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "status": {
          "description": "status holds observed values from the cluster. They may not be overridden.",
          "type": "object"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.openshift.io",
          "kind": "OAuth",
          "version": "v1"
        }
      ]
    },
    "io.openshift.config.v1.OAuthList": {
      "description": "OAuthList is a list of OAuth",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "config.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of oauths. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.config.v1.OAuth"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "OAuthList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.openshift.io",
          "kind": "OAuthList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.config.v1.OperatorHub": {
      "description": "OperatorHub is the Schema for the operatorhubs API. It can be used to change the state of the default hub sources for OperatorHub on the cluster from enabled to disabled and vice versa.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "config.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "OperatorHub"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "OperatorHubSpec defines the desired state of OperatorHub",
          "type": "object",
          "properties": {
            "disableAllDefaultSources": {
              "description": "disableAllDefaultSources allows you to disable all the default hub sources. If this is true, a specific entry in sources can be used to enable a default source. If this is false, a specific entry in sources can be used to disable or enable a default source.",
              "type": "boolean"
            },
            "sources": {
              "description": "sources is the list of default hub sources and their configuration. If the list is empty, it implies that the default hub sources are enabled on the cluster unless disableAllDefaultSources is true. If disableAllDefaultSources is true and sources is not empty, the configuration present in sources will take precedence. The list of default hub sources and their current state will always be reflected in the status block.",
              "type": "array",
              "items": {
                "description": "HubSource is used to specify the hub source and its configuration",
                "type": "object",
                "properties": {
                  "disabled": {
                    "description": "disabled is used to disable a default hub source on cluster",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "name is the name of one of the default hub sources",
                    "type": "string",
                    "maxLength": 253,
                    "minLength": 1
                  }
                }
              }
            }
          }
        },
        "status": {
          "description": "OperatorHubStatus defines the observed state of OperatorHub. The current state of the default hub sources will always be reflected here.",
          "type": "object",
          "properties": {
            "sources": {
              "description": "sources encapsulates the result of applying the configuration for each hub source",
              "type": "array",
              "items": {
                "description": "HubSourceStatus is used to reflect the current state of applying the configuration to a default source",
                "type": "object",
                "properties": {
                  "disabled": {
                    "description": "disabled is used to disable a default hub source on cluster",
                    "type": "boolean"
                  },
                  "message": {
                    "description": "message provides more information regarding failures",
                    "type": "string"
                  },
                  "name": {
                    "description": "name is the name of one of the default hub sources",
                    "type": "string",
                    "maxLength": 253,
                    "minLength": 1
                  },
                  "status": {
                    "description": "status indicates success or failure in applying the configuration",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.openshift.io",
          "kind": "OperatorHub",
          "version": "v1"
        }
      ]
    },
    "io.openshift.config.v1.OperatorHubList": {
      "description": "OperatorHubList is a list of OperatorHub",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "config.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of operatorhubs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.config.v1.OperatorHub"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "OperatorHubList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.openshift.io",
          "kind": "OperatorHubList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.config.v1.Project": {
      "description": "Project holds cluster-wide information about Project.  The canonical name is `cluster`",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "config.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Project"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec holds user settable values for configuration",
          "type": "object",
          "properties": {
            "projectRequestMessage": {
              "description": "projectRequestMessage is the string presented to a user if they are unable to request a project via the projectrequest api endpoint",
              "type": "string"
            },
            "projectRequestTemplate": {
              "description": "projectRequestTemplate is the template to use for creating projects in response to projectrequest. This must point to a template in 'openshift-config' namespace. It is optional. If it is not specified, a default template is used.",
              "type": "object",
              "properties": {
                "name": {
                  "description": "name is the metadata.name of the referenced project request template",
                  "type": "string"
                }
              }
            }
          }
        },
        "status": {
          "description": "status holds observed values from the cluster. They may not be overridden.",
          "type": "object"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.openshift.io",
          "kind": "Project",
          "version": "v1"
        }
      ]
    },
    "io.openshift.config.v1.ProjectList": {
      "description": "ProjectList is a list of Project",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "config.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of projects. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.config.v1.Project"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ProjectList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.openshift.io",
          "kind": "ProjectList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.config.v1.Proxy": {
      "description": "Proxy holds cluster-wide information on how to configure default proxies for the cluster. The canonical name is `cluster`",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "config.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Proxy"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds user-settable values for the proxy configuration",
          "type": "object",
          "properties": {
            "httpProxy": {
              "description": "httpProxy is the URL of the proxy for HTTP requests.  Empty means unset and will not result in an env var.",
              "type": "string"
            },
            "httpsProxy": {
              "description": "httpsProxy is the URL of the proxy for HTTPS requests.  Empty means unset and will not result in an env var.",
              "type": "string"
            },
            "noProxy": {
              "description": "noProxy is a comma-separated list of hostnames and/or CIDRs for which the proxy should not be used. Empty means unset and will not result in an env var.",
              "type": "string"
            },
            "readinessEndpoints": {
              "description": "readinessEndpoints is a list of endpoints used to verify readiness of the proxy.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "trustedCA": {
              "description": "trustedCA is a reference to a ConfigMap containing a CA certificate bundle. The trustedCA field should only be consumed by a proxy validator. The validator is responsible for reading the certificate bundle from the required key \"ca-bundle.crt\", merging it with the system default trust bundle, and writing the merged trust bundle to a ConfigMap named \"trusted-ca-bundle\" in the \"openshift-config-managed\" namespace. Clients that expect to make proxy connections must use the trusted-ca-bundle for all HTTPS requests to the proxy, and may use the trusted-ca-bundle for non-proxy HTTPS requests as well. \n The namespace for the ConfigMap referenced by trustedCA is \"openshift-config\". Here is an example ConfigMap (in yaml): \n apiVersion: v1 kind: ConfigMap metadata:  name: user-ca-bundle  namespace: openshift-config  data:    ca-bundle.crt: |      -----BEGIN CERTIFICATE-----      Custom CA certificate bundle.      -----END CERTIFICATE-----",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "name is the metadata.name of the referenced config map",
                  "type": "string"
                }
              }
            }
          }
        },
        "status": {
          "description": "status holds observed values from the cluster. They may not be overridden.",
          "type": "object",
          "properties": {
            "httpProxy": {
              "description": "httpProxy is the URL of the proxy for HTTP requests.",
              "type": "string"
            },
            "httpsProxy": {
              "description": "httpsProxy is the URL of the proxy for HTTPS requests.",
              "type": "string"
            },
            "noProxy": {
              "description": "noProxy is a comma-separated list of hostnames and/or CIDRs for which the proxy should not be used.",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.openshift.io",
          "kind": "Proxy",
          "version": "v1"
        }
      ]
    },
    "io.openshift.config.v1.ProxyList": {
      "description": "ProxyList is a list of Proxy",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "config.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of proxies. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.config.v1.Proxy"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ProxyList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.openshift.io",
          "kind": "ProxyList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.config.v1.Scheduler": {
      "description": "Scheduler holds cluster-wide config information to run the Kubernetes Scheduler and influence its placement decisions. The canonical name for this config is `cluster`.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "config.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Scheduler"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec holds user settable values for configuration",
          "type": "object",
          "properties": {
            "defaultNodeSelector": {
              "description": "defaultNodeSelector helps set the cluster-wide default node selector to restrict pod placement to specific nodes. This is applied to the pods created in all namespaces and creates an intersection with any existing nodeSelectors already set on a pod, additionally constraining that pod's selector. For example, defaultNodeSelector: \"type=user-node,region=east\" would set nodeSelector field in pod spec to \"type=user-node,region=east\" to all pods created in all namespaces. Namespaces having project-wide node selectors won't be impacted even if this field is set. This adds an annotation section to the namespace. For example, if a new namespace is created with node-selector='type=user-node,region=east', the annotation openshift.io/node-selector: type=user-node,region=east gets added to the project. When the openshift.io/node-selector annotation is set on the project the value is used in preference to the value we are setting for defaultNodeSelector field. For instance, openshift.io/node-selector: \"type=user-node,region=west\" means that the default of \"type=user-node,region=east\" set in defaultNodeSelector would not be applied.",
              "type": "string"
            },
            "mastersSchedulable": {
              "description": "MastersSchedulable allows masters nodes to be schedulable. When this flag is turned on, all the master nodes in the cluster will be made schedulable, so that workload pods can run on them. The default value for this field is false, meaning none of the master nodes are schedulable. Important Note: Once the workload pods start running on the master nodes, extreme care must be taken to ensure that cluster-critical control plane components are not impacted. Please turn on this field after doing due diligence.",
              "type": "boolean"
            },
            "policy": {
              "description": "policy is a reference to a ConfigMap containing scheduler policy which has user specified predicates and priorities. If this ConfigMap is not available scheduler will default to use DefaultAlgorithmProvider. The namespace for this configmap is openshift-config.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "name is the metadata.name of the referenced config map",
                  "type": "string"
                }
              }
            }
          }
        },
        "status": {
          "description": "status holds observed values from the cluster. They may not be overridden.",
          "type": "object"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.openshift.io",
          "kind": "Scheduler",
          "version": "v1"
        }
      ]
    },
    "io.openshift.config.v1.SchedulerList": {
      "description": "SchedulerList is a list of Scheduler",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "config.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of schedulers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.config.v1.Scheduler"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "SchedulerList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.openshift.io",
          "kind": "SchedulerList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.console.v1.ConsoleCLIDownload": {
      "description": "ConsoleCLIDownload is an extension for configuring openshift web console command line interface (CLI) downloads.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "console.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ConsoleCLIDownload"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "ConsoleCLIDownloadSpec is the desired cli download configuration.",
          "type": "object",
          "required": [
            "description",
            "displayName",
            "links"
          ],
          "properties": {
            "description": {
              "description": "description is the description of the CLI download (can include markdown).",
              "type": "string"
            },
            "displayName": {
              "description": "displayName is the display name of the CLI download.",
              "type": "string"
            },
            "links": {
              "description": "links is a list of objects that provide CLI download link details.",
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "href"
                ],
                "properties": {
                  "href": {
                    "description": "href is the absolute secure URL for the link (must use https)",
                    "type": "string",
                    "pattern": "^https://"
                  },
                  "text": {
                    "description": "text is the display text for the link",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "console.openshift.io",
          "kind": "ConsoleCLIDownload",
          "version": "v1"
        }
      ]
    },
    "io.openshift.console.v1.ConsoleCLIDownloadList": {
      "description": "ConsoleCLIDownloadList is a list of ConsoleCLIDownload",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "console.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of consoleclidownloads. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.console.v1.ConsoleCLIDownload"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ConsoleCLIDownloadList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "console.openshift.io",
          "kind": "ConsoleCLIDownloadList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.console.v1.ConsoleExternalLogLink": {
      "description": "ConsoleExternalLogLink is an extension for customizing OpenShift web console log links.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "console.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ConsoleExternalLogLink"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "ConsoleExternalLogLinkSpec is the desired log link configuration. The log link will appear on the logs tab of the pod details page.",
          "type": "object",
          "required": [
            "hrefTemplate",
            "text"
          ],
          "properties": {
            "hrefTemplate": {
              "description": "hrefTemplate is an absolute secure URL (must use https) for the log link including variables to be replaced. Variables are specified in the URL with the format ${variableName}, for instance, ${containerName} and will be replaced with the corresponding values from the resource. Resource is a pod. Supported variables are: - ${resourceName} - name of the resource which containes the logs - ${resourceUID} - UID of the resource which contains the logs               - e.g. `11111111-2222-3333-4444-555555555555` - ${containerName} - name of the resource's container that contains the logs - ${resourceNamespace} - namespace of the resource that contains the logs - ${resourceNamespaceUID} - namespace UID of the resource that contains the logs - ${podLabels} - JSON representation of labels matching the pod with the logs             - e.g. `{\"key1\":\"value1\",\"key2\":\"value2\"}` \n e.g., https://example.com/logs?resourceName=${resourceName}&containerName=${containerName}&resourceNamespace=${resourceNamespace}&podLabels=${podLabels}",
              "type": "string",
              "pattern": "^https://"
            },
            "namespaceFilter": {
              "description": "namespaceFilter is a regular expression used to restrict a log link to a matching set of namespaces (e.g., `^openshift-`). The string is converted into a regular expression using the JavaScript RegExp constructor. If not specified, links will be displayed for all the namespaces.",
              "type": "string"
            },
            "text": {
              "description": "text is the display text for the link",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "console.openshift.io",
          "kind": "ConsoleExternalLogLink",
          "version": "v1"
        }
      ]
    },
    "io.openshift.console.v1.ConsoleExternalLogLinkList": {
      "description": "ConsoleExternalLogLinkList is a list of ConsoleExternalLogLink",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "console.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of consoleexternalloglinks. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.console.v1.ConsoleExternalLogLink"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ConsoleExternalLogLinkList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "console.openshift.io",
          "kind": "ConsoleExternalLogLinkList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.console.v1.ConsoleLink": {
      "description": "ConsoleLink is an extension for customizing OpenShift web console links.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "console.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ConsoleLink"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "ConsoleLinkSpec is the desired console link configuration.",
          "type": "object",
          "required": [
            "href",
            "location",
            "text"
          ],
          "properties": {
            "applicationMenu": {
              "description": "applicationMenu holds information about section and icon used for the link in the application menu, and it is applicable only when location is set to ApplicationMenu.",
              "type": "object",
              "required": [
                "section"
              ],
              "properties": {
                "imageURL": {
                  "description": "imageUrl is the URL for the icon used in front of the link in the application menu. The URL must be an HTTPS URL or a Data URI. The image should be square and will be shown at 24x24 pixels.",
                  "type": "string"
                },
                "section": {
                  "description": "section is the section of the application menu in which the link should appear. This can be any text that will appear as a subheading in the application menu dropdown. A new section will be created if the text does not match text of an existing section.",
                  "type": "string"
                }
              }
            },
            "href": {
              "description": "href is the absolute secure URL for the link (must use https)",
              "type": "string",
              "pattern": "^https://"
            },
            "location": {
              "description": "location determines which location in the console the link will be appended to (ApplicationMenu, HelpMenu, UserMenu, NamespaceDashboard).",
              "type": "string",
              "pattern": "^(ApplicationMenu|HelpMenu|UserMenu|NamespaceDashboard)$"
            },
            "namespaceDashboard": {
              "description": "namespaceDashboard holds information about namespaces in which the dashboard link should appear, and it is applicable only when location is set to NamespaceDashboard. If not specified, the link will appear in all namespaces.",
              "type": "object",
              "properties": {
                "namespaceSelector": {
                  "description": "namespaceSelector is used to select the Namespaces that should contain dashboard link by label. If the namespace labels match, dashboard link will be shown for the namespaces.",
                  "type": "object",
                  "properties": {
                    "matchExpressions": {
                      "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                      "type": "array",
                      "items": {
                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                        "type": "object",
                        "required": [
                          "key",
                          "operator"
                        ],
                        "properties": {
                          "key": {
                            "description": "key is the label key that the selector applies to.",
                            "type": "string"
                          },
                          "operator": {
                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                            "type": "string"
                          },
                          "values": {
                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "matchLabels": {
                      "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  }
                },
                "namespaces": {
                  "description": "namespaces is an array of namespace names in which the dashboard link should appear.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "text": {
              "description": "text is the display text for the link",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "console.openshift.io",
          "kind": "ConsoleLink",
          "version": "v1"
        }
      ]
    },
    "io.openshift.console.v1.ConsoleLinkList": {
      "description": "ConsoleLinkList is a list of ConsoleLink",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "console.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of consolelinks. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.console.v1.ConsoleLink"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ConsoleLinkList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "console.openshift.io",
          "kind": "ConsoleLinkList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.console.v1.ConsoleNotification": {
      "description": "ConsoleNotification is the extension for configuring openshift web console notifications.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "console.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ConsoleNotification"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "ConsoleNotificationSpec is the desired console notification configuration.",
          "type": "object",
          "required": [
            "text"
          ],
          "properties": {
            "backgroundColor": {
              "description": "backgroundColor is the color of the background for the notification as CSS data type color.",
              "type": "string"
            },
            "color": {
              "description": "color is the color of the text for the notification as CSS data type color.",
              "type": "string"
            },
            "link": {
              "description": "link is an object that holds notification link details.",
              "type": "object",
              "required": [
                "href",
                "text"
              ],
              "properties": {
                "href": {
                  "description": "href is the absolute secure URL for the link (must use https)",
                  "type": "string",
                  "pattern": "^https://"
                },
                "text": {
                  "description": "text is the display text for the link",
                  "type": "string"
                }
              }
            },
            "location": {
              "description": "location is the location of the notification in the console. Valid values are: \"BannerTop\", \"BannerBottom\", \"BannerTopBottom\".",
              "type": "string",
              "pattern": "^(BannerTop|BannerBottom|BannerTopBottom)$"
            },
            "text": {
              "description": "text is the visible text of the notification.",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "console.openshift.io",
          "kind": "ConsoleNotification",
          "version": "v1"
        }
      ]
    },
    "io.openshift.console.v1.ConsoleNotificationList": {
      "description": "ConsoleNotificationList is a list of ConsoleNotification",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "console.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of consolenotifications. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.console.v1.ConsoleNotification"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ConsoleNotificationList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "console.openshift.io",
          "kind": "ConsoleNotificationList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.console.v1.ConsoleYAMLSample": {
      "description": "ConsoleYAMLSample is an extension for customizing OpenShift web console YAML samples.",
      "type": "object",
      "required": [
        "metadata",
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "console.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ConsoleYAMLSample"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "ConsoleYAMLSampleSpec is the desired YAML sample configuration. Samples will appear with their descriptions in a samples sidebar when creating a resources in the web console.",
          "type": "object",
          "required": [
            "description",
            "targetResource",
            "title",
            "yaml"
          ],
          "properties": {
            "description": {
              "description": "description of the YAML sample.",
              "type": "string",
              "pattern": "^(.|\\s)*\\S(.|\\s)*$"
            },
            "snippet": {
              "description": "snippet indicates that the YAML sample is not the full YAML resource definition, but a fragment that can be inserted into the existing YAML document at the user's cursor.",
              "type": "boolean"
            },
            "targetResource": {
              "description": "targetResource contains apiVersion and kind of the resource YAML sample is representating.",
              "type": "object",
              "properties": {
                "apiVersion": {
                  "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                  "type": "string"
                }
              }
            },
            "title": {
              "description": "title of the YAML sample.",
              "type": "string",
              "pattern": "^(.|\\s)*\\S(.|\\s)*$"
            },
            "yaml": {
              "description": "yaml is the YAML sample to display.",
              "type": "string",
              "pattern": "^(.|\\s)*\\S(.|\\s)*$"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "console.openshift.io",
          "kind": "ConsoleYAMLSample",
          "version": "v1"
        }
      ]
    },
    "io.openshift.console.v1.ConsoleYAMLSampleList": {
      "description": "ConsoleYAMLSampleList is a list of ConsoleYAMLSample",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "console.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of consoleyamlsamples. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.console.v1.ConsoleYAMLSample"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ConsoleYAMLSampleList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "console.openshift.io",
          "kind": "ConsoleYAMLSampleList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.helm.v1beta1.HelmChartRepository": {
      "description": "HelmChartRepository holds cluster-wide configuration for proxied Helm chart repository",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "helm.openshift.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "HelmChartRepository"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec holds user settable values for configuration",
          "type": "object",
          "properties": {
            "connectionConfig": {
              "description": "Required configuration for connecting to the chart repo",
              "type": "object",
              "properties": {
                "ca": {
                  "description": "ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key \"ca-bundle.crt\" is used to locate the data. If empty, the default system roots are used. The namespace for this config map is openshift-config.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "name is the metadata.name of the referenced config map",
                      "type": "string"
                    }
                  }
                },
                "tlsClientConfig": {
                  "description": "tlsClientConfig is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate and private key to present when connecting to the server. The key \"tls.crt\" is used to locate the client certificate. The key \"tls.key\" is used to locate the private key. The namespace for this secret is openshift-config.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "name is the metadata.name of the referenced secret",
                      "type": "string"
                    }
                  }
                },
                "url": {
                  "description": "Chart repository URL",
                  "type": "string",
                  "maxLength": 2048,
                  "pattern": "^https?:\\/\\/"
                }
              }
            },
            "description": {
              "description": "Optional human readable repository description, it can be used by UI for displaying purposes",
              "type": "string",
              "maxLength": 2048,
              "minLength": 1
            },
            "name": {
              "description": "Optional associated human readable repository name, it can be used by UI for displaying purposes",
              "type": "string",
              "maxLength": 100,
              "minLength": 1
            }
          }
        },
        "status": {
          "description": "Observed status of the repository within the cluster..",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "conditions is a list of conditions and their statuses",
              "type": "array",
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }",
                "type": "object",
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                    "type": "string",
                    "maxLength": 32768
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ]
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                    "type": "string",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "helm.openshift.io",
          "kind": "HelmChartRepository",
          "version": "v1beta1"
        }
      ]
    },
    "io.openshift.helm.v1beta1.HelmChartRepositoryList": {
      "description": "HelmChartRepositoryList is a list of HelmChartRepository",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "helm.openshift.io/v1beta1"
          ]
        },
        "items": {
          "description": "List of helmchartrepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.helm.v1beta1.HelmChartRepository"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "HelmChartRepositoryList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "helm.openshift.io",
          "kind": "HelmChartRepositoryList",
          "version": "v1beta1"
        }
      ]
    },
    "io.openshift.internal.security.v1.RangeAllocation": {
      "description": "RangeAllocation is used so we can easily expose a RangeAllocation typed for security group This is an internal API, not intended for external consumption.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "security.internal.openshift.io/v1"
          ]
        },
        "data": {
          "description": "data is a byte array representing the serialized state of a range allocation.  It is a bitmap with each bit set to one to represent a range is taken.",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "RangeAllocation"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "range": {
          "description": "range is a string representing a unique label for a range of uids, \"1000000000-2000000000/10000\".",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "security.internal.openshift.io",
          "kind": "RangeAllocation",
          "version": "v1"
        }
      ]
    },
    "io.openshift.internal.security.v1.RangeAllocationList": {
      "description": "RangeAllocationList is a list of RangeAllocation",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "security.internal.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of rangeallocations. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.internal.security.v1.RangeAllocation"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "RangeAllocationList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "security.internal.openshift.io",
          "kind": "RangeAllocationList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.machine.v1beta1.Machine": {
      "description": "/ [Machine] Machine is the Schema for the machines API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "machine.openshift.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Machine"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "/ [MachineSpec] MachineSpec defines the desired state of Machine",
          "type": "object",
          "properties": {
            "metadata": {
              "description": "ObjectMeta will autopopulate the Node created. Use this to indicate what labels, annotations, name prefix, etc., should be used when creating the Node.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "generateName": {
                  "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. \n If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). \n Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
                  "type": "string"
                },
                "labels": {
                  "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "name": {
                  "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. \n Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
                  "type": "string"
                },
                "ownerReferences": {
                  "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
                  "type": "array",
                  "items": {
                    "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
                    "type": "object",
                    "required": [
                      "apiVersion",
                      "kind",
                      "name",
                      "uid"
                    ],
                    "properties": {
                      "apiVersion": {
                        "description": "API version of the referent.",
                        "type": "string"
                      },
                      "blockOwnerDeletion": {
                        "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                        "type": "boolean"
                      },
                      "controller": {
                        "description": "If true, this reference points to the managing controller.",
                        "type": "boolean"
                      },
                      "kind": {
                        "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                        "type": "string"
                      },
                      "uid": {
                        "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "providerID": {
              "description": "ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.",
              "type": "string"
            },
            "providerSpec": {
              "description": "ProviderSpec details Provider-specific configuration to use during node creation.",
              "type": "object",
              "properties": {
                "value": {
                  "description": "Value is an inlined, serialized representation of the resource configuration. It is recommended that providers maintain their own versioned API types that should be serialized/deserialized from this field, akin to component config.",
                  "type": "object",
                  "x-kubernetes-preserve-unknown-fields": true
                }
              }
            },
            "taints": {
              "description": "The list of the taints to be applied to the corresponding Node in additive manner. This list will not overwrite any other taints added to the Node on an ongoing basis by other entities. These taints should be actively reconciled e.g. if you ask the machine controller to apply a taint and then manually remove the taint the machine controller will put it back) but not have the machine controller remove any taints",
              "type": "array",
              "items": {
                "description": "The node this Taint is attached to has the \"effect\" on any pod that does not tolerate the Taint.",
                "type": "object",
                "required": [
                  "effect",
                  "key"
                ],
                "properties": {
                  "effect": {
                    "description": "Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.",
                    "type": "string"
                  },
                  "key": {
                    "description": "Required. The taint key to be applied to a node.",
                    "type": "string"
                  },
                  "timeAdded": {
                    "description": "TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "value": {
                    "description": "The taint value corresponding to the taint key.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "status": {
          "description": "/ [MachineStatus] MachineStatus defines the observed state of Machine",
          "type": "object",
          "properties": {
            "addresses": {
              "description": "Addresses is a list of addresses assigned to the machine. Queried from cloud provider, if available.",
              "type": "array",
              "items": {
                "description": "NodeAddress contains information for the node's address.",
                "type": "object",
                "required": [
                  "address",
                  "type"
                ],
                "properties": {
                  "address": {
                    "description": "The node address.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Node address type, one of Hostname, ExternalIP or InternalIP.",
                    "type": "string"
                  }
                }
              }
            },
            "errorMessage": {
              "description": "ErrorMessage will be set in the event that there is a terminal problem reconciling the Machine and will contain a more verbose string suitable for logging and human consumption. \n This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured. \n Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.",
              "type": "string"
            },
            "errorReason": {
              "description": "ErrorReason will be set in the event that there is a terminal problem reconciling the Machine and will contain a succinct value suitable for machine interpretation. \n This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured. \n Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.",
              "type": "string"
            },
            "lastOperation": {
              "description": "LastOperation describes the last-operation performed by the machine-controller. This API should be useful as a history in terms of the latest operation performed on the specific machine. It should also convey the state of the latest-operation for example if it is still on-going, failed or completed successfully.",
              "type": "object",
              "properties": {
                "description": {
                  "description": "Description is the human-readable description of the last operation.",
                  "type": "string"
                },
                "lastUpdated": {
                  "description": "LastUpdated is the timestamp at which LastOperation API was last-updated.",
                  "type": "string",
                  "format": "date-time"
                },
                "state": {
                  "description": "State is the current status of the last performed operation. E.g. Processing, Failed, Successful etc",
                  "type": "string"
                },
                "type": {
                  "description": "Type is the type of operation which was last performed. E.g. Create, Delete, Update etc",
                  "type": "string"
                }
              }
            },
            "lastUpdated": {
              "description": "LastUpdated identifies when this status was last observed.",
              "type": "string",
              "format": "date-time"
            },
            "nodeRef": {
              "description": "NodeRef will point to the corresponding Node if it exists.",
              "type": "object",
              "properties": {
                "apiVersion": {
                  "description": "API version of the referent.",
                  "type": "string"
                },
                "fieldPath": {
                  "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                  "type": "string"
                },
                "resourceVersion": {
                  "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                  "type": "string"
                },
                "uid": {
                  "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                  "type": "string"
                }
              }
            },
            "phase": {
              "description": "Phase represents the current phase of machine actuation. One of: Failed, Provisioning, Provisioned, Running, Deleting",
              "type": "string"
            },
            "providerStatus": {
              "description": "ProviderStatus details a Provider-specific status. It is recommended that providers maintain their own versioned API types that should be serialized/deserialized from this field.",
              "type": "object",
              "x-kubernetes-preserve-unknown-fields": true
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "machine.openshift.io",
          "kind": "Machine",
          "version": "v1beta1"
        }
      ]
    },
    "io.openshift.machine.v1beta1.MachineHealthCheck": {
      "description": "MachineHealthCheck is the Schema for the machinehealthchecks API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "machine.openshift.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "MachineHealthCheck"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of machine health check policy",
          "type": "object",
          "required": [
            "selector",
            "unhealthyConditions"
          ],
          "properties": {
            "maxUnhealthy": {
              "description": "Any farther remediation is only allowed if at most \"MaxUnhealthy\" machines selected by \"selector\" are not healthy. Expects either a postive integer value or a percentage value. Percentage values must be positive whole numbers and are capped at 100%. Both 0 and 0% are valid and will block all remediation.",
              "type": "string",
              "pattern": "^((100|[0-9]{1,2})%|[0-9]+)$",
              "x-kubernetes-int-or-string": true
            },
            "nodeStartupTimeout": {
              "description": "Machines older than this duration without a node will be considered to have failed and will be remediated. Expects an unsigned duration string of decimal numbers each with optional fraction and a unit suffix, eg \"300ms\", \"1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"\u00b5s\"), \"ms\", \"s\", \"m\", \"h\".",
              "type": "string",
              "pattern": "^([0-9]+(\\.[0-9]+)?(ns|us|\u00b5s|ms|s|m|h))+$"
            },
            "selector": {
              "description": "Label selector to match machines whose health will be exercised. Note: An empty selector will match all machines.",
              "type": "object",
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "type": "array",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                    "type": "object",
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "matchLabels": {
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "unhealthyConditions": {
              "description": "UnhealthyConditions contains a list of the conditions that determine whether a node is considered unhealthy.  The conditions are combined in a logical OR, i.e. if any of the conditions is met, the node is unhealthy.",
              "type": "array",
              "minItems": 1,
              "items": {
                "description": "UnhealthyCondition represents a Node condition type and value with a timeout specified as a duration.  When the named condition has been in the given status for at least the timeout value, a node is considered unhealthy.",
                "type": "object",
                "required": [
                  "status",
                  "timeout",
                  "type"
                ],
                "properties": {
                  "status": {
                    "type": "string",
                    "minLength": 1
                  },
                  "timeout": {
                    "description": "Expects an unsigned duration string of decimal numbers each with optional fraction and a unit suffix, eg \"300ms\", \"1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"\u00b5s\"), \"ms\", \"s\", \"m\", \"h\".",
                    "type": "string",
                    "pattern": "^([0-9]+(\\.[0-9]+)?(ns|us|\u00b5s|ms|s|m|h))+$"
                  },
                  "type": {
                    "type": "string",
                    "minLength": 1
                  }
                }
              }
            }
          }
        },
        "status": {
          "description": "Most recently observed status of MachineHealthCheck resource",
          "type": "object",
          "required": [
            "currentHealthy",
            "expectedMachines"
          ],
          "properties": {
            "currentHealthy": {
              "description": "total number of machines counted by this machine health check",
              "type": "integer",
              "minimum": 0
            },
            "expectedMachines": {
              "description": "total number of machines counted by this machine health check",
              "type": "integer",
              "minimum": 0
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "machine.openshift.io",
          "kind": "MachineHealthCheck",
          "version": "v1beta1"
        }
      ]
    },
    "io.openshift.machine.v1beta1.MachineHealthCheckList": {
      "description": "MachineHealthCheckList is a list of MachineHealthCheck",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "machine.openshift.io/v1beta1"
          ]
        },
        "items": {
          "description": "List of machinehealthchecks. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.machine.v1beta1.MachineHealthCheck"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "MachineHealthCheckList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "machine.openshift.io",
          "kind": "MachineHealthCheckList",
          "version": "v1beta1"
        }
      ]
    },
    "io.openshift.machine.v1beta1.MachineList": {
      "description": "MachineList is a list of Machine",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "machine.openshift.io/v1beta1"
          ]
        },
        "items": {
          "description": "List of machines. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.machine.v1beta1.Machine"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "MachineList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "machine.openshift.io",
          "kind": "MachineList",
          "version": "v1beta1"
        }
      ]
    },
    "io.openshift.machine.v1beta1.MachineSet": {
      "description": "/ [MachineSet] MachineSet ensures that a specified number of machines replicas are running at any given time.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "machine.openshift.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "MachineSet"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "/ [MachineSetSpec] MachineSetSpec defines the desired state of MachineSet",
          "type": "object",
          "required": [
            "selector"
          ],
          "properties": {
            "deletePolicy": {
              "description": "DeletePolicy defines the policy used to identify nodes to delete when downscaling. Defaults to \"Random\".  Valid values are \"Random, \"Newest\", \"Oldest\"",
              "type": "string",
              "enum": [
                "Random",
                "Newest",
                "Oldest"
              ]
            },
            "minReadySeconds": {
              "description": "MinReadySeconds is the minimum number of seconds for which a newly created machine should be ready. Defaults to 0 (machine will be considered available as soon as it is ready)",
              "type": "integer",
              "format": "int32"
            },
            "replicas": {
              "description": "Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1.",
              "type": "integer",
              "format": "int32"
            },
            "selector": {
              "description": "Selector is a label query over machines that should match the replica count. Label keys and values that must match in order to be controlled by this MachineSet. It must match the machine template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
              "type": "object",
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "type": "array",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                    "type": "object",
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "matchLabels": {
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "template": {
              "description": "Template is the object that describes the machine that will be created if insufficient replicas are detected.",
              "type": "object",
              "properties": {
                "metadata": {
                  "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
                  "type": "object",
                  "properties": {
                    "annotations": {
                      "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "generateName": {
                      "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. \n If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). \n Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
                      "type": "string"
                    },
                    "labels": {
                      "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "name": {
                      "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. \n Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
                      "type": "string"
                    },
                    "ownerReferences": {
                      "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
                      "type": "array",
                      "items": {
                        "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
                        "type": "object",
                        "required": [
                          "apiVersion",
                          "kind",
                          "name",
                          "uid"
                        ],
                        "properties": {
                          "apiVersion": {
                            "description": "API version of the referent.",
                            "type": "string"
                          },
                          "blockOwnerDeletion": {
                            "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                            "type": "boolean"
                          },
                          "controller": {
                            "description": "If true, this reference points to the managing controller.",
                            "type": "boolean"
                          },
                          "kind": {
                            "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                            "type": "string"
                          },
                          "uid": {
                            "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "spec": {
                  "description": "Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "description": "ObjectMeta will autopopulate the Node created. Use this to indicate what labels, annotations, name prefix, etc., should be used when creating the Node.",
                      "type": "object",
                      "properties": {
                        "annotations": {
                          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "generateName": {
                          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. \n If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). \n Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
                          "type": "string"
                        },
                        "labels": {
                          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "name": {
                          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                          "type": "string"
                        },
                        "namespace": {
                          "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. \n Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
                          "type": "string"
                        },
                        "ownerReferences": {
                          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
                          "type": "array",
                          "items": {
                            "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
                            "type": "object",
                            "required": [
                              "apiVersion",
                              "kind",
                              "name",
                              "uid"
                            ],
                            "properties": {
                              "apiVersion": {
                                "description": "API version of the referent.",
                                "type": "string"
                              },
                              "blockOwnerDeletion": {
                                "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                                "type": "boolean"
                              },
                              "controller": {
                                "description": "If true, this reference points to the managing controller.",
                                "type": "boolean"
                              },
                              "kind": {
                                "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                                "type": "string"
                              },
                              "uid": {
                                "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "providerID": {
                      "description": "ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.",
                      "type": "string"
                    },
                    "providerSpec": {
                      "description": "ProviderSpec details Provider-specific configuration to use during node creation.",
                      "type": "object",
                      "properties": {
                        "value": {
                          "description": "Value is an inlined, serialized representation of the resource configuration. It is recommended that providers maintain their own versioned API types that should be serialized/deserialized from this field, akin to component config.",
                          "type": "object",
                          "x-kubernetes-preserve-unknown-fields": true
                        }
                      }
                    },
                    "taints": {
                      "description": "The list of the taints to be applied to the corresponding Node in additive manner. This list will not overwrite any other taints added to the Node on an ongoing basis by other entities. These taints should be actively reconciled e.g. if you ask the machine controller to apply a taint and then manually remove the taint the machine controller will put it back) but not have the machine controller remove any taints",
                      "type": "array",
                      "items": {
                        "description": "The node this Taint is attached to has the \"effect\" on any pod that does not tolerate the Taint.",
                        "type": "object",
                        "required": [
                          "effect",
                          "key"
                        ],
                        "properties": {
                          "effect": {
                            "description": "Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.",
                            "type": "string"
                          },
                          "key": {
                            "description": "Required. The taint key to be applied to a node.",
                            "type": "string"
                          },
                          "timeAdded": {
                            "description": "TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.",
                            "type": "string",
                            "format": "date-time"
                          },
                          "value": {
                            "description": "The taint value corresponding to the taint key.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "status": {
          "description": "/ [MachineSetStatus] MachineSetStatus defines the observed state of MachineSet",
          "type": "object",
          "required": [
            "replicas"
          ],
          "properties": {
            "availableReplicas": {
              "description": "The number of available replicas (ready for at least minReadySeconds) for this MachineSet.",
              "type": "integer",
              "format": "int32"
            },
            "errorMessage": {
              "type": "string"
            },
            "errorReason": {
              "description": "In the event that there is a terminal problem reconciling the replicas, both ErrorReason and ErrorMessage will be set. ErrorReason will be populated with a succinct value suitable for machine interpretation, while ErrorMessage will contain a more verbose string suitable for logging and human consumption. \n These fields should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the MachineTemplate's spec or the configuration of the machine controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the machine controller, or the responsible machine controller itself being critically misconfigured. \n Any transient errors that occur during the reconciliation of Machines can be added as events to the MachineSet object and/or logged in the controller's output.",
              "type": "string"
            },
            "fullyLabeledReplicas": {
              "description": "The number of replicas that have labels matching the labels of the machine template of the MachineSet.",
              "type": "integer",
              "format": "int32"
            },
            "observedGeneration": {
              "description": "ObservedGeneration reflects the generation of the most recently observed MachineSet.",
              "type": "integer",
              "format": "int64"
            },
            "readyReplicas": {
              "description": "The number of ready replicas for this MachineSet. A machine is considered ready when the node has been created and is \"Ready\".",
              "type": "integer",
              "format": "int32"
            },
            "replicas": {
              "description": "Replicas is the most recently observed number of replicas.",
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "machine.openshift.io",
          "kind": "MachineSet",
          "version": "v1beta1"
        }
      ]
    },
    "io.openshift.machine.v1beta1.MachineSetList": {
      "description": "MachineSetList is a list of MachineSet",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "machine.openshift.io/v1beta1"
          ]
        },
        "items": {
          "description": "List of machinesets. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.machine.v1beta1.MachineSet"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "MachineSetList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "machine.openshift.io",
          "kind": "MachineSetList",
          "version": "v1beta1"
        }
      ]
    },
    "io.openshift.machineconfiguration.v1.ContainerRuntimeConfig": {
      "description": "ContainerRuntimeConfig describes a customized Container Runtime configuration.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "machineconfiguration.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ContainerRuntimeConfig"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "ContainerRuntimeConfigSpec defines the desired state of ContainerRuntimeConfig",
          "type": "object",
          "properties": {
            "containerRuntimeConfig": {
              "description": "ContainerRuntimeConfiguration defines the tuneables of the container runtime",
              "type": "object",
              "properties": {
                "logLevel": {
                  "description": "logLevel specifies the verbosity of the logs based on the level it is set to. Options are fatal, panic, error, warn, info, and debug.",
                  "type": "string"
                },
                "logSizeMax": {
                  "description": "logSizeMax specifies the Maximum size allowed for the container log file. Negative numbers indicate that no size limit is imposed. If it is positive, it must be >= 8192 to match/exceed conmon's read buffer.",
                  "type": "string"
                },
                "overlaySize": {
                  "description": "overlaySize specifies the maximum size of a container image. This flag can be used to set quota on the size of container images. (default: 10GB)",
                  "type": "string"
                },
                "pidsLimit": {
                  "description": "pidsLimit specifies the maximum number of processes allowed in a container",
                  "type": "integer",
                  "format": "int64"
                }
              }
            },
            "machineConfigPoolSelector": {
              "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
              "type": "object",
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "type": "array",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                    "type": "object",
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "matchLabels": {
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "status": {
          "description": "ContainerRuntimeConfigStatus defines the observed state of a ContainerRuntimeConfig",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "conditions represents the latest available observations of current state.",
              "type": "array",
              "items": {
                "description": "ContainerRuntimeConfigCondition defines the state of the ContainerRuntimeConfig",
                "type": "object",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the time of the last update to the current status object.",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "message provides additional information about the current condition. This is only to be consumed by humans.",
                    "type": "string"
                  },
                  "reason": {
                    "description": "reason is the reason for the condition's last transition.  Reasons are PascalCase",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "type": "string"
                  },
                  "type": {
                    "description": "type specifies the state of the operator's reconciliation functionality.",
                    "type": "string"
                  }
                }
              }
            },
            "observedGeneration": {
              "description": "observedGeneration represents the generation observed by the controller.",
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "machineconfiguration.openshift.io",
          "kind": "ContainerRuntimeConfig",
          "version": "v1"
        }
      ]
    },
    "io.openshift.machineconfiguration.v1.ContainerRuntimeConfigList": {
      "description": "ContainerRuntimeConfigList is a list of ContainerRuntimeConfig",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "machineconfiguration.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of containerruntimeconfigs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.machineconfiguration.v1.ContainerRuntimeConfig"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ContainerRuntimeConfigList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "machineconfiguration.openshift.io",
          "kind": "ContainerRuntimeConfigList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.machineconfiguration.v1.ControllerConfig": {
      "description": "ControllerConfig describes configuration for MachineConfigController. This is currently only used to drive the MachineConfig objects generated by the TemplateController.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "machineconfiguration.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ControllerConfig"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "ControllerConfigSpec is the spec for ControllerConfig resource.",
          "type": "object",
          "properties": {
            "additionalTrustBundle": {
              "description": "additionalTrustBundle is a certificate bundle that will be added to the nodes trusted certificate store.",
              "format": "byte"
            },
            "cloudProviderCAData": {
              "description": "cloudProvider specifies the cloud provider CA data",
              "format": "byte"
            },
            "cloudProviderConfig": {
              "description": "cloudProviderConfig is the configuration for the given cloud provider",
              "type": "string"
            },
            "clusterDNSIP": {
              "description": "clusterDNSIP is the cluster DNS IP address",
              "type": "string"
            },
            "etcdDiscoveryDomain": {
              "description": "etcdDiscoveryDomain is deprecated, use infra.status.etcdDiscoveryDomain instead",
              "type": "string"
            },
            "images": {
              "description": "images is map of images that are used by the controller to render templates under ./templates/",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "infra": {
              "description": "infra holds the infrastructure details",
              "required": [
                "spec"
              ]
            },
            "kubeAPIServerServingCAData": {
              "description": "kubeAPIServerServingCAData managed Kubelet to API Server Cert... Rotated automatically",
              "type": "string",
              "format": "byte"
            },
            "kubeletIPv6": {
              "description": "kubeletIPv6 is true to force a single-stack IPv6 kubelet config",
              "type": "boolean"
            },
            "networkType": {
              "description": "networkType holds the type of network the cluster is using",
              "type": "string"
            },
            "osImageURL": {
              "description": "osImageURL is the location of the container image that contains the OS update payload. Its value is taken from the data.osImageURL field on the machine-config-osimageurl ConfigMap.",
              "type": "string"
            },
            "platform": {
              "description": "platform is deprecated. Use infra.status.platformStatus.type instead",
              "type": "string"
            },
            "proxy": {
              "description": "proxy holds the current proxy configuration for the nodes"
            },
            "pullSecret": {
              "description": "pullSecret is the default pull secret that needs to be installed on all machines.",
              "type": "object",
              "properties": {
                "apiVersion": {
                  "description": "API version of the referent.",
                  "type": "string"
                },
                "fieldPath": {
                  "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                  "type": "string"
                },
                "resourceVersion": {
                  "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                  "type": "string"
                },
                "uid": {
                  "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                  "type": "string"
                }
              }
            },
            "rootCAData": {
              "description": "rootCAData specifies the root CA data",
              "type": "string",
              "format": "byte"
            }
          }
        },
        "status": {
          "description": "ControllerConfigStatus is the status for ControllerConfig",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "conditions represents the latest available observations of current state.",
              "type": "array",
              "items": {
                "description": "ControllerConfigStatusCondition contains condition information for ControllerConfigStatus",
                "type": "object",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the time of the last update to the current status object.",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "message provides additional information about the current condition. This is only to be consumed by humans.",
                    "type": "string"
                  },
                  "reason": {
                    "description": "reason is the reason for the condition's last transition.  Reasons are PascalCase",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "type": "string"
                  },
                  "type": {
                    "description": "type specifies the state of the operator's reconciliation functionality.",
                    "type": "string"
                  }
                }
              }
            },
            "observedGeneration": {
              "description": "observedGeneration represents the generation observed by the controller.",
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "machineconfiguration.openshift.io",
          "kind": "ControllerConfig",
          "version": "v1"
        }
      ]
    },
    "io.openshift.machineconfiguration.v1.ControllerConfigList": {
      "description": "ControllerConfigList is a list of ControllerConfig",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "machineconfiguration.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of controllerconfigs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.machineconfiguration.v1.ControllerConfig"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ControllerConfigList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "machineconfiguration.openshift.io",
          "kind": "ControllerConfigList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.machineconfiguration.v1.KubeletConfig": {
      "description": "KubeletConfig describes a customized Kubelet configuration.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "machineconfiguration.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "KubeletConfig"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "KubeletConfigSpec defines the desired state of KubeletConfig",
          "type": "object",
          "properties": {
            "kubeletConfig": {
              "type": "object",
              "x-kubernetes-preserve-unknown-fields": true
            },
            "machineConfigPoolSelector": {
              "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
              "type": "object",
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "type": "array",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                    "type": "object",
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "matchLabels": {
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "status": {
          "description": "KubeletConfigStatus defines the observed state of a KubeletConfig",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "conditions represents the latest available observations of current state.",
              "type": "array",
              "items": {
                "description": "KubeletConfigCondition defines the state of the KubeletConfig",
                "type": "object",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the time of the last update to the current status object.",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "message provides additional information about the current condition. This is only to be consumed by humans.",
                    "type": "string"
                  },
                  "reason": {
                    "description": "reason is the reason for the condition's last transition.  Reasons are PascalCase",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "type": "string"
                  },
                  "type": {
                    "description": "type specifies the state of the operator's reconciliation functionality.",
                    "type": "string"
                  }
                }
              }
            },
            "observedGeneration": {
              "description": "observedGeneration represents the generation observed by the controller.",
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "machineconfiguration.openshift.io",
          "kind": "KubeletConfig",
          "version": "v1"
        }
      ]
    },
    "io.openshift.machineconfiguration.v1.KubeletConfigList": {
      "description": "KubeletConfigList is a list of KubeletConfig",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "machineconfiguration.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of kubeletconfigs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.machineconfiguration.v1.KubeletConfig"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "KubeletConfigList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "machineconfiguration.openshift.io",
          "kind": "KubeletConfigList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.machineconfiguration.v1.MachineConfig": {
      "description": "MachineConfig defines the configuration for a machine",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "machineconfiguration.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "MachineConfig"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "MachineConfigSpec is the spec for MachineConfig",
          "type": "object",
          "properties": {
            "config": {
              "description": "Config is a Ignition Config object.",
              "type": "object",
              "required": [
                "ignition"
              ],
              "x-kubernetes-preserve-unknown-fields": true
            },
            "extensions": {
              "description": "List of additional features that can be enabled on host"
            },
            "fips": {
              "description": "FIPS controls FIPS mode",
              "type": "boolean"
            },
            "kernelArguments": {
              "description": "KernelArguments contains a list of kernel arguments to be added"
            },
            "kernelType": {
              "description": "Contains which kernel we want to be running like default (traditional), realtime",
              "type": "string"
            },
            "osImageURL": {
              "description": "OSImageURL specifies the remote location that will be used to fetch the OS to fetch the OS.",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "machineconfiguration.openshift.io",
          "kind": "MachineConfig",
          "version": "v1"
        }
      ]
    },
    "io.openshift.machineconfiguration.v1.MachineConfigList": {
      "description": "MachineConfigList is a list of MachineConfig",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "machineconfiguration.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of machineconfigs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.machineconfiguration.v1.MachineConfig"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "MachineConfigList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "machineconfiguration.openshift.io",
          "kind": "MachineConfigList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.machineconfiguration.v1.MachineConfigPool": {
      "description": "MachineConfigPool describes a pool of MachineConfigs.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "machineconfiguration.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "MachineConfigPool"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "MachineConfigPoolSpec is the spec for MachineConfigPool resource.",
          "type": "object",
          "properties": {
            "configuration": {
              "description": "The targeted MachineConfig object for the machine config pool.",
              "type": "object",
              "properties": {
                "apiVersion": {
                  "description": "API version of the referent.",
                  "type": "string"
                },
                "fieldPath": {
                  "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                  "type": "string"
                },
                "resourceVersion": {
                  "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                  "type": "string"
                },
                "source": {
                  "description": "source is the list of MachineConfig objects that were used to generate the single MachineConfig object specified in `content`.",
                  "type": "array",
                  "items": {
                    "description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
                    "type": "object",
                    "properties": {
                      "apiVersion": {
                        "description": "API version of the referent.",
                        "type": "string"
                      },
                      "fieldPath": {
                        "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                        "type": "string"
                      },
                      "resourceVersion": {
                        "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                        "type": "string"
                      },
                      "uid": {
                        "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                        "type": "string"
                      }
                    }
                  }
                },
                "uid": {
                  "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                  "type": "string"
                }
              }
            },
            "machineConfigSelector": {
              "description": "machineConfigSelector specifies a label selector for MachineConfigs. Refer https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ on how label and selectors work.",
              "type": "object",
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "type": "array",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                    "type": "object",
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "matchLabels": {
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "maxUnavailable": {
              "description": "maxUnavailable specifies the percentage or constant number of machines that can be updating at any given time. default is 1.",
              "x-kubernetes-int-or-string": true
            },
            "nodeSelector": {
              "description": "nodeSelector specifies a label selector for Machines",
              "type": "object",
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "type": "array",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                    "type": "object",
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "matchLabels": {
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "paused": {
              "description": "paused specifies whether or not changes to this machine config pool should be stopped. This includes generating new desiredMachineConfig and update of machines.",
              "type": "boolean"
            }
          }
        },
        "status": {
          "description": "MachineConfigPoolStatus is the status for MachineConfigPool resource.",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "conditions represents the latest available observations of current state.",
              "type": "array",
              "items": {
                "description": "MachineConfigPoolCondition contains condition information for an MachineConfigPool.",
                "type": "object",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the timestamp corresponding to the last status change of this condition.",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "message is a human readable description of the details of the last transition, complementing reason.",
                    "type": "string"
                  },
                  "reason": {
                    "description": "reason is a brief machine readable explanation for the condition's last transition.",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of ('True', 'False', 'Unknown').",
                    "type": "string"
                  },
                  "type": {
                    "description": "type of the condition, currently ('Done', 'Updating', 'Failed').",
                    "type": "string"
                  }
                }
              }
            },
            "configuration": {
              "description": "configuration represents the current MachineConfig object for the machine config pool.",
              "type": "object",
              "properties": {
                "apiVersion": {
                  "description": "API version of the referent.",
                  "type": "string"
                },
                "fieldPath": {
                  "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                  "type": "string"
                },
                "resourceVersion": {
                  "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                  "type": "string"
                },
                "source": {
                  "description": "source is the list of MachineConfig objects that were used to generate the single MachineConfig object specified in `content`.",
                  "type": "array",
                  "items": {
                    "description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
                    "type": "object",
                    "properties": {
                      "apiVersion": {
                        "description": "API version of the referent.",
                        "type": "string"
                      },
                      "fieldPath": {
                        "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                        "type": "string"
                      },
                      "resourceVersion": {
                        "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                        "type": "string"
                      },
                      "uid": {
                        "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                        "type": "string"
                      }
                    }
                  }
                },
                "uid": {
                  "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                  "type": "string"
                }
              }
            },
            "degradedMachineCount": {
              "description": "degradedMachineCount represents the total number of machines marked degraded (or unreconcilable). A node is marked degraded if applying a configuration failed..",
              "type": "integer",
              "format": "int32"
            },
            "machineCount": {
              "description": "machineCount represents the total number of machines in the machine config pool.",
              "type": "integer",
              "format": "int32"
            },
            "observedGeneration": {
              "description": "observedGeneration represents the generation observed by the controller.",
              "type": "integer",
              "format": "int64"
            },
            "readyMachineCount": {
              "description": "readyMachineCount represents the total number of ready machines targeted by the pool.",
              "type": "integer",
              "format": "int32"
            },
            "unavailableMachineCount": {
              "description": "unavailableMachineCount represents the total number of unavailable (non-ready) machines targeted by the pool. A node is marked unavailable if it is in updating state or NodeReady condition is false.",
              "type": "integer",
              "format": "int32"
            },
            "updatedMachineCount": {
              "description": "updatedMachineCount represents the total number of machines targeted by the pool that have the CurrentMachineConfig as their config.",
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "machineconfiguration.openshift.io",
          "kind": "MachineConfigPool",
          "version": "v1"
        }
      ]
    },
    "io.openshift.machineconfiguration.v1.MachineConfigPoolList": {
      "description": "MachineConfigPoolList is a list of MachineConfigPool",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "machineconfiguration.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of machineconfigpools. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.machineconfiguration.v1.MachineConfigPool"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "MachineConfigPoolList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "machineconfiguration.openshift.io",
          "kind": "MachineConfigPoolList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.network.v1.ClusterNetwork": {
      "description": "ClusterNetwork describes the cluster network. There is normally only one object of this type, named \"default\", which is created by the SDN network plugin based on the master configuration when the cluster is brought up for the first time.",
      "type": "object",
      "required": [
        "clusterNetworks",
        "serviceNetwork"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "network.openshift.io/v1"
          ]
        },
        "clusterNetworks": {
          "description": "ClusterNetworks is a list of ClusterNetwork objects that defines the global overlay network's L3 space by specifying a set of CIDR and netmasks that the SDN can allocate addresses from.",
          "type": "array",
          "items": {
            "description": "ClusterNetworkEntry defines an individual cluster network. The CIDRs cannot overlap with other cluster network CIDRs, CIDRs reserved for external ips, CIDRs reserved for service networks, and CIDRs reserved for ingress ips.",
            "type": "object",
            "required": [
              "CIDR",
              "hostSubnetLength"
            ],
            "properties": {
              "CIDR": {
                "description": "CIDR defines the total range of a cluster networks address space.",
                "type": "string",
                "pattern": "^(([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/([0-9]|[12][0-9]|3[0-2])$"
              },
              "hostSubnetLength": {
                "description": "HostSubnetLength is the number of bits of the accompanying CIDR address to allocate to each node. eg, 8 would mean that each node would have a /24 slice of the overlay network for its pods.",
                "type": "integer",
                "format": "int32",
                "maximum": 30,
                "minimum": 2
              }
            }
          }
        },
        "hostsubnetlength": {
          "description": "HostSubnetLength is the number of bits of network to allocate to each node. eg, 8 would mean that each node would have a /24 slice of the overlay network for its pods",
          "type": "integer",
          "format": "int32",
          "maximum": 30,
          "minimum": 2
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterNetwork"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "mtu": {
          "description": "MTU is the MTU for the overlay network. This should be 50 less than the MTU of the network connecting the nodes. It is normally autodetected by the cluster network operator.",
          "type": "integer",
          "format": "int32",
          "maximum": 65536,
          "minimum": 576
        },
        "network": {
          "description": "Network is a CIDR string specifying the global overlay network's L3 space",
          "type": "string",
          "pattern": "^(([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/([0-9]|[12][0-9]|3[0-2])$"
        },
        "pluginName": {
          "description": "PluginName is the name of the network plugin being used",
          "type": "string"
        },
        "serviceNetwork": {
          "description": "ServiceNetwork is the CIDR range that Service IP addresses are allocated from",
          "type": "string",
          "pattern": "^(([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/([0-9]|[12][0-9]|3[0-2])$"
        },
        "vxlanPort": {
          "description": "VXLANPort sets the VXLAN destination port used by the cluster. It is set by the master configuration file on startup and cannot be edited manually. Valid values for VXLANPort are integers 1-65535 inclusive and if unset defaults to 4789. Changing VXLANPort allows users to resolve issues between openshift SDN and other software trying to use the same VXLAN destination port.",
          "type": "integer",
          "format": "int32",
          "maximum": 65535,
          "minimum": 1
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "network.openshift.io",
          "kind": "ClusterNetwork",
          "version": "v1"
        }
      ]
    },
    "io.openshift.network.v1.ClusterNetworkList": {
      "description": "ClusterNetworkList is a list of ClusterNetwork",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "network.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of clusternetworks. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.network.v1.ClusterNetwork"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterNetworkList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "network.openshift.io",
          "kind": "ClusterNetworkList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.network.v1.EgressNetworkPolicy": {
      "description": "EgressNetworkPolicy describes the current egress network policy for a Namespace. When using the 'redhat/openshift-ovs-multitenant' network plugin, traffic from a pod to an IP address outside the cluster will be checked against each EgressNetworkPolicyRule in the pod's namespace's EgressNetworkPolicy, in order. If no rule matches (or no EgressNetworkPolicy is present) then the traffic will be allowed by default.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "network.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "EgressNetworkPolicy"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is the specification of the current egress network policy",
          "type": "object",
          "required": [
            "egress"
          ],
          "properties": {
            "egress": {
              "description": "egress contains the list of egress policy rules",
              "type": "array",
              "maxItems": 1000,
              "items": {
                "description": "EgressNetworkPolicyRule contains a single egress network policy rule",
                "type": "object",
                "required": [
                  "to",
                  "type"
                ],
                "properties": {
                  "to": {
                    "description": "to is the target that traffic is allowed/denied to",
                    "type": "object",
                    "maxProperties": 1,
                    "minProperties": 1,
                    "properties": {
                      "cidrSelector": {
                        "description": "cidrSelector is the CIDR range to allow/deny traffic to. If this is set, dnsName must be unset",
                        "type": "string",
                        "pattern": "^(([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/([0-9]|[12][0-9]|3[0-2])$"
                      },
                      "dnsName": {
                        "description": "dnsName is the domain name to allow/deny traffic to. If this is set, cidrSelector must be unset",
                        "type": "string",
                        "pattern": "^([A-Za-z0-9-]+\\.)*[A-Za-z0-9-]+\\.?$"
                      }
                    }
                  },
                  "type": {
                    "description": "type marks this as an \"Allow\" or \"Deny\" rule",
                    "type": "string",
                    "pattern": "^Allow|Deny$"
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "network.openshift.io",
          "kind": "EgressNetworkPolicy",
          "version": "v1"
        }
      ]
    },
    "io.openshift.network.v1.EgressNetworkPolicyList": {
      "description": "EgressNetworkPolicyList is a list of EgressNetworkPolicy",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "network.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of egressnetworkpolicies. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.network.v1.EgressNetworkPolicy"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "EgressNetworkPolicyList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "network.openshift.io",
          "kind": "EgressNetworkPolicyList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.network.v1.HostSubnet": {
      "description": "HostSubnet describes the container subnet network on a node. The HostSubnet object must have the same name as the Node object it corresponds to.",
      "type": "object",
      "required": [
        "host",
        "hostIP"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "network.openshift.io/v1"
          ]
        },
        "egressCIDRs": {
          "description": "EgressCIDRs is the list of CIDR ranges available for automatically assigning egress IPs to this node from. If this field is set then EgressIPs should be treated as read-only.",
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^(([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/([0-9]|[12][0-9]|3[0-2])$"
          }
        },
        "egressIPs": {
          "description": "EgressIPs is the list of automatic egress IP addresses currently hosted by this node. If EgressCIDRs is empty, this can be set by hand; if EgressCIDRs is set then the master will overwrite the value here with its own allocation of egress IPs.",
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^(([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$"
          }
        },
        "host": {
          "description": "Host is the name of the node. (This is the same as the object's name, but both fields must be set.)",
          "type": "string",
          "pattern": "^[a-z0-9.-]+$"
        },
        "hostIP": {
          "description": "HostIP is the IP address to be used as a VTEP by other nodes in the overlay network",
          "type": "string",
          "pattern": "^(([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "HostSubnet"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "subnet": {
          "description": "Subnet is the CIDR range of the overlay network assigned to the node for its pods",
          "type": "string",
          "pattern": "^(([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/([0-9]|[12][0-9]|3[0-2])$"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "network.openshift.io",
          "kind": "HostSubnet",
          "version": "v1"
        }
      ]
    },
    "io.openshift.network.v1.HostSubnetList": {
      "description": "HostSubnetList is a list of HostSubnet",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "network.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of hostsubnets. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.network.v1.HostSubnet"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "HostSubnetList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "network.openshift.io",
          "kind": "HostSubnetList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.network.v1.NetNamespace": {
      "description": "NetNamespace describes a single isolated network. When using the redhat/openshift-ovs-multitenant plugin, every Namespace will have a corresponding NetNamespace object with the same name. (When using redhat/openshift-ovs-subnet, NetNamespaces are not used.)",
      "type": "object",
      "required": [
        "netid",
        "netname"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "network.openshift.io/v1"
          ]
        },
        "egressIPs": {
          "description": "EgressIPs is a list of reserved IPs that will be used as the source for external traffic coming from pods in this namespace. (If empty, external traffic will be masqueraded to Node IPs.)",
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^(([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "NetNamespace"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "netid": {
          "description": "NetID is the network identifier of the network namespace assigned to each overlay network packet. This can be manipulated with the \"oc adm pod-network\" commands.",
          "type": "integer",
          "format": "int32",
          "maximum": 16777215,
          "minimum": 0
        },
        "netname": {
          "description": "NetName is the name of the network namespace. (This is the same as the object's name, but both fields must be set.)",
          "type": "string",
          "pattern": "^[a-z0-9.-]+$"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "network.openshift.io",
          "kind": "NetNamespace",
          "version": "v1"
        }
      ]
    },
    "io.openshift.network.v1.NetNamespaceList": {
      "description": "NetNamespaceList is a list of NetNamespace",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "network.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of netnamespaces. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.network.v1.NetNamespace"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "NetNamespaceList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "network.openshift.io",
          "kind": "NetNamespaceList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.imageregistry.v1.Config": {
      "description": "Config is the configuration object for a registry instance managed by the registry operator",
      "type": "object",
      "required": [
        "metadata",
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "imageregistry.operator.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Config"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "ImageRegistrySpec defines the specs for the running registry.",
          "type": "object",
          "required": [
            "managementState",
            "replicas"
          ],
          "properties": {
            "affinity": {
              "description": "affinity is a group of node affinity scheduling rules for the image registry pod(s).",
              "type": "object",
              "properties": {
                "nodeAffinity": {
                  "description": "Describes node affinity scheduling rules for the pod.",
                  "type": "object",
                  "properties": {
                    "preferredDuringSchedulingIgnoredDuringExecution": {
                      "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
                      "type": "array",
                      "items": {
                        "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                        "type": "object",
                        "required": [
                          "preference",
                          "weight"
                        ],
                        "properties": {
                          "preference": {
                            "description": "A node selector term, associated with the corresponding weight.",
                            "type": "object",
                            "properties": {
                              "matchExpressions": {
                                "description": "A list of node selector requirements by node's labels.",
                                "type": "array",
                                "items": {
                                  "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "The label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              "matchFields": {
                                "description": "A list of node selector requirements by node's fields.",
                                "type": "array",
                                "items": {
                                  "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "The label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "weight": {
                            "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      }
                    },
                    "requiredDuringSchedulingIgnoredDuringExecution": {
                      "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.",
                      "type": "object",
                      "required": [
                        "nodeSelectorTerms"
                      ],
                      "properties": {
                        "nodeSelectorTerms": {
                          "description": "Required. A list of node selector terms. The terms are ORed.",
                          "type": "array",
                          "items": {
                            "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                            "type": "object",
                            "properties": {
                              "matchExpressions": {
                                "description": "A list of node selector requirements by node's labels.",
                                "type": "array",
                                "items": {
                                  "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "The label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              "matchFields": {
                                "description": "A list of node selector requirements by node's fields.",
                                "type": "array",
                                "items": {
                                  "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "The label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "podAffinity": {
                  "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).",
                  "type": "object",
                  "properties": {
                    "preferredDuringSchedulingIgnoredDuringExecution": {
                      "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                      "type": "array",
                      "items": {
                        "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                        "type": "object",
                        "required": [
                          "podAffinityTerm",
                          "weight"
                        ],
                        "properties": {
                          "podAffinityTerm": {
                            "description": "Required. A pod affinity term, associated with the corresponding weight.",
                            "type": "object",
                            "required": [
                              "topologyKey"
                            ],
                            "properties": {
                              "labelSelector": {
                                "description": "A label query over a set of resources, in this case pods.",
                                "type": "object",
                                "properties": {
                                  "matchExpressions": {
                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                    "type": "array",
                                    "items": {
                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                      "type": "object",
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "description": "key is the label key that the selector applies to.",
                                          "type": "string"
                                        },
                                        "operator": {
                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                          "type": "string"
                                        },
                                        "values": {
                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "matchLabels": {
                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "namespaces": {
                                "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "topologyKey": {
                                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                "type": "string"
                              }
                            }
                          },
                          "weight": {
                            "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      }
                    },
                    "requiredDuringSchedulingIgnoredDuringExecution": {
                      "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                      "type": "array",
                      "items": {
                        "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                        "type": "object",
                        "required": [
                          "topologyKey"
                        ],
                        "properties": {
                          "labelSelector": {
                            "description": "A label query over a set of resources, in this case pods.",
                            "type": "object",
                            "properties": {
                              "matchExpressions": {
                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                "type": "array",
                                "items": {
                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "key is the label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              "matchLabels": {
                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "namespaces": {
                            "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "topologyKey": {
                            "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "podAntiAffinity": {
                  "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).",
                  "type": "object",
                  "properties": {
                    "preferredDuringSchedulingIgnoredDuringExecution": {
                      "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                      "type": "array",
                      "items": {
                        "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                        "type": "object",
                        "required": [
                          "podAffinityTerm",
                          "weight"
                        ],
                        "properties": {
                          "podAffinityTerm": {
                            "description": "Required. A pod affinity term, associated with the corresponding weight.",
                            "type": "object",
                            "required": [
                              "topologyKey"
                            ],
                            "properties": {
                              "labelSelector": {
                                "description": "A label query over a set of resources, in this case pods.",
                                "type": "object",
                                "properties": {
                                  "matchExpressions": {
                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                    "type": "array",
                                    "items": {
                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                      "type": "object",
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "description": "key is the label key that the selector applies to.",
                                          "type": "string"
                                        },
                                        "operator": {
                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                          "type": "string"
                                        },
                                        "values": {
                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "matchLabels": {
                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "namespaces": {
                                "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "topologyKey": {
                                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                "type": "string"
                              }
                            }
                          },
                          "weight": {
                            "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      }
                    },
                    "requiredDuringSchedulingIgnoredDuringExecution": {
                      "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                      "type": "array",
                      "items": {
                        "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                        "type": "object",
                        "required": [
                          "topologyKey"
                        ],
                        "properties": {
                          "labelSelector": {
                            "description": "A label query over a set of resources, in this case pods.",
                            "type": "object",
                            "properties": {
                              "matchExpressions": {
                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                "type": "array",
                                "items": {
                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "key is the label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              "matchLabels": {
                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "namespaces": {
                            "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "topologyKey": {
                            "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "defaultRoute": {
              "description": "defaultRoute indicates whether an external facing route for the registry should be created using the default generated hostname.",
              "type": "boolean"
            },
            "disableRedirect": {
              "description": "disableRedirect controls whether to route all data through the Registry, rather than redirecting to the backend.",
              "type": "boolean"
            },
            "httpSecret": {
              "description": "httpSecret is the value needed by the registry to secure uploads, generated by default.",
              "type": "string"
            },
            "logLevel": {
              "description": "logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. \n Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
              "type": "string",
              "enum": [
                "",
                "Normal",
                "Debug",
                "Trace",
                "TraceAll"
              ]
            },
            "logging": {
              "description": "logging is deprecated, use logLevel instead.",
              "type": "integer",
              "format": "int64"
            },
            "managementState": {
              "description": "managementState indicates whether and how the operator should manage the component",
              "type": "string",
              "pattern": "^(Managed|Unmanaged|Force|Removed)$"
            },
            "nodeSelector": {
              "description": "nodeSelector defines the node selection constraints for the registry pod.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "observedConfig": {
              "description": "observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator",
              "x-kubernetes-preserve-unknown-fields": true
            },
            "operatorLogLevel": {
              "description": "operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves. \n Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
              "type": "string",
              "enum": [
                "",
                "Normal",
                "Debug",
                "Trace",
                "TraceAll"
              ]
            },
            "proxy": {
              "description": "proxy defines the proxy to be used when calling master api, upstream registries, etc.",
              "type": "object",
              "properties": {
                "http": {
                  "description": "http defines the proxy to be used by the image registry when accessing HTTP endpoints.",
                  "type": "string"
                },
                "https": {
                  "description": "https defines the proxy to be used by the image registry when accessing HTTPS endpoints.",
                  "type": "string"
                },
                "noProxy": {
                  "description": "noProxy defines a comma-separated list of host names that shouldn't go through any proxy.",
                  "type": "string"
                }
              }
            },
            "readOnly": {
              "description": "readOnly indicates whether the registry instance should reject attempts to push new images or delete existing ones.",
              "type": "boolean"
            },
            "replicas": {
              "description": "replicas determines the number of registry instances to run.",
              "type": "integer",
              "format": "int32"
            },
            "requests": {
              "description": "requests controls how many parallel requests a given registry instance will handle before queuing additional requests.",
              "type": "object",
              "properties": {
                "read": {
                  "description": "read defines limits for image registry's reads.",
                  "type": "object",
                  "properties": {
                    "maxInQueue": {
                      "description": "maxInQueue sets the maximum queued api requests to the registry.",
                      "type": "integer"
                    },
                    "maxRunning": {
                      "description": "maxRunning sets the maximum in flight api requests to the registry.",
                      "type": "integer"
                    },
                    "maxWaitInQueue": {
                      "description": "maxWaitInQueue sets the maximum time a request can wait in the queue before being rejected.",
                      "type": "string",
                      "format": "duration"
                    }
                  }
                },
                "write": {
                  "description": "write defines limits for image registry's writes.",
                  "type": "object",
                  "properties": {
                    "maxInQueue": {
                      "description": "maxInQueue sets the maximum queued api requests to the registry.",
                      "type": "integer"
                    },
                    "maxRunning": {
                      "description": "maxRunning sets the maximum in flight api requests to the registry.",
                      "type": "integer"
                    },
                    "maxWaitInQueue": {
                      "description": "maxWaitInQueue sets the maximum time a request can wait in the queue before being rejected.",
                      "type": "string",
                      "format": "duration"
                    }
                  }
                }
              }
            },
            "resources": {
              "description": "resources defines the resource requests+limits for the registry pod.",
              "type": "object",
              "properties": {
                "limits": {
                  "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                },
                "requests": {
                  "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                }
              }
            },
            "rolloutStrategy": {
              "description": "rolloutStrategy defines rollout strategy for the image registry deployment.",
              "type": "string",
              "pattern": "^(RollingUpdate|Recreate)$"
            },
            "routes": {
              "description": "routes defines additional external facing routes which should be created for the registry.",
              "type": "array",
              "items": {
                "description": "ImageRegistryConfigRoute holds information on external route access to image registry.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "hostname": {
                    "description": "hostname for the route.",
                    "type": "string"
                  },
                  "name": {
                    "description": "name of the route to be created.",
                    "type": "string"
                  },
                  "secretName": {
                    "description": "secretName points to secret containing the certificates to be used by the route.",
                    "type": "string"
                  }
                }
              }
            },
            "storage": {
              "description": "storage details for configuring registry storage, e.g. S3 bucket coordinates.",
              "type": "object",
              "properties": {
                "azure": {
                  "description": "azure represents configuration that uses Azure Blob Storage.",
                  "type": "object",
                  "properties": {
                    "accountName": {
                      "description": "accountName defines the account to be used by the registry.",
                      "type": "string"
                    },
                    "cloudName": {
                      "description": "cloudName is the name of the Azure cloud environment to be used by the registry. If empty, the operator will set it based on the infrastructure object.",
                      "type": "string"
                    },
                    "container": {
                      "description": "container defines Azure's container to be used by registry.",
                      "type": "string",
                      "maxLength": 63,
                      "minLength": 3,
                      "pattern": "^[0-9a-z]+(-[0-9a-z]+)*$"
                    }
                  }
                },
                "emptyDir": {
                  "description": "emptyDir represents ephemeral storage on the pod's host node. WARNING: this storage cannot be used with more than 1 replica and is not suitable for production use. When the pod is removed from a node for any reason, the data in the emptyDir is deleted forever.",
                  "type": "object"
                },
                "gcs": {
                  "description": "gcs represents configuration that uses Google Cloud Storage.",
                  "type": "object",
                  "properties": {
                    "bucket": {
                      "description": "bucket is the bucket name in which you want to store the registry's data. Optional, will be generated if not provided.",
                      "type": "string"
                    },
                    "keyID": {
                      "description": "keyID is the KMS key ID to use for encryption. Optional, buckets are encrypted by default on GCP. This allows for the use of a custom encryption key.",
                      "type": "string"
                    },
                    "projectID": {
                      "description": "projectID is the Project ID of the GCP project that this bucket should be associated with.",
                      "type": "string"
                    },
                    "region": {
                      "description": "region is the GCS location in which your bucket exists. Optional, will be set based on the installed GCS Region.",
                      "type": "string"
                    }
                  }
                },
                "managementState": {
                  "description": "managementState indicates if the operator manages the underlying storage unit. If Managed the operator will remove the storage when this operator gets Removed.",
                  "type": "string",
                  "pattern": "^(Managed|Unmanaged)$"
                },
                "pvc": {
                  "description": "pvc represents configuration that uses a PersistentVolumeClaim.",
                  "type": "object",
                  "properties": {
                    "claim": {
                      "description": "claim defines the Persisent Volume Claim's name to be used.",
                      "type": "string"
                    }
                  }
                },
                "s3": {
                  "description": "s3 represents configuration that uses Amazon Simple Storage Service.",
                  "type": "object",
                  "properties": {
                    "bucket": {
                      "description": "bucket is the bucket name in which you want to store the registry's data. Optional, will be generated if not provided.",
                      "type": "string"
                    },
                    "cloudFront": {
                      "description": "cloudFront configures Amazon Cloudfront as the storage middleware in a registry.",
                      "type": "object",
                      "required": [
                        "baseURL",
                        "keypairID",
                        "privateKey"
                      ],
                      "properties": {
                        "baseURL": {
                          "description": "baseURL contains the SCHEME://HOST[/PATH] at which Cloudfront is served.",
                          "type": "string"
                        },
                        "duration": {
                          "description": "duration is the duration of the Cloudfront session.",
                          "type": "string",
                          "format": "duration"
                        },
                        "keypairID": {
                          "description": "keypairID is key pair ID provided by AWS.",
                          "type": "string"
                        },
                        "privateKey": {
                          "description": "privateKey points to secret containing the private key, provided by AWS.",
                          "type": "object",
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "key": {
                              "description": "The key of the secret to select from.  Must be a valid secret key.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            },
                            "optional": {
                              "description": "Specify whether the Secret or its key must be defined",
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    },
                    "encrypt": {
                      "description": "encrypt specifies whether the registry stores the image in encrypted format or not. Optional, defaults to false.",
                      "type": "boolean"
                    },
                    "keyID": {
                      "description": "keyID is the KMS key ID to use for encryption. Optional, Encrypt must be true, or this parameter is ignored.",
                      "type": "string"
                    },
                    "region": {
                      "description": "region is the AWS region in which your bucket exists. Optional, will be set based on the installed AWS Region.",
                      "type": "string"
                    },
                    "regionEndpoint": {
                      "description": "regionEndpoint is the endpoint for S3 compatible storage services. Optional, defaults based on the Region that is provided.",
                      "type": "string"
                    },
                    "virtualHostedStyle": {
                      "description": "virtualHostedStyle enables using S3 virtual hosted style bucket paths with a custom RegionEndpoint Optional, defaults to false.",
                      "type": "boolean"
                    }
                  }
                },
                "swift": {
                  "description": "swift represents configuration that uses OpenStack Object Storage.",
                  "type": "object",
                  "properties": {
                    "authURL": {
                      "description": "authURL defines the URL for obtaining an authentication token.",
                      "type": "string"
                    },
                    "authVersion": {
                      "description": "authVersion specifies the OpenStack Auth's version.",
                      "type": "string"
                    },
                    "container": {
                      "description": "container defines the name of Swift container where to store the registry's data.",
                      "type": "string"
                    },
                    "domain": {
                      "description": "domain specifies Openstack's domain name for Identity v3 API.",
                      "type": "string"
                    },
                    "domainID": {
                      "description": "domainID specifies Openstack's domain id for Identity v3 API.",
                      "type": "string"
                    },
                    "regionName": {
                      "description": "regionName defines Openstack's region in which container exists.",
                      "type": "string"
                    },
                    "tenant": {
                      "description": "tenant defines Openstack tenant name to be used by registry.",
                      "type": "string"
                    },
                    "tenantID": {
                      "description": "tenant defines Openstack tenant id to be used by registry.",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "tolerations": {
              "description": "tolerations defines the tolerations for the registry pod.",
              "type": "array",
              "items": {
                "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
                "type": "object",
                "properties": {
                  "effect": {
                    "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                    "type": "string"
                  },
                  "key": {
                    "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                    "type": "string"
                  },
                  "tolerationSeconds": {
                    "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "value": {
                    "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                    "type": "string"
                  }
                }
              }
            },
            "unsupportedConfigOverrides": {
              "description": "unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides",
              "x-kubernetes-preserve-unknown-fields": true
            }
          }
        },
        "status": {
          "description": "ImageRegistryStatus reports image registry operational status.",
          "type": "object",
          "required": [
            "storage",
            "storageManaged"
          ],
          "properties": {
            "conditions": {
              "description": "conditions is a list of conditions and their status",
              "type": "array",
              "items": {
                "description": "OperatorCondition is just the standard condition fields.",
                "type": "object",
                "properties": {
                  "lastTransitionTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "type": "string"
                  },
                  "reason": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            },
            "generations": {
              "description": "generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.",
              "type": "array",
              "items": {
                "description": "GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made.",
                "type": "object",
                "properties": {
                  "group": {
                    "description": "group is the group of the thing you're tracking",
                    "type": "string"
                  },
                  "hash": {
                    "description": "hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps",
                    "type": "string"
                  },
                  "lastGeneration": {
                    "description": "lastGeneration is the last generation of the workload controller involved",
                    "type": "integer",
                    "format": "int64"
                  },
                  "name": {
                    "description": "name is the name of the thing you're tracking",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "namespace is where the thing you're tracking is",
                    "type": "string"
                  },
                  "resource": {
                    "description": "resource is the resource type of the thing you're tracking",
                    "type": "string"
                  }
                }
              }
            },
            "observedGeneration": {
              "description": "observedGeneration is the last generation change you've dealt with",
              "type": "integer",
              "format": "int64"
            },
            "readyReplicas": {
              "description": "readyReplicas indicates how many replicas are ready and at the desired state",
              "type": "integer",
              "format": "int32"
            },
            "storage": {
              "description": "storage indicates the current applied storage configuration of the registry.",
              "type": "object",
              "properties": {
                "azure": {
                  "description": "azure represents configuration that uses Azure Blob Storage.",
                  "type": "object",
                  "properties": {
                    "accountName": {
                      "description": "accountName defines the account to be used by the registry.",
                      "type": "string"
                    },
                    "cloudName": {
                      "description": "cloudName is the name of the Azure cloud environment to be used by the registry. If empty, the operator will set it based on the infrastructure object.",
                      "type": "string"
                    },
                    "container": {
                      "description": "container defines Azure's container to be used by registry.",
                      "type": "string",
                      "maxLength": 63,
                      "minLength": 3,
                      "pattern": "^[0-9a-z]+(-[0-9a-z]+)*$"
                    }
                  }
                },
                "emptyDir": {
                  "description": "emptyDir represents ephemeral storage on the pod's host node. WARNING: this storage cannot be used with more than 1 replica and is not suitable for production use. When the pod is removed from a node for any reason, the data in the emptyDir is deleted forever.",
                  "type": "object"
                },
                "gcs": {
                  "description": "gcs represents configuration that uses Google Cloud Storage.",
                  "type": "object",
                  "properties": {
                    "bucket": {
                      "description": "bucket is the bucket name in which you want to store the registry's data. Optional, will be generated if not provided.",
                      "type": "string"
                    },
                    "keyID": {
                      "description": "keyID is the KMS key ID to use for encryption. Optional, buckets are encrypted by default on GCP. This allows for the use of a custom encryption key.",
                      "type": "string"
                    },
                    "projectID": {
                      "description": "projectID is the Project ID of the GCP project that this bucket should be associated with.",
                      "type": "string"
                    },
                    "region": {
                      "description": "region is the GCS location in which your bucket exists. Optional, will be set based on the installed GCS Region.",
                      "type": "string"
                    }
                  }
                },
                "managementState": {
                  "description": "managementState indicates if the operator manages the underlying storage unit. If Managed the operator will remove the storage when this operator gets Removed.",
                  "type": "string",
                  "pattern": "^(Managed|Unmanaged)$"
                },
                "pvc": {
                  "description": "pvc represents configuration that uses a PersistentVolumeClaim.",
                  "type": "object",
                  "properties": {
                    "claim": {
                      "description": "claim defines the Persisent Volume Claim's name to be used.",
                      "type": "string"
                    }
                  }
                },
                "s3": {
                  "description": "s3 represents configuration that uses Amazon Simple Storage Service.",
                  "type": "object",
                  "properties": {
                    "bucket": {
                      "description": "bucket is the bucket name in which you want to store the registry's data. Optional, will be generated if not provided.",
                      "type": "string"
                    },
                    "cloudFront": {
                      "description": "cloudFront configures Amazon Cloudfront as the storage middleware in a registry.",
                      "type": "object",
                      "required": [
                        "baseURL",
                        "keypairID",
                        "privateKey"
                      ],
                      "properties": {
                        "baseURL": {
                          "description": "baseURL contains the SCHEME://HOST[/PATH] at which Cloudfront is served.",
                          "type": "string"
                        },
                        "duration": {
                          "description": "duration is the duration of the Cloudfront session.",
                          "type": "string",
                          "format": "duration"
                        },
                        "keypairID": {
                          "description": "keypairID is key pair ID provided by AWS.",
                          "type": "string"
                        },
                        "privateKey": {
                          "description": "privateKey points to secret containing the private key, provided by AWS.",
                          "type": "object",
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "key": {
                              "description": "The key of the secret to select from.  Must be a valid secret key.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            },
                            "optional": {
                              "description": "Specify whether the Secret or its key must be defined",
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    },
                    "encrypt": {
                      "description": "encrypt specifies whether the registry stores the image in encrypted format or not. Optional, defaults to false.",
                      "type": "boolean"
                    },
                    "keyID": {
                      "description": "keyID is the KMS key ID to use for encryption. Optional, Encrypt must be true, or this parameter is ignored.",
                      "type": "string"
                    },
                    "region": {
                      "description": "region is the AWS region in which your bucket exists. Optional, will be set based on the installed AWS Region.",
                      "type": "string"
                    },
                    "regionEndpoint": {
                      "description": "regionEndpoint is the endpoint for S3 compatible storage services. Optional, defaults based on the Region that is provided.",
                      "type": "string"
                    },
                    "virtualHostedStyle": {
                      "description": "virtualHostedStyle enables using S3 virtual hosted style bucket paths with a custom RegionEndpoint Optional, defaults to false.",
                      "type": "boolean"
                    }
                  }
                },
                "swift": {
                  "description": "swift represents configuration that uses OpenStack Object Storage.",
                  "type": "object",
                  "properties": {
                    "authURL": {
                      "description": "authURL defines the URL for obtaining an authentication token.",
                      "type": "string"
                    },
                    "authVersion": {
                      "description": "authVersion specifies the OpenStack Auth's version.",
                      "type": "string"
                    },
                    "container": {
                      "description": "container defines the name of Swift container where to store the registry's data.",
                      "type": "string"
                    },
                    "domain": {
                      "description": "domain specifies Openstack's domain name for Identity v3 API.",
                      "type": "string"
                    },
                    "domainID": {
                      "description": "domainID specifies Openstack's domain id for Identity v3 API.",
                      "type": "string"
                    },
                    "regionName": {
                      "description": "regionName defines Openstack's region in which container exists.",
                      "type": "string"
                    },
                    "tenant": {
                      "description": "tenant defines Openstack tenant name to be used by registry.",
                      "type": "string"
                    },
                    "tenantID": {
                      "description": "tenant defines Openstack tenant id to be used by registry.",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "storageManaged": {
              "description": "storageManaged is deprecated, please refer to Storage.managementState",
              "type": "boolean"
            },
            "version": {
              "description": "version is the level this availability applies to",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "imageregistry.operator.openshift.io",
          "kind": "Config",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.imageregistry.v1.ConfigList": {
      "description": "ConfigList is a list of Config",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "imageregistry.operator.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of configs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.operator.imageregistry.v1.Config"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ConfigList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "imageregistry.operator.openshift.io",
          "kind": "ConfigList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.imageregistry.v1.ImagePruner": {
      "description": "ImagePruner is the configuration object for an image registry pruner managed by the registry operator.",
      "type": "object",
      "required": [
        "metadata",
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "imageregistry.operator.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ImagePruner"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "ImagePrunerSpec defines the specs for the running image pruner.",
          "type": "object",
          "properties": {
            "affinity": {
              "description": "affinity is a group of node affinity scheduling rules for the image pruner pod.",
              "type": "object",
              "properties": {
                "nodeAffinity": {
                  "description": "Describes node affinity scheduling rules for the pod.",
                  "type": "object",
                  "properties": {
                    "preferredDuringSchedulingIgnoredDuringExecution": {
                      "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
                      "type": "array",
                      "items": {
                        "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                        "type": "object",
                        "required": [
                          "preference",
                          "weight"
                        ],
                        "properties": {
                          "preference": {
                            "description": "A node selector term, associated with the corresponding weight.",
                            "type": "object",
                            "properties": {
                              "matchExpressions": {
                                "description": "A list of node selector requirements by node's labels.",
                                "type": "array",
                                "items": {
                                  "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "The label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              "matchFields": {
                                "description": "A list of node selector requirements by node's fields.",
                                "type": "array",
                                "items": {
                                  "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "The label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "weight": {
                            "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      }
                    },
                    "requiredDuringSchedulingIgnoredDuringExecution": {
                      "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.",
                      "type": "object",
                      "required": [
                        "nodeSelectorTerms"
                      ],
                      "properties": {
                        "nodeSelectorTerms": {
                          "description": "Required. A list of node selector terms. The terms are ORed.",
                          "type": "array",
                          "items": {
                            "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                            "type": "object",
                            "properties": {
                              "matchExpressions": {
                                "description": "A list of node selector requirements by node's labels.",
                                "type": "array",
                                "items": {
                                  "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "The label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              "matchFields": {
                                "description": "A list of node selector requirements by node's fields.",
                                "type": "array",
                                "items": {
                                  "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "The label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "podAffinity": {
                  "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).",
                  "type": "object",
                  "properties": {
                    "preferredDuringSchedulingIgnoredDuringExecution": {
                      "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                      "type": "array",
                      "items": {
                        "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                        "type": "object",
                        "required": [
                          "podAffinityTerm",
                          "weight"
                        ],
                        "properties": {
                          "podAffinityTerm": {
                            "description": "Required. A pod affinity term, associated with the corresponding weight.",
                            "type": "object",
                            "required": [
                              "topologyKey"
                            ],
                            "properties": {
                              "labelSelector": {
                                "description": "A label query over a set of resources, in this case pods.",
                                "type": "object",
                                "properties": {
                                  "matchExpressions": {
                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                    "type": "array",
                                    "items": {
                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                      "type": "object",
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "description": "key is the label key that the selector applies to.",
                                          "type": "string"
                                        },
                                        "operator": {
                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                          "type": "string"
                                        },
                                        "values": {
                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "matchLabels": {
                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "namespaces": {
                                "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "topologyKey": {
                                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                "type": "string"
                              }
                            }
                          },
                          "weight": {
                            "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      }
                    },
                    "requiredDuringSchedulingIgnoredDuringExecution": {
                      "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                      "type": "array",
                      "items": {
                        "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                        "type": "object",
                        "required": [
                          "topologyKey"
                        ],
                        "properties": {
                          "labelSelector": {
                            "description": "A label query over a set of resources, in this case pods.",
                            "type": "object",
                            "properties": {
                              "matchExpressions": {
                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                "type": "array",
                                "items": {
                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "key is the label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              "matchLabels": {
                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "namespaces": {
                            "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "topologyKey": {
                            "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "podAntiAffinity": {
                  "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).",
                  "type": "object",
                  "properties": {
                    "preferredDuringSchedulingIgnoredDuringExecution": {
                      "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                      "type": "array",
                      "items": {
                        "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                        "type": "object",
                        "required": [
                          "podAffinityTerm",
                          "weight"
                        ],
                        "properties": {
                          "podAffinityTerm": {
                            "description": "Required. A pod affinity term, associated with the corresponding weight.",
                            "type": "object",
                            "required": [
                              "topologyKey"
                            ],
                            "properties": {
                              "labelSelector": {
                                "description": "A label query over a set of resources, in this case pods.",
                                "type": "object",
                                "properties": {
                                  "matchExpressions": {
                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                    "type": "array",
                                    "items": {
                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                      "type": "object",
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "description": "key is the label key that the selector applies to.",
                                          "type": "string"
                                        },
                                        "operator": {
                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                          "type": "string"
                                        },
                                        "values": {
                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "matchLabels": {
                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "namespaces": {
                                "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "topologyKey": {
                                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                "type": "string"
                              }
                            }
                          },
                          "weight": {
                            "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      }
                    },
                    "requiredDuringSchedulingIgnoredDuringExecution": {
                      "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                      "type": "array",
                      "items": {
                        "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                        "type": "object",
                        "required": [
                          "topologyKey"
                        ],
                        "properties": {
                          "labelSelector": {
                            "description": "A label query over a set of resources, in this case pods.",
                            "type": "object",
                            "properties": {
                              "matchExpressions": {
                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                "type": "array",
                                "items": {
                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "key is the label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              "matchLabels": {
                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "namespaces": {
                            "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "topologyKey": {
                            "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "failedJobsHistoryLimit": {
              "description": "failedJobsHistoryLimit specifies how many failed image pruner jobs to retain. Defaults to 3 if not set.",
              "type": "integer",
              "format": "int32"
            },
            "ignoreInvalidImageReferences": {
              "description": "ignoreInvalidImageReferences indicates whether the pruner can ignore errors while parsing image references.",
              "type": "boolean"
            },
            "keepTagRevisions": {
              "description": "keepTagRevisions specifies the number of image revisions for a tag in an image stream that will be preserved. Defaults to 3.",
              "type": "integer"
            },
            "keepYoungerThan": {
              "description": "keepYoungerThan specifies the minimum age in nanoseconds of an image and its referrers for it to be considered a candidate for pruning. DEPRECATED: This field is deprecated in favor of keepYoungerThanDuration. If both are set, this field is ignored and keepYoungerThanDuration takes precedence.",
              "type": "integer",
              "format": "int64"
            },
            "keepYoungerThanDuration": {
              "description": "keepYoungerThanDuration specifies the minimum age of an image and its referrers for it to be considered a candidate for pruning. Defaults to 60m (60 minutes).",
              "type": "string",
              "format": "duration"
            },
            "logLevel": {
              "description": "logLevel sets the level of log output for the pruner job. \n Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
              "type": "string",
              "enum": [
                "",
                "Normal",
                "Debug",
                "Trace",
                "TraceAll"
              ]
            },
            "nodeSelector": {
              "description": "nodeSelector defines the node selection constraints for the image pruner pod.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "resources": {
              "description": "resources defines the resource requests and limits for the image pruner pod.",
              "type": "object",
              "properties": {
                "limits": {
                  "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                },
                "requests": {
                  "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                }
              }
            },
            "schedule": {
              "description": "schedule specifies when to execute the job using standard cronjob syntax: https://wikipedia.org/wiki/Cron. Defaults to `0 0 * * *`.",
              "type": "string"
            },
            "successfulJobsHistoryLimit": {
              "description": "successfulJobsHistoryLimit specifies how many successful image pruner jobs to retain. Defaults to 3 if not set.",
              "type": "integer",
              "format": "int32"
            },
            "suspend": {
              "description": "suspend specifies whether or not to suspend subsequent executions of this cronjob. Defaults to false.",
              "type": "boolean"
            },
            "tolerations": {
              "description": "tolerations defines the node tolerations for the image pruner pod.",
              "type": "array",
              "items": {
                "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
                "type": "object",
                "properties": {
                  "effect": {
                    "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                    "type": "string"
                  },
                  "key": {
                    "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                    "type": "string"
                  },
                  "tolerationSeconds": {
                    "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "value": {
                    "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "status": {
          "description": "ImagePrunerStatus reports image pruner operational status.",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "conditions is a list of conditions and their status.",
              "type": "array",
              "items": {
                "description": "OperatorCondition is just the standard condition fields.",
                "type": "object",
                "properties": {
                  "lastTransitionTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "type": "string"
                  },
                  "reason": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            },
            "observedGeneration": {
              "description": "observedGeneration is the last generation change that has been applied.",
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "imageregistry.operator.openshift.io",
          "kind": "ImagePruner",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.imageregistry.v1.ImagePrunerList": {
      "description": "ImagePrunerList is a list of ImagePruner",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "imageregistry.operator.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of imagepruners. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.operator.imageregistry.v1.ImagePruner"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ImagePrunerList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "imageregistry.operator.openshift.io",
          "kind": "ImagePrunerList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.ingress.v1.DNSRecord": {
      "description": "DNSRecord is a DNS record managed in the zones defined by dns.config.openshift.io/cluster .spec.publicZone and .spec.privateZone. \n Cluster admin manipulation of this resource is not supported. This resource is only for internal communication of OpenShift operators.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "ingress.operator.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "DNSRecord"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is the specification of the desired behavior of the dnsecord.",
          "type": "object",
          "required": [
            "dnsName",
            "recordTTL",
            "recordType",
            "targets"
          ],
          "properties": {
            "dnsName": {
              "description": "dnsName is the hostname of the DNS record",
              "type": "string",
              "minLength": 1
            },
            "recordTTL": {
              "description": "recordTTL is the record TTL in seconds. If zero, the default is 30.",
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "recordType": {
              "description": "recordType is the DNS record type. For example, \"A\" or \"CNAME\".",
              "type": "string",
              "enum": [
                "CNAME",
                "A"
              ]
            },
            "targets": {
              "description": "targets are record targets.",
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string"
              }
            }
          }
        },
        "status": {
          "description": "status is the most recently observed status of the dnsRecord.",
          "type": "object",
          "properties": {
            "observedGeneration": {
              "description": "observedGeneration is the most recently observed generation of the DNSRecord.  When the DNSRecord is updated, the controller updates the corresponding record in each managed zone.  If an update for a particular zone fails, that failure is recorded in the status condition for the zone so that the controller can determine that it needs to retry the update for that specific zone.",
              "type": "integer",
              "format": "int64"
            },
            "zones": {
              "description": "zones are the status of the record in each zone.",
              "type": "array",
              "items": {
                "description": "DNSZoneStatus is the status of a record within a specific zone.",
                "type": "object",
                "properties": {
                  "conditions": {
                    "description": "conditions are any conditions associated with the record in the zone. \n If publishing the record fails, the \"Failed\" condition will be set with a reason and message describing the cause of the failure.",
                    "type": "array",
                    "items": {
                      "description": "DNSZoneCondition is just the standard condition fields.",
                      "type": "object",
                      "required": [
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "type": "string"
                        },
                        "reason": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string",
                          "minLength": 1
                        },
                        "type": {
                          "type": "string",
                          "minLength": 1
                        }
                      }
                    }
                  },
                  "dnsZone": {
                    "description": "dnsZone is the zone where the record is published.",
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "id is the identifier that can be used to find the DNS hosted zone. \n on AWS zone can be fetched using `ID` as id in [1] on Azure zone can be fetched using `ID` as a pre-determined name in [2], on GCP zone can be fetched using `ID` as a pre-determined name in [3]. \n [1]: https://docs.aws.amazon.com/cli/latest/reference/route53/get-hosted-zone.html#options [2]: https://docs.microsoft.com/en-us/cli/azure/network/dns/zone?view=azure-cli-latest#az-network-dns-zone-show [3]: https://cloud.google.com/dns/docs/reference/v1/managedZones/get",
                        "type": "string"
                      },
                      "tags": {
                        "description": "tags can be used to query the DNS hosted zone. \n on AWS, resourcegroupstaggingapi [1] can be used to fetch a zone using `Tags` as tag-filters, \n [1]: https://docs.aws.amazon.com/cli/latest/reference/resourcegroupstaggingapi/get-resources.html#options",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "ingress.operator.openshift.io",
          "kind": "DNSRecord",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.ingress.v1.DNSRecordList": {
      "description": "DNSRecordList is a list of DNSRecord",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "ingress.operator.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of dnsrecords. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.operator.ingress.v1.DNSRecord"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "DNSRecordList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "ingress.operator.openshift.io",
          "kind": "DNSRecordList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.network.v1.OperatorPKI": {
      "description": "OperatorPKI is a simple certificate authority. It is not intended for external use - rather, it is internal to the network operator. The CNO creates a CA and a certificate signed by that CA. The certificate has both ClientAuth and ServerAuth extended usages enabled. \n  More specifically, given an OperatorPKI with <name>, the CNO will manage: - A Secret called <name>-ca with two data keys:   - tls.key - the private key   - tls.crt - the CA certificate - A ConfigMap called <name>-ca with a single data key:   - cabundle.crt - the CA certificate(s) - A Secret called <name>-cert with two data keys:   - tls.key - the private key   - tls.crt - the certificate, signed by the CA \n The CA certificate will have a validity of 10 years, rotated after 9. The target certificate will have a validity of 6 months, rotated after 3 \n The CA certificate will have a CommonName of \"<namespace>_<name>-ca@<timestamp>\", where <timestamp> is the last rotation time.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "network.operator.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "OperatorPKI"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "OperatorPKISpec is the PKI configuration.",
          "type": "object",
          "required": [
            "targetCert"
          ],
          "properties": {
            "targetCert": {
              "description": "targetCert configures the certificate signed by the CA. It will have both ClientAuth and ServerAuth enabled",
              "type": "object",
              "required": [
                "commonName"
              ],
              "properties": {
                "commonName": {
                  "description": "commonName is the value in the certificate's CN",
                  "type": "string",
                  "minLength": 1
                }
              }
            }
          }
        },
        "status": {
          "description": "OperatorPKIStatus is not implemented.",
          "type": "object"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "network.operator.openshift.io",
          "kind": "OperatorPKI",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.network.v1.OperatorPKIList": {
      "description": "OperatorPKIList is a list of OperatorPKI",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "network.operator.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of operatorpkis. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.operator.network.v1.OperatorPKI"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "OperatorPKIList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "network.operator.openshift.io",
          "kind": "OperatorPKIList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.samples.v1.Config": {
      "description": "Config contains the configuration and detailed condition status for the Samples Operator.",
      "type": "object",
      "required": [
        "metadata",
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "samples.operator.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Config"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "ConfigSpec contains the desired configuration and state for the Samples Operator, controlling various behavior around the imagestreams and templates it creates/updates in the openshift namespace.",
          "type": "object",
          "properties": {
            "architectures": {
              "description": "architectures determine which hardware architecture(s) to install, where x86_64, ppc64le, and s390x are the only supported choices currently.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "managementState": {
              "description": "managementState is top level on/off type of switch for all operators. When \"Managed\", this operator processes config and manipulates the samples accordingly. When \"Unmanaged\", this operator ignores any updates to the resources it watches. When \"Removed\", it reacts that same wasy as it does if the Config object is deleted, meaning any ImageStreams or Templates it manages (i.e. it honors the skipped lists) and the registry secret are deleted, along with the ConfigMap in the operator's namespace that represents the last config used to manipulate the samples,",
              "type": "string",
              "pattern": "^(Managed|Unmanaged|Force|Removed)$"
            },
            "samplesRegistry": {
              "description": "samplesRegistry allows for the specification of which registry is accessed by the ImageStreams for their image content.  Defaults on the content in https://github.com/openshift/library that are pulled into this github repository, but based on our pulling only ocp content it typically defaults to registry.redhat.io.",
              "type": "string"
            },
            "skippedImagestreams": {
              "description": "skippedImagestreams specifies names of image streams that should NOT be created/updated.  Admins can use this to allow them to delete content they don\u2019t want.  They will still have to manually delete the content but the operator will not recreate(or update) anything listed here.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "skippedTemplates": {
              "description": "skippedTemplates specifies names of templates that should NOT be created/updated.  Admins can use this to allow them to delete content they don\u2019t want.  They will still have to manually delete the content but the operator will not recreate(or update) anything listed here.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "status": {
          "description": "ConfigStatus contains the actual configuration in effect, as well as various details that describe the state of the Samples Operator.",
          "type": "object",
          "properties": {
            "architectures": {
              "description": "architectures determine which hardware architecture(s) to install, where x86_64 and ppc64le are the supported choices.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "conditions": {
              "description": "conditions represents the available maintenance status of the sample imagestreams and templates.",
              "type": "array",
              "items": {
                "description": "ConfigCondition captures various conditions of the Config as entries are processed.",
                "type": "object",
                "required": [
                  "status",
                  "type"
                ],
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "lastUpdateTime": {
                    "description": "lastUpdateTime is the last time this condition was updated.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition.",
                    "type": "string"
                  },
                  "reason": {
                    "description": "reason is what caused the condition's last transition.",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "type": "string"
                  },
                  "type": {
                    "description": "type of condition.",
                    "type": "string"
                  }
                }
              }
            },
            "managementState": {
              "description": "managementState reflects the current operational status of the on/off switch for the operator.  This operator compares the ManagementState as part of determining that we are turning the operator back on (i.e. \"Managed\") when it was previously \"Unmanaged\".",
              "type": "string",
              "pattern": "^(Managed|Unmanaged|Force|Removed)$"
            },
            "samplesRegistry": {
              "description": "samplesRegistry allows for the specification of which registry is accessed by the ImageStreams for their image content.  Defaults on the content in https://github.com/openshift/library that are pulled into this github repository, but based on our pulling only ocp content it typically defaults to registry.redhat.io.",
              "type": "string"
            },
            "skippedImagestreams": {
              "description": "skippedImagestreams specifies names of image streams that should NOT be created/updated.  Admins can use this to allow them to delete content they don\u2019t want.  They will still have to manually delete the content but the operator will not recreate(or update) anything listed here.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "skippedTemplates": {
              "description": "skippedTemplates specifies names of templates that should NOT be created/updated.  Admins can use this to allow them to delete content they don\u2019t want.  They will still have to manually delete the content but the operator will not recreate(or update) anything listed here.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "version": {
              "description": "version is the value of the operator's payload based version indicator when it was last successfully processed",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "samples.operator.openshift.io",
          "kind": "Config",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.samples.v1.ConfigList": {
      "description": "ConfigList is a list of Config",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "samples.operator.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of configs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.operator.samples.v1.Config"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ConfigList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "samples.operator.openshift.io",
          "kind": "ConfigList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.Authentication": {
      "description": "Authentication provides information to configure an operator to manage authentication.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Authentication"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "logLevel": {
              "description": "logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. \n Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
              "type": "string",
              "enum": [
                "",
                "Normal",
                "Debug",
                "Trace",
                "TraceAll"
              ]
            },
            "managementState": {
              "description": "managementState indicates whether and how the operator should manage the component",
              "type": "string",
              "pattern": "^(Managed|Unmanaged|Force|Removed)$"
            },
            "observedConfig": {
              "description": "observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator",
              "x-kubernetes-preserve-unknown-fields": true
            },
            "operatorLogLevel": {
              "description": "operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves. \n Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
              "type": "string",
              "enum": [
                "",
                "Normal",
                "Debug",
                "Trace",
                "TraceAll"
              ]
            },
            "unsupportedConfigOverrides": {
              "description": "unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides",
              "x-kubernetes-preserve-unknown-fields": true
            }
          }
        },
        "status": {
          "type": "object",
          "properties": {
            "conditions": {
              "description": "conditions is a list of conditions and their status",
              "type": "array",
              "items": {
                "description": "OperatorCondition is just the standard condition fields.",
                "type": "object",
                "properties": {
                  "lastTransitionTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "type": "string"
                  },
                  "reason": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            },
            "generations": {
              "description": "generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.",
              "type": "array",
              "items": {
                "description": "GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made.",
                "type": "object",
                "properties": {
                  "group": {
                    "description": "group is the group of the thing you're tracking",
                    "type": "string"
                  },
                  "hash": {
                    "description": "hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps",
                    "type": "string"
                  },
                  "lastGeneration": {
                    "description": "lastGeneration is the last generation of the workload controller involved",
                    "type": "integer",
                    "format": "int64"
                  },
                  "name": {
                    "description": "name is the name of the thing you're tracking",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "namespace is where the thing you're tracking is",
                    "type": "string"
                  },
                  "resource": {
                    "description": "resource is the resource type of the thing you're tracking",
                    "type": "string"
                  }
                }
              }
            },
            "managingOAuthAPIServer": {
              "description": "ManagingOAuthAPIServer indicates whether this operator is managing OAuth related APIs. Setting this field to true will cause OAS-O to step down. Note that this field will be removed in the future releases, once https://github.com/openshift/enhancements/blob/master/enhancements/authentication/separate-oauth-resources.md is fully implemented",
              "type": "boolean"
            },
            "oauthAPIServer": {
              "description": "OAuthAPIServer holds status specific only to oauth-apiserver",
              "type": "object",
              "properties": {
                "latestAvailableRevision": {
                  "description": "LatestAvailableRevision is the latest revision used as suffix of revisioned secrets like encryption-config. A new revision causes a new deployment of pods.",
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0
                }
              }
            },
            "observedGeneration": {
              "description": "observedGeneration is the last generation change you've dealt with",
              "type": "integer",
              "format": "int64"
            },
            "readyReplicas": {
              "description": "readyReplicas indicates how many replicas are ready and at the desired state",
              "type": "integer",
              "format": "int32"
            },
            "version": {
              "description": "version is the level this availability applies to",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "Authentication",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.AuthenticationList": {
      "description": "AuthenticationList is a list of Authentication",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of authentications. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.operator.v1.Authentication"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "AuthenticationList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "AuthenticationList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.CSISnapshotController": {
      "description": "CSISnapshotController provides a means to configure an operator to manage the CSI snapshots. `cluster` is the canonical name.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "CSISnapshotController"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec holds user settable values for configuration",
          "type": "object",
          "properties": {
            "logLevel": {
              "description": "logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. \n Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
              "type": "string",
              "enum": [
                "",
                "Normal",
                "Debug",
                "Trace",
                "TraceAll"
              ]
            },
            "managementState": {
              "description": "managementState indicates whether and how the operator should manage the component",
              "type": "string",
              "pattern": "^(Managed|Unmanaged|Force|Removed)$"
            },
            "observedConfig": {
              "description": "observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator",
              "x-kubernetes-preserve-unknown-fields": true
            },
            "operatorLogLevel": {
              "description": "operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves. \n Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
              "type": "string",
              "enum": [
                "",
                "Normal",
                "Debug",
                "Trace",
                "TraceAll"
              ]
            },
            "unsupportedConfigOverrides": {
              "description": "unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides",
              "x-kubernetes-preserve-unknown-fields": true
            }
          }
        },
        "status": {
          "description": "status holds observed values from the cluster. They may not be overridden.",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "conditions is a list of conditions and their status",
              "type": "array",
              "items": {
                "description": "OperatorCondition is just the standard condition fields.",
                "type": "object",
                "properties": {
                  "lastTransitionTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "type": "string"
                  },
                  "reason": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            },
            "generations": {
              "description": "generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.",
              "type": "array",
              "items": {
                "description": "GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made.",
                "type": "object",
                "properties": {
                  "group": {
                    "description": "group is the group of the thing you're tracking",
                    "type": "string"
                  },
                  "hash": {
                    "description": "hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps",
                    "type": "string"
                  },
                  "lastGeneration": {
                    "description": "lastGeneration is the last generation of the workload controller involved",
                    "type": "integer",
                    "format": "int64"
                  },
                  "name": {
                    "description": "name is the name of the thing you're tracking",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "namespace is where the thing you're tracking is",
                    "type": "string"
                  },
                  "resource": {
                    "description": "resource is the resource type of the thing you're tracking",
                    "type": "string"
                  }
                }
              }
            },
            "observedGeneration": {
              "description": "observedGeneration is the last generation change you've dealt with",
              "type": "integer",
              "format": "int64"
            },
            "readyReplicas": {
              "description": "readyReplicas indicates how many replicas are ready and at the desired state",
              "type": "integer",
              "format": "int32"
            },
            "version": {
              "description": "version is the level this availability applies to",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "CSISnapshotController",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.CSISnapshotControllerList": {
      "description": "CSISnapshotControllerList is a list of CSISnapshotController",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of csisnapshotcontrollers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.operator.v1.CSISnapshotController"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "CSISnapshotControllerList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "CSISnapshotControllerList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.CloudCredential": {
      "description": "CloudCredential provides a means to configure an operator to manage CredentialsRequests.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "CloudCredential"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "CloudCredentialSpec is the specification of the desired behavior of the cloud-credential-operator.",
          "type": "object",
          "properties": {
            "credentialsMode": {
              "description": "CredentialsMode allows informing CCO that it should not attempt to dynamically determine the root cloud credentials capabilities, and it should just run in the specified mode. It also allows putting the operator into \"manual\" mode if desired. Leaving the field in default mode runs CCO so that the cluster's cloud credentials will be dynamically probed for capabilities (on supported clouds/platforms).",
              "type": "string",
              "enum": [
                "",
                "Manual",
                "Mint",
                "Passthrough"
              ]
            },
            "logLevel": {
              "description": "logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. \n Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
              "type": "string"
            },
            "managementState": {
              "description": "managementState indicates whether and how the operator should manage the component",
              "type": "string",
              "pattern": "^(Managed|Unmanaged|Force|Removed)$"
            },
            "observedConfig": {
              "description": "observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator",
              "x-kubernetes-preserve-unknown-fields": true
            },
            "operatorLogLevel": {
              "description": "operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves.",
              "type": "string"
            },
            "unsupportedConfigOverrides": {
              "description": "unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides",
              "x-kubernetes-preserve-unknown-fields": true
            }
          }
        },
        "status": {
          "description": "CloudCredentialStatus defines the observed status of the cloud-credential-operator.",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "conditions is a list of conditions and their status",
              "type": "array",
              "items": {
                "description": "OperatorCondition is just the standard condition fields.",
                "type": "object",
                "properties": {
                  "lastTransitionTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "type": "string"
                  },
                  "reason": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            },
            "generations": {
              "description": "generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.",
              "type": "array",
              "items": {
                "description": "GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made.",
                "type": "object",
                "properties": {
                  "group": {
                    "description": "group is the group of the thing you're tracking",
                    "type": "string"
                  },
                  "hash": {
                    "description": "hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps",
                    "type": "string"
                  },
                  "lastGeneration": {
                    "description": "lastGeneration is the last generation of the workload controller involved",
                    "type": "integer",
                    "format": "int64"
                  },
                  "name": {
                    "description": "name is the name of the thing you're tracking",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "namespace is where the thing you're tracking is",
                    "type": "string"
                  },
                  "resource": {
                    "description": "resource is the resource type of the thing you're tracking",
                    "type": "string"
                  }
                }
              }
            },
            "observedGeneration": {
              "description": "observedGeneration is the last generation change you've dealt with",
              "type": "integer",
              "format": "int64"
            },
            "readyReplicas": {
              "description": "readyReplicas indicates how many replicas are ready and at the desired state",
              "type": "integer",
              "format": "int32"
            },
            "version": {
              "description": "version is the level this availability applies to",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "CloudCredential",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.CloudCredentialList": {
      "description": "CloudCredentialList is a list of CloudCredential",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of cloudcredentials. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.operator.v1.CloudCredential"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "CloudCredentialList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "CloudCredentialList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.ClusterCSIDriver": {
      "description": "ClusterCSIDriver object allows management and configuration of a CSI driver operator installed by default in OpenShift. Name of the object must be name of the CSI driver it operates. See CSIDriverName type for list of allowed values.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterCSIDriver"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec holds user settable values for configuration",
          "type": "object",
          "properties": {
            "logLevel": {
              "description": "logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. \n Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
              "type": "string",
              "enum": [
                "",
                "Normal",
                "Debug",
                "Trace",
                "TraceAll"
              ]
            },
            "managementState": {
              "description": "managementState indicates whether and how the operator should manage the component",
              "type": "string",
              "pattern": "^(Managed|Unmanaged|Force|Removed)$"
            },
            "observedConfig": {
              "description": "observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator",
              "x-kubernetes-preserve-unknown-fields": true
            },
            "operatorLogLevel": {
              "description": "operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves. \n Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
              "type": "string",
              "enum": [
                "",
                "Normal",
                "Debug",
                "Trace",
                "TraceAll"
              ]
            },
            "unsupportedConfigOverrides": {
              "description": "unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides",
              "x-kubernetes-preserve-unknown-fields": true
            }
          }
        },
        "status": {
          "description": "status holds observed values from the cluster. They may not be overridden.",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "conditions is a list of conditions and their status",
              "type": "array",
              "items": {
                "description": "OperatorCondition is just the standard condition fields.",
                "type": "object",
                "properties": {
                  "lastTransitionTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "type": "string"
                  },
                  "reason": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            },
            "generations": {
              "description": "generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.",
              "type": "array",
              "items": {
                "description": "GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made.",
                "type": "object",
                "properties": {
                  "group": {
                    "description": "group is the group of the thing you're tracking",
                    "type": "string"
                  },
                  "hash": {
                    "description": "hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps",
                    "type": "string"
                  },
                  "lastGeneration": {
                    "description": "lastGeneration is the last generation of the workload controller involved",
                    "type": "integer",
                    "format": "int64"
                  },
                  "name": {
                    "description": "name is the name of the thing you're tracking",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "namespace is where the thing you're tracking is",
                    "type": "string"
                  },
                  "resource": {
                    "description": "resource is the resource type of the thing you're tracking",
                    "type": "string"
                  }
                }
              }
            },
            "observedGeneration": {
              "description": "observedGeneration is the last generation change you've dealt with",
              "type": "integer",
              "format": "int64"
            },
            "readyReplicas": {
              "description": "readyReplicas indicates how many replicas are ready and at the desired state",
              "type": "integer",
              "format": "int32"
            },
            "version": {
              "description": "version is the level this availability applies to",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "ClusterCSIDriver",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.ClusterCSIDriverList": {
      "description": "ClusterCSIDriverList is a list of ClusterCSIDriver",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of clustercsidrivers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.operator.v1.ClusterCSIDriver"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterCSIDriverList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "ClusterCSIDriverList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.Config": {
      "description": "Config provides information to configure the config operator.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Config"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is the specification of the desired behavior of the Config Operator.",
          "type": "object",
          "properties": {
            "logLevel": {
              "description": "logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. \n Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
              "type": "string",
              "enum": [
                "",
                "Normal",
                "Debug",
                "Trace",
                "TraceAll"
              ]
            },
            "managementState": {
              "description": "managementState indicates whether and how the operator should manage the component",
              "type": "string",
              "pattern": "^(Managed|Unmanaged|Force|Removed)$"
            },
            "observedConfig": {
              "description": "observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator",
              "x-kubernetes-preserve-unknown-fields": true
            },
            "operatorLogLevel": {
              "description": "operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves. \n Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
              "type": "string",
              "enum": [
                "",
                "Normal",
                "Debug",
                "Trace",
                "TraceAll"
              ]
            },
            "unsupportedConfigOverrides": {
              "description": "unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides",
              "x-kubernetes-preserve-unknown-fields": true
            }
          }
        },
        "status": {
          "description": "status defines the observed status of the Config Operator.",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "conditions is a list of conditions and their status",
              "type": "array",
              "items": {
                "description": "OperatorCondition is just the standard condition fields.",
                "type": "object",
                "properties": {
                  "lastTransitionTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "type": "string"
                  },
                  "reason": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            },
            "generations": {
              "description": "generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.",
              "type": "array",
              "items": {
                "description": "GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made.",
                "type": "object",
                "properties": {
                  "group": {
                    "description": "group is the group of the thing you're tracking",
                    "type": "string"
                  },
                  "hash": {
                    "description": "hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps",
                    "type": "string"
                  },
                  "lastGeneration": {
                    "description": "lastGeneration is the last generation of the workload controller involved",
                    "type": "integer",
                    "format": "int64"
                  },
                  "name": {
                    "description": "name is the name of the thing you're tracking",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "namespace is where the thing you're tracking is",
                    "type": "string"
                  },
                  "resource": {
                    "description": "resource is the resource type of the thing you're tracking",
                    "type": "string"
                  }
                }
              }
            },
            "observedGeneration": {
              "description": "observedGeneration is the last generation change you've dealt with",
              "type": "integer",
              "format": "int64"
            },
            "readyReplicas": {
              "description": "readyReplicas indicates how many replicas are ready and at the desired state",
              "type": "integer",
              "format": "int32"
            },
            "version": {
              "description": "version is the level this availability applies to",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "Config",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.ConfigList": {
      "description": "ConfigList is a list of Config",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of configs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.operator.v1.Config"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ConfigList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "ConfigList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.Console": {
      "description": "Console provides a means to configure an operator to manage the console.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Console"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "ConsoleSpec is the specification of the desired behavior of the Console.",
          "type": "object",
          "properties": {
            "customization": {
              "description": "customization is used to optionally provide a small set of customization options to the web console.",
              "type": "object",
              "properties": {
                "brand": {
                  "description": "brand is the default branding of the web console which can be overridden by providing the brand field.  There is a limited set of specific brand options. This field controls elements of the console such as the logo. Invalid value will prevent a console rollout.",
                  "type": "string",
                  "pattern": "^$|^(ocp|origin|okd|dedicated|online|azure)$"
                },
                "customLogoFile": {
                  "description": "customLogoFile replaces the default OpenShift logo in the masthead and about dialog. It is a reference to a ConfigMap in the openshift-config namespace. This can be created with a command like 'oc create configmap custom-logo --from-file=/path/to/file -n openshift-config'. Image size must be less than 1 MB due to constraints on the ConfigMap size. The ConfigMap key should include a file extension so that the console serves the file with the correct MIME type. Recommended logo specifications: Dimensions: Max height of 68px and max width of 200px SVG format preferred",
                  "type": "object",
                  "properties": {
                    "key": {
                      "description": "Key allows pointing to a specific key/value inside of the configmap.  This is useful for logical file references.",
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                },
                "customProductName": {
                  "description": "customProductName is the name that will be displayed in page titles, logo alt text, and the about dialog instead of the normal OpenShift product name.",
                  "type": "string"
                },
                "documentationBaseURL": {
                  "description": "documentationBaseURL links to external documentation are shown in various sections of the web console.  Providing documentationBaseURL will override the default documentation URL. Invalid value will prevent a console rollout.",
                  "type": "string",
                  "pattern": "^$|^((https):\\/\\/?)[^\\s()<>]+(?:\\([\\w\\d]+\\)|([^[:punct:]\\s]|\\/?))\\/$"
                }
              }
            },
            "logLevel": {
              "description": "logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. \n Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
              "type": "string",
              "enum": [
                "",
                "Normal",
                "Debug",
                "Trace",
                "TraceAll"
              ]
            },
            "managementState": {
              "description": "managementState indicates whether and how the operator should manage the component",
              "type": "string",
              "pattern": "^(Managed|Unmanaged|Force|Removed)$"
            },
            "observedConfig": {
              "description": "observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator",
              "x-kubernetes-preserve-unknown-fields": true
            },
            "operatorLogLevel": {
              "description": "operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves. \n Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
              "type": "string",
              "enum": [
                "",
                "Normal",
                "Debug",
                "Trace",
                "TraceAll"
              ]
            },
            "providers": {
              "description": "providers contains configuration for using specific service providers.",
              "type": "object",
              "properties": {
                "statuspage": {
                  "description": "statuspage contains ID for statuspage.io page that provides status info about.",
                  "type": "object",
                  "properties": {
                    "pageID": {
                      "description": "pageID is the unique ID assigned by Statuspage for your page. This must be a public page.",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "route": {
              "description": "route contains hostname and secret reference that contains the serving certificate. If a custom route is specified, a new route will be created with the provided hostname, under which console will be available. In case of custom hostname uses the default routing suffix of the cluster, the Secret specification for a serving certificate will not be needed. In case of custom hostname points to an arbitrary domain, manual DNS configurations steps are necessary. The default console route will be maintained to reserve the default hostname for console if the custom route is removed. If not specified, default route will be used.",
              "type": "object",
              "properties": {
                "hostname": {
                  "description": "hostname is the desired custom domain under which console will be available.",
                  "type": "string"
                },
                "secret": {
                  "description": "secret points to secret in the openshift-config namespace that contains custom certificate and key and needs to be created manually by the cluster admin. Referenced Secret is required to contain following key value pairs: - \"tls.crt\" - to specifies custom certificate - \"tls.key\" - to specifies private key of the custom certificate If the custom hostname uses the default routing suffix of the cluster, the Secret specification for a serving certificate will not be needed.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "name is the metadata.name of the referenced secret",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "unsupportedConfigOverrides": {
              "description": "unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides",
              "x-kubernetes-preserve-unknown-fields": true
            }
          }
        },
        "status": {
          "description": "ConsoleStatus defines the observed status of the Console.",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "conditions is a list of conditions and their status",
              "type": "array",
              "items": {
                "description": "OperatorCondition is just the standard condition fields.",
                "type": "object",
                "properties": {
                  "lastTransitionTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "type": "string"
                  },
                  "reason": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            },
            "generations": {
              "description": "generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.",
              "type": "array",
              "items": {
                "description": "GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made.",
                "type": "object",
                "properties": {
                  "group": {
                    "description": "group is the group of the thing you're tracking",
                    "type": "string"
                  },
                  "hash": {
                    "description": "hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps",
                    "type": "string"
                  },
                  "lastGeneration": {
                    "description": "lastGeneration is the last generation of the workload controller involved",
                    "type": "integer",
                    "format": "int64"
                  },
                  "name": {
                    "description": "name is the name of the thing you're tracking",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "namespace is where the thing you're tracking is",
                    "type": "string"
                  },
                  "resource": {
                    "description": "resource is the resource type of the thing you're tracking",
                    "type": "string"
                  }
                }
              }
            },
            "observedGeneration": {
              "description": "observedGeneration is the last generation change you've dealt with",
              "type": "integer",
              "format": "int64"
            },
            "readyReplicas": {
              "description": "readyReplicas indicates how many replicas are ready and at the desired state",
              "type": "integer",
              "format": "int32"
            },
            "version": {
              "description": "version is the level this availability applies to",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "Console",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.ConsoleList": {
      "description": "ConsoleList is a list of Console",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of consoles. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.operator.v1.Console"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ConsoleList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "ConsoleList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.DNS": {
      "description": "DNS manages the CoreDNS component to provide a name resolution service for pods and services in the cluster. \n This supports the DNS-based service discovery specification: https://github.com/kubernetes/dns/blob/master/docs/specification.md \n More details: https://kubernetes.io/docs/tasks/administer-cluster/coredns",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "DNS"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is the specification of the desired behavior of the DNS.",
          "type": "object",
          "properties": {
            "servers": {
              "description": "servers is a list of DNS resolvers that provide name query delegation for one or more subdomains outside the scope of the cluster domain. If servers consists of more than one Server, longest suffix match will be used to determine the Server. \n For example, if there are two Servers, one for \"foo.com\" and another for \"a.foo.com\", and the name query is for \"www.a.foo.com\", it will be routed to the Server with Zone \"a.foo.com\". \n If this field is nil, no servers are created.",
              "type": "array",
              "items": {
                "description": "Server defines the schema for a server that runs per instance of CoreDNS.",
                "type": "object",
                "properties": {
                  "forwardPlugin": {
                    "description": "forwardPlugin defines a schema for configuring CoreDNS to proxy DNS messages to upstream resolvers.",
                    "type": "object",
                    "properties": {
                      "upstreams": {
                        "description": "upstreams is a list of resolvers to forward name queries for subdomains of Zones. Upstreams are randomized when more than 1 upstream is specified. Each instance of CoreDNS performs health checking of Upstreams. When a healthy upstream returns an error during the exchange, another resolver is tried from Upstreams. Each upstream is represented by an IP address or IP:port if the upstream listens on a port other than 53. \n A maximum of 15 upstreams is allowed per ForwardPlugin.",
                        "type": "array",
                        "maxItems": 15,
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "name": {
                    "description": "name is required and specifies a unique name for the server. Name must comply with the Service Name Syntax of rfc6335.",
                    "type": "string"
                  },
                  "zones": {
                    "description": "zones is required and specifies the subdomains that Server is authoritative for. Zones must conform to the rfc1123 definition of a subdomain. Specifying the cluster domain (i.e., \"cluster.local\") is invalid.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "status": {
          "description": "status is the most recently observed status of the DNS.",
          "type": "object",
          "required": [
            "clusterDomain",
            "clusterIP"
          ],
          "properties": {
            "clusterDomain": {
              "description": "clusterDomain is the local cluster DNS domain suffix for DNS services. This will be a subdomain as defined in RFC 1034, section 3.5: https://tools.ietf.org/html/rfc1034#section-3.5 Example: \"cluster.local\" \n More info: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service",
              "type": "string"
            },
            "clusterIP": {
              "description": "clusterIP is the service IP through which this DNS is made available. \n In the case of the default DNS, this will be a well known IP that is used as the default nameserver for pods that are using the default ClusterFirst DNS policy. \n In general, this IP can be specified in a pod's spec.dnsConfig.nameservers list or used explicitly when performing name resolution from within the cluster. Example: dig foo.com @<service IP> \n More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
              "type": "string"
            },
            "conditions": {
              "description": "conditions provide information about the state of the DNS on the cluster. \n These are the supported DNS conditions: \n   * Available   - True if the following conditions are met:     * DNS controller daemonset is available.   - False if any of those conditions are unsatisfied.",
              "type": "array",
              "items": {
                "description": "OperatorCondition is just the standard condition fields.",
                "type": "object",
                "properties": {
                  "lastTransitionTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "type": "string"
                  },
                  "reason": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "DNS",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.DNSList": {
      "description": "DNSList is a list of DNS",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of dnses. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.operator.v1.DNS"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "DNSList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "DNSList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.Etcd": {
      "description": "Etcd provides information to configure an operator to manage kube-apiserver.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Etcd"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "failedRevisionLimit": {
              "description": "failedRevisionLimit is the number of failed static pod installer revisions to keep on disk and in the api -1 = unlimited, 0 or unset = 5 (default)",
              "type": "integer",
              "format": "int32"
            },
            "forceRedeploymentReason": {
              "description": "forceRedeploymentReason can be used to force the redeployment of the operand by providing a unique string. This provides a mechanism to kick a previously failed deployment and provide a reason why you think it will work this time instead of failing again on the same config.",
              "type": "string"
            },
            "logLevel": {
              "description": "logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. \n Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
              "type": "string",
              "enum": [
                "",
                "Normal",
                "Debug",
                "Trace",
                "TraceAll"
              ]
            },
            "managementState": {
              "description": "managementState indicates whether and how the operator should manage the component",
              "type": "string",
              "pattern": "^(Managed|Unmanaged|Force|Removed)$"
            },
            "observedConfig": {
              "description": "observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator",
              "x-kubernetes-preserve-unknown-fields": true
            },
            "operatorLogLevel": {
              "description": "operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves. \n Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
              "type": "string",
              "enum": [
                "",
                "Normal",
                "Debug",
                "Trace",
                "TraceAll"
              ]
            },
            "succeededRevisionLimit": {
              "description": "succeededRevisionLimit is the number of successful static pod installer revisions to keep on disk and in the api -1 = unlimited, 0 or unset = 5 (default)",
              "type": "integer",
              "format": "int32"
            },
            "unsupportedConfigOverrides": {
              "description": "unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides",
              "x-kubernetes-preserve-unknown-fields": true
            }
          }
        },
        "status": {
          "type": "object",
          "properties": {
            "conditions": {
              "description": "conditions is a list of conditions and their status",
              "type": "array",
              "items": {
                "description": "OperatorCondition is just the standard condition fields.",
                "type": "object",
                "properties": {
                  "lastTransitionTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "type": "string"
                  },
                  "reason": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            },
            "generations": {
              "description": "generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.",
              "type": "array",
              "items": {
                "description": "GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made.",
                "type": "object",
                "properties": {
                  "group": {
                    "description": "group is the group of the thing you're tracking",
                    "type": "string"
                  },
                  "hash": {
                    "description": "hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps",
                    "type": "string"
                  },
                  "lastGeneration": {
                    "description": "lastGeneration is the last generation of the workload controller involved",
                    "type": "integer",
                    "format": "int64"
                  },
                  "name": {
                    "description": "name is the name of the thing you're tracking",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "namespace is where the thing you're tracking is",
                    "type": "string"
                  },
                  "resource": {
                    "description": "resource is the resource type of the thing you're tracking",
                    "type": "string"
                  }
                }
              }
            },
            "latestAvailableRevision": {
              "description": "latestAvailableRevision is the deploymentID of the most recent deployment",
              "type": "integer",
              "format": "int32"
            },
            "latestAvailableRevisionReason": {
              "description": "latestAvailableRevisionReason describe the detailed reason for the most recent deployment",
              "type": "string"
            },
            "nodeStatuses": {
              "description": "nodeStatuses track the deployment values and errors across individual nodes",
              "type": "array",
              "items": {
                "description": "NodeStatus provides information about the current state of a particular node managed by this operator.",
                "type": "object",
                "properties": {
                  "currentRevision": {
                    "description": "currentRevision is the generation of the most recently successful deployment",
                    "type": "integer",
                    "format": "int32"
                  },
                  "lastFailedRevision": {
                    "description": "lastFailedRevision is the generation of the deployment we tried and failed to deploy.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "lastFailedRevisionErrors": {
                    "description": "lastFailedRevisionErrors is a list of the errors during the failed deployment referenced in lastFailedRevision",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "nodeName": {
                    "description": "nodeName is the name of the node",
                    "type": "string"
                  },
                  "targetRevision": {
                    "description": "targetRevision is the generation of the deployment we're trying to apply",
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            },
            "observedGeneration": {
              "description": "observedGeneration is the last generation change you've dealt with",
              "type": "integer",
              "format": "int64"
            },
            "readyReplicas": {
              "description": "readyReplicas indicates how many replicas are ready and at the desired state",
              "type": "integer",
              "format": "int32"
            },
            "version": {
              "description": "version is the level this availability applies to",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "Etcd",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.EtcdList": {
      "description": "EtcdList is a list of Etcd",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of etcds. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.operator.v1.Etcd"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "EtcdList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "EtcdList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.IngressController": {
      "description": "IngressController describes a managed ingress controller for the cluster. The controller can service OpenShift Route and Kubernetes Ingress resources. \n When an IngressController is created, a new ingress controller deployment is created to allow external traffic to reach the services that expose Ingress or Route resources. Updating this resource may lead to disruption for public facing network connections as a new ingress controller revision may be rolled out. \n https://kubernetes.io/docs/concepts/services-networking/ingress-controllers \n Whenever possible, sensible defaults for the platform are used. See each field for more details.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "IngressController"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is the specification of the desired behavior of the IngressController.",
          "type": "object",
          "properties": {
            "defaultCertificate": {
              "description": "defaultCertificate is a reference to a secret containing the default certificate served by the ingress controller. When Routes don't specify their own certificate, defaultCertificate is used. \n The secret must contain the following keys and data: \n   tls.crt: certificate file contents   tls.key: key file contents \n If unset, a wildcard certificate is automatically generated and used. The certificate is valid for the ingress controller domain (and subdomains) and the generated certificate's CA will be automatically integrated with the cluster's trust store. \n If a wildcard certificate is used and shared by multiple HTTP/2 enabled routes (which implies ALPN) then clients (i.e., notably browsers) are at liberty to reuse open connections. This means a client can reuse a connection to another route and that is likely to fail. This behaviour is generally known as connection coalescing. \n The in-use certificate (whether generated or user-specified) will be automatically integrated with OpenShift's built-in OAuth server.",
              "type": "object",
              "properties": {
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                  "type": "string"
                }
              }
            },
            "domain": {
              "description": "domain is a DNS name serviced by the ingress controller and is used to configure multiple features: \n * For the LoadBalancerService endpoint publishing strategy, domain is   used to configure DNS records. See endpointPublishingStrategy. \n * When using a generated default certificate, the certificate will be valid   for domain and its subdomains. See defaultCertificate. \n * The value is published to individual Route statuses so that end-users   know where to target external DNS records. \n domain must be unique among all IngressControllers, and cannot be updated. \n If empty, defaults to ingress.config.openshift.io/cluster .spec.domain.",
              "type": "string"
            },
            "endpointPublishingStrategy": {
              "description": "endpointPublishingStrategy is used to publish the ingress controller endpoints to other networks, enable load balancer integrations, etc. \n If unset, the default is based on infrastructure.config.openshift.io/cluster .status.platform: \n   AWS:      LoadBalancerService (with External scope)   Azure:    LoadBalancerService (with External scope)   GCP:      LoadBalancerService (with External scope)   IBMCloud: LoadBalancerService (with External scope)   Libvirt:  HostNetwork \n Any other platform types (including None) default to HostNetwork. \n endpointPublishingStrategy cannot be updated.",
              "type": "object",
              "required": [
                "type"
              ],
              "properties": {
                "hostNetwork": {
                  "description": "hostNetwork holds parameters for the HostNetwork endpoint publishing strategy. Present only if type is HostNetwork.",
                  "type": "object"
                },
                "loadBalancer": {
                  "description": "loadBalancer holds parameters for the load balancer. Present only if type is LoadBalancerService.",
                  "type": "object",
                  "required": [
                    "scope"
                  ],
                  "properties": {
                    "providerParameters": {
                      "description": "providerParameters holds desired load balancer information specific to the underlying infrastructure provider. \n If empty, defaults will be applied. See specific providerParameters fields for details about their defaults.",
                      "type": "object",
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "aws": {
                          "description": "aws provides configuration settings that are specific to AWS load balancers. \n If empty, defaults will be applied. See specific aws fields for details about their defaults.",
                          "type": "object",
                          "required": [
                            "type"
                          ],
                          "properties": {
                            "classicLoadBalancer": {
                              "description": "classicLoadBalancerParameters holds configuration parameters for an AWS classic load balancer. Present only if type is Classic.",
                              "type": "object"
                            },
                            "networkLoadBalancer": {
                              "description": "networkLoadBalancerParameters holds configuration parameters for an AWS network load balancer. Present only if type is NLB.",
                              "type": "object"
                            },
                            "type": {
                              "description": "type is the type of AWS load balancer to instantiate for an ingresscontroller. \n Valid values are: \n * \"Classic\": A Classic Load Balancer that makes routing decisions at either   the transport layer (TCP/SSL) or the application layer (HTTP/HTTPS). See   the following for additional details: \n     https://docs.aws.amazon.com/AmazonECS/latest/developerguide/load-balancer-types.html#clb \n * \"NLB\": A Network Load Balancer that makes routing decisions at the   transport layer (TCP/SSL). See the following for additional details: \n     https://docs.aws.amazon.com/AmazonECS/latest/developerguide/load-balancer-types.html#nlb",
                              "type": "string",
                              "enum": [
                                "Classic",
                                "NLB"
                              ]
                            }
                          }
                        },
                        "type": {
                          "description": "type is the underlying infrastructure provider for the load balancer. Allowed values are \"AWS\", \"Azure\", \"BareMetal\", \"GCP\", \"OpenStack\", and \"VSphere\".",
                          "type": "string",
                          "enum": [
                            "AWS",
                            "Azure",
                            "BareMetal",
                            "GCP",
                            "OpenStack",
                            "VSphere",
                            "IBM"
                          ]
                        }
                      }
                    },
                    "scope": {
                      "description": "scope indicates the scope at which the load balancer is exposed. Possible values are \"External\" and \"Internal\".",
                      "type": "string",
                      "enum": [
                        "Internal",
                        "External"
                      ]
                    }
                  }
                },
                "nodePort": {
                  "description": "nodePort holds parameters for the NodePortService endpoint publishing strategy. Present only if type is NodePortService.",
                  "type": "object"
                },
                "private": {
                  "description": "private holds parameters for the Private endpoint publishing strategy. Present only if type is Private.",
                  "type": "object"
                },
                "type": {
                  "description": "type is the publishing strategy to use. Valid values are: \n * LoadBalancerService \n Publishes the ingress controller using a Kubernetes LoadBalancer Service. \n In this configuration, the ingress controller deployment uses container networking. A LoadBalancer Service is created to publish the deployment. \n See: https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer \n If domain is set, a wildcard DNS record will be managed to point at the LoadBalancer Service's external name. DNS records are managed only in DNS zones defined by dns.config.openshift.io/cluster .spec.publicZone and .spec.privateZone. \n Wildcard DNS management is currently supported only on the AWS, Azure, and GCP platforms. \n * HostNetwork \n Publishes the ingress controller on node ports where the ingress controller is deployed. \n In this configuration, the ingress controller deployment uses host networking, bound to node ports 80 and 443. The user is responsible for configuring an external load balancer to publish the ingress controller via the node ports. \n * Private \n Does not publish the ingress controller. \n In this configuration, the ingress controller deployment uses container networking, and is not explicitly published. The user must manually publish the ingress controller. \n * NodePortService \n Publishes the ingress controller using a Kubernetes NodePort Service. \n In this configuration, the ingress controller deployment uses container networking. A NodePort Service is created to publish the deployment. The specific node ports are dynamically allocated by OpenShift; however, to support static port allocations, user changes to the node port field of the managed NodePort Service will preserved.",
                  "type": "string",
                  "enum": [
                    "LoadBalancerService",
                    "HostNetwork",
                    "Private",
                    "NodePortService"
                  ]
                }
              }
            },
            "httpHeaders": {
              "description": "httpHeaders defines policy for HTTP headers. \n If this field is empty, the default values are used.",
              "type": "object",
              "properties": {
                "forwardedHeaderPolicy": {
                  "description": "forwardedHeaderPolicy specifies when and how the IngressController sets the Forwarded, X-Forwarded-For, X-Forwarded-Host, X-Forwarded-Port, X-Forwarded-Proto, and X-Forwarded-Proto-Version HTTP headers.  The value may be one of the following: \n * \"Append\", which specifies that the IngressController appends the   headers, preserving existing headers. \n * \"Replace\", which specifies that the IngressController sets the   headers, replacing any existing Forwarded or X-Forwarded-* headers. \n * \"IfNone\", which specifies that the IngressController sets the   headers if they are not already set. \n * \"Never\", which specifies that the IngressController never sets the   headers, preserving any existing headers. \n By default, the policy is \"Append\".",
                  "type": "string",
                  "enum": [
                    "Append",
                    "Replace",
                    "IfNone",
                    "Never"
                  ]
                },
                "uniqueId": {
                  "description": "uniqueId describes configuration for a custom HTTP header that the ingress controller should inject into incoming HTTP requests. Typically, this header is configured to have a value that is unique to the HTTP request.  The header can be used by applications or included in access logs to facilitate tracing individual HTTP requests. \n If this field is empty, no such header is injected into requests.",
                  "type": "object",
                  "properties": {
                    "format": {
                      "description": "format specifies the format for the injected HTTP header's value. This field has no effect unless name is specified.  For the HAProxy-based ingress controller implementation, this format uses the same syntax as the HTTP log format.  If the field is empty, the default value is \"%{+X}o\\\\ %ci:%cp_%fi:%fp_%Ts_%rt:%pid\"; see the corresponding HAProxy documentation: http://cbonte.github.io/haproxy-dconv/2.0/configuration.html#8.2.3",
                      "type": "string",
                      "maxLength": 1024,
                      "minLength": 0,
                      "pattern": "^(%(%|(\\{[-+]?[QXE](,[-+]?[QXE])*\\})?([A-Za-z]+|\\[[.0-9A-Z_a-z]+(\\([^)]+\\))?(,[.0-9A-Z_a-z]+(\\([^)]+\\))?)*\\]))|[^%[:cntrl:]])*$"
                    },
                    "name": {
                      "description": "name specifies the name of the HTTP header (for example, \"unique-id\") that the ingress controller should inject into HTTP requests.  The field's value must be a valid HTTP header name as defined in RFC 2616 section 4.2.  If the field is empty, no header is injected.",
                      "type": "string",
                      "maxLength": 1024,
                      "minLength": 0,
                      "pattern": "^$|^[-!#$%&'*+.0-9A-Z^_`a-z|~]+$"
                    }
                  }
                }
              }
            },
            "logging": {
              "description": "logging defines parameters for what should be logged where.  If this field is empty, operational logs are enabled but access logs are disabled.",
              "type": "object",
              "properties": {
                "access": {
                  "description": "access describes how the client requests should be logged. \n If this field is empty, access logging is disabled.",
                  "type": "object",
                  "required": [
                    "destination"
                  ],
                  "properties": {
                    "destination": {
                      "description": "destination is where access logs go.",
                      "type": "object",
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "container": {
                          "description": "container holds parameters for the Container logging destination. Present only if type is Container.",
                          "type": "object"
                        },
                        "syslog": {
                          "description": "syslog holds parameters for a syslog endpoint.  Present only if type is Syslog.",
                          "type": "object",
                          "required": [
                            "address",
                            "port"
                          ],
                          "properties": {
                            "address": {
                              "description": "address is the IP address of the syslog endpoint that receives log messages.",
                              "type": "string"
                            },
                            "facility": {
                              "description": "facility specifies the syslog facility of log messages. \n If this field is empty, the facility is \"local1\".",
                              "type": "string",
                              "enum": [
                                "kern",
                                "user",
                                "mail",
                                "daemon",
                                "auth",
                                "syslog",
                                "lpr",
                                "news",
                                "uucp",
                                "cron",
                                "auth2",
                                "ftp",
                                "ntp",
                                "audit",
                                "alert",
                                "cron2",
                                "local0",
                                "local1",
                                "local2",
                                "local3",
                                "local4",
                                "local5",
                                "local6",
                                "local7"
                              ]
                            },
                            "port": {
                              "description": "port is the UDP port number of the syslog endpoint that receives log messages.",
                              "type": "integer",
                              "format": "int32",
                              "maximum": 65535,
                              "minimum": 1
                            }
                          }
                        },
                        "type": {
                          "description": "type is the type of destination for logs.  It must be one of the following: \n * Container \n The ingress operator configures the sidecar container named \"logs\" on the ingress controller pod and configures the ingress controller to write logs to the sidecar.  The logs are then available as container logs.  The expectation is that the administrator configures a custom logging solution that reads logs from this sidecar.  Note that using container logs means that logs may be dropped if the rate of logs exceeds the container runtime's or the custom logging solution's capacity. \n * Syslog \n Logs are sent to a syslog endpoint.  The administrator must specify an endpoint that can receive syslog messages.  The expectation is that the administrator has configured a custom syslog instance.",
                          "type": "string",
                          "enum": [
                            "Container",
                            "Syslog"
                          ]
                        }
                      }
                    },
                    "httpCaptureCookies": {
                      "description": "httpCaptureCookies specifies HTTP cookies that should be captured in access logs.  If this field is empty, no cookies are captured.",
                      "maxItems": 1
                    },
                    "httpCaptureHeaders": {
                      "description": "httpCaptureHeaders defines HTTP headers that should be captured in access logs.  If this field is empty, no headers are captured. \n Note that this option only applies to cleartext HTTP connections and to secure HTTP connections for which the ingress controller terminates encryption (that is, edge-terminated or reencrypt connections).  Headers cannot be captured for TLS passthrough connections.",
                      "type": "object",
                      "properties": {
                        "request": {
                          "description": "request specifies which HTTP request headers to capture. \n If this field is empty, no request headers are captured."
                        },
                        "response": {
                          "description": "response specifies which HTTP response headers to capture. \n If this field is empty, no response headers are captured."
                        }
                      }
                    },
                    "httpLogFormat": {
                      "description": "httpLogFormat specifies the format of the log message for an HTTP request. \n If this field is empty, log messages use the implementation's default HTTP log format.  For HAProxy's default HTTP log format, see the HAProxy documentation: http://cbonte.github.io/haproxy-dconv/2.0/configuration.html#8.2.3 \n Note that this format only applies to cleartext HTTP connections and to secure HTTP connections for which the ingress controller terminates encryption (that is, edge-terminated or reencrypt connections).  It does not affect the log format for TLS passthrough connections.",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "namespaceSelector": {
              "description": "namespaceSelector is used to filter the set of namespaces serviced by the ingress controller. This is useful for implementing shards. \n If unset, the default is no filtering.",
              "type": "object",
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "type": "array",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                    "type": "object",
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "matchLabels": {
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "nodePlacement": {
              "description": "nodePlacement enables explicit control over the scheduling of the ingress controller. \n If unset, defaults are used. See NodePlacement for more details.",
              "type": "object",
              "properties": {
                "nodeSelector": {
                  "description": "nodeSelector is the node selector applied to ingress controller deployments. \n If unset, the default is: \n   beta.kubernetes.io/os: linux   node-role.kubernetes.io/worker: '' \n If set, the specified selector is used and replaces the default.",
                  "type": "object",
                  "properties": {
                    "matchExpressions": {
                      "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                      "type": "array",
                      "items": {
                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                        "type": "object",
                        "required": [
                          "key",
                          "operator"
                        ],
                        "properties": {
                          "key": {
                            "description": "key is the label key that the selector applies to.",
                            "type": "string"
                          },
                          "operator": {
                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                            "type": "string"
                          },
                          "values": {
                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "matchLabels": {
                      "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  }
                },
                "tolerations": {
                  "description": "tolerations is a list of tolerations applied to ingress controller deployments. \n The default is an empty list. \n See https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/",
                  "type": "array",
                  "items": {
                    "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
                    "type": "object",
                    "properties": {
                      "effect": {
                        "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                        "type": "string"
                      },
                      "key": {
                        "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                        "type": "string"
                      },
                      "tolerationSeconds": {
                        "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "value": {
                        "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "replicas": {
              "description": "replicas is the desired number of ingress controller replicas. If unset, defaults to 2.",
              "type": "integer",
              "format": "int32"
            },
            "routeAdmission": {
              "description": "routeAdmission defines a policy for handling new route claims (for example, to allow or deny claims across namespaces). \n If empty, defaults will be applied. See specific routeAdmission fields for details about their defaults.",
              "type": "object",
              "properties": {
                "namespaceOwnership": {
                  "description": "namespaceOwnership describes how host name claims across namespaces should be handled. \n Value must be one of: \n - Strict: Do not allow routes in different namespaces to claim the same host. \n - InterNamespaceAllowed: Allow routes to claim different paths of the same   host name across namespaces. \n If empty, the default is Strict.",
                  "type": "string",
                  "enum": [
                    "InterNamespaceAllowed",
                    "Strict"
                  ]
                },
                "wildcardPolicy": {
                  "description": "wildcardPolicy describes how routes with wildcard policies should be handled for the ingress controller. WildcardPolicy controls use of routes [1] exposed by the ingress controller based on the route's wildcard policy. \n [1] https://github.com/openshift/api/blob/master/route/v1/types.go \n Note: Updating WildcardPolicy from WildcardsAllowed to WildcardsDisallowed will cause admitted routes with a wildcard policy of Subdomain to stop working. These routes must be updated to a wildcard policy of None to be readmitted by the ingress controller. \n WildcardPolicy supports WildcardsAllowed and WildcardsDisallowed values. \n If empty, defaults to \"WildcardsDisallowed\".",
                  "type": "string",
                  "enum": [
                    "WildcardsAllowed",
                    "WildcardsDisallowed"
                  ]
                }
              }
            },
            "routeSelector": {
              "description": "routeSelector is used to filter the set of Routes serviced by the ingress controller. This is useful for implementing shards. \n If unset, the default is no filtering.",
              "type": "object",
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "type": "array",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                    "type": "object",
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "matchLabels": {
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "tlsSecurityProfile": {
              "description": "tlsSecurityProfile specifies settings for TLS connections for ingresscontrollers. \n If unset, the default is based on the apiservers.config.openshift.io/cluster resource. \n Note that when using the Old, Intermediate, and Modern profile types, the effective profile configuration is subject to change between releases. For example, given a specification to use the Intermediate profile deployed on release X.Y.Z, an upgrade to release X.Y.Z+1 may cause a new profile configuration to be applied to the ingress controller, resulting in a rollout. \n Note that the minimum TLS version for ingress controllers is 1.1, and the maximum TLS version is 1.2.  An implication of this restriction is that the Modern TLS profile type cannot be used because it requires TLS 1.3.",
              "type": "object",
              "properties": {
                "custom": {
                  "description": "custom is a user-defined TLS security profile. Be extremely careful using a custom profile as invalid configurations can be catastrophic. An example custom profile looks like this: \n   ciphers:     - ECDHE-ECDSA-CHACHA20-POLY1305     - ECDHE-RSA-CHACHA20-POLY1305     - ECDHE-RSA-AES128-GCM-SHA256     - ECDHE-ECDSA-AES128-GCM-SHA256   minTLSVersion: TLSv1.1"
                },
                "intermediate": {
                  "description": "intermediate is a TLS security profile based on: \n https://wiki.mozilla.org/Security/Server_Side_TLS#Intermediate_compatibility_.28recommended.29 \n and looks like this (yaml): \n   ciphers:     - TLS_AES_128_GCM_SHA256     - TLS_AES_256_GCM_SHA384     - TLS_CHACHA20_POLY1305_SHA256     - ECDHE-ECDSA-AES128-GCM-SHA256     - ECDHE-RSA-AES128-GCM-SHA256     - ECDHE-ECDSA-AES256-GCM-SHA384     - ECDHE-RSA-AES256-GCM-SHA384     - ECDHE-ECDSA-CHACHA20-POLY1305     - ECDHE-RSA-CHACHA20-POLY1305     - DHE-RSA-AES128-GCM-SHA256     - DHE-RSA-AES256-GCM-SHA384   minTLSVersion: TLSv1.2"
                },
                "modern": {
                  "description": "modern is a TLS security profile based on: \n https://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility \n and looks like this (yaml): \n   ciphers:     - TLS_AES_128_GCM_SHA256     - TLS_AES_256_GCM_SHA384     - TLS_CHACHA20_POLY1305_SHA256   minTLSVersion: TLSv1.3 \n NOTE: Currently unsupported."
                },
                "old": {
                  "description": "old is a TLS security profile based on: \n https://wiki.mozilla.org/Security/Server_Side_TLS#Old_backward_compatibility \n and looks like this (yaml): \n   ciphers:     - TLS_AES_128_GCM_SHA256     - TLS_AES_256_GCM_SHA384     - TLS_CHACHA20_POLY1305_SHA256     - ECDHE-ECDSA-AES128-GCM-SHA256     - ECDHE-RSA-AES128-GCM-SHA256     - ECDHE-ECDSA-AES256-GCM-SHA384     - ECDHE-RSA-AES256-GCM-SHA384     - ECDHE-ECDSA-CHACHA20-POLY1305     - ECDHE-RSA-CHACHA20-POLY1305     - DHE-RSA-AES128-GCM-SHA256     - DHE-RSA-AES256-GCM-SHA384     - DHE-RSA-CHACHA20-POLY1305     - ECDHE-ECDSA-AES128-SHA256     - ECDHE-RSA-AES128-SHA256     - ECDHE-ECDSA-AES128-SHA     - ECDHE-RSA-AES128-SHA     - ECDHE-ECDSA-AES256-SHA384     - ECDHE-RSA-AES256-SHA384     - ECDHE-ECDSA-AES256-SHA     - ECDHE-RSA-AES256-SHA     - DHE-RSA-AES128-SHA256     - DHE-RSA-AES256-SHA256     - AES128-GCM-SHA256     - AES256-GCM-SHA384     - AES128-SHA256     - AES256-SHA256     - AES128-SHA     - AES256-SHA     - DES-CBC3-SHA   minTLSVersion: TLSv1.0"
                },
                "type": {
                  "description": "type is one of Old, Intermediate, Modern or Custom. Custom provides the ability to specify individual TLS security profile parameters. Old, Intermediate and Modern are TLS security profiles based on: \n https://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_configurations \n The profiles are intent based, so they may change over time as new ciphers are developed and existing ciphers are found to be insecure.  Depending on precisely which ciphers are available to a process, the list may be reduced. \n Note that the Modern profile is currently not supported because it is not yet well adopted by common software libraries.",
                  "type": "string",
                  "enum": [
                    "Old",
                    "Intermediate",
                    "Modern",
                    "Custom"
                  ]
                }
              }
            }
          }
        },
        "status": {
          "description": "status is the most recently observed status of the IngressController.",
          "type": "object",
          "properties": {
            "availableReplicas": {
              "description": "availableReplicas is number of observed available replicas according to the ingress controller deployment.",
              "type": "integer",
              "format": "int32"
            },
            "conditions": {
              "description": "conditions is a list of conditions and their status. \n Available means the ingress controller deployment is available and servicing route and ingress resources (i.e, .status.availableReplicas equals .spec.replicas) \n There are additional conditions which indicate the status of other ingress controller features and capabilities. \n   * LoadBalancerManaged   - True if the following conditions are met:     * The endpoint publishing strategy requires a service load balancer.   - False if any of those conditions are unsatisfied. \n   * LoadBalancerReady   - True if the following conditions are met:     * A load balancer is managed.     * The load balancer is ready.   - False if any of those conditions are unsatisfied. \n   * DNSManaged   - True if the following conditions are met:     * The endpoint publishing strategy and platform support DNS.     * The ingress controller domain is set.     * dns.config.openshift.io/cluster configures DNS zones.   - False if any of those conditions are unsatisfied. \n   * DNSReady   - True if the following conditions are met:     * DNS is managed.     * DNS records have been successfully created.   - False if any of those conditions are unsatisfied.",
              "type": "array",
              "items": {
                "description": "OperatorCondition is just the standard condition fields.",
                "type": "object",
                "properties": {
                  "lastTransitionTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "type": "string"
                  },
                  "reason": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            },
            "domain": {
              "description": "domain is the actual domain in use.",
              "type": "string"
            },
            "endpointPublishingStrategy": {
              "description": "endpointPublishingStrategy is the actual strategy in use.",
              "type": "object",
              "required": [
                "type"
              ],
              "properties": {
                "hostNetwork": {
                  "description": "hostNetwork holds parameters for the HostNetwork endpoint publishing strategy. Present only if type is HostNetwork.",
                  "type": "object"
                },
                "loadBalancer": {
                  "description": "loadBalancer holds parameters for the load balancer. Present only if type is LoadBalancerService.",
                  "type": "object",
                  "required": [
                    "scope"
                  ],
                  "properties": {
                    "providerParameters": {
                      "description": "providerParameters holds desired load balancer information specific to the underlying infrastructure provider. \n If empty, defaults will be applied. See specific providerParameters fields for details about their defaults.",
                      "type": "object",
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "aws": {
                          "description": "aws provides configuration settings that are specific to AWS load balancers. \n If empty, defaults will be applied. See specific aws fields for details about their defaults.",
                          "type": "object",
                          "required": [
                            "type"
                          ],
                          "properties": {
                            "classicLoadBalancer": {
                              "description": "classicLoadBalancerParameters holds configuration parameters for an AWS classic load balancer. Present only if type is Classic.",
                              "type": "object"
                            },
                            "networkLoadBalancer": {
                              "description": "networkLoadBalancerParameters holds configuration parameters for an AWS network load balancer. Present only if type is NLB.",
                              "type": "object"
                            },
                            "type": {
                              "description": "type is the type of AWS load balancer to instantiate for an ingresscontroller. \n Valid values are: \n * \"Classic\": A Classic Load Balancer that makes routing decisions at either   the transport layer (TCP/SSL) or the application layer (HTTP/HTTPS). See   the following for additional details: \n     https://docs.aws.amazon.com/AmazonECS/latest/developerguide/load-balancer-types.html#clb \n * \"NLB\": A Network Load Balancer that makes routing decisions at the   transport layer (TCP/SSL). See the following for additional details: \n     https://docs.aws.amazon.com/AmazonECS/latest/developerguide/load-balancer-types.html#nlb",
                              "type": "string",
                              "enum": [
                                "Classic",
                                "NLB"
                              ]
                            }
                          }
                        },
                        "type": {
                          "description": "type is the underlying infrastructure provider for the load balancer. Allowed values are \"AWS\", \"Azure\", \"BareMetal\", \"GCP\", \"OpenStack\", and \"VSphere\".",
                          "type": "string",
                          "enum": [
                            "AWS",
                            "Azure",
                            "BareMetal",
                            "GCP",
                            "OpenStack",
                            "VSphere",
                            "IBM"
                          ]
                        }
                      }
                    },
                    "scope": {
                      "description": "scope indicates the scope at which the load balancer is exposed. Possible values are \"External\" and \"Internal\".",
                      "type": "string",
                      "enum": [
                        "Internal",
                        "External"
                      ]
                    }
                  }
                },
                "nodePort": {
                  "description": "nodePort holds parameters for the NodePortService endpoint publishing strategy. Present only if type is NodePortService.",
                  "type": "object"
                },
                "private": {
                  "description": "private holds parameters for the Private endpoint publishing strategy. Present only if type is Private.",
                  "type": "object"
                },
                "type": {
                  "description": "type is the publishing strategy to use. Valid values are: \n * LoadBalancerService \n Publishes the ingress controller using a Kubernetes LoadBalancer Service. \n In this configuration, the ingress controller deployment uses container networking. A LoadBalancer Service is created to publish the deployment. \n See: https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer \n If domain is set, a wildcard DNS record will be managed to point at the LoadBalancer Service's external name. DNS records are managed only in DNS zones defined by dns.config.openshift.io/cluster .spec.publicZone and .spec.privateZone. \n Wildcard DNS management is currently supported only on the AWS, Azure, and GCP platforms. \n * HostNetwork \n Publishes the ingress controller on node ports where the ingress controller is deployed. \n In this configuration, the ingress controller deployment uses host networking, bound to node ports 80 and 443. The user is responsible for configuring an external load balancer to publish the ingress controller via the node ports. \n * Private \n Does not publish the ingress controller. \n In this configuration, the ingress controller deployment uses container networking, and is not explicitly published. The user must manually publish the ingress controller. \n * NodePortService \n Publishes the ingress controller using a Kubernetes NodePort Service. \n In this configuration, the ingress controller deployment uses container networking. A NodePort Service is created to publish the deployment. The specific node ports are dynamically allocated by OpenShift; however, to support static port allocations, user changes to the node port field of the managed NodePort Service will preserved.",
                  "type": "string",
                  "enum": [
                    "LoadBalancerService",
                    "HostNetwork",
                    "Private",
                    "NodePortService"
                  ]
                }
              }
            },
            "observedGeneration": {
              "description": "observedGeneration is the most recent generation observed.",
              "type": "integer",
              "format": "int64"
            },
            "selector": {
              "description": "selector is a label selector, in string format, for ingress controller pods corresponding to the IngressController. The number of matching pods should equal the value of availableReplicas.",
              "type": "string"
            },
            "tlsProfile": {
              "description": "tlsProfile is the TLS connection configuration that is in effect.",
              "type": "object",
              "properties": {
                "ciphers": {
                  "description": "ciphers is used to specify the cipher algorithms that are negotiated during the TLS handshake.  Operators may remove entries their operands do not support.  For example, to use DES-CBC3-SHA  (yaml): \n   ciphers:     - DES-CBC3-SHA",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "minTLSVersion": {
                  "description": "minTLSVersion is used to specify the minimal version of the TLS protocol that is negotiated during the TLS handshake. For example, to use TLS versions 1.1, 1.2 and 1.3 (yaml): \n   minTLSVersion: TLSv1.1 \n NOTE: currently the highest minTLSVersion allowed is VersionTLS12",
                  "type": "string",
                  "enum": [
                    "VersionTLS10",
                    "VersionTLS11",
                    "VersionTLS12",
                    "VersionTLS13"
                  ]
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "IngressController",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.IngressControllerList": {
      "description": "IngressControllerList is a list of IngressController",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of ingresscontrollers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.operator.v1.IngressController"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "IngressControllerList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "IngressControllerList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.KubeAPIServer": {
      "description": "KubeAPIServer provides information to configure an operator to manage kube-apiserver.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "KubeAPIServer"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is the specification of the desired behavior of the Kubernetes API Server",
          "type": "object",
          "properties": {
            "failedRevisionLimit": {
              "description": "failedRevisionLimit is the number of failed static pod installer revisions to keep on disk and in the api -1 = unlimited, 0 or unset = 5 (default)",
              "type": "integer",
              "format": "int32"
            },
            "forceRedeploymentReason": {
              "description": "forceRedeploymentReason can be used to force the redeployment of the operand by providing a unique string. This provides a mechanism to kick a previously failed deployment and provide a reason why you think it will work this time instead of failing again on the same config.",
              "type": "string"
            },
            "logLevel": {
              "description": "logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. \n Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
              "type": "string",
              "enum": [
                "",
                "Normal",
                "Debug",
                "Trace",
                "TraceAll"
              ]
            },
            "managementState": {
              "description": "managementState indicates whether and how the operator should manage the component",
              "type": "string",
              "pattern": "^(Managed|Force)$"
            },
            "observedConfig": {
              "description": "observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator",
              "x-kubernetes-preserve-unknown-fields": true
            },
            "operatorLogLevel": {
              "description": "operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves. \n Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
              "type": "string",
              "enum": [
                "",
                "Normal",
                "Debug",
                "Trace",
                "TraceAll"
              ]
            },
            "succeededRevisionLimit": {
              "description": "succeededRevisionLimit is the number of successful static pod installer revisions to keep on disk and in the api -1 = unlimited, 0 or unset = 5 (default)",
              "type": "integer",
              "format": "int32"
            },
            "unsupportedConfigOverrides": {
              "description": "unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides",
              "x-kubernetes-preserve-unknown-fields": true
            }
          }
        },
        "status": {
          "description": "status is the most recently observed status of the Kubernetes API Server",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "conditions is a list of conditions and their status",
              "type": "array",
              "items": {
                "description": "OperatorCondition is just the standard condition fields.",
                "type": "object",
                "properties": {
                  "lastTransitionTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "type": "string"
                  },
                  "reason": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            },
            "generations": {
              "description": "generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.",
              "type": "array",
              "items": {
                "description": "GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made.",
                "type": "object",
                "properties": {
                  "group": {
                    "description": "group is the group of the thing you're tracking",
                    "type": "string"
                  },
                  "hash": {
                    "description": "hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps",
                    "type": "string"
                  },
                  "lastGeneration": {
                    "description": "lastGeneration is the last generation of the workload controller involved",
                    "type": "integer",
                    "format": "int64"
                  },
                  "name": {
                    "description": "name is the name of the thing you're tracking",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "namespace is where the thing you're tracking is",
                    "type": "string"
                  },
                  "resource": {
                    "description": "resource is the resource type of the thing you're tracking",
                    "type": "string"
                  }
                }
              }
            },
            "latestAvailableRevision": {
              "description": "latestAvailableRevision is the deploymentID of the most recent deployment",
              "type": "integer",
              "format": "int32"
            },
            "latestAvailableRevisionReason": {
              "description": "latestAvailableRevisionReason describe the detailed reason for the most recent deployment",
              "type": "string"
            },
            "nodeStatuses": {
              "description": "nodeStatuses track the deployment values and errors across individual nodes",
              "type": "array",
              "items": {
                "description": "NodeStatus provides information about the current state of a particular node managed by this operator.",
                "type": "object",
                "properties": {
                  "currentRevision": {
                    "description": "currentRevision is the generation of the most recently successful deployment",
                    "type": "integer",
                    "format": "int32"
                  },
                  "lastFailedRevision": {
                    "description": "lastFailedRevision is the generation of the deployment we tried and failed to deploy.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "lastFailedRevisionErrors": {
                    "description": "lastFailedRevisionErrors is a list of the errors during the failed deployment referenced in lastFailedRevision",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "nodeName": {
                    "description": "nodeName is the name of the node",
                    "type": "string"
                  },
                  "targetRevision": {
                    "description": "targetRevision is the generation of the deployment we're trying to apply",
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            },
            "observedGeneration": {
              "description": "observedGeneration is the last generation change you've dealt with",
              "type": "integer",
              "format": "int64"
            },
            "readyReplicas": {
              "description": "readyReplicas indicates how many replicas are ready and at the desired state",
              "type": "integer",
              "format": "int32"
            },
            "version": {
              "description": "version is the level this availability applies to",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "KubeAPIServer",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.KubeAPIServerList": {
      "description": "KubeAPIServerList is a list of KubeAPIServer",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of kubeapiservers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.operator.v1.KubeAPIServer"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "KubeAPIServerList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "KubeAPIServerList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.KubeControllerManager": {
      "description": "KubeControllerManager provides information to configure an operator to manage kube-controller-manager.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "KubeControllerManager"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is the specification of the desired behavior of the Kubernetes Controller Manager",
          "type": "object",
          "properties": {
            "failedRevisionLimit": {
              "description": "failedRevisionLimit is the number of failed static pod installer revisions to keep on disk and in the api -1 = unlimited, 0 or unset = 5 (default)",
              "type": "integer",
              "format": "int32"
            },
            "forceRedeploymentReason": {
              "description": "forceRedeploymentReason can be used to force the redeployment of the operand by providing a unique string. This provides a mechanism to kick a previously failed deployment and provide a reason why you think it will work this time instead of failing again on the same config.",
              "type": "string"
            },
            "logLevel": {
              "description": "logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. \n Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
              "type": "string",
              "enum": [
                "",
                "Normal",
                "Debug",
                "Trace",
                "TraceAll"
              ]
            },
            "managementState": {
              "description": "managementState indicates whether and how the operator should manage the component",
              "type": "string",
              "pattern": "^(Managed|Force)$"
            },
            "observedConfig": {
              "description": "observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator",
              "x-kubernetes-preserve-unknown-fields": true
            },
            "operatorLogLevel": {
              "description": "operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves. \n Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
              "type": "string",
              "enum": [
                "",
                "Normal",
                "Debug",
                "Trace",
                "TraceAll"
              ]
            },
            "succeededRevisionLimit": {
              "description": "succeededRevisionLimit is the number of successful static pod installer revisions to keep on disk and in the api -1 = unlimited, 0 or unset = 5 (default)",
              "type": "integer",
              "format": "int32"
            },
            "unsupportedConfigOverrides": {
              "description": "unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides",
              "x-kubernetes-preserve-unknown-fields": true
            }
          }
        },
        "status": {
          "description": "status is the most recently observed status of the Kubernetes Controller Manager",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "conditions is a list of conditions and their status",
              "type": "array",
              "items": {
                "description": "OperatorCondition is just the standard condition fields.",
                "type": "object",
                "properties": {
                  "lastTransitionTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "type": "string"
                  },
                  "reason": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            },
            "generations": {
              "description": "generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.",
              "type": "array",
              "items": {
                "description": "GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made.",
                "type": "object",
                "properties": {
                  "group": {
                    "description": "group is the group of the thing you're tracking",
                    "type": "string"
                  },
                  "hash": {
                    "description": "hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps",
                    "type": "string"
                  },
                  "lastGeneration": {
                    "description": "lastGeneration is the last generation of the workload controller involved",
                    "type": "integer",
                    "format": "int64"
                  },
                  "name": {
                    "description": "name is the name of the thing you're tracking",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "namespace is where the thing you're tracking is",
                    "type": "string"
                  },
                  "resource": {
                    "description": "resource is the resource type of the thing you're tracking",
                    "type": "string"
                  }
                }
              }
            },
            "latestAvailableRevision": {
              "description": "latestAvailableRevision is the deploymentID of the most recent deployment",
              "type": "integer",
              "format": "int32"
            },
            "latestAvailableRevisionReason": {
              "description": "latestAvailableRevisionReason describe the detailed reason for the most recent deployment",
              "type": "string"
            },
            "nodeStatuses": {
              "description": "nodeStatuses track the deployment values and errors across individual nodes",
              "type": "array",
              "items": {
                "description": "NodeStatus provides information about the current state of a particular node managed by this operator.",
                "type": "object",
                "properties": {
                  "currentRevision": {
                    "description": "currentRevision is the generation of the most recently successful deployment",
                    "type": "integer",
                    "format": "int32"
                  },
                  "lastFailedRevision": {
                    "description": "lastFailedRevision is the generation of the deployment we tried and failed to deploy.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "lastFailedRevisionErrors": {
                    "description": "lastFailedRevisionErrors is a list of the errors during the failed deployment referenced in lastFailedRevision",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "nodeName": {
                    "description": "nodeName is the name of the node",
                    "type": "string"
                  },
                  "targetRevision": {
                    "description": "targetRevision is the generation of the deployment we're trying to apply",
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            },
            "observedGeneration": {
              "description": "observedGeneration is the last generation change you've dealt with",
              "type": "integer",
              "format": "int64"
            },
            "readyReplicas": {
              "description": "readyReplicas indicates how many replicas are ready and at the desired state",
              "type": "integer",
              "format": "int32"
            },
            "version": {
              "description": "version is the level this availability applies to",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "KubeControllerManager",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.KubeControllerManagerList": {
      "description": "KubeControllerManagerList is a list of KubeControllerManager",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of kubecontrollermanagers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.operator.v1.KubeControllerManager"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "KubeControllerManagerList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "KubeControllerManagerList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.KubeScheduler": {
      "description": "KubeScheduler provides information to configure an operator to manage scheduler.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "KubeScheduler"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is the specification of the desired behavior of the Kubernetes Scheduler",
          "type": "object",
          "properties": {
            "failedRevisionLimit": {
              "description": "failedRevisionLimit is the number of failed static pod installer revisions to keep on disk and in the api -1 = unlimited, 0 or unset = 5 (default)",
              "type": "integer",
              "format": "int32"
            },
            "forceRedeploymentReason": {
              "description": "forceRedeploymentReason can be used to force the redeployment of the operand by providing a unique string. This provides a mechanism to kick a previously failed deployment and provide a reason why you think it will work this time instead of failing again on the same config.",
              "type": "string"
            },
            "logLevel": {
              "description": "logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. \n Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
              "type": "string",
              "enum": [
                "",
                "Normal",
                "Debug",
                "Trace",
                "TraceAll"
              ]
            },
            "managementState": {
              "description": "managementState indicates whether and how the operator should manage the component",
              "type": "string",
              "pattern": "^(Managed|Force)$"
            },
            "observedConfig": {
              "description": "observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator",
              "x-kubernetes-preserve-unknown-fields": true
            },
            "operatorLogLevel": {
              "description": "operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves. \n Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
              "type": "string",
              "enum": [
                "",
                "Normal",
                "Debug",
                "Trace",
                "TraceAll"
              ]
            },
            "succeededRevisionLimit": {
              "description": "succeededRevisionLimit is the number of successful static pod installer revisions to keep on disk and in the api -1 = unlimited, 0 or unset = 5 (default)",
              "type": "integer",
              "format": "int32"
            },
            "unsupportedConfigOverrides": {
              "description": "unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides",
              "x-kubernetes-preserve-unknown-fields": true
            }
          }
        },
        "status": {
          "description": "status is the most recently observed status of the Kubernetes Scheduler",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "conditions is a list of conditions and their status",
              "type": "array",
              "items": {
                "description": "OperatorCondition is just the standard condition fields.",
                "type": "object",
                "properties": {
                  "lastTransitionTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "type": "string"
                  },
                  "reason": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            },
            "generations": {
              "description": "generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.",
              "type": "array",
              "items": {
                "description": "GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made.",
                "type": "object",
                "properties": {
                  "group": {
                    "description": "group is the group of the thing you're tracking",
                    "type": "string"
                  },
                  "hash": {
                    "description": "hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps",
                    "type": "string"
                  },
                  "lastGeneration": {
                    "description": "lastGeneration is the last generation of the workload controller involved",
                    "type": "integer",
                    "format": "int64"
                  },
                  "name": {
                    "description": "name is the name of the thing you're tracking",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "namespace is where the thing you're tracking is",
                    "type": "string"
                  },
                  "resource": {
                    "description": "resource is the resource type of the thing you're tracking",
                    "type": "string"
                  }
                }
              }
            },
            "latestAvailableRevision": {
              "description": "latestAvailableRevision is the deploymentID of the most recent deployment",
              "type": "integer",
              "format": "int32"
            },
            "latestAvailableRevisionReason": {
              "description": "latestAvailableRevisionReason describe the detailed reason for the most recent deployment",
              "type": "string"
            },
            "nodeStatuses": {
              "description": "nodeStatuses track the deployment values and errors across individual nodes",
              "type": "array",
              "items": {
                "description": "NodeStatus provides information about the current state of a particular node managed by this operator.",
                "type": "object",
                "properties": {
                  "currentRevision": {
                    "description": "currentRevision is the generation of the most recently successful deployment",
                    "type": "integer",
                    "format": "int32"
                  },
                  "lastFailedRevision": {
                    "description": "lastFailedRevision is the generation of the deployment we tried and failed to deploy.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "lastFailedRevisionErrors": {
                    "description": "lastFailedRevisionErrors is a list of the errors during the failed deployment referenced in lastFailedRevision",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "nodeName": {
                    "description": "nodeName is the name of the node",
                    "type": "string"
                  },
                  "targetRevision": {
                    "description": "targetRevision is the generation of the deployment we're trying to apply",
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            },
            "observedGeneration": {
              "description": "observedGeneration is the last generation change you've dealt with",
              "type": "integer",
              "format": "int64"
            },
            "readyReplicas": {
              "description": "readyReplicas indicates how many replicas are ready and at the desired state",
              "type": "integer",
              "format": "int32"
            },
            "version": {
              "description": "version is the level this availability applies to",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "KubeScheduler",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.KubeSchedulerList": {
      "description": "KubeSchedulerList is a list of KubeScheduler",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of kubeschedulers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.operator.v1.KubeScheduler"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "KubeSchedulerList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "KubeSchedulerList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.KubeStorageVersionMigrator": {
      "description": "KubeStorageVersionMigrator provides information to configure an operator to manage kube-storage-version-migrator.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "KubeStorageVersionMigrator"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "logLevel": {
              "description": "logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. \n Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
              "type": "string",
              "enum": [
                "",
                "Normal",
                "Debug",
                "Trace",
                "TraceAll"
              ]
            },
            "managementState": {
              "description": "managementState indicates whether and how the operator should manage the component",
              "type": "string",
              "pattern": "^(Managed|Unmanaged|Force|Removed)$"
            },
            "observedConfig": {
              "description": "observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator",
              "x-kubernetes-preserve-unknown-fields": true
            },
            "operatorLogLevel": {
              "description": "operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves. \n Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
              "type": "string",
              "enum": [
                "",
                "Normal",
                "Debug",
                "Trace",
                "TraceAll"
              ]
            },
            "unsupportedConfigOverrides": {
              "description": "unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides",
              "x-kubernetes-preserve-unknown-fields": true
            }
          }
        },
        "status": {
          "type": "object",
          "properties": {
            "conditions": {
              "description": "conditions is a list of conditions and their status",
              "type": "array",
              "items": {
                "description": "OperatorCondition is just the standard condition fields.",
                "type": "object",
                "properties": {
                  "lastTransitionTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "type": "string"
                  },
                  "reason": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            },
            "generations": {
              "description": "generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.",
              "type": "array",
              "items": {
                "description": "GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made.",
                "type": "object",
                "properties": {
                  "group": {
                    "description": "group is the group of the thing you're tracking",
                    "type": "string"
                  },
                  "hash": {
                    "description": "hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps",
                    "type": "string"
                  },
                  "lastGeneration": {
                    "description": "lastGeneration is the last generation of the workload controller involved",
                    "type": "integer",
                    "format": "int64"
                  },
                  "name": {
                    "description": "name is the name of the thing you're tracking",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "namespace is where the thing you're tracking is",
                    "type": "string"
                  },
                  "resource": {
                    "description": "resource is the resource type of the thing you're tracking",
                    "type": "string"
                  }
                }
              }
            },
            "observedGeneration": {
              "description": "observedGeneration is the last generation change you've dealt with",
              "type": "integer",
              "format": "int64"
            },
            "readyReplicas": {
              "description": "readyReplicas indicates how many replicas are ready and at the desired state",
              "type": "integer",
              "format": "int32"
            },
            "version": {
              "description": "version is the level this availability applies to",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "KubeStorageVersionMigrator",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.KubeStorageVersionMigratorList": {
      "description": "KubeStorageVersionMigratorList is a list of KubeStorageVersionMigrator",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of kubestorageversionmigrators. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.operator.v1.KubeStorageVersionMigrator"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "KubeStorageVersionMigratorList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "KubeStorageVersionMigratorList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.Network": {
      "description": "Network describes the cluster's desired network configuration. It is consumed by the cluster-network-operator.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Network"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "NetworkSpec is the top-level network configuration object.",
          "type": "object",
          "required": [
            "defaultNetwork"
          ],
          "properties": {
            "additionalNetworks": {
              "description": "additionalNetworks is a list of extra networks to make available to pods when multiple networks are enabled.",
              "type": "array",
              "items": {
                "description": "AdditionalNetworkDefinition configures an extra network that is available but not created by default. Instead, pods must request them by name. type must be specified, along with exactly one \"Config\" that matches the type.",
                "type": "object",
                "required": [
                  "type",
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "name is the name of the network. This will be populated in the resulting CRD This must be unique.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "namespace is the namespace of the network. This will be populated in the resulting CRD If not given the network will be created in the default namespace.",
                    "type": "string"
                  },
                  "rawCNIConfig": {
                    "description": "rawCNIConfig is the raw CNI configuration json to create in the NetworkAttachmentDefinition CRD",
                    "type": "string"
                  },
                  "simpleMacvlanConfig": {
                    "description": "SimpleMacvlanConfig configures the macvlan interface in case of type:NetworkTypeSimpleMacvlan",
                    "type": "object",
                    "properties": {
                      "ipamConfig": {
                        "description": "IPAMConfig configures IPAM module will be used for IP Address Management (IPAM).",
                        "type": "object",
                        "properties": {
                          "staticIPAMConfig": {
                            "description": "StaticIPAMConfig configures the static IP address in case of type:IPAMTypeStatic",
                            "type": "object",
                            "properties": {
                              "addresses": {
                                "description": "Addresses configures IP address for the interface",
                                "type": "array",
                                "items": {
                                  "description": "StaticIPAMAddresses provides IP address and Gateway for static IPAM addresses",
                                  "type": "object",
                                  "properties": {
                                    "address": {
                                      "description": "Address is the IP address in CIDR format",
                                      "type": "string"
                                    },
                                    "gateway": {
                                      "description": "Gateway is IP inside of subnet to designate as the gateway",
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "dns": {
                                "description": "DNS configures DNS for the interface",
                                "type": "object",
                                "properties": {
                                  "domain": {
                                    "description": "Domain configures the domainname the local domain used for short hostname lookups",
                                    "type": "string"
                                  },
                                  "nameservers": {
                                    "description": "Nameservers points DNS servers for IP lookup",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "search": {
                                    "description": "Search configures priority ordered search domains for short hostname lookups",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "routes": {
                                "description": "Routes configures IP routes for the interface",
                                "type": "array",
                                "items": {
                                  "description": "StaticIPAMRoutes provides Destination/Gateway pairs for static IPAM routes",
                                  "type": "object",
                                  "properties": {
                                    "destination": {
                                      "description": "Destination points the IP route destination",
                                      "type": "string"
                                    },
                                    "gateway": {
                                      "description": "Gateway is the route's next-hop IP address If unset, a default gateway is assumed (as determined by the CNI plugin).",
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "type": {
                            "description": "Type is the type of IPAM module will be used for IP Address Management(IPAM). The supported values are IPAMTypeDHCP, IPAMTypeStatic",
                            "type": "string"
                          }
                        }
                      },
                      "master": {
                        "description": "master is the host interface to create the macvlan interface from. If not specified, it will be default route interface",
                        "type": "string"
                      },
                      "mode": {
                        "description": "mode is the macvlan mode: bridge, private, vepa, passthru. The default is bridge",
                        "type": "string"
                      },
                      "mtu": {
                        "description": "mtu is the mtu to use for the macvlan interface. if unset, host's kernel will select the value.",
                        "type": "integer",
                        "format": "int32",
                        "minimum": 0
                      }
                    }
                  },
                  "type": {
                    "description": "type is the type of network The supported values are NetworkTypeRaw, NetworkTypeSimpleMacvlan",
                    "type": "string"
                  }
                }
              }
            },
            "clusterNetwork": {
              "description": "clusterNetwork is the IP address pool to use for pod IPs. Some network providers, e.g. OpenShift SDN, support multiple ClusterNetworks. Others only support one. This is equivalent to the cluster-cidr.",
              "type": "array",
              "items": {
                "description": "ClusterNetworkEntry is a subnet from which to allocate PodIPs. A network of size HostPrefix (in CIDR notation) will be allocated when nodes join the cluster. If HostPrefix is not used by the plugin, it can be left unset. Not all network providers support multiple ClusterNetworks",
                "type": "object",
                "required": [
                  "cidr"
                ],
                "properties": {
                  "cidr": {
                    "type": "string"
                  },
                  "hostPrefix": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0
                  }
                }
              }
            },
            "defaultNetwork": {
              "description": "defaultNetwork is the \"default\" network that all pods will receive",
              "type": "object",
              "required": [
                "type"
              ],
              "properties": {
                "kuryrConfig": {
                  "description": "KuryrConfig configures the kuryr plugin",
                  "type": "object",
                  "properties": {
                    "controllerProbesPort": {
                      "description": "The port kuryr-controller will listen for readiness and liveness requests.",
                      "type": "integer",
                      "format": "int32",
                      "minimum": 0
                    },
                    "daemonProbesPort": {
                      "description": "The port kuryr-daemon will listen for readiness and liveness requests.",
                      "type": "integer",
                      "format": "int32",
                      "minimum": 0
                    },
                    "enablePortPoolsPrepopulation": {
                      "description": "enablePortPoolsPrepopulation when true will make Kuryr prepopulate each newly created port pool with a minimum number of ports. Kuryr uses Neutron port pooling to fight the fact that it takes a significant amount of time to create one. Instead of creating it when pod is being deployed, Kuryr keeps a number of ports ready to be attached to pods. By default port prepopulation is disabled.",
                      "type": "boolean"
                    },
                    "openStackServiceNetwork": {
                      "description": "openStackServiceNetwork contains the CIDR of network from which to allocate IPs for OpenStack Octavia's Amphora VMs. Please note that with Amphora driver Octavia uses two IPs from that network for each loadbalancer - one given by OpenShift and second for VRRP connections. As the first one is managed by OpenShift's and second by Neutron's IPAMs, those need to come from different pools. Therefore `openStackServiceNetwork` needs to be at least twice the size of `serviceNetwork`, and whole `serviceNetwork` must be overlapping with `openStackServiceNetwork`. cluster-network-operator will then make sure VRRP IPs are taken from the ranges inside `openStackServiceNetwork` that are not overlapping with `serviceNetwork`, effectivly preventing conflicts. If not set cluster-network-operator will use `serviceNetwork` expanded by decrementing the prefix size by 1.",
                      "type": "string"
                    },
                    "poolBatchPorts": {
                      "description": "poolBatchPorts sets a number of ports that should be created in a single batch request to extend the port pool. The default is 3. For more information about port pools see enablePortPoolsPrepopulation setting.",
                      "type": "integer",
                      "minimum": 0
                    },
                    "poolMaxPorts": {
                      "description": "poolMaxPorts sets a maximum number of free ports that are being kept in a port pool. If the number of ports exceeds this setting, free ports will get deleted. Setting 0 will disable this upper bound, effectively preventing pools from shrinking and this is the default value. For more information about port pools see enablePortPoolsPrepopulation setting.",
                      "type": "integer",
                      "minimum": 0
                    },
                    "poolMinPorts": {
                      "description": "poolMinPorts sets a minimum number of free ports that should be kept in a port pool. If the number of ports is lower than this setting, new ports will get created and added to pool. The default is 1. For more information about port pools see enablePortPoolsPrepopulation setting.",
                      "type": "integer",
                      "minimum": 1
                    }
                  }
                },
                "openshiftSDNConfig": {
                  "description": "openShiftSDNConfig configures the openshift-sdn plugin",
                  "type": "object",
                  "properties": {
                    "enableUnidling": {
                      "description": "enableUnidling controls whether or not the service proxy will support idling and unidling of services. By default, unidling is enabled.",
                      "type": "boolean"
                    },
                    "mode": {
                      "description": "mode is one of \"Multitenant\", \"Subnet\", or \"NetworkPolicy\"",
                      "type": "string"
                    },
                    "mtu": {
                      "description": "mtu is the mtu to use for the tunnel interface. Defaults to 1450 if unset. This must be 50 bytes smaller than the machine's uplink.",
                      "type": "integer",
                      "format": "int32",
                      "minimum": 0
                    },
                    "useExternalOpenvswitch": {
                      "description": "useExternalOpenvswitch tells the operator not to install openvswitch, because it will be provided separately. If set, you must provide it yourself.",
                      "type": "boolean"
                    },
                    "vxlanPort": {
                      "description": "vxlanPort is the port to use for all vxlan packets. The default is 4789.",
                      "type": "integer",
                      "format": "int32",
                      "minimum": 0
                    }
                  }
                },
                "ovnKubernetesConfig": {
                  "description": "ovnKubernetesConfig configures the ovn-kubernetes plugin.",
                  "type": "object",
                  "properties": {
                    "genevePort": {
                      "description": "geneve port is the UDP port to be used by geneve encapulation. Default is 6081",
                      "type": "integer",
                      "format": "int32",
                      "minimum": 1
                    },
                    "hybridOverlayConfig": {
                      "description": "HybridOverlayConfig configures an additional overlay network for peers that are not using OVN.",
                      "type": "object",
                      "properties": {
                        "hybridClusterNetwork": {
                          "description": "HybridClusterNetwork defines a network space given to nodes on an additional overlay network.",
                          "type": "array",
                          "items": {
                            "description": "ClusterNetworkEntry is a subnet from which to allocate PodIPs. A network of size HostPrefix (in CIDR notation) will be allocated when nodes join the cluster. Not all network providers support multiple ClusterNetworks",
                            "type": "object",
                            "properties": {
                              "cidr": {
                                "type": "string"
                              },
                              "hostPrefix": {
                                "type": "integer",
                                "format": "int32",
                                "minimum": 0
                              }
                            }
                          }
                        },
                        "hybridOverlayVXLANPort": {
                          "description": "defines the VXLAN port number to be used by the additional overlay network. Default is 4789",
                          "type": "integer",
                          "format": "int32",
                          "minimum": 1
                        }
                      }
                    },
                    "mtu": {
                      "description": "mtu is the MTU to use for the tunnel interface. This must be 100 bytes smaller than the uplink mtu. Default is 1400",
                      "type": "integer",
                      "format": "int32",
                      "minimum": 0
                    }
                  }
                },
                "type": {
                  "description": "type is the type of network All NetworkTypes are supported except for NetworkTypeRaw",
                  "type": "string"
                }
              }
            },
            "deployKubeProxy": {
              "description": "deployKubeProxy specifies whether or not a standalone kube-proxy should be deployed by the operator. Some network providers include kube-proxy or similar functionality. If unset, the plugin will attempt to select the correct value, which is false when OpenShift SDN and ovn-kubernetes are used and true otherwise.",
              "type": "boolean"
            },
            "disableMultiNetwork": {
              "description": "disableMultiNetwork specifies whether or not multiple pod network support should be disabled. If unset, this property defaults to 'false' and multiple network support is enabled.",
              "type": "boolean"
            },
            "kubeProxyConfig": {
              "description": "kubeProxyConfig lets us configure desired proxy configuration. If not specified, sensible defaults will be chosen by OpenShift directly. Not consumed by all network providers - currently only openshift-sdn.",
              "type": "object",
              "properties": {
                "bindAddress": {
                  "description": "The address to \"bind\" on Defaults to 0.0.0.0",
                  "type": "string"
                },
                "iptablesSyncPeriod": {
                  "description": "The period that iptables rules are refreshed. Default: 30s",
                  "type": "string"
                },
                "proxyArguments": {
                  "description": "Any additional arguments to pass to the kubeproxy process",
                  "type": "object",
                  "additionalProperties": {
                    "description": "ProxyArgumentList is a list of arguments to pass to the kubeproxy process",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "logLevel": {
              "description": "logLevel allows configuring the logging level of the components deployed by the operator. Currently only Kuryr SDN is affected by this setting. Please note that turning on extensive logging may affect performance. The default value is \"Normal\".",
              "type": "string"
            },
            "serviceNetwork": {
              "description": "serviceNetwork is the ip address pool to use for Service IPs Currently, all existing network providers only support a single value here, but this is an array to allow for growth.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "status": {
          "description": "NetworkStatus is currently unused. Instead, status is reported in the Network.config.openshift.io object.",
          "type": "object"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "Network",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.NetworkList": {
      "description": "NetworkList is a list of Network",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of networks. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.operator.v1.Network"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "NetworkList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "NetworkList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.OpenShiftAPIServer": {
      "description": "OpenShiftAPIServer provides information to configure an operator to manage openshift-apiserver.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "OpenShiftAPIServer"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is the specification of the desired behavior of the OpenShift API Server.",
          "type": "object",
          "properties": {
            "logLevel": {
              "description": "logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. \n Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
              "type": "string",
              "enum": [
                "",
                "Normal",
                "Debug",
                "Trace",
                "TraceAll"
              ]
            },
            "managementState": {
              "description": "managementState indicates whether and how the operator should manage the component",
              "type": "string",
              "pattern": "^(Managed|Unmanaged|Force|Removed)$"
            },
            "observedConfig": {
              "description": "observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator",
              "x-kubernetes-preserve-unknown-fields": true
            },
            "operatorLogLevel": {
              "description": "operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves. \n Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
              "type": "string",
              "enum": [
                "",
                "Normal",
                "Debug",
                "Trace",
                "TraceAll"
              ]
            },
            "unsupportedConfigOverrides": {
              "description": "unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides",
              "x-kubernetes-preserve-unknown-fields": true
            }
          }
        },
        "status": {
          "description": "status defines the observed status of the OpenShift API Server.",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "conditions is a list of conditions and their status",
              "type": "array",
              "items": {
                "description": "OperatorCondition is just the standard condition fields.",
                "type": "object",
                "properties": {
                  "lastTransitionTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "type": "string"
                  },
                  "reason": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            },
            "generations": {
              "description": "generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.",
              "type": "array",
              "items": {
                "description": "GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made.",
                "type": "object",
                "properties": {
                  "group": {
                    "description": "group is the group of the thing you're tracking",
                    "type": "string"
                  },
                  "hash": {
                    "description": "hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps",
                    "type": "string"
                  },
                  "lastGeneration": {
                    "description": "lastGeneration is the last generation of the workload controller involved",
                    "type": "integer",
                    "format": "int64"
                  },
                  "name": {
                    "description": "name is the name of the thing you're tracking",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "namespace is where the thing you're tracking is",
                    "type": "string"
                  },
                  "resource": {
                    "description": "resource is the resource type of the thing you're tracking",
                    "type": "string"
                  }
                }
              }
            },
            "latestAvailableRevision": {
              "description": "latestAvailableRevision is the latest revision used as suffix of revisioned secrets like encryption-config. A new revision causes a new deployment of pods.",
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            "observedGeneration": {
              "description": "observedGeneration is the last generation change you've dealt with",
              "type": "integer",
              "format": "int64"
            },
            "readyReplicas": {
              "description": "readyReplicas indicates how many replicas are ready and at the desired state",
              "type": "integer",
              "format": "int32"
            },
            "version": {
              "description": "version is the level this availability applies to",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "OpenShiftAPIServer",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.OpenShiftAPIServerList": {
      "description": "OpenShiftAPIServerList is a list of OpenShiftAPIServer",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of openshiftapiservers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.operator.v1.OpenShiftAPIServer"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "OpenShiftAPIServerList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "OpenShiftAPIServerList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.OpenShiftControllerManager": {
      "description": "OpenShiftControllerManager provides information to configure an operator to manage openshift-controller-manager.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "OpenShiftControllerManager"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "logLevel": {
              "description": "logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. \n Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
              "type": "string",
              "enum": [
                "",
                "Normal",
                "Debug",
                "Trace",
                "TraceAll"
              ]
            },
            "managementState": {
              "description": "managementState indicates whether and how the operator should manage the component",
              "type": "string",
              "pattern": "^(Managed|Unmanaged|Force|Removed)$"
            },
            "observedConfig": {
              "description": "observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator",
              "x-kubernetes-preserve-unknown-fields": true
            },
            "operatorLogLevel": {
              "description": "operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves. \n Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
              "type": "string",
              "enum": [
                "",
                "Normal",
                "Debug",
                "Trace",
                "TraceAll"
              ]
            },
            "unsupportedConfigOverrides": {
              "description": "unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides",
              "x-kubernetes-preserve-unknown-fields": true
            }
          }
        },
        "status": {
          "type": "object",
          "properties": {
            "conditions": {
              "description": "conditions is a list of conditions and their status",
              "type": "array",
              "items": {
                "description": "OperatorCondition is just the standard condition fields.",
                "type": "object",
                "properties": {
                  "lastTransitionTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "type": "string"
                  },
                  "reason": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            },
            "generations": {
              "description": "generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.",
              "type": "array",
              "items": {
                "description": "GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made.",
                "type": "object",
                "properties": {
                  "group": {
                    "description": "group is the group of the thing you're tracking",
                    "type": "string"
                  },
                  "hash": {
                    "description": "hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps",
                    "type": "string"
                  },
                  "lastGeneration": {
                    "description": "lastGeneration is the last generation of the workload controller involved",
                    "type": "integer",
                    "format": "int64"
                  },
                  "name": {
                    "description": "name is the name of the thing you're tracking",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "namespace is where the thing you're tracking is",
                    "type": "string"
                  },
                  "resource": {
                    "description": "resource is the resource type of the thing you're tracking",
                    "type": "string"
                  }
                }
              }
            },
            "observedGeneration": {
              "description": "observedGeneration is the last generation change you've dealt with",
              "type": "integer",
              "format": "int64"
            },
            "readyReplicas": {
              "description": "readyReplicas indicates how many replicas are ready and at the desired state",
              "type": "integer",
              "format": "int32"
            },
            "version": {
              "description": "version is the level this availability applies to",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "OpenShiftControllerManager",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.OpenShiftControllerManagerList": {
      "description": "OpenShiftControllerManagerList is a list of OpenShiftControllerManager",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of openshiftcontrollermanagers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.operator.v1.OpenShiftControllerManager"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "OpenShiftControllerManagerList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "OpenShiftControllerManagerList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.ServiceCA": {
      "description": "ServiceCA provides information to configure an operator to manage the service cert controllers",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ServiceCA"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec holds user settable values for configuration",
          "type": "object",
          "properties": {
            "logLevel": {
              "description": "logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. \n Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
              "type": "string",
              "enum": [
                "",
                "Normal",
                "Debug",
                "Trace",
                "TraceAll"
              ]
            },
            "managementState": {
              "description": "managementState indicates whether and how the operator should manage the component",
              "type": "string",
              "pattern": "^(Managed|Unmanaged|Force|Removed)$"
            },
            "observedConfig": {
              "description": "observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator",
              "x-kubernetes-preserve-unknown-fields": true
            },
            "operatorLogLevel": {
              "description": "operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves. \n Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
              "type": "string",
              "enum": [
                "",
                "Normal",
                "Debug",
                "Trace",
                "TraceAll"
              ]
            },
            "unsupportedConfigOverrides": {
              "description": "unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides",
              "x-kubernetes-preserve-unknown-fields": true
            }
          }
        },
        "status": {
          "description": "status holds observed values from the cluster. They may not be overridden.",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "conditions is a list of conditions and their status",
              "type": "array",
              "items": {
                "description": "OperatorCondition is just the standard condition fields.",
                "type": "object",
                "properties": {
                  "lastTransitionTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "type": "string"
                  },
                  "reason": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            },
            "generations": {
              "description": "generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.",
              "type": "array",
              "items": {
                "description": "GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made.",
                "type": "object",
                "properties": {
                  "group": {
                    "description": "group is the group of the thing you're tracking",
                    "type": "string"
                  },
                  "hash": {
                    "description": "hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps",
                    "type": "string"
                  },
                  "lastGeneration": {
                    "description": "lastGeneration is the last generation of the workload controller involved",
                    "type": "integer",
                    "format": "int64"
                  },
                  "name": {
                    "description": "name is the name of the thing you're tracking",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "namespace is where the thing you're tracking is",
                    "type": "string"
                  },
                  "resource": {
                    "description": "resource is the resource type of the thing you're tracking",
                    "type": "string"
                  }
                }
              }
            },
            "observedGeneration": {
              "description": "observedGeneration is the last generation change you've dealt with",
              "type": "integer",
              "format": "int64"
            },
            "readyReplicas": {
              "description": "readyReplicas indicates how many replicas are ready and at the desired state",
              "type": "integer",
              "format": "int32"
            },
            "version": {
              "description": "version is the level this availability applies to",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "ServiceCA",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.ServiceCAList": {
      "description": "ServiceCAList is a list of ServiceCA",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of servicecas. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.operator.v1.ServiceCA"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ServiceCAList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "ServiceCAList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.Storage": {
      "description": "Storage provides a means to configure an operator to manage the cluster storage operator. `cluster` is the canonical name.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Storage"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec holds user settable values for configuration",
          "type": "object",
          "properties": {
            "logLevel": {
              "description": "logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. \n Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
              "type": "string",
              "enum": [
                "",
                "Normal",
                "Debug",
                "Trace",
                "TraceAll"
              ]
            },
            "managementState": {
              "description": "managementState indicates whether and how the operator should manage the component",
              "type": "string",
              "pattern": "^(Managed|Unmanaged|Force|Removed)$"
            },
            "observedConfig": {
              "description": "observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator",
              "x-kubernetes-preserve-unknown-fields": true
            },
            "operatorLogLevel": {
              "description": "operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves. \n Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
              "type": "string",
              "enum": [
                "",
                "Normal",
                "Debug",
                "Trace",
                "TraceAll"
              ]
            },
            "unsupportedConfigOverrides": {
              "description": "unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides",
              "x-kubernetes-preserve-unknown-fields": true
            }
          }
        },
        "status": {
          "description": "status holds observed values from the cluster. They may not be overridden.",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "conditions is a list of conditions and their status",
              "type": "array",
              "items": {
                "description": "OperatorCondition is just the standard condition fields.",
                "type": "object",
                "properties": {
                  "lastTransitionTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "type": "string"
                  },
                  "reason": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            },
            "generations": {
              "description": "generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.",
              "type": "array",
              "items": {
                "description": "GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made.",
                "type": "object",
                "properties": {
                  "group": {
                    "description": "group is the group of the thing you're tracking",
                    "type": "string"
                  },
                  "hash": {
                    "description": "hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps",
                    "type": "string"
                  },
                  "lastGeneration": {
                    "description": "lastGeneration is the last generation of the workload controller involved",
                    "type": "integer",
                    "format": "int64"
                  },
                  "name": {
                    "description": "name is the name of the thing you're tracking",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "namespace is where the thing you're tracking is",
                    "type": "string"
                  },
                  "resource": {
                    "description": "resource is the resource type of the thing you're tracking",
                    "type": "string"
                  }
                }
              }
            },
            "observedGeneration": {
              "description": "observedGeneration is the last generation change you've dealt with",
              "type": "integer",
              "format": "int64"
            },
            "readyReplicas": {
              "description": "readyReplicas indicates how many replicas are ready and at the desired state",
              "type": "integer",
              "format": "int32"
            },
            "version": {
              "description": "version is the level this availability applies to",
              "type": "string"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "Storage",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1.StorageList": {
      "description": "StorageList is a list of Storage",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of storages. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.operator.v1.Storage"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "StorageList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "StorageList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.operator.v1alpha1.ImageContentSourcePolicy": {
      "description": "ImageContentSourcePolicy holds cluster-wide information about how to handle registry mirror rules. When multiple policies are defined, the outcome of the behavior is defined on each field.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1alpha1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ImageContentSourcePolicy"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec holds user settable values for configuration",
          "type": "object",
          "properties": {
            "repositoryDigestMirrors": {
              "description": "repositoryDigestMirrors allows images referenced by image digests in pods to be pulled from alternative mirrored repository locations. The image pull specification provided to the pod will be compared to the source locations described in RepositoryDigestMirrors and the image may be pulled down from any of the mirrors in the list instead of the specified repository allowing administrators to choose a potentially faster mirror. Only image pull specifications that have an image disgest will have this behavior applied to them - tags will continue to be pulled from the specified repository in the pull spec. \n Each \u201csource\u201d repository is treated independently; configurations for different \u201csource\u201d repositories don\u2019t interact. \n When multiple policies are defined for the same \u201csource\u201d repository, the sets of defined mirrors will be merged together, preserving the relative order of the mirrors, if possible. For example, if policy A has mirrors `a, b, c` and policy B has mirrors `c, d, e`, the mirrors will be used in the order `a, b, c, d, e`.  If the orders of mirror entries conflict (e.g. `a, b` vs. `b, a`) the configuration is not rejected but the resulting order is unspecified.",
              "type": "array",
              "items": {
                "description": "RepositoryDigestMirrors holds cluster-wide information about how to handle mirros in the registries config. Note: the mirrors only work when pulling the images that are referenced by their digests.",
                "type": "object",
                "required": [
                  "source"
                ],
                "properties": {
                  "mirrors": {
                    "description": "mirrors is one or more repositories that may also contain the same images. The order of mirrors in this list is treated as the user's desired priority, while source is by default considered lower priority than all mirrors. Other cluster configuration, including (but not limited to) other repositoryDigestMirrors objects, may impact the exact order mirrors are contacted in, or some mirrors may be contacted in parallel, so this should be considered a preference rather than a guarantee of ordering.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "source": {
                    "description": "source is the repository that users refer to, e.g. in image pull specifications.",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "ImageContentSourcePolicy",
          "version": "v1alpha1"
        }
      ]
    },
    "io.openshift.operator.v1alpha1.ImageContentSourcePolicyList": {
      "description": "ImageContentSourcePolicyList is a list of ImageContentSourcePolicy",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "operator.openshift.io/v1alpha1"
          ]
        },
        "items": {
          "description": "List of imagecontentsourcepolicies. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.operator.v1alpha1.ImageContentSourcePolicy"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ImageContentSourcePolicyList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "operator.openshift.io",
          "kind": "ImageContentSourcePolicyList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.openshift.quota.v1.ClusterResourceQuota": {
      "description": "ClusterResourceQuota mirrors ResourceQuota at a cluster scope.  This object is easily convertible to synthetic ResourceQuota object to allow quota evaluation re-use.",
      "type": "object",
      "required": [
        "metadata",
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "quota.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterResourceQuota"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the desired quota",
          "type": "object",
          "required": [
            "quota",
            "selector"
          ],
          "properties": {
            "quota": {
              "description": "Quota defines the desired quota",
              "type": "object",
              "properties": {
                "hard": {
                  "description": "hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                },
                "scopeSelector": {
                  "description": "scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.",
                  "type": "object",
                  "properties": {
                    "matchExpressions": {
                      "description": "A list of scope selector requirements by scope of the resources.",
                      "type": "array",
                      "items": {
                        "description": "A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.",
                        "type": "object",
                        "required": [
                          "operator",
                          "scopeName"
                        ],
                        "properties": {
                          "operator": {
                            "description": "Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.",
                            "type": "string"
                          },
                          "scopeName": {
                            "description": "The name of the scope that the selector applies to.",
                            "type": "string"
                          },
                          "values": {
                            "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "scopes": {
                  "description": "A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.",
                  "type": "array",
                  "items": {
                    "description": "A ResourceQuotaScope defines a filter that must match each object tracked by a quota",
                    "type": "string"
                  }
                }
              }
            },
            "selector": {
              "description": "Selector is the selector used to match projects. It should only select active projects on the scale of dozens (though it can select many more less active projects).  These projects will contend on object creation through this resource.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "AnnotationSelector is used to select projects by annotation.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labels": {
                  "description": "LabelSelector is used to select projects by label."
                }
              }
            }
          }
        },
        "status": {
          "description": "Status defines the actual enforced quota and its current usage",
          "type": "object",
          "required": [
            "total"
          ],
          "properties": {
            "namespaces": {
              "description": "Namespaces slices the usage by project.  This division allows for quick resolution of deletion reconciliation inside of a single project without requiring a recalculation across all projects.  This can be used to pull the deltas for a given project."
            },
            "total": {
              "description": "Total defines the actual enforced quota and its current usage across all projects",
              "type": "object",
              "properties": {
                "hard": {
                  "description": "Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                },
                "used": {
                  "description": "Used is the current observed total usage of the resource in the namespace.",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                }
              }
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "quota.openshift.io",
          "kind": "ClusterResourceQuota",
          "version": "v1"
        }
      ]
    },
    "io.openshift.quota.v1.ClusterResourceQuotaList": {
      "description": "ClusterResourceQuotaList is a list of ClusterResourceQuota",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "quota.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of clusterresourcequotas. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.quota.v1.ClusterResourceQuota"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterResourceQuotaList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "quota.openshift.io",
          "kind": "ClusterResourceQuotaList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.security.v1.SecurityContextConstraints": {
      "description": "SecurityContextConstraints governs the ability to make requests that affect the SecurityContext that will be applied to a container. For historical reasons SCC was exposed under the core Kubernetes API group. That exposure is deprecated and will be removed in a future release - users should instead use the security.openshift.io group to manage SecurityContextConstraints.",
      "type": "object",
      "required": [
        "allowHostDirVolumePlugin",
        "allowHostIPC",
        "allowHostNetwork",
        "allowHostPID",
        "allowHostPorts",
        "allowPrivilegedContainer",
        "readOnlyRootFilesystem"
      ],
      "properties": {
        "allowHostDirVolumePlugin": {
          "description": "AllowHostDirVolumePlugin determines if the policy allow containers to use the HostDir volume plugin",
          "type": "boolean"
        },
        "allowHostIPC": {
          "description": "AllowHostIPC determines if the policy allows host ipc in the containers.",
          "type": "boolean"
        },
        "allowHostNetwork": {
          "description": "AllowHostNetwork determines if the policy allows the use of HostNetwork in the pod spec.",
          "type": "boolean"
        },
        "allowHostPID": {
          "description": "AllowHostPID determines if the policy allows host pid in the containers.",
          "type": "boolean"
        },
        "allowHostPorts": {
          "description": "AllowHostPorts determines if the policy allows host ports in the containers.",
          "type": "boolean"
        },
        "allowPrivilegeEscalation": {
          "description": "AllowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true."
        },
        "allowPrivilegedContainer": {
          "description": "AllowPrivilegedContainer determines if a container can request to be run as privileged.",
          "type": "boolean"
        },
        "allowedCapabilities": {
          "description": "AllowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field maybe added at the pod author's discretion. You must not list a capability in both AllowedCapabilities and RequiredDropCapabilities. To allow all capabilities you may use '*'."
        },
        "allowedFlexVolumes": {
          "description": "AllowedFlexVolumes is a whitelist of allowed Flexvolumes.  Empty or nil indicates that all Flexvolumes may be used.  This parameter is effective only when the usage of the Flexvolumes is allowed in the \"Volumes\" field."
        },
        "allowedUnsafeSysctls": {
          "description": "AllowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in \"*\" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection. \n Examples: e.g. \"foo/*\" allows \"foo/bar\", \"foo/baz\", etc. e.g. \"foo.*\" allows \"foo.bar\", \"foo.baz\", etc."
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "security.openshift.io/v1"
          ]
        },
        "defaultAddCapabilities": {
          "description": "DefaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capabiility in both DefaultAddCapabilities and RequiredDropCapabilities."
        },
        "defaultAllowPrivilegeEscalation": {
          "description": "DefaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process."
        },
        "forbiddenSysctls": {
          "description": "ForbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in \"*\" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden. \n Examples: e.g. \"foo/*\" forbids \"foo/bar\", \"foo/baz\", etc. e.g. \"foo.*\" forbids \"foo.bar\", \"foo.baz\", etc."
        },
        "fsGroup": {
          "description": "FSGroup is the strategy that will dictate what fs group is used by the SecurityContext."
        },
        "groups": {
          "description": "The groups that have permission to use this security context constraints"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "SecurityContextConstraints"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "priority": {
          "description": "Priority influences the sort order of SCCs when evaluating which SCCs to try first for a given pod request based on access in the Users and Groups fields.  The higher the int, the higher priority. An unset value is considered a 0 priority. If scores for multiple SCCs are equal they will be sorted from most restrictive to least restrictive. If both priorities and restrictions are equal the SCCs will be sorted by name.",
          "format": "int32"
        },
        "readOnlyRootFilesystem": {
          "description": "ReadOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the SCC should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.",
          "type": "boolean"
        },
        "requiredDropCapabilities": {
          "description": "RequiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added."
        },
        "runAsUser": {
          "description": "RunAsUser is the strategy that will dictate what RunAsUser is used in the SecurityContext."
        },
        "seLinuxContext": {
          "description": "SELinuxContext is the strategy that will dictate what labels will be set in the SecurityContext."
        },
        "seccompProfiles": {
          "description": "SeccompProfiles lists the allowed profiles that may be set for the pod or container's seccomp annotations.  An unset (nil) or empty value means that no profiles may be specifid by the pod or container.\tThe wildcard '*' may be used to allow all profiles.  When used to generate a value for a pod the first non-wildcard profile will be used as the default."
        },
        "supplementalGroups": {
          "description": "SupplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext."
        },
        "users": {
          "description": "The users who have permissions to use this security context constraints"
        },
        "volumes": {
          "description": "Volumes is a white list of allowed volume plugins.  FSType corresponds directly with the field names of a VolumeSource (azureFile, configMap, emptyDir).  To allow all volumes you may use \"*\". To allow no volumes, set to [\"none\"]."
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "security.openshift.io",
          "kind": "SecurityContextConstraints",
          "version": "v1"
        }
      ]
    },
    "io.openshift.security.v1.SecurityContextConstraintsList": {
      "description": "SecurityContextConstraintsList is a list of SecurityContextConstraints",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "security.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of securitycontextconstraints. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.security.v1.SecurityContextConstraints"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "SecurityContextConstraintsList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "security.openshift.io",
          "kind": "SecurityContextConstraintsList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.tuned.v1.Profile": {
      "description": "Profile is a specification for a Profile resource",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "tuned.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Profile"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "type": "object",
          "required": [
            "config"
          ],
          "properties": {
            "config": {
              "type": "object",
              "required": [
                "tunedProfile"
              ],
              "properties": {
                "tunedProfile": {
                  "description": "tuned profile to apply",
                  "type": "string"
                }
              }
            }
          }
        },
        "status": {
          "description": "ProfileStatus is the status for a Profile resource; the status is for internal use only and its fields may be changed/removed in the future.",
          "type": "object",
          "properties": {
            "bootcmdline": {
              "description": "kernel parameters calculated by tuned for the active tuned profile",
              "type": "string"
            },
            "stalld": {
              "description": "deploy stall daemon: https://github.com/bristot/stalld/",
              "type": "boolean"
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "tuned.openshift.io",
          "kind": "Profile",
          "version": "v1"
        }
      ]
    },
    "io.openshift.tuned.v1.ProfileList": {
      "description": "ProfileList is a list of Profile",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "tuned.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of profiles. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.tuned.v1.Profile"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ProfileList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "tuned.openshift.io",
          "kind": "ProfileList",
          "version": "v1"
        }
      ]
    },
    "io.openshift.tuned.v1.Tuned": {
      "description": "Tuned is a collection of rules that allows cluster-wide deployment of node-level sysctls and more flexibility to add custom tuning specified by user needs.  These rules are translated and passed to all containerized tuned daemons running in the cluster in the format that the daemons understand. The responsibility for applying the node-level tuning then lies with the containerized tuned daemons. More info: https://github.com/openshift/cluster-node-tuning-operator",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "tuned.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Tuned"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is the specification of the desired behavior of Tuned. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "type": "object",
          "required": [
            "profile",
            "recommend"
          ],
          "properties": {
            "managementState": {
              "description": "managementState indicates whether the registry instance represented by this config instance is under operator management or not.  Valid values are Force, Managed, Unmanaged, and Removed.",
              "type": "string",
              "pattern": "^(Managed|Unmanaged|Force|Removed)$"
            },
            "profile": {
              "description": "Tuned profiles.",
              "type": "array",
              "items": {
                "description": "A tuned profile.",
                "type": "object",
                "required": [
                  "data",
                  "name"
                ],
                "properties": {
                  "data": {
                    "description": "Specification of the tuned profile to be consumed by the tuned daemon.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the tuned profile to be used in the recommend section.",
                    "type": "string"
                  }
                }
              }
            },
            "recommend": {
              "description": "Selection logic for all tuned profiles.",
              "type": "array",
              "items": {
                "description": "Selection logic for a single tuned profile.",
                "type": "object",
                "required": [
                  "priority",
                  "profile"
                ],
                "properties": {
                  "machineConfigLabels": {
                    "description": "MachineConfigLabels specifies the labels for a MachineConfig. The MachineConfig is created automatically to apply additional host settings (e.g. kernel boot parameters) profile 'Profile' needs and can only be applied by creating a MachineConfig. This involves finding all MachineConfigPools with machineConfigSelector matching the MachineConfigLabels and setting the profile 'Profile' on all nodes that match the MachineConfigPools' nodeSelectors.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "match": {
                    "description": "Rules governing application of a tuned profile connected by logical OR operator.",
                    "type": "array",
                    "items": {
                      "description": "Rules governing application of a tuned profile.",
                      "type": "object",
                      "required": [
                        "label"
                      ],
                      "properties": {
                        "label": {
                          "description": "Node or Pod label name.",
                          "type": "string"
                        },
                        "match": {
                          "description": "Additional rules governing application of the tuned profile connected by logical AND operator.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "x-kubernetes-preserve-unknown-fields": true
                          }
                        },
                        "type": {
                          "description": "Match type: [node/pod]. If omitted, \"node\" is assumed.",
                          "type": "string",
                          "enum": [
                            "node",
                            "pod"
                          ]
                        },
                        "value": {
                          "description": "Node or Pod label value. If omitted, the presence of label name is enough to match.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "priority": {
                    "description": "Tuned profile priority. Highest priority is 0.",
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "profile": {
                    "description": "Name of the tuned profile to recommend.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "status": {
          "description": "TunedStatus is the status for a Tuned resource",
          "type": "object"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "tuned.openshift.io",
          "kind": "Tuned",
          "version": "v1"
        }
      ]
    },
    "io.openshift.tuned.v1.TunedList": {
      "description": "TunedList is a list of Tuned",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "tuned.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of tuneds. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.openshift.tuned.v1.Tuned"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "TunedList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "tuned.openshift.io",
          "kind": "TunedList",
          "version": "v1"
        }
      ]
    }
  }
}